;Basic operators/primitives/intrinsics;==================Intrinsics;-----Maths;--Abscode abs Integer  var a:=abs(100)  var b:=abs(-100)  var c:= abs(32767)  var d:= abs(-32767)    var i:Integer=100  var e:=abs(i)  i:=-100  var f:=abs(i)  i:=32767  var h:= abs(i)  i:=-32767  var j:= abs(i)  i:=0  var k:=abs(i)  i:=10  var l:=abs(i+i)endcodevarvalue a 100varvalue b 100varvalue c 32767varvalue d 32767varvalue e 100varvalue f 100varvalue h 32767varvalue j 32767varvalue k 0varvalue l 20code abs Int8  var a:Int8=-100  var b:=abs(a)  var c:Int8=99  var d:=abs(c)endcodevarvalue b 100varvalue d 99code abs unsigned  var a:byte=100  var b:=abs(a)  var c:Word=1000  var d:=abs(c)  var e:Pointer=1000  var f:=abs(e)endcodevarvalue b 100vartype b bytevarvalue d 1000vartype d Wordvarvalue f 1000vartype f Pointer  code abs overflow  var a:=-32768  var b:=abs(a)endcoderuntime overflow;---Inccode inc byte  var a:byte=10  inc(a)  var b:byte=20  inc(b,2)  var c:byte=30  inc(c,30)  var d:byte=40  inc(d,-1)  var e:byte=50  inc(e,-10)  var f:byte=255  inc(f)endcodevarvalue a 11varvalue b 22varvalue c 60varvalue d 39varvalue e 40varvalue f 0code inc int8  var a:int8=10  inc(a)  var b:int8=20  inc(b,2)  var c:int8=-40  inc(c,-70)  var d:int8=40  inc(d,-1)  var e:int8=50  inc(e,-10)  var f:int8=127  inc(f)endcodevarvalue a 11varvalue b 22varvalue c -110varvalue d 39varvalue e 40varvalue f -128code inc word  var a:word=10  inc(a)  var b:pointer=20  inc(b,2)  var c:word=30  inc(c,30)  var d:pointer=40000  inc(d,-1)  var e:word=50  inc(e,-10)  var f:pointer=65535  inc(f)endcodevarvalue a 11varvalue b 22varvalue c 60varvalue d 39999varvalue e 40varvalue f 0code inc integer  var a:integer=10  inc(a)  var b:integer=20  inc(b,2)  var c:integer=-4000  inc(c,-70)  var d:integer=40  inc(d,-1)  var e:integer=50  inc(e,-10)  var f:integer=32767  inc(f)  var g:=10  inc(g,(1+3)*2)endcodevarvalue a 11varvalue b 22varvalue c -4070varvalue d 39varvalue e 40varvalue f -32768varvalue g 18code inc Param1 not a variable  inc(1)endcodecompile errorcode inc Param2 not a constant  var a:=100  var b:= 1  inc(a,b);endcodecompile errorcode dec byte  var a:byte=10  dec(a)  var b:byte=20  dec(b,2)  var c:byte=30  dec(c,30)  var d:byte=40  dec(d,-1)  var e:byte=50  dec(e,-10)  var f:byte=0  dec(f)  var g:=10  dec(g,(1+3)*2)  endcodevarvalue a 9varvalue b 18varvalue c 0varvalue d 41varvalue e 60varvalue f 255varvalue g 2code dec int8  var a:int8=10  dec(a)  var b:int8=20  dec(b,2)  var c:int8=-40  dec(c,-70)  var d:int8=40  dec(d,-1)  var e:int8=50  dec(e,-10)  var f:int8=-128  dec(f)endcodevarvalue a 9varvalue b 18varvalue c 30varvalue d 41varvalue e 60varvalue f 127code dec word  var a:word=10  dec(a)  var b:pointer=20  dec(b,2)  var c:word=30  dec(c,30)  var d:pointer=40000  dec(d,-1)  var e:word=50  dec(e,-10)  var f:pointer=0  dec(f)endcodevarvalue a 9varvalue b 18varvalue c 0varvalue d 40001varvalue e 60varvalue f 65535code dec integer  var a:integer=10  dec(a)  var b:integer=20  dec(b,2)  var c:integer=-4000  dec(c,-70)  var d:integer=40  dec(d,-1)  var e:integer=50  dec(e,-10)  var f:integer=-32768  dec(f)endcodevarvalue a 9varvalue b 18varvalue c -3930varvalue d 41varvalue e 60varvalue f 32767code dec Param1 not a variable  dec(1)endcodecompile errorcode dec Param2 not a constant  var a:=100  var b:= 1  dec(a,b);endcodecompile error;--Oddcode odd  var a:=100  var ax:=odd(a)  var b:byte=101  var bx:=odd(b)  var c:int8=-100  var cx:=odd(c)  var d:word=$80ff  var dx:=odd(d)  var dy:=not odd(d)  var e := odd(200)  var f := odd(201)endcodevarvalue ax falsevarvalue bx truevarvalue cx falsevarvalue dx truevarvalue dy falsevarvalue e falsevarvalue f truecode odd branch  var a:=101  var ax:boolean  if odd(a) then    ax:=true  else    ax:=false  var ay:boolean  if not odd(a) then    ay:=true  else    ay:=falseendcodevarvalue ax truevarvalue ay false;--Hi (High byte of value)code hi  var a:Integer=$1234  var b:=hi(a)  var c:Word=$4321  var d:=hi(c)  var e:Integer=$7bcd  e := hi(e)  var f:Word = $dcba  f := hi(f)  var h:=hi($1234)  var i:=hi(256) endcodevarvalue b $12varvalue d $43varvalue e $7bvarvalue f $dcvarvalue h $12varvalue i 1code hi Byte error var a:Byte=$99 var b:=hi(a)endcodecompile errorcode hi Int8 error var a:Int8=$79 var b:=hi(a)endcodecompile error;--High (Highest value in enumerable type)code high  var a:=high(Integer)  var b:=high(Int8)  var c:=high(Byte)  var d:=high(Word)  var e:=high(Char)  var f:=high(Boolean)    var g:=high(a)  var h:=high(b)  var i:=high(c)  var j:=high(d)  var k:=high(e)  var l:=high(f)    var m:Pointer  var n:=high(m)endcodevarvalue a 32767varvalue b 127varvalue c 255varvalue d 65535varvalue e #255varvalue f Truevartype a Integervartype b Int8vartype c Bytevartype d Wordvartype e Charvartype f Booleanvarvalue g 32767varvalue h 127varvalue i 255varvalue j 65535varvalue k #255varvalue l Truevartype g Integervartype h Int8vartype i Bytevartype j Wordvartype k Charvartype l Booleanvarvalue n 65535vartype n pointer;-- Inp(ut);Don't have a way to autotest this yet. Needs a test fixture in the emulator for I/O portscode inp  var a:=inp(255)  var b:=inp(a)endcodevartype a bytevartype b byte;-- Lo (Low byte of value)code lo  var a:Integer=$1234  var b:=lo(a)  var c:Word=$4321  var d:=lo(c)  var e:Integer=$7bcd  e := lo(e)  var f:Word = $dcba  f := lo(f)  var h:=lo($1234)  var i:=lo(256) endcodevarvalue b $34varvalue d $21varvalue e $cdvarvalue f $bavarvalue h $34varvalue i 0code lo Byte error var a:Byte=$99 var b:=lo(a)endcodecompile errorcode lo Int8 error var a:Int8=$79 var b:=lo(a)endcodecompile error;-- Low (Lowest value in enumerable type)code low  var a:=low(Integer)  var b:=low(Int8)  var c:=low(Byte)  var d:=low(Word)  var e:=low(Char)  var f:=low(Boolean)    var g:=low(a)  var h:=low(b)  var i:=low(c)  var j:=low(d)  var k:=low(e)  var l:=low(f)    var m:Pointer  var n:=low(m)endcodevarvalue a -32768varvalue b -128varvalue c 0varvalue d 0varvalue e #0varvalue f Falsevartype a Integervartype b Int8vartype c Bytevartype d Wordvartype e Charvartype f Booleanvarvalue g -32768varvalue h -128varvalue i 0varvalue j 0varvalue k #0varvalue l Falsevartype g Integervartype h Int8vartype i Bytevartype j Wordvartype k Charvartype l Booleanvarvalue m 0vartype m pointer;-- Ordcode ord  var a:=ord('a')  var b:='Z'  var c:=ord(b)    var d:=ord(65535)  var e:=ord(-32768)  var f:=ord(127)endcodevarvalue a 97varvalue c 90vartype a Bytevartype c Bytevarvalue d 65535vartype d wordvarvalue e -32768vartype e Integervarvalue f 127vartype f Integer;-- Out(put);Don't have a way to autotest this yet. Needs a test fixture in the emulator for I/O portscode out  out($ff00,128)  var p:=$1234  var x:Byte=$fe  out(p,64)  out($4321,x)  out(p,x)endcodecompile noerror;-- Peek;Another one we can't autotest yetcode peek addr const  var a:=peek($1000)  var b:=peek(200)  var c:=peek($1000,Byte)  var d:=peek($1000,Word)  var e:=peek($acbd,Pointer)  var f:=peek(0,Int8)  var g:=peek($ffff,Integer)  var h:=peek(65535,Boolean)  var i:=peek($8000,Char)endcodevartype a Bytevartype b Bytevartype c Bytevartype d wordvartype e Pointervartype f Int8varType g Integervartype h Booleanvartype i Charcode peek variable  var a:=$ffff  var b:=peek(a)  var c:=peek(a, Integer)  var d:=100  var e:=peek(d)  var f:Int8=20  var g:=peek(f)  var h:Integer=2000  var i:=peek(h)endcodevartype b bytevartype c Integervartype e Bytevartype g Bytevartype i Bytecode peek variable typedef  var a:Integer  a:=peek($1000,a)endcodecompile noerror;-- Poke;(And again we can't autotest properly (yet));This basically tests for compilation errorscode poke  var i:Integer=100  var i8:Int8=50  var b:Byte=255  var w:Word=$c000  var p:Pointer=$c002    poke($c004,$ff)  poke(w,$ff)  poke(i,$ff)  poke($c006,b)  poke($c008,w)  poke($c00a,i)  poke(w,b)  poke(w,i)  poke(p,p)    poke(w,False)  poke(w,'Z')endcodecompile noerror;--Pred (previous item in enumerated type);TODO: Separate tests for overflow checked and not overflow checkedcode pred  var a:Integer=100  var b:Word=6000  var c:Int8=-20  var d:Integer=-1000  var e:Pointer=1000  var f:Char='z'    a:=pred(a)  b:=pred(b)  c:=pred(c)  d:=pred(d)  e:=pred(e)  f:=pred(f)    var m:=pred(a,10)  var n:=pred(b,10)  var o:=pred(c,10)  var p:=pred(d,10)  var q:=pred(e,10)  var r:=pred(f,10)  endcodevarvalue a 99varvalue b 5999varvalue c -21varvalue d -1001varvalue e 999varvalue f 'y'varvalue m 89varvalue n 5989varvalue o -31varvalue p -1011varvalue q 989varvalue r 'o'$overflow off;Compiler can't overflow check Pred(Boolean).code pred no overflow  var g:=true  g:=pred(g)endcodevarvalue g Falsecode pred constant  var a:=pred(10)  var b:=pred('c')  var c:=pred(true)  var d:=pred(10,2)endcodevarvalue a 9varvalue b 'b'varvalue c falsevarvalue d 8;--Sizeof (size of type, variable, etc)code sizeof vars  var a:Integer=3  var b:Int8=3  var c:Byte=3  var d:Word=3  var e:Pointer=3  var f:Char='a'    var m:=sizeof(a)  var n:=sizeof(b)  var o:=sizeof(c)  var p:=sizeof(d)  var q:=sizeof(e)  var r:=sizeof(f)endcodevarvalue m 2varvalue n 1varvalue o 1varvalue p 2varvalue q 2varvalue r 1code sizeof Types  var a:=sizeof(Integer)  var b:=sizeof(Int8)  var c:=sizeof(Byte)  var d:=sizeof(Word)  var e:=sizeof(Pointer)  var f:=sizeof(Char)endcodevarvalue a 2varvalue b 1varvalue c 1varvalue d 2varvalue e 2varvalue f 1code sizeof constants    var a:=sizeof('a')  var b:=sizeof(1)endcodevarvalue a 1varvalue b 2;--Succ (next item in enumerated type);TODO: Separate tests for overflow checked and not overflow checkedcode succ  var a:Integer=100  var b:Word=6000  var c:Int8=-20  var d:Integer=-1000  var e:Pointer=1000  var f:Char='a'  var g:=False    a:=succ(a)  b:=succ(b)  c:=succ(c)  d:=succ(d)  e:=succ(e)  f:=succ(f)  g:=succ(g)    var m:=succ(a,10)  var n:=succ(b,10)  var o:=succ(c,10)  var p:=succ(d,10)  var q:=succ(e,10)  var r:=succ(f,10)  endcodevarvalue a 101varvalue b 6001varvalue c -19varvalue d -999varvalue e 1001varvalue f 'b'varvalue g Truevarvalue m 111varvalue n 6011varvalue o -9varvalue p -989varvalue q 1011varvalue r 'l'code succ constant  var a:=succ(10)  var b:=succ('a')  var c:=succ(false)  var d:=succ(10,20)endcodevarvalue a 11varvalue b 'b'varvalue c truevarvalue d 30;--Swap (high and low bytes of parameter). Must be 16 bit valuecode swap  var a:=$6543  var b:=swap(a)  var c:=swap($4365)endcodevarvalue b $4365varvalue c $6543;====================================Strings and Chars;--Chr (convert number to character)code chr  var a:Integer=32  var b:Int8=40  var c:Byte=65  var d:Word=90    var m:=chr(a)  var n:=chr(b)  var o:=chr(c)  var p:=chr(d)endcodevarvalue m #32varvalue n #40varvalue o #65varvalue p #90code chr constant  var a:=chr(32)endcodevarvalue a #32code chr Integer +ve range  var a:Integer = 1000  var b:=chr(a)endcoderuntime rangecode chr Integer -ve range  var a:Integer = -1000  var b:=chr(a)endcoderuntime rangecode chr Int8 range  var a:Int8 = -32  var b:=chr(a)endcoderuntime rangecode chr Word range  var a:Word = 1000  var b:=chr(a)endcoderuntime range;--Downcase (char to lower case)code downcase char  var a:=' '  var b:='@'  var c:='A'  var d:='Z'  var e:='['  var f:='`'  var g:='a'  var h:='z'  var i:='{'  var j:='}'  a := downcase(a)  b := downcase(b)  c := downcase(c)  d := downcase(d)  e := downcase(e)  f := downcase(f)  g := downcase(g)  h := downcase(h)  i := downcase(i)  j := downcase(j)endcodevarvalue a #32varvalue b '@'varvalue c 'a'varvalue d 'z'varvalue e '['varvalue f '`'varvalue g 'a'varvalue h 'z'varvalue i '{'varvalue j '}'code downcase constant  var a:=downcase('a')  var b:=downcase('A')endcodevarvalue a 'a'varvalue b 'a';--Upcase (char to upper case)code upcase char  var a:=' '  var b:='@'  var c:='A'  var d:='Z'  var e:='['  var f:='`'  var g:='a'  var h:='z'  var i:='{'  var j:='}'  a := upcase(a)  b := upcase(b)  c := upcase(c)  d := upcase(d)  e := upcase(e)  f := upcase(f)  g := upcase(g)  h := upcase(h)  i := upcase(i)  j := upcase(j)endcodevarvalue a #32varvalue b '@'varvalue c 'A'varvalue d 'Z'varvalue e '['varvalue f '`'varvalue g 'A'varvalue h 'Z'varvalue i '{'varvalue j '}'code upcase constant  var a:=upcase('a')  var b:=upcase('A')endcodevarvalue a 'A'varvalue b 'A'