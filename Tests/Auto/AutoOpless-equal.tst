;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow on
code auto:2 less-equal[Int16] -128[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3 less-equal[Int16] -128[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:4 less-equal[Int16] -128[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:5 less-equal[compile-time] -128[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -128;
endcode
varvalue r True

$overflow on
code auto:6 less-equal[Int16] -128[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:7 less-equal[Int16] -128[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:8 less-equal[Int16] -128[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:9 less-equal[compile-time] -128[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -127;
endcode
varvalue r True

$overflow on
code auto:10 less-equal[Int16] -128[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:11 less-equal[Int16] -128[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:12 less-equal[Int16] -128[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:13 less-equal[compile-time] -128[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -1;
endcode
varvalue r True

$overflow on
code auto:14 less-equal[Int16] -128[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:15 less-equal[Int16] -128[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:16 less-equal[Int16] -128[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:17 less-equal[compile-time] -128[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:18 less-equal[Int16] -128[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:19 less-equal[Int16] -128[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:20 less-equal[Int16] -128[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:21 less-equal[compile-time] -128[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:22 less-equal[Int16] -128[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:23 less-equal[Int16] -128[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:24 less-equal[Int16] -128[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:25 less-equal[compile-time] -128[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:26 less-equal[Int16] -127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:27 less-equal[Int16] -127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r False

code auto:28 less-equal[Int16] -127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:29 less-equal[compile-time] -127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -128;
endcode
varvalue r False

$overflow on
code auto:30 less-equal[Int16] -127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:31 less-equal[Int16] -127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:32 less-equal[Int16] -127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:33 less-equal[compile-time] -127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -127;
endcode
varvalue r True

$overflow on
code auto:34 less-equal[Int16] -127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:35 less-equal[Int16] -127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:36 less-equal[Int16] -127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:37 less-equal[compile-time] -127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -1;
endcode
varvalue r True

$overflow on
code auto:38 less-equal[Int16] -127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:39 less-equal[Int16] -127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:40 less-equal[Int16] -127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:41 less-equal[compile-time] -127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 0;
endcode
varvalue r True

$overflow on
code auto:42 less-equal[Int16] -127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:43 less-equal[Int16] -127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:44 less-equal[Int16] -127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:45 less-equal[compile-time] -127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 1;
endcode
varvalue r True

$overflow on
code auto:46 less-equal[Int16] -127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:47 less-equal[Int16] -127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:48 less-equal[Int16] -127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:49 less-equal[compile-time] -127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 127;
endcode
varvalue r True

$overflow on
code auto:50 less-equal[Int16] -1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:51 less-equal[Int16] -1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:52 less-equal[Int16] -1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:53 less-equal[compile-time] -1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -128;
endcode
varvalue r False

$overflow on
code auto:54 less-equal[Int16] -1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:55 less-equal[Int16] -1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:56 less-equal[Int16] -1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:57 less-equal[compile-time] -1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -127;
endcode
varvalue r False

$overflow on
code auto:58 less-equal[Int16] -1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:59 less-equal[Int16] -1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:60 less-equal[Int16] -1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:61 less-equal[compile-time] -1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -1;
endcode
varvalue r True

$overflow on
code auto:62 less-equal[Int16] -1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:63 less-equal[Int16] -1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:64 less-equal[Int16] -1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:65 less-equal[compile-time] -1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:66 less-equal[Int16] -1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:67 less-equal[Int16] -1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:68 less-equal[Int16] -1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:69 less-equal[compile-time] -1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:70 less-equal[Int16] -1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:71 less-equal[Int16] -1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:72 less-equal[Int16] -1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:73 less-equal[compile-time] -1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:74 less-equal[Int16] 0[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:75 less-equal[Int16] 0[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:76 less-equal[Int16] 0[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:77 less-equal[compile-time] 0[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:78 less-equal[Int16] 0[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:79 less-equal[Int16] 0[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:80 less-equal[Int16] 0[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:81 less-equal[compile-time] 0[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -127;
endcode
varvalue r False

$overflow on
code auto:82 less-equal[Int16] 0[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:83 less-equal[Int16] 0[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:84 less-equal[Int16] 0[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:85 less-equal[compile-time] 0[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:86 less-equal[Int16] 0[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:87 less-equal[Int16] 0[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:88 less-equal[Int16] 0[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:89 less-equal[compile-time] 0[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:90 less-equal[Int16] 0[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:91 less-equal[Int16] 0[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:92 less-equal[Int16] 0[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:93 less-equal[compile-time] 0[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:94 less-equal[Int16] 0[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:95 less-equal[Int16] 0[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:96 less-equal[Int16] 0[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:97 less-equal[compile-time] 0[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:98 less-equal[Int16] 1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:99 less-equal[Int16] 1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:100 less-equal[Int16] 1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:101 less-equal[compile-time] 1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:102 less-equal[Int16] 1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:103 less-equal[Int16] 1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:104 less-equal[Int16] 1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:105 less-equal[compile-time] 1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -127;
endcode
varvalue r False

$overflow on
code auto:106 less-equal[Int16] 1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:107 less-equal[Int16] 1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:108 less-equal[Int16] 1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:109 less-equal[compile-time] 1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:110 less-equal[Int16] 1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:111 less-equal[Int16] 1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:112 less-equal[Int16] 1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:113 less-equal[compile-time] 1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:114 less-equal[Int16] 1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:115 less-equal[Int16] 1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:116 less-equal[Int16] 1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:117 less-equal[compile-time] 1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:118 less-equal[Int16] 1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:119 less-equal[Int16] 1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:120 less-equal[Int16] 1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:121 less-equal[compile-time] 1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:122 less-equal[Int16] 127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:123 less-equal[Int16] 127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:124 less-equal[Int16] 127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:125 less-equal[compile-time] 127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:126 less-equal[Int16] 127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:127 less-equal[Int16] 127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:128 less-equal[Int16] 127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:129 less-equal[compile-time] 127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -127;
endcode
varvalue r False

$overflow on
code auto:130 less-equal[Int16] 127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:131 less-equal[Int16] 127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:132 less-equal[Int16] 127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:133 less-equal[compile-time] 127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:134 less-equal[Int16] 127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:135 less-equal[Int16] 127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:136 less-equal[Int16] 127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:137 less-equal[compile-time] 127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:138 less-equal[Int16] 127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:139 less-equal[Int16] 127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:140 less-equal[Int16] 127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:141 less-equal[compile-time] 127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:142 less-equal[Int16] 127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:143 less-equal[Int16] 127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:144 less-equal[Int16] 127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:145 less-equal[compile-time] 127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:146 less-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:147 less-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:148 less-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:149 less-equal[compile-time] -128[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -32768;
endcode
varvalue r False

$overflow on
code auto:150 less-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:151 less-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:152 less-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:153 less-equal[compile-time] -128[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -32767;
endcode
varvalue r False

$overflow on
code auto:154 less-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:155 less-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:156 less-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:157 less-equal[compile-time] -128[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -129;
endcode
varvalue r False

$overflow on
code auto:158 less-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:159 less-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:160 less-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:161 less-equal[compile-time] -128[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -128;
endcode
varvalue r True

$overflow on
code auto:162 less-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:163 less-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:164 less-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:165 less-equal[compile-time] -128[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -1;
endcode
varvalue r True

$overflow on
code auto:166 less-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:167 less-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:168 less-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:169 less-equal[compile-time] -128[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:170 less-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:171 less-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:172 less-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:173 less-equal[compile-time] -128[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:174 less-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:175 less-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:176 less-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:177 less-equal[compile-time] -128[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:178 less-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:179 less-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:180 less-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:181 less-equal[compile-time] -128[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 128;
endcode
varvalue r True

$overflow on
code auto:182 less-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:183 less-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:184 less-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:185 less-equal[compile-time] -128[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:186 less-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:187 less-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r False

code auto:188 less-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:189 less-equal[compile-time] -127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -32768;
endcode
varvalue r False

$overflow on
code auto:190 less-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:191 less-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r False

code auto:192 less-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:193 less-equal[compile-time] -127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -32767;
endcode
varvalue r False

$overflow on
code auto:194 less-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:195 less-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r False

code auto:196 less-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:197 less-equal[compile-time] -127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -129;
endcode
varvalue r False

$overflow on
code auto:198 less-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:199 less-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r False

code auto:200 less-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:201 less-equal[compile-time] -127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -128;
endcode
varvalue r False

$overflow on
code auto:202 less-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:203 less-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:204 less-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:205 less-equal[compile-time] -127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= -1;
endcode
varvalue r True

$overflow on
code auto:206 less-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:207 less-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:208 less-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:209 less-equal[compile-time] -127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 0;
endcode
varvalue r True

$overflow on
code auto:210 less-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:211 less-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:212 less-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:213 less-equal[compile-time] -127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 1;
endcode
varvalue r True

$overflow on
code auto:214 less-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:215 less-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:216 less-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:217 less-equal[compile-time] -127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 127;
endcode
varvalue r True

$overflow on
code auto:218 less-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:219 less-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:220 less-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:221 less-equal[compile-time] -127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 128;
endcode
varvalue r True

$overflow on
code auto:222 less-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:223 less-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:224 less-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:225 less-equal[compile-time] -127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:226 less-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:227 less-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:228 less-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:229 less-equal[compile-time] -1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -32768;
endcode
varvalue r False

$overflow on
code auto:230 less-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:231 less-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:232 less-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:233 less-equal[compile-time] -1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -32767;
endcode
varvalue r False

$overflow on
code auto:234 less-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:235 less-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:236 less-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:237 less-equal[compile-time] -1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -129;
endcode
varvalue r False

$overflow on
code auto:238 less-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:239 less-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:240 less-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:241 less-equal[compile-time] -1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -128;
endcode
varvalue r False

$overflow on
code auto:242 less-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:243 less-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:244 less-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:245 less-equal[compile-time] -1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -1;
endcode
varvalue r True

$overflow on
code auto:246 less-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:247 less-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:248 less-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:249 less-equal[compile-time] -1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:250 less-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:251 less-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:252 less-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:253 less-equal[compile-time] -1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:254 less-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:255 less-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:256 less-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:257 less-equal[compile-time] -1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:258 less-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:259 less-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:260 less-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:261 less-equal[compile-time] -1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 128;
endcode
varvalue r True

$overflow on
code auto:262 less-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:263 less-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:264 less-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:265 less-equal[compile-time] -1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:266 less-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:267 less-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:268 less-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:269 less-equal[compile-time] 0[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32768;
endcode
varvalue r False

$overflow on
code auto:270 less-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:271 less-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:272 less-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:273 less-equal[compile-time] 0[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32767;
endcode
varvalue r False

$overflow on
code auto:274 less-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:275 less-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:276 less-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:277 less-equal[compile-time] 0[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -129;
endcode
varvalue r False

$overflow on
code auto:278 less-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:279 less-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:280 less-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:281 less-equal[compile-time] 0[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:282 less-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:283 less-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:284 less-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:285 less-equal[compile-time] 0[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:286 less-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:287 less-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:288 less-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:289 less-equal[compile-time] 0[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:290 less-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:291 less-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:292 less-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:293 less-equal[compile-time] 0[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:294 less-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:295 less-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:296 less-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:297 less-equal[compile-time] 0[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:298 less-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:299 less-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:300 less-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:301 less-equal[compile-time] 0[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:302 less-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:303 less-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:304 less-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:305 less-equal[compile-time] 0[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:306 less-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:307 less-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:308 less-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:309 less-equal[compile-time] 1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32768;
endcode
varvalue r False

$overflow on
code auto:310 less-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:311 less-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:312 less-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:313 less-equal[compile-time] 1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32767;
endcode
varvalue r False

$overflow on
code auto:314 less-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:315 less-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:316 less-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:317 less-equal[compile-time] 1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -129;
endcode
varvalue r False

$overflow on
code auto:318 less-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:319 less-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:320 less-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:321 less-equal[compile-time] 1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:322 less-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:323 less-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:324 less-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:325 less-equal[compile-time] 1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:326 less-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:327 less-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:328 less-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:329 less-equal[compile-time] 1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:330 less-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:331 less-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:332 less-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:333 less-equal[compile-time] 1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:334 less-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:335 less-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:336 less-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:337 less-equal[compile-time] 1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:338 less-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:339 less-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:340 less-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:341 less-equal[compile-time] 1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:342 less-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:343 less-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:344 less-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:345 less-equal[compile-time] 1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:346 less-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:347 less-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:348 less-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:349 less-equal[compile-time] 127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32768;
endcode
varvalue r False

$overflow on
code auto:350 less-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:351 less-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:352 less-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:353 less-equal[compile-time] 127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32767;
endcode
varvalue r False

$overflow on
code auto:354 less-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:355 less-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:356 less-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:357 less-equal[compile-time] 127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -129;
endcode
varvalue r False

$overflow on
code auto:358 less-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:359 less-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:360 less-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:361 less-equal[compile-time] 127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:362 less-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:363 less-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:364 less-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:365 less-equal[compile-time] 127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:366 less-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:367 less-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:368 less-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:369 less-equal[compile-time] 127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:370 less-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:371 less-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:372 less-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:373 less-equal[compile-time] 127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:374 less-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:375 less-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:376 less-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:377 less-equal[compile-time] 127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:378 less-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:379 less-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:380 less-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:381 less-equal[compile-time] 127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:382 less-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:383 less-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:384 less-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:385 less-equal[compile-time] 127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:386 less-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:387 less-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:388 less-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:389 less-equal[compile-time] -128[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:390 less-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:391 less-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:392 less-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:393 less-equal[compile-time] -128[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:394 less-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:395 less-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:396 less-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:397 less-equal[compile-time] -128[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:398 less-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:399 less-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:400 less-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:401 less-equal[compile-time] -128[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 128;
endcode
varvalue r True

$overflow on
code auto:402 less-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:403 less-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:404 less-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:405 less-equal[compile-time] -128[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:406 less-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:407 less-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:408 less-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:409 less-equal[compile-time] -127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 0;
endcode
varvalue r True

$overflow on
code auto:410 less-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:411 less-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:412 less-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:413 less-equal[compile-time] -127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 1;
endcode
varvalue r True

$overflow on
code auto:414 less-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:415 less-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:416 less-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:417 less-equal[compile-time] -127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 127;
endcode
varvalue r True

$overflow on
code auto:418 less-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:419 less-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:420 less-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:421 less-equal[compile-time] -127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 128;
endcode
varvalue r True

$overflow on
code auto:422 less-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:423 less-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:424 less-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:425 less-equal[compile-time] -127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 255;
endcode
varvalue r True

$overflow on
code auto:426 less-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:427 less-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:428 less-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:429 less-equal[compile-time] -1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:430 less-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:431 less-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:432 less-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:433 less-equal[compile-time] -1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:434 less-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:435 less-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:436 less-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:437 less-equal[compile-time] -1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:438 less-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:439 less-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:440 less-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:441 less-equal[compile-time] -1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 128;
endcode
varvalue r True

$overflow on
code auto:442 less-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:443 less-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:444 less-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:445 less-equal[compile-time] -1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:446 less-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:447 less-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:448 less-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:449 less-equal[compile-time] 0[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:450 less-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:451 less-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:452 less-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:453 less-equal[compile-time] 0[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:454 less-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:455 less-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:456 less-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:457 less-equal[compile-time] 0[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:458 less-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:459 less-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:460 less-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:461 less-equal[compile-time] 0[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:462 less-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:463 less-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:464 less-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:465 less-equal[compile-time] 0[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:466 less-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:467 less-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:468 less-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:469 less-equal[compile-time] 1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:470 less-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:471 less-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:472 less-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:473 less-equal[compile-time] 1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:474 less-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:475 less-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:476 less-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:477 less-equal[compile-time] 1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:478 less-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:479 less-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:480 less-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:481 less-equal[compile-time] 1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:482 less-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:483 less-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:484 less-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:485 less-equal[compile-time] 1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:486 less-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:487 less-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:488 less-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:489 less-equal[compile-time] 127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:490 less-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:491 less-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:492 less-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:493 less-equal[compile-time] 127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:494 less-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:495 less-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:496 less-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:497 less-equal[compile-time] 127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:498 less-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:499 less-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:500 less-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:501 less-equal[compile-time] 127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:502 less-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:503 less-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:504 less-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:505 less-equal[compile-time] 127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:506 less-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:507 less-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:508 less-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:509 less-equal[compile-time] -128[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:510 less-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:511 less-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:512 less-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:513 less-equal[compile-time] -128[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:514 less-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:515 less-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:516 less-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:517 less-equal[compile-time] -128[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:518 less-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:519 less-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:520 less-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:521 less-equal[compile-time] -128[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:522 less-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:523 less-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:524 less-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:525 less-equal[compile-time] -128[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:526 less-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:527 less-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:528 less-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:529 less-equal[compile-time] -127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 0;
endcode
varvalue r True

$overflow on
code auto:530 less-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:531 less-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:532 less-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:533 less-equal[compile-time] -127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 255;
endcode
varvalue r True

$overflow on
code auto:534 less-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:535 less-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:536 less-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:537 less-equal[compile-time] -127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:538 less-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:539 less-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:540 less-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:541 less-equal[compile-time] -127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:542 less-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:543 less-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:544 less-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:545 less-equal[compile-time] -127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:546 less-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:547 less-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:548 less-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:549 less-equal[compile-time] -1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:550 less-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:551 less-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:552 less-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:553 less-equal[compile-time] -1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:554 less-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:555 less-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:556 less-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:557 less-equal[compile-time] -1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:558 less-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:559 less-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:560 less-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:561 less-equal[compile-time] -1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:562 less-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:563 less-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:564 less-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:565 less-equal[compile-time] -1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:566 less-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:567 less-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:568 less-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:569 less-equal[compile-time] 0[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:570 less-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:571 less-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:572 less-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:573 less-equal[compile-time] 0[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:574 less-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:575 less-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:576 less-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:577 less-equal[compile-time] 0[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:578 less-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:579 less-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:580 less-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:581 less-equal[compile-time] 0[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:582 less-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:583 less-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:584 less-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:585 less-equal[compile-time] 0[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:586 less-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:587 less-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:588 less-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:589 less-equal[compile-time] 1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:590 less-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:591 less-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:592 less-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:593 less-equal[compile-time] 1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:594 less-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:595 less-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:596 less-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:597 less-equal[compile-time] 1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:598 less-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:599 less-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:600 less-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:601 less-equal[compile-time] 1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:602 less-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:603 less-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:604 less-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:605 less-equal[compile-time] 1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:606 less-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:607 less-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:608 less-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:609 less-equal[compile-time] 127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:610 less-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:611 less-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:612 less-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:613 less-equal[compile-time] 127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:614 less-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:615 less-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:616 less-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:617 less-equal[compile-time] 127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:618 less-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:619 less-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:620 less-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:621 less-equal[compile-time] 127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:622 less-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:623 less-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:624 less-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:625 less-equal[compile-time] 127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:626 less-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:627 less-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:628 less-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:629 less-equal[compile-time] -128[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:630 less-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:631 less-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:632 less-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:633 less-equal[compile-time] -128[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:634 less-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:635 less-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:636 less-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:637 less-equal[compile-time] -128[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:638 less-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:639 less-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:640 less-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:641 less-equal[compile-time] -128[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:642 less-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:643 less-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:644 less-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:645 less-equal[compile-time] -128[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:646 less-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:647 less-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:648 less-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:649 less-equal[compile-time] -127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 0;
endcode
varvalue r True

$overflow on
code auto:650 less-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:651 less-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:652 less-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:653 less-equal[compile-time] -127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 255;
endcode
varvalue r True

$overflow on
code auto:654 less-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:655 less-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:656 less-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:657 less-equal[compile-time] -127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:658 less-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:659 less-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:660 less-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:661 less-equal[compile-time] -127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:662 less-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:663 less-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -127 <= b;
endcode
varvalue r True

code auto:664 less-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:665 less-equal[compile-time] -127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:666 less-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:667 less-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:668 less-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:669 less-equal[compile-time] -1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:670 less-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:671 less-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:672 less-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:673 less-equal[compile-time] -1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:674 less-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:675 less-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:676 less-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:677 less-equal[compile-time] -1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:678 less-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:679 less-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:680 less-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:681 less-equal[compile-time] -1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:682 less-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:683 less-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:684 less-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:685 less-equal[compile-time] -1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:686 less-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:687 less-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:688 less-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:689 less-equal[compile-time] 0[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:690 less-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:691 less-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:692 less-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:693 less-equal[compile-time] 0[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:694 less-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:695 less-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:696 less-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:697 less-equal[compile-time] 0[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:698 less-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:699 less-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:700 less-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:701 less-equal[compile-time] 0[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:702 less-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:703 less-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:704 less-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:705 less-equal[compile-time] 0[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:706 less-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:707 less-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:708 less-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:709 less-equal[compile-time] 1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:710 less-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:711 less-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:712 less-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:713 less-equal[compile-time] 1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:714 less-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:715 less-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:716 less-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:717 less-equal[compile-time] 1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:718 less-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:719 less-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:720 less-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:721 less-equal[compile-time] 1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:722 less-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:723 less-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:724 less-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:725 less-equal[compile-time] 1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:726 less-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:727 less-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:728 less-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:729 less-equal[compile-time] 127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:730 less-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:731 less-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:732 less-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:733 less-equal[compile-time] 127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:734 less-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:735 less-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:736 less-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:737 less-equal[compile-time] 127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:738 less-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:739 less-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:740 less-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:741 less-equal[compile-time] 127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:742 less-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:743 less-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:744 less-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:745 less-equal[compile-time] 127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:746 less-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:747 less-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:748 less-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:749 less-equal[compile-time] -32768[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -128;
endcode
varvalue r True

$overflow on
code auto:750 less-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:751 less-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:752 less-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:753 less-equal[compile-time] -32768[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -127;
endcode
varvalue r True

$overflow on
code auto:754 less-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:755 less-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:756 less-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:757 less-equal[compile-time] -32768[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -1;
endcode
varvalue r True

$overflow on
code auto:758 less-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:759 less-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:760 less-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:761 less-equal[compile-time] -32768[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 0;
endcode
varvalue r True

$overflow on
code auto:762 less-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:763 less-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:764 less-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:765 less-equal[compile-time] -32768[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 1;
endcode
varvalue r True

$overflow on
code auto:766 less-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:767 less-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:768 less-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:769 less-equal[compile-time] -32768[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 127;
endcode
varvalue r True

$overflow on
code auto:770 less-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:771 less-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:772 less-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:773 less-equal[compile-time] -32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -128;
endcode
varvalue r True

$overflow on
code auto:774 less-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:775 less-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:776 less-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:777 less-equal[compile-time] -32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -127;
endcode
varvalue r True

$overflow on
code auto:778 less-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:779 less-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:780 less-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:781 less-equal[compile-time] -32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -1;
endcode
varvalue r True

$overflow on
code auto:782 less-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:783 less-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:784 less-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:785 less-equal[compile-time] -32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 0;
endcode
varvalue r True

$overflow on
code auto:786 less-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:787 less-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:788 less-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:789 less-equal[compile-time] -32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 1;
endcode
varvalue r True

$overflow on
code auto:790 less-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:791 less-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:792 less-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:793 less-equal[compile-time] -32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 127;
endcode
varvalue r True

$overflow on
code auto:794 less-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:795 less-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:796 less-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:797 less-equal[compile-time] -129[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -128;
endcode
varvalue r True

$overflow on
code auto:798 less-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:799 less-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:800 less-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:801 less-equal[compile-time] -129[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -127;
endcode
varvalue r True

$overflow on
code auto:802 less-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:803 less-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:804 less-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:805 less-equal[compile-time] -129[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -1;
endcode
varvalue r True

$overflow on
code auto:806 less-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:807 less-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:808 less-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:809 less-equal[compile-time] -129[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 0;
endcode
varvalue r True

$overflow on
code auto:810 less-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:811 less-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:812 less-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:813 less-equal[compile-time] -129[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 1;
endcode
varvalue r True

$overflow on
code auto:814 less-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:815 less-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:816 less-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:817 less-equal[compile-time] -129[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 127;
endcode
varvalue r True

$overflow on
code auto:818 less-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:819 less-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:820 less-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:821 less-equal[compile-time] -128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -128;
endcode
varvalue r True

$overflow on
code auto:822 less-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:823 less-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:824 less-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r True

code auto:825 less-equal[compile-time] -128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -127;
endcode
varvalue r True

$overflow on
code auto:826 less-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:827 less-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:828 less-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:829 less-equal[compile-time] -128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -1;
endcode
varvalue r True

$overflow on
code auto:830 less-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:831 less-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:832 less-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:833 less-equal[compile-time] -128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:834 less-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:835 less-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:836 less-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:837 less-equal[compile-time] -128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:838 less-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:839 less-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:840 less-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:841 less-equal[compile-time] -128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:842 less-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:843 less-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:844 less-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:845 less-equal[compile-time] -1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -128;
endcode
varvalue r False

$overflow on
code auto:846 less-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:847 less-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:848 less-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:849 less-equal[compile-time] -1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -127;
endcode
varvalue r False

$overflow on
code auto:850 less-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:851 less-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:852 less-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:853 less-equal[compile-time] -1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -1;
endcode
varvalue r True

$overflow on
code auto:854 less-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:855 less-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:856 less-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:857 less-equal[compile-time] -1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:858 less-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:859 less-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:860 less-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:861 less-equal[compile-time] -1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:862 less-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:863 less-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:864 less-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:865 less-equal[compile-time] -1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:866 less-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:867 less-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:868 less-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:869 less-equal[compile-time] 0[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:870 less-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:871 less-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:872 less-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:873 less-equal[compile-time] 0[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -127;
endcode
varvalue r False

$overflow on
code auto:874 less-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:875 less-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:876 less-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:877 less-equal[compile-time] 0[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:878 less-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:879 less-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:880 less-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:881 less-equal[compile-time] 0[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:882 less-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:883 less-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:884 less-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:885 less-equal[compile-time] 0[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:886 less-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:887 less-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:888 less-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:889 less-equal[compile-time] 0[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:890 less-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:891 less-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:892 less-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:893 less-equal[compile-time] 1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:894 less-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:895 less-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:896 less-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:897 less-equal[compile-time] 1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -127;
endcode
varvalue r False

$overflow on
code auto:898 less-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:899 less-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:900 less-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:901 less-equal[compile-time] 1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:902 less-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:903 less-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:904 less-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:905 less-equal[compile-time] 1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:906 less-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:907 less-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:908 less-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:909 less-equal[compile-time] 1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:910 less-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:911 less-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:912 less-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:913 less-equal[compile-time] 1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:914 less-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:915 less-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:916 less-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:917 less-equal[compile-time] 127[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:918 less-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:919 less-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:920 less-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:921 less-equal[compile-time] 127[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -127;
endcode
varvalue r False

$overflow on
code auto:922 less-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:923 less-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:924 less-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:925 less-equal[compile-time] 127[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:926 less-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:927 less-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:928 less-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:929 less-equal[compile-time] 127[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:930 less-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:931 less-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:932 less-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:933 less-equal[compile-time] 127[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:934 less-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:935 less-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:936 less-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:937 less-equal[compile-time] 127[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:938 less-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:939 less-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:940 less-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:941 less-equal[compile-time] 128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -128;
endcode
varvalue r False

$overflow on
code auto:942 less-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:943 less-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:944 less-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:945 less-equal[compile-time] 128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -127;
endcode
varvalue r False

$overflow on
code auto:946 less-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:947 less-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:948 less-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:949 less-equal[compile-time] 128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -1;
endcode
varvalue r False

$overflow on
code auto:950 less-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:951 less-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:952 less-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:953 less-equal[compile-time] 128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:954 less-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:955 less-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:956 less-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:957 less-equal[compile-time] 128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:958 less-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:959 less-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:960 less-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:961 less-equal[compile-time] 128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:962 less-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:963 less-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:964 less-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:965 less-equal[compile-time] 32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:966 less-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:967 less-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:968 less-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:969 less-equal[compile-time] 32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -127;
endcode
varvalue r False

$overflow on
code auto:970 less-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:971 less-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:972 less-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:973 less-equal[compile-time] 32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:974 less-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:975 less-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:976 less-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:977 less-equal[compile-time] 32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:978 less-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:979 less-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:980 less-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:981 less-equal[compile-time] 32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:982 less-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:983 less-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:984 less-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:985 less-equal[compile-time] 32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:986 less-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:987 less-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:988 less-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r True

code auto:989 less-equal[compile-time] -32768[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -32768;
endcode
varvalue r True

$overflow on
code auto:990 less-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:991 less-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:992 less-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r True

code auto:993 less-equal[compile-time] -32768[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -32767;
endcode
varvalue r True

$overflow on
code auto:994 less-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:995 less-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:996 less-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r True

code auto:997 less-equal[compile-time] -32768[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -129;
endcode
varvalue r True

$overflow on
code auto:998 less-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:999 less-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1000 less-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:1001 less-equal[compile-time] -32768[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -128;
endcode
varvalue r True

$overflow on
code auto:1002 less-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1003 less-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1004 less-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:1005 less-equal[compile-time] -32768[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= -1;
endcode
varvalue r True

$overflow on
code auto:1006 less-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1007 less-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1008 less-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1009 less-equal[compile-time] -32768[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 0;
endcode
varvalue r True

$overflow on
code auto:1010 less-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1011 less-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1012 less-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1013 less-equal[compile-time] -32768[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 1;
endcode
varvalue r True

$overflow on
code auto:1014 less-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1015 less-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1016 less-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1017 less-equal[compile-time] -32768[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 127;
endcode
varvalue r True

$overflow on
code auto:1018 less-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1019 less-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1020 less-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1021 less-equal[compile-time] -32768[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 128;
endcode
varvalue r True

$overflow on
code auto:1022 less-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1023 less-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1024 less-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1025 less-equal[compile-time] -32768[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1026 less-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1027 less-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r False

code auto:1028 less-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1029 less-equal[compile-time] -32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1030 less-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1031 less-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1032 less-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r True

code auto:1033 less-equal[compile-time] -32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -32767;
endcode
varvalue r True

$overflow on
code auto:1034 less-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1035 less-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1036 less-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r True

code auto:1037 less-equal[compile-time] -32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -129;
endcode
varvalue r True

$overflow on
code auto:1038 less-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1039 less-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1040 less-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:1041 less-equal[compile-time] -32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -128;
endcode
varvalue r True

$overflow on
code auto:1042 less-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1043 less-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1044 less-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:1045 less-equal[compile-time] -32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= -1;
endcode
varvalue r True

$overflow on
code auto:1046 less-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1047 less-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1048 less-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1049 less-equal[compile-time] -32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 0;
endcode
varvalue r True

$overflow on
code auto:1050 less-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1051 less-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1052 less-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1053 less-equal[compile-time] -32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 1;
endcode
varvalue r True

$overflow on
code auto:1054 less-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1055 less-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1056 less-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1057 less-equal[compile-time] -32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 127;
endcode
varvalue r True

$overflow on
code auto:1058 less-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1059 less-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1060 less-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1061 less-equal[compile-time] -32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 128;
endcode
varvalue r True

$overflow on
code auto:1062 less-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1063 less-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1064 less-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1065 less-equal[compile-time] -32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1066 less-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1067 less-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r False

code auto:1068 less-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1069 less-equal[compile-time] -129[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1070 less-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1071 less-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r False

code auto:1072 less-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1073 less-equal[compile-time] -129[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1074 less-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1075 less-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1076 less-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r True

code auto:1077 less-equal[compile-time] -129[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -129;
endcode
varvalue r True

$overflow on
code auto:1078 less-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1079 less-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1080 less-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:1081 less-equal[compile-time] -129[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -128;
endcode
varvalue r True

$overflow on
code auto:1082 less-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1083 less-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1084 less-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:1085 less-equal[compile-time] -129[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= -1;
endcode
varvalue r True

$overflow on
code auto:1086 less-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1087 less-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1088 less-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1089 less-equal[compile-time] -129[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 0;
endcode
varvalue r True

$overflow on
code auto:1090 less-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1091 less-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1092 less-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1093 less-equal[compile-time] -129[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 1;
endcode
varvalue r True

$overflow on
code auto:1094 less-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1095 less-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1096 less-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1097 less-equal[compile-time] -129[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 127;
endcode
varvalue r True

$overflow on
code auto:1098 less-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1099 less-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1100 less-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1101 less-equal[compile-time] -129[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 128;
endcode
varvalue r True

$overflow on
code auto:1102 less-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1103 less-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1104 less-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1105 less-equal[compile-time] -129[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1106 less-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1107 less-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:1108 less-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1109 less-equal[compile-time] -128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1110 less-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1111 less-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:1112 less-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1113 less-equal[compile-time] -128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1114 less-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1115 less-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r False

code auto:1116 less-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1117 less-equal[compile-time] -128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -129;
endcode
varvalue r False

$overflow on
code auto:1118 less-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1119 less-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1120 less-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r True

code auto:1121 less-equal[compile-time] -128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -128;
endcode
varvalue r True

$overflow on
code auto:1122 less-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1123 less-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1124 less-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:1125 less-equal[compile-time] -128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= -1;
endcode
varvalue r True

$overflow on
code auto:1126 less-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1127 less-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1128 less-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1129 less-equal[compile-time] -128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:1130 less-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1131 less-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1132 less-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1133 less-equal[compile-time] -128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:1134 less-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1135 less-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1136 less-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1137 less-equal[compile-time] -128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:1138 less-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1139 less-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1140 less-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1141 less-equal[compile-time] -128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 128;
endcode
varvalue r True

$overflow on
code auto:1142 less-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1143 less-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1144 less-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1145 less-equal[compile-time] -128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1146 less-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1147 less-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:1148 less-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1149 less-equal[compile-time] -1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1150 less-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1151 less-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:1152 less-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1153 less-equal[compile-time] -1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1154 less-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1155 less-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:1156 less-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1157 less-equal[compile-time] -1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -129;
endcode
varvalue r False

$overflow on
code auto:1158 less-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1159 less-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r False

code auto:1160 less-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1161 less-equal[compile-time] -1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -128;
endcode
varvalue r False

$overflow on
code auto:1162 less-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1163 less-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1164 less-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r True

code auto:1165 less-equal[compile-time] -1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= -1;
endcode
varvalue r True

$overflow on
code auto:1166 less-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1167 less-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1168 less-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1169 less-equal[compile-time] -1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:1170 less-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1171 less-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1172 less-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1173 less-equal[compile-time] -1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:1174 less-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1175 less-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1176 less-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1177 less-equal[compile-time] -1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:1178 less-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1179 less-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1180 less-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1181 less-equal[compile-time] -1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 128;
endcode
varvalue r True

$overflow on
code auto:1182 less-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1183 less-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1184 less-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1185 less-equal[compile-time] -1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1186 less-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1187 less-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1188 less-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1189 less-equal[compile-time] 0[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1190 less-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1191 less-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1192 less-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1193 less-equal[compile-time] 0[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1194 less-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1195 less-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1196 less-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1197 less-equal[compile-time] 0[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -129;
endcode
varvalue r False

$overflow on
code auto:1198 less-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1199 less-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1200 less-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1201 less-equal[compile-time] 0[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:1202 less-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1203 less-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1204 less-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1205 less-equal[compile-time] 0[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:1206 less-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1207 less-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1208 less-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1209 less-equal[compile-time] 0[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:1210 less-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1211 less-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1212 less-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1213 less-equal[compile-time] 0[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:1214 less-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1215 less-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1216 less-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1217 less-equal[compile-time] 0[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:1218 less-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1219 less-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1220 less-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1221 less-equal[compile-time] 0[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:1222 less-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1223 less-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1224 less-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1225 less-equal[compile-time] 0[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1226 less-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1227 less-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1228 less-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1229 less-equal[compile-time] 1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1230 less-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1231 less-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1232 less-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1233 less-equal[compile-time] 1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1234 less-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1235 less-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1236 less-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1237 less-equal[compile-time] 1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -129;
endcode
varvalue r False

$overflow on
code auto:1238 less-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1239 less-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1240 less-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1241 less-equal[compile-time] 1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:1242 less-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1243 less-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1244 less-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1245 less-equal[compile-time] 1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:1246 less-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1247 less-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1248 less-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1249 less-equal[compile-time] 1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:1250 less-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1251 less-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1252 less-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1253 less-equal[compile-time] 1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:1254 less-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1255 less-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1256 less-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1257 less-equal[compile-time] 1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:1258 less-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1259 less-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1260 less-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1261 less-equal[compile-time] 1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:1262 less-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1263 less-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1264 less-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1265 less-equal[compile-time] 1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1266 less-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1267 less-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1268 less-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1269 less-equal[compile-time] 127[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1270 less-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1271 less-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1272 less-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1273 less-equal[compile-time] 127[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1274 less-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1275 less-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1276 less-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1277 less-equal[compile-time] 127[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -129;
endcode
varvalue r False

$overflow on
code auto:1278 less-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1279 less-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1280 less-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1281 less-equal[compile-time] 127[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:1282 less-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1283 less-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1284 less-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1285 less-equal[compile-time] 127[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:1286 less-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1287 less-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1288 less-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1289 less-equal[compile-time] 127[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:1290 less-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1291 less-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1292 less-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1293 less-equal[compile-time] 127[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:1294 less-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1295 less-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1296 less-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1297 less-equal[compile-time] 127[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:1298 less-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1299 less-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1300 less-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1301 less-equal[compile-time] 127[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:1302 less-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1303 less-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1304 less-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1305 less-equal[compile-time] 127[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1306 less-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1307 less-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1308 less-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1309 less-equal[compile-time] 128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1310 less-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1311 less-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1312 less-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1313 less-equal[compile-time] 128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1314 less-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1315 less-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1316 less-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1317 less-equal[compile-time] 128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -129;
endcode
varvalue r False

$overflow on
code auto:1318 less-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1319 less-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1320 less-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1321 less-equal[compile-time] 128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -128;
endcode
varvalue r False

$overflow on
code auto:1322 less-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1323 less-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1324 less-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1325 less-equal[compile-time] 128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -1;
endcode
varvalue r False

$overflow on
code auto:1326 less-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1327 less-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1328 less-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1329 less-equal[compile-time] 128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:1330 less-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1331 less-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1332 less-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1333 less-equal[compile-time] 128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:1334 less-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1335 less-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1336 less-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:1337 less-equal[compile-time] 128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:1338 less-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1339 less-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1340 less-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1341 less-equal[compile-time] 128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 128;
endcode
varvalue r True

$overflow on
code auto:1342 less-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1343 less-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1344 less-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1345 less-equal[compile-time] 128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1346 less-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1347 less-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1348 less-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:1349 less-equal[compile-time] 32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32768;
endcode
varvalue r False

$overflow on
code auto:1350 less-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1351 less-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1352 less-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:1353 less-equal[compile-time] 32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32767;
endcode
varvalue r False

$overflow on
code auto:1354 less-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1355 less-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1356 less-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:1357 less-equal[compile-time] 32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -129;
endcode
varvalue r False

$overflow on
code auto:1358 less-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1359 less-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1360 less-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1361 less-equal[compile-time] 32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:1362 less-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1363 less-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1364 less-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1365 less-equal[compile-time] 32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:1366 less-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1367 less-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1368 less-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1369 less-equal[compile-time] 32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:1370 less-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1371 less-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1372 less-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1373 less-equal[compile-time] 32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:1374 less-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1375 less-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1376 less-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:1377 less-equal[compile-time] 32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:1378 less-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1379 less-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1380 less-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:1381 less-equal[compile-time] 32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:1382 less-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1383 less-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1384 less-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1385 less-equal[compile-time] 32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1386 less-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1387 less-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1388 less-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1389 less-equal[compile-time] -32768[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 0;
endcode
varvalue r True

$overflow on
code auto:1390 less-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1391 less-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1392 less-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1393 less-equal[compile-time] -32768[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 1;
endcode
varvalue r True

$overflow on
code auto:1394 less-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1395 less-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1396 less-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1397 less-equal[compile-time] -32768[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 127;
endcode
varvalue r True

$overflow on
code auto:1398 less-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1399 less-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1400 less-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1401 less-equal[compile-time] -32768[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 128;
endcode
varvalue r True

$overflow on
code auto:1402 less-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1403 less-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1404 less-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1405 less-equal[compile-time] -32768[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 255;
endcode
varvalue r True

$overflow on
code auto:1406 less-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1407 less-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1408 less-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1409 less-equal[compile-time] -32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 0;
endcode
varvalue r True

$overflow on
code auto:1410 less-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1411 less-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1412 less-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1413 less-equal[compile-time] -32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 1;
endcode
varvalue r True

$overflow on
code auto:1414 less-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1415 less-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1416 less-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1417 less-equal[compile-time] -32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 127;
endcode
varvalue r True

$overflow on
code auto:1418 less-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1419 less-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1420 less-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1421 less-equal[compile-time] -32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 128;
endcode
varvalue r True

$overflow on
code auto:1422 less-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1423 less-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1424 less-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1425 less-equal[compile-time] -32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 255;
endcode
varvalue r True

$overflow on
code auto:1426 less-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1427 less-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1428 less-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1429 less-equal[compile-time] -129[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 0;
endcode
varvalue r True

$overflow on
code auto:1430 less-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1431 less-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1432 less-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1433 less-equal[compile-time] -129[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 1;
endcode
varvalue r True

$overflow on
code auto:1434 less-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1435 less-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1436 less-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1437 less-equal[compile-time] -129[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 127;
endcode
varvalue r True

$overflow on
code auto:1438 less-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1439 less-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1440 less-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1441 less-equal[compile-time] -129[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 128;
endcode
varvalue r True

$overflow on
code auto:1442 less-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1443 less-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1444 less-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1445 less-equal[compile-time] -129[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 255;
endcode
varvalue r True

$overflow on
code auto:1446 less-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1447 less-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1448 less-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1449 less-equal[compile-time] -128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:1450 less-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1451 less-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1452 less-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1453 less-equal[compile-time] -128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 1;
endcode
varvalue r True

$overflow on
code auto:1454 less-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1455 less-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1456 less-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1457 less-equal[compile-time] -128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 127;
endcode
varvalue r True

$overflow on
code auto:1458 less-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1459 less-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1460 less-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1461 less-equal[compile-time] -128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 128;
endcode
varvalue r True

$overflow on
code auto:1462 less-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1463 less-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1464 less-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1465 less-equal[compile-time] -128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1466 less-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1467 less-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1468 less-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1469 less-equal[compile-time] -1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:1470 less-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1471 less-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1472 less-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1473 less-equal[compile-time] -1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 1;
endcode
varvalue r True

$overflow on
code auto:1474 less-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1475 less-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1476 less-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1477 less-equal[compile-time] -1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 127;
endcode
varvalue r True

$overflow on
code auto:1478 less-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1479 less-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1480 less-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1481 less-equal[compile-time] -1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 128;
endcode
varvalue r True

$overflow on
code auto:1482 less-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1483 less-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1484 less-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1485 less-equal[compile-time] -1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1486 less-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1487 less-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1488 less-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1489 less-equal[compile-time] 0[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:1490 less-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1491 less-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1492 less-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1493 less-equal[compile-time] 0[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:1494 less-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1495 less-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1496 less-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1497 less-equal[compile-time] 0[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:1498 less-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1499 less-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1500 less-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1501 less-equal[compile-time] 0[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:1502 less-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1503 less-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1504 less-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1505 less-equal[compile-time] 0[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:1506 less-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1507 less-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1508 less-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1509 less-equal[compile-time] 1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:1510 less-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1511 less-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1512 less-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:1513 less-equal[compile-time] 1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:1514 less-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1515 less-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1516 less-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1517 less-equal[compile-time] 1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:1518 less-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1519 less-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1520 less-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1521 less-equal[compile-time] 1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:1522 less-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1523 less-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1524 less-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1525 less-equal[compile-time] 1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1526 less-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1527 less-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1528 less-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1529 less-equal[compile-time] 127[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:1530 less-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1531 less-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1532 less-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1533 less-equal[compile-time] 127[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:1534 less-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1535 less-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1536 less-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:1537 less-equal[compile-time] 127[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:1538 less-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1539 less-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1540 less-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1541 less-equal[compile-time] 127[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:1542 less-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1543 less-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1544 less-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1545 less-equal[compile-time] 127[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:1546 less-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1547 less-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1548 less-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1549 less-equal[compile-time] 128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:1550 less-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1551 less-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1552 less-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1553 less-equal[compile-time] 128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:1554 less-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1555 less-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1556 less-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:1557 less-equal[compile-time] 128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:1558 less-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1559 less-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1560 less-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:1561 less-equal[compile-time] 128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 128;
endcode
varvalue r True

$overflow on
code auto:1562 less-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1563 less-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1564 less-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1565 less-equal[compile-time] 128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1566 less-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1567 less-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1568 less-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1569 less-equal[compile-time] 32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:1570 less-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1571 less-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1572 less-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:1573 less-equal[compile-time] 32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:1574 less-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1575 less-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1576 less-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:1577 less-equal[compile-time] 32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:1578 less-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1579 less-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1580 less-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:1581 less-equal[compile-time] 32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:1582 less-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1583 less-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1584 less-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:1585 less-equal[compile-time] 32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:1586 less-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1587 less-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1588 less-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1589 less-equal[compile-time] -32768[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 0;
endcode
varvalue r True

$overflow on
code auto:1590 less-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1591 less-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1592 less-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1593 less-equal[compile-time] -32768[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 255;
endcode
varvalue r True

$overflow on
code auto:1594 less-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1595 less-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1596 less-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1597 less-equal[compile-time] -32768[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1598 less-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1599 less-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1600 less-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1601 less-equal[compile-time] -32768[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1602 less-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1603 less-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1604 less-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1605 less-equal[compile-time] -32768[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1606 less-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1607 less-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1608 less-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1609 less-equal[compile-time] -32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 0;
endcode
varvalue r True

$overflow on
code auto:1610 less-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1611 less-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1612 less-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1613 less-equal[compile-time] -32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 255;
endcode
varvalue r True

$overflow on
code auto:1614 less-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1615 less-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1616 less-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1617 less-equal[compile-time] -32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1618 less-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1619 less-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1620 less-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1621 less-equal[compile-time] -32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1622 less-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1623 less-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1624 less-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1625 less-equal[compile-time] -32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1626 less-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1627 less-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1628 less-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1629 less-equal[compile-time] -129[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 0;
endcode
varvalue r True

$overflow on
code auto:1630 less-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1631 less-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1632 less-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1633 less-equal[compile-time] -129[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 255;
endcode
varvalue r True

$overflow on
code auto:1634 less-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1635 less-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1636 less-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1637 less-equal[compile-time] -129[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1638 less-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1639 less-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1640 less-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1641 less-equal[compile-time] -129[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1642 less-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1643 less-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1644 less-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1645 less-equal[compile-time] -129[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1646 less-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1647 less-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1648 less-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1649 less-equal[compile-time] -128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:1650 less-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1651 less-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1652 less-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1653 less-equal[compile-time] -128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1654 less-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1655 less-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1656 less-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1657 less-equal[compile-time] -128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1658 less-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1659 less-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1660 less-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1661 less-equal[compile-time] -128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1662 less-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1663 less-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1664 less-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1665 less-equal[compile-time] -128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1666 less-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1667 less-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1668 less-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1669 less-equal[compile-time] -1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:1670 less-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1671 less-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1672 less-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1673 less-equal[compile-time] -1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1674 less-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1675 less-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1676 less-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1677 less-equal[compile-time] -1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1678 less-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1679 less-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1680 less-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1681 less-equal[compile-time] -1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1682 less-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1683 less-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1684 less-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1685 less-equal[compile-time] -1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1686 less-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1687 less-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1688 less-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1689 less-equal[compile-time] 0[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:1690 less-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1691 less-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1692 less-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1693 less-equal[compile-time] 0[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:1694 less-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1695 less-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1696 less-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1697 less-equal[compile-time] 0[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1698 less-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1699 less-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1700 less-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1701 less-equal[compile-time] 0[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1702 less-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1703 less-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1704 less-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1705 less-equal[compile-time] 0[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1706 less-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1707 less-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1708 less-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1709 less-equal[compile-time] 1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:1710 less-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1711 less-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1712 less-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1713 less-equal[compile-time] 1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1714 less-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1715 less-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1716 less-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1717 less-equal[compile-time] 1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1718 less-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1719 less-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1720 less-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1721 less-equal[compile-time] 1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1722 less-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1723 less-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1724 less-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1725 less-equal[compile-time] 1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1726 less-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1727 less-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1728 less-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1729 less-equal[compile-time] 127[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:1730 less-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1731 less-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1732 less-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1733 less-equal[compile-time] 127[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:1734 less-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1735 less-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1736 less-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1737 less-equal[compile-time] 127[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1738 less-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1739 less-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1740 less-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1741 less-equal[compile-time] 127[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1742 less-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1743 less-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1744 less-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1745 less-equal[compile-time] 127[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1746 less-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1747 less-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1748 less-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1749 less-equal[compile-time] 128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:1750 less-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1751 less-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1752 less-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1753 less-equal[compile-time] 128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1754 less-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1755 less-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1756 less-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1757 less-equal[compile-time] 128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1758 less-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1759 less-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1760 less-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1761 less-equal[compile-time] 128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1762 less-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1763 less-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1764 less-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1765 less-equal[compile-time] 128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1766 less-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1767 less-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1768 less-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1769 less-equal[compile-time] 32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:1770 less-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1771 less-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1772 less-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:1773 less-equal[compile-time] 32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:1774 less-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1775 less-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1776 less-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1777 less-equal[compile-time] 32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1778 less-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1779 less-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1780 less-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1781 less-equal[compile-time] 32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1782 less-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1783 less-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1784 less-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1785 less-equal[compile-time] 32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1786 less-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1787 less-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1788 less-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1789 less-equal[compile-time] -32768[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 0;
endcode
varvalue r True

$overflow on
code auto:1790 less-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1791 less-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1792 less-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1793 less-equal[compile-time] -32768[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 255;
endcode
varvalue r True

$overflow on
code auto:1794 less-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1795 less-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1796 less-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1797 less-equal[compile-time] -32768[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1798 less-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1799 less-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1800 less-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1801 less-equal[compile-time] -32768[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1802 less-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1803 less-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32768 <= b;
endcode
varvalue r True

code auto:1804 less-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1805 less-equal[compile-time] -32768[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1806 less-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1807 less-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1808 less-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1809 less-equal[compile-time] -32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 0;
endcode
varvalue r True

$overflow on
code auto:1810 less-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1811 less-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1812 less-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1813 less-equal[compile-time] -32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 255;
endcode
varvalue r True

$overflow on
code auto:1814 less-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1815 less-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1816 less-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1817 less-equal[compile-time] -32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1818 less-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1819 less-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1820 less-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1821 less-equal[compile-time] -32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1822 less-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1823 less-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32767 <= b;
endcode
varvalue r True

code auto:1824 less-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1825 less-equal[compile-time] -32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1826 less-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1827 less-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1828 less-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1829 less-equal[compile-time] -129[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 0;
endcode
varvalue r True

$overflow on
code auto:1830 less-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1831 less-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1832 less-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1833 less-equal[compile-time] -129[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 255;
endcode
varvalue r True

$overflow on
code auto:1834 less-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1835 less-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1836 less-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1837 less-equal[compile-time] -129[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1838 less-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1839 less-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1840 less-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1841 less-equal[compile-time] -129[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1842 less-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1843 less-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -129 <= b;
endcode
varvalue r True

code auto:1844 less-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1845 less-equal[compile-time] -129[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1846 less-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1847 less-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1848 less-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1849 less-equal[compile-time] -128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 0;
endcode
varvalue r True

$overflow on
code auto:1850 less-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1851 less-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1852 less-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1853 less-equal[compile-time] -128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1854 less-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1855 less-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1856 less-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1857 less-equal[compile-time] -128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1858 less-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1859 less-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1860 less-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1861 less-equal[compile-time] -128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1862 less-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1863 less-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 <= b;
endcode
varvalue r True

code auto:1864 less-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1865 less-equal[compile-time] -128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1866 less-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1867 less-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1868 less-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1869 less-equal[compile-time] -1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 0;
endcode
varvalue r True

$overflow on
code auto:1870 less-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1871 less-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1872 less-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1873 less-equal[compile-time] -1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1874 less-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1875 less-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1876 less-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1877 less-equal[compile-time] -1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1878 less-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1879 less-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1880 less-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1881 less-equal[compile-time] -1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1882 less-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1883 less-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 <= b;
endcode
varvalue r True

code auto:1884 less-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1885 less-equal[compile-time] -1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1886 less-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1887 less-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1888 less-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:1889 less-equal[compile-time] 0[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:1890 less-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1891 less-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1892 less-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1893 less-equal[compile-time] 0[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:1894 less-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1895 less-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1896 less-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1897 less-equal[compile-time] 0[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1898 less-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1899 less-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1900 less-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1901 less-equal[compile-time] 0[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1902 less-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1903 less-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:1904 less-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1905 less-equal[compile-time] 0[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1906 less-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1907 less-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:1908 less-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1909 less-equal[compile-time] 1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:1910 less-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1911 less-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1912 less-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1913 less-equal[compile-time] 1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:1914 less-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1915 less-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1916 less-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1917 less-equal[compile-time] 1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1918 less-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1919 less-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1920 less-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1921 less-equal[compile-time] 1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1922 less-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1923 less-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:1924 less-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1925 less-equal[compile-time] 1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1926 less-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1927 less-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:1928 less-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1929 less-equal[compile-time] 127[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:1930 less-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1931 less-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1932 less-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1933 less-equal[compile-time] 127[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:1934 less-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1935 less-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1936 less-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1937 less-equal[compile-time] 127[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1938 less-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1939 less-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1940 less-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1941 less-equal[compile-time] 127[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1942 less-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1943 less-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:1944 less-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1945 less-equal[compile-time] 127[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1946 less-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1947 less-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:1948 less-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1949 less-equal[compile-time] 128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:1950 less-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1951 less-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1952 less-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:1953 less-equal[compile-time] 128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:1954 less-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1955 less-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1956 less-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1957 less-equal[compile-time] 128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1958 less-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1959 less-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1960 less-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1961 less-equal[compile-time] 128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1962 less-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1963 less-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:1964 less-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1965 less-equal[compile-time] 128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1966 less-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1967 less-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1968 less-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:1969 less-equal[compile-time] 32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:1970 less-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1971 less-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:1972 less-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:1973 less-equal[compile-time] 32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:1974 less-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1975 less-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1976 less-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:1977 less-equal[compile-time] 32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:1978 less-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1979 less-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1980 less-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:1981 less-equal[compile-time] 32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:1982 less-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1983 less-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:1984 less-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:1985 less-equal[compile-time] 32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:1986 less-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1987 less-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1988 less-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:1989 less-equal[compile-time] 0[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:1990 less-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1991 less-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1992 less-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:1993 less-equal[compile-time] 0[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -127;
endcode
varvalue r False

$overflow on
code auto:1994 less-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:1995 less-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:1996 less-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:1997 less-equal[compile-time] 0[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:1998 less-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:1999 less-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2000 less-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2001 less-equal[compile-time] 0[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2002 less-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2003 less-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2004 less-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2005 less-equal[compile-time] 0[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2006 less-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2007 less-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2008 less-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2009 less-equal[compile-time] 0[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2010 less-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2011 less-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2012 less-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2013 less-equal[compile-time] 1[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:2014 less-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2015 less-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2016 less-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2017 less-equal[compile-time] 1[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -127;
endcode
varvalue r False

$overflow on
code auto:2018 less-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2019 less-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2020 less-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2021 less-equal[compile-time] 1[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:2022 less-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2023 less-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2024 less-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2025 less-equal[compile-time] 1[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:2026 less-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2027 less-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2028 less-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2029 less-equal[compile-time] 1[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:2030 less-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2031 less-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2032 less-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2033 less-equal[compile-time] 1[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:2034 less-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2035 less-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2036 less-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2037 less-equal[compile-time] 127[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:2038 less-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2039 less-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2040 less-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2041 less-equal[compile-time] 127[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -127;
endcode
varvalue r False

$overflow on
code auto:2042 less-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2043 less-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2044 less-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2045 less-equal[compile-time] 127[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:2046 less-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2047 less-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2048 less-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2049 less-equal[compile-time] 127[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:2050 less-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2051 less-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2052 less-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2053 less-equal[compile-time] 127[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:2054 less-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2055 less-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2056 less-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2057 less-equal[compile-time] 127[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:2058 less-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2059 less-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2060 less-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2061 less-equal[compile-time] 128[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -128;
endcode
varvalue r False

$overflow on
code auto:2062 less-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2063 less-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2064 less-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2065 less-equal[compile-time] 128[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -127;
endcode
varvalue r False

$overflow on
code auto:2066 less-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2067 less-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2068 less-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2069 less-equal[compile-time] 128[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -1;
endcode
varvalue r False

$overflow on
code auto:2070 less-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2071 less-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2072 less-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2073 less-equal[compile-time] 128[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:2074 less-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2075 less-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2076 less-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2077 less-equal[compile-time] 128[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:2078 less-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2079 less-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2080 less-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2081 less-equal[compile-time] 128[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:2082 less-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2083 less-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2084 less-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2085 less-equal[compile-time] 255[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:2086 less-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2087 less-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2088 less-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2089 less-equal[compile-time] 255[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -127;
endcode
varvalue r False

$overflow on
code auto:2090 less-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2091 less-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2092 less-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2093 less-equal[compile-time] 255[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:2094 less-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2095 less-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2096 less-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2097 less-equal[compile-time] 255[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2098 less-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2099 less-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2100 less-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2101 less-equal[compile-time] 255[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2102 less-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2103 less-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2104 less-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2105 less-equal[compile-time] 255[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2106 less-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2107 less-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2108 less-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2109 less-equal[compile-time] 0[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2110 less-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2111 less-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2112 less-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2113 less-equal[compile-time] 0[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2114 less-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2115 less-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2116 less-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2117 less-equal[compile-time] 0[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -129;
endcode
varvalue r False

$overflow on
code auto:2118 less-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2119 less-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2120 less-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2121 less-equal[compile-time] 0[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:2122 less-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2123 less-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2124 less-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2125 less-equal[compile-time] 0[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:2126 less-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2127 less-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2128 less-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2129 less-equal[compile-time] 0[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2130 less-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2131 less-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2132 less-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2133 less-equal[compile-time] 0[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2134 less-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2135 less-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2136 less-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2137 less-equal[compile-time] 0[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2138 less-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2139 less-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2140 less-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2141 less-equal[compile-time] 0[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:2142 less-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2143 less-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2144 less-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2145 less-equal[compile-time] 0[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2146 less-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2147 less-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2148 less-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2149 less-equal[compile-time] 1[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2150 less-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2151 less-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2152 less-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2153 less-equal[compile-time] 1[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2154 less-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2155 less-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2156 less-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2157 less-equal[compile-time] 1[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -129;
endcode
varvalue r False

$overflow on
code auto:2158 less-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2159 less-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2160 less-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2161 less-equal[compile-time] 1[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -128;
endcode
varvalue r False

$overflow on
code auto:2162 less-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2163 less-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2164 less-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2165 less-equal[compile-time] 1[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= -1;
endcode
varvalue r False

$overflow on
code auto:2166 less-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2167 less-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2168 less-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2169 less-equal[compile-time] 1[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:2170 less-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2171 less-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2172 less-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2173 less-equal[compile-time] 1[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:2174 less-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2175 less-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2176 less-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2177 less-equal[compile-time] 1[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:2178 less-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2179 less-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2180 less-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2181 less-equal[compile-time] 1[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:2182 less-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2183 less-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2184 less-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2185 less-equal[compile-time] 1[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2186 less-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2187 less-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2188 less-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2189 less-equal[compile-time] 127[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2190 less-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2191 less-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2192 less-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2193 less-equal[compile-time] 127[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2194 less-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2195 less-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2196 less-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2197 less-equal[compile-time] 127[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -129;
endcode
varvalue r False

$overflow on
code auto:2198 less-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2199 less-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2200 less-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2201 less-equal[compile-time] 127[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -128;
endcode
varvalue r False

$overflow on
code auto:2202 less-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2203 less-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2204 less-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2205 less-equal[compile-time] 127[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= -1;
endcode
varvalue r False

$overflow on
code auto:2206 less-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2207 less-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2208 less-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2209 less-equal[compile-time] 127[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:2210 less-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2211 less-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2212 less-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2213 less-equal[compile-time] 127[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:2214 less-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2215 less-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2216 less-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2217 less-equal[compile-time] 127[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:2218 less-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2219 less-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2220 less-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2221 less-equal[compile-time] 127[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:2222 less-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2223 less-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2224 less-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2225 less-equal[compile-time] 127[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2226 less-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2227 less-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2228 less-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2229 less-equal[compile-time] 128[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2230 less-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2231 less-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2232 less-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2233 less-equal[compile-time] 128[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2234 less-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2235 less-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2236 less-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2237 less-equal[compile-time] 128[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -129;
endcode
varvalue r False

$overflow on
code auto:2238 less-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2239 less-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2240 less-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2241 less-equal[compile-time] 128[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -128;
endcode
varvalue r False

$overflow on
code auto:2242 less-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2243 less-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2244 less-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2245 less-equal[compile-time] 128[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= -1;
endcode
varvalue r False

$overflow on
code auto:2246 less-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2247 less-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2248 less-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2249 less-equal[compile-time] 128[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:2250 less-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2251 less-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2252 less-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2253 less-equal[compile-time] 128[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:2254 less-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2255 less-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2256 less-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2257 less-equal[compile-time] 128[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:2258 less-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2259 less-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2260 less-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2261 less-equal[compile-time] 128[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 128;
endcode
varvalue r True

$overflow on
code auto:2262 less-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2263 less-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2264 less-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2265 less-equal[compile-time] 128[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2266 less-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2267 less-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2268 less-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2269 less-equal[compile-time] 255[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2270 less-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2271 less-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2272 less-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2273 less-equal[compile-time] 255[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2274 less-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2275 less-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2276 less-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2277 less-equal[compile-time] 255[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -129;
endcode
varvalue r False

$overflow on
code auto:2278 less-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2279 less-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2280 less-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2281 less-equal[compile-time] 255[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:2282 less-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2283 less-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2284 less-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2285 less-equal[compile-time] 255[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:2286 less-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2287 less-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2288 less-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2289 less-equal[compile-time] 255[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2290 less-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2291 less-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2292 less-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2293 less-equal[compile-time] 255[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2294 less-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2295 less-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2296 less-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2297 less-equal[compile-time] 255[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2298 less-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2299 less-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2300 less-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2301 less-equal[compile-time] 255[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:2302 less-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2303 less-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2304 less-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2305 less-equal[compile-time] 255[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2306 less-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2307 less-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2308 less-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2309 less-equal[compile-time] 0[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2310 less-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2311 less-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2312 less-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2313 less-equal[compile-time] 0[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2314 less-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2315 less-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2316 less-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2317 less-equal[compile-time] 0[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2318 less-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2319 less-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2320 less-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2321 less-equal[compile-time] 0[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:2322 less-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2323 less-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2324 less-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2325 less-equal[compile-time] 0[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:2326 less-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2327 less-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2328 less-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2329 less-equal[compile-time] 1[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:2330 less-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2331 less-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2332 less-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2333 less-equal[compile-time] 1[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 1;
endcode
varvalue r True

$overflow on
code auto:2334 less-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2335 less-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2336 less-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2337 less-equal[compile-time] 1[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 127;
endcode
varvalue r True

$overflow on
code auto:2338 less-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2339 less-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2340 less-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2341 less-equal[compile-time] 1[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 128;
endcode
varvalue r True

$overflow on
code auto:2342 less-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2343 less-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2344 less-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2345 less-equal[compile-time] 1[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:2346 less-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2347 less-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2348 less-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2349 less-equal[compile-time] 127[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:2350 less-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2351 less-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2352 less-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2353 less-equal[compile-time] 127[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 1;
endcode
varvalue r False

$overflow on
code auto:2354 less-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2355 less-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2356 less-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2357 less-equal[compile-time] 127[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 127;
endcode
varvalue r True

$overflow on
code auto:2358 less-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2359 less-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2360 less-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2361 less-equal[compile-time] 127[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 128;
endcode
varvalue r True

$overflow on
code auto:2362 less-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2363 less-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2364 less-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2365 less-equal[compile-time] 127[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:2366 less-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2367 less-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2368 less-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2369 less-equal[compile-time] 128[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:2370 less-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2371 less-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2372 less-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2373 less-equal[compile-time] 128[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 1;
endcode
varvalue r False

$overflow on
code auto:2374 less-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2375 less-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2376 less-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2377 less-equal[compile-time] 128[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 127;
endcode
varvalue r False

$overflow on
code auto:2378 less-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2379 less-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2380 less-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2381 less-equal[compile-time] 128[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 128;
endcode
varvalue r True

$overflow on
code auto:2382 less-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2383 less-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2384 less-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2385 less-equal[compile-time] 128[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:2386 less-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2387 less-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2388 less-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2389 less-equal[compile-time] 255[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2390 less-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2391 less-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2392 less-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2393 less-equal[compile-time] 255[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2394 less-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2395 less-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2396 less-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2397 less-equal[compile-time] 255[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2398 less-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2399 less-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2400 less-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2401 less-equal[compile-time] 255[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:2402 less-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2403 less-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2404 less-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2405 less-equal[compile-time] 255[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:2406 less-equal[Word] 0[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2407 less-equal[Word] 0[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2408 less-equal[Word] 0[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2409 less-equal[compile-time] 0[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2410 less-equal[Word] 0[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2411 less-equal[Word] 0[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2412 less-equal[Word] 0[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2413 less-equal[compile-time] 0[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:2414 less-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2415 less-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2416 less-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2417 less-equal[compile-time] 0[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2418 less-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2419 less-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2420 less-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2421 less-equal[compile-time] 0[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2422 less-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2423 less-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2424 less-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2425 less-equal[compile-time] 0[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2426 less-equal[Word] 1[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2427 less-equal[Word] 1[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2428 less-equal[Word] 1[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2429 less-equal[compile-time] 1[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:2430 less-equal[Word] 1[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2431 less-equal[Word] 1[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2432 less-equal[Word] 1[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2433 less-equal[compile-time] 1[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:2434 less-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2435 less-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2436 less-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2437 less-equal[compile-time] 1[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2438 less-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2439 less-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2440 less-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2441 less-equal[compile-time] 1[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2442 less-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2443 less-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2444 less-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2445 less-equal[compile-time] 1[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2446 less-equal[Word] 127[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2447 less-equal[Word] 127[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2448 less-equal[Word] 127[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2449 less-equal[compile-time] 127[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:2450 less-equal[Word] 127[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2451 less-equal[Word] 127[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2452 less-equal[Word] 127[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2453 less-equal[compile-time] 127[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:2454 less-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2455 less-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2456 less-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2457 less-equal[compile-time] 127[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2458 less-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2459 less-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2460 less-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2461 less-equal[compile-time] 127[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2462 less-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2463 less-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2464 less-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2465 less-equal[compile-time] 127[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2466 less-equal[Word] 128[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2467 less-equal[Word] 128[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2468 less-equal[Word] 128[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2469 less-equal[compile-time] 128[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:2470 less-equal[Word] 128[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2471 less-equal[Word] 128[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2472 less-equal[Word] 128[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2473 less-equal[compile-time] 128[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:2474 less-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2475 less-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2476 less-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2477 less-equal[compile-time] 128[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2478 less-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2479 less-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2480 less-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2481 less-equal[compile-time] 128[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2482 less-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2483 less-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2484 less-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2485 less-equal[compile-time] 128[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2486 less-equal[Word] 255[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2487 less-equal[Word] 255[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2488 less-equal[Word] 255[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2489 less-equal[compile-time] 255[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2490 less-equal[Word] 255[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2491 less-equal[Word] 255[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2492 less-equal[Word] 255[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2493 less-equal[compile-time] 255[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:2494 less-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2495 less-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2496 less-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2497 less-equal[compile-time] 255[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2498 less-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2499 less-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2500 less-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2501 less-equal[compile-time] 255[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2502 less-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2503 less-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2504 less-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2505 less-equal[compile-time] 255[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2506 less-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2507 less-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2508 less-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2509 less-equal[compile-time] 0[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2510 less-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2511 less-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2512 less-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2513 less-equal[compile-time] 0[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:2514 less-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2515 less-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2516 less-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2517 less-equal[compile-time] 0[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2518 less-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2519 less-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2520 less-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2521 less-equal[compile-time] 0[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2522 less-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2523 less-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2524 less-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2525 less-equal[compile-time] 0[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2526 less-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2527 less-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r False

code auto:2528 less-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2529 less-equal[compile-time] 1[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 0;
endcode
varvalue r False

$overflow on
code auto:2530 less-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2531 less-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2532 less-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2533 less-equal[compile-time] 1[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 255;
endcode
varvalue r True

$overflow on
code auto:2534 less-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2535 less-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2536 less-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2537 less-equal[compile-time] 1[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2538 less-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2539 less-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2540 less-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2541 less-equal[compile-time] 1[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2542 less-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2543 less-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <= b;
endcode
varvalue r True

code auto:2544 less-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2545 less-equal[compile-time] 1[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2546 less-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2547 less-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r False

code auto:2548 less-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2549 less-equal[compile-time] 127[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 0;
endcode
varvalue r False

$overflow on
code auto:2550 less-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2551 less-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2552 less-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2553 less-equal[compile-time] 127[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 255;
endcode
varvalue r True

$overflow on
code auto:2554 less-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2555 less-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2556 less-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2557 less-equal[compile-time] 127[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2558 less-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2559 less-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2560 less-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2561 less-equal[compile-time] 127[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2562 less-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2563 less-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <= b;
endcode
varvalue r True

code auto:2564 less-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2565 less-equal[compile-time] 127[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2566 less-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2567 less-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r False

code auto:2568 less-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2569 less-equal[compile-time] 128[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 0;
endcode
varvalue r False

$overflow on
code auto:2570 less-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2571 less-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2572 less-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2573 less-equal[compile-time] 128[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 255;
endcode
varvalue r True

$overflow on
code auto:2574 less-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2575 less-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2576 less-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2577 less-equal[compile-time] 128[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2578 less-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2579 less-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2580 less-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2581 less-equal[compile-time] 128[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2582 less-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2583 less-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 <= b;
endcode
varvalue r True

code auto:2584 less-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2585 less-equal[compile-time] 128[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2586 less-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2587 less-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2588 less-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2589 less-equal[compile-time] 255[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2590 less-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2591 less-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2592 less-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2593 less-equal[compile-time] 255[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:2594 less-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2595 less-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2596 less-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2597 less-equal[compile-time] 255[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2598 less-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2599 less-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2600 less-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:2601 less-equal[compile-time] 255[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:2602 less-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2603 less-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2604 less-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:2605 less-equal[compile-time] 255[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:2606 less-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2607 less-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2608 less-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2609 less-equal[compile-time] 0[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:2610 less-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2611 less-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2612 less-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2613 less-equal[compile-time] 0[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -127;
endcode
varvalue r False

$overflow on
code auto:2614 less-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2615 less-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2616 less-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2617 less-equal[compile-time] 0[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:2618 less-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2619 less-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2620 less-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2621 less-equal[compile-time] 0[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2622 less-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2623 less-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2624 less-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2625 less-equal[compile-time] 0[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2626 less-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2627 less-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2628 less-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2629 less-equal[compile-time] 0[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2630 less-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2631 less-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2632 less-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2633 less-equal[compile-time] 255[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:2634 less-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2635 less-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2636 less-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2637 less-equal[compile-time] 255[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -127;
endcode
varvalue r False

$overflow on
code auto:2638 less-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2639 less-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2640 less-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2641 less-equal[compile-time] 255[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:2642 less-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2643 less-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2644 less-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2645 less-equal[compile-time] 255[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2646 less-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2647 less-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2648 less-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2649 less-equal[compile-time] 255[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2650 less-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2651 less-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2652 less-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2653 less-equal[compile-time] 255[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2654 less-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2655 less-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2656 less-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2657 less-equal[compile-time] 32767[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:2658 less-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2659 less-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2660 less-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2661 less-equal[compile-time] 32767[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -127;
endcode
varvalue r False

$overflow on
code auto:2662 less-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2663 less-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2664 less-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2665 less-equal[compile-time] 32767[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:2666 less-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2667 less-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2668 less-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2669 less-equal[compile-time] 32767[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:2670 less-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2671 less-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2672 less-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2673 less-equal[compile-time] 32767[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:2674 less-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2675 less-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2676 less-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2677 less-equal[compile-time] 32767[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:2678 less-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2679 less-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2680 less-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2681 less-equal[compile-time] 32768[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -128;
endcode
varvalue r False

$overflow on
code auto:2682 less-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2683 less-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2684 less-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2685 less-equal[compile-time] 32768[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -127;
endcode
varvalue r False

$overflow on
code auto:2686 less-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2687 less-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2688 less-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2689 less-equal[compile-time] 32768[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -1;
endcode
varvalue r False

$overflow on
code auto:2690 less-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2691 less-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2692 less-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2693 less-equal[compile-time] 32768[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:2694 less-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2695 less-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2696 less-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2697 less-equal[compile-time] 32768[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:2698 less-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2699 less-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2700 less-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2701 less-equal[compile-time] 32768[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:2702 less-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2703 less-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2704 less-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2705 less-equal[compile-time] 65535[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -128;
endcode
varvalue r False

$overflow on
code auto:2706 less-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2707 less-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2708 less-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:2709 less-equal[compile-time] 65535[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -127;
endcode
varvalue r False

$overflow on
code auto:2710 less-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2711 less-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2712 less-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2713 less-equal[compile-time] 65535[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -1;
endcode
varvalue r False

$overflow on
code auto:2714 less-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2715 less-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2716 less-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2717 less-equal[compile-time] 65535[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:2718 less-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2719 less-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2720 less-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2721 less-equal[compile-time] 65535[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:2722 less-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2723 less-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2724 less-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2725 less-equal[compile-time] 65535[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:2726 less-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2727 less-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2728 less-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2729 less-equal[compile-time] 0[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2730 less-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2731 less-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2732 less-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2733 less-equal[compile-time] 0[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2734 less-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2735 less-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2736 less-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2737 less-equal[compile-time] 0[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -129;
endcode
varvalue r False

$overflow on
code auto:2738 less-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2739 less-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2740 less-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2741 less-equal[compile-time] 0[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:2742 less-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2743 less-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:2744 less-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2745 less-equal[compile-time] 0[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:2746 less-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2747 less-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2748 less-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2749 less-equal[compile-time] 0[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2750 less-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2751 less-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2752 less-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2753 less-equal[compile-time] 0[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2754 less-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2755 less-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2756 less-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2757 less-equal[compile-time] 0[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2758 less-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2759 less-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2760 less-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2761 less-equal[compile-time] 0[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:2762 less-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2763 less-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2764 less-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2765 less-equal[compile-time] 0[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2766 less-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2767 less-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2768 less-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2769 less-equal[compile-time] 255[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2770 less-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2771 less-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2772 less-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2773 less-equal[compile-time] 255[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2774 less-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2775 less-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2776 less-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2777 less-equal[compile-time] 255[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -129;
endcode
varvalue r False

$overflow on
code auto:2778 less-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2779 less-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2780 less-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2781 less-equal[compile-time] 255[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:2782 less-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2783 less-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2784 less-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2785 less-equal[compile-time] 255[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:2786 less-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2787 less-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2788 less-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2789 less-equal[compile-time] 255[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2790 less-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2791 less-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2792 less-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2793 less-equal[compile-time] 255[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2794 less-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2795 less-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2796 less-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2797 less-equal[compile-time] 255[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2798 less-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2799 less-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2800 less-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2801 less-equal[compile-time] 255[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:2802 less-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2803 less-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2804 less-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2805 less-equal[compile-time] 255[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2806 less-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2807 less-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2808 less-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2809 less-equal[compile-time] 32767[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2810 less-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2811 less-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2812 less-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2813 less-equal[compile-time] 32767[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2814 less-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2815 less-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2816 less-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2817 less-equal[compile-time] 32767[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -129;
endcode
varvalue r False

$overflow on
code auto:2818 less-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2819 less-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2820 less-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2821 less-equal[compile-time] 32767[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:2822 less-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2823 less-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2824 less-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2825 less-equal[compile-time] 32767[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:2826 less-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2827 less-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2828 less-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2829 less-equal[compile-time] 32767[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:2830 less-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2831 less-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2832 less-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2833 less-equal[compile-time] 32767[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:2834 less-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2835 less-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2836 less-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2837 less-equal[compile-time] 32767[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:2838 less-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2839 less-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2840 less-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2841 less-equal[compile-time] 32767[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:2842 less-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2843 less-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:2844 less-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:2845 less-equal[compile-time] 32767[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:2846 less-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2847 less-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2848 less-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2849 less-equal[compile-time] 32768[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2850 less-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2851 less-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2852 less-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2853 less-equal[compile-time] 32768[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2854 less-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2855 less-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2856 less-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2857 less-equal[compile-time] 32768[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -129;
endcode
varvalue r False

$overflow on
code auto:2858 less-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2859 less-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2860 less-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2861 less-equal[compile-time] 32768[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -128;
endcode
varvalue r False

$overflow on
code auto:2862 less-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2863 less-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2864 less-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2865 less-equal[compile-time] 32768[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -1;
endcode
varvalue r False

$overflow on
code auto:2866 less-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2867 less-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2868 less-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2869 less-equal[compile-time] 32768[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:2870 less-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2871 less-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2872 less-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2873 less-equal[compile-time] 32768[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:2874 less-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2875 less-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2876 less-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2877 less-equal[compile-time] 32768[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:2878 less-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2879 less-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2880 less-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2881 less-equal[compile-time] 32768[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 128;
endcode
varvalue r False

$overflow on
code auto:2882 less-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2883 less-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2884 less-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:2885 less-equal[compile-time] 32768[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:2886 less-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2887 less-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2888 less-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:2889 less-equal[compile-time] 65535[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -32768;
endcode
varvalue r False

$overflow on
code auto:2890 less-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2891 less-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2892 less-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:2893 less-equal[compile-time] 65535[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -32767;
endcode
varvalue r False

$overflow on
code auto:2894 less-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2895 less-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2896 less-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:2897 less-equal[compile-time] 65535[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -129;
endcode
varvalue r False

$overflow on
code auto:2898 less-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2899 less-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2900 less-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:2901 less-equal[compile-time] 65535[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -128;
endcode
varvalue r False

$overflow on
code auto:2902 less-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2903 less-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2904 less-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:2905 less-equal[compile-time] 65535[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -1;
endcode
varvalue r False

$overflow on
code auto:2906 less-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2907 less-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2908 less-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2909 less-equal[compile-time] 65535[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:2910 less-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2911 less-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2912 less-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2913 less-equal[compile-time] 65535[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:2914 less-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2915 less-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2916 less-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2917 less-equal[compile-time] 65535[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:2918 less-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2919 less-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2920 less-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2921 less-equal[compile-time] 65535[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 128;
endcode
varvalue r False

$overflow on
code auto:2922 less-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2923 less-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:2924 less-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:2925 less-equal[compile-time] 65535[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:2926 less-equal[Word] 0[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2927 less-equal[Word] 0[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2928 less-equal[Word] 0[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:2929 less-equal[compile-time] 0[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:2930 less-equal[Word] 0[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2931 less-equal[Word] 0[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2932 less-equal[Word] 0[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:2933 less-equal[compile-time] 0[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:2934 less-equal[Word] 0[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2935 less-equal[Word] 0[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2936 less-equal[Word] 0[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:2937 less-equal[compile-time] 0[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:2938 less-equal[Word] 0[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2939 less-equal[Word] 0[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2940 less-equal[Word] 0[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:2941 less-equal[compile-time] 0[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:2942 less-equal[Word] 0[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2943 less-equal[Word] 0[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:2944 less-equal[Word] 0[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2945 less-equal[compile-time] 0[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:2946 less-equal[Word] 255[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2947 less-equal[Word] 255[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2948 less-equal[Word] 255[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2949 less-equal[compile-time] 255[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:2950 less-equal[Word] 255[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2951 less-equal[Word] 255[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2952 less-equal[Word] 255[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2953 less-equal[compile-time] 255[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:2954 less-equal[Word] 255[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2955 less-equal[Word] 255[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2956 less-equal[Word] 255[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2957 less-equal[compile-time] 255[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:2958 less-equal[Word] 255[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2959 less-equal[Word] 255[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:2960 less-equal[Word] 255[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2961 less-equal[compile-time] 255[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:2962 less-equal[Word] 255[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:2963 less-equal[Word] 255[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:2964 less-equal[Word] 255[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:2965 less-equal[compile-time] 255[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:2966 less-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2967 less-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2968 less-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2969 less-equal[compile-time] 32767[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:2970 less-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2971 less-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2972 less-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2973 less-equal[compile-time] 32767[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:2974 less-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2975 less-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2976 less-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2977 less-equal[compile-time] 32767[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:2978 less-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2979 less-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2980 less-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:2981 less-equal[compile-time] 32767[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:2982 less-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2983 less-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:2984 less-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:2985 less-equal[compile-time] 32767[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:2986 less-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2987 less-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2988 less-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:2989 less-equal[compile-time] 32768[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:2990 less-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2991 less-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2992 less-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:2993 less-equal[compile-time] 32768[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:2994 less-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2995 less-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:2996 less-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:2997 less-equal[compile-time] 32768[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:2998 less-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:2999 less-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3000 less-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3001 less-equal[compile-time] 32768[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 128;
endcode
varvalue r False

$overflow on
code auto:3002 less-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3003 less-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3004 less-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3005 less-equal[compile-time] 32768[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3006 less-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3007 less-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3008 less-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3009 less-equal[compile-time] 65535[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3010 less-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3011 less-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3012 less-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3013 less-equal[compile-time] 65535[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:3014 less-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3015 less-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3016 less-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3017 less-equal[compile-time] 65535[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:3018 less-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3019 less-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3020 less-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3021 less-equal[compile-time] 65535[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 128;
endcode
varvalue r False

$overflow on
code auto:3022 less-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3023 less-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3024 less-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3025 less-equal[compile-time] 65535[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3026 less-equal[Word] 0[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3027 less-equal[Word] 0[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3028 less-equal[Word] 0[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3029 less-equal[compile-time] 0[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3030 less-equal[Word] 0[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3031 less-equal[Word] 0[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3032 less-equal[Word] 0[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3033 less-equal[compile-time] 0[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:3034 less-equal[Word] 0[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3035 less-equal[Word] 0[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3036 less-equal[Word] 0[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3037 less-equal[compile-time] 0[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3038 less-equal[Word] 0[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3039 less-equal[Word] 0[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3040 less-equal[Word] 0[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3041 less-equal[compile-time] 0[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3042 less-equal[Word] 0[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3043 less-equal[Word] 0[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3044 less-equal[Word] 0[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3045 less-equal[compile-time] 0[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3046 less-equal[Word] 255[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3047 less-equal[Word] 255[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3048 less-equal[Word] 255[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3049 less-equal[compile-time] 255[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3050 less-equal[Word] 255[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3051 less-equal[Word] 255[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3052 less-equal[Word] 255[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3053 less-equal[compile-time] 255[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:3054 less-equal[Word] 255[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3055 less-equal[Word] 255[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3056 less-equal[Word] 255[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3057 less-equal[compile-time] 255[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3058 less-equal[Word] 255[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3059 less-equal[Word] 255[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3060 less-equal[Word] 255[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3061 less-equal[compile-time] 255[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3062 less-equal[Word] 255[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3063 less-equal[Word] 255[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3064 less-equal[Word] 255[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3065 less-equal[compile-time] 255[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3066 less-equal[Word] 32767[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3067 less-equal[Word] 32767[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3068 less-equal[Word] 32767[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3069 less-equal[compile-time] 32767[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3070 less-equal[Word] 32767[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3071 less-equal[Word] 32767[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3072 less-equal[Word] 32767[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3073 less-equal[compile-time] 32767[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:3074 less-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3075 less-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3076 less-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3077 less-equal[compile-time] 32767[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3078 less-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3079 less-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3080 less-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3081 less-equal[compile-time] 32767[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3082 less-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3083 less-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3084 less-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3085 less-equal[compile-time] 32767[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3086 less-equal[Word] 32768[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3087 less-equal[Word] 32768[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3088 less-equal[Word] 32768[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3089 less-equal[compile-time] 32768[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3090 less-equal[Word] 32768[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3091 less-equal[Word] 32768[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3092 less-equal[Word] 32768[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3093 less-equal[compile-time] 32768[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3094 less-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3095 less-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3096 less-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3097 less-equal[compile-time] 32768[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3098 less-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3099 less-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3100 less-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3101 less-equal[compile-time] 32768[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3102 less-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3103 less-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3104 less-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3105 less-equal[compile-time] 32768[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3106 less-equal[Word] 65535[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3107 less-equal[Word] 65535[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3108 less-equal[Word] 65535[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3109 less-equal[compile-time] 65535[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3110 less-equal[Word] 65535[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3111 less-equal[Word] 65535[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3112 less-equal[Word] 65535[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3113 less-equal[compile-time] 65535[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3114 less-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3115 less-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3116 less-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3117 less-equal[compile-time] 65535[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3118 less-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3119 less-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3120 less-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r False

code auto:3121 less-equal[compile-time] 65535[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32768;
endcode
varvalue r False

$overflow on
code auto:3122 less-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3123 less-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r True

code auto:3124 less-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3125 less-equal[compile-time] 65535[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3126 less-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3127 less-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3128 less-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3129 less-equal[compile-time] 0[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3130 less-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3131 less-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3132 less-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3133 less-equal[compile-time] 0[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:3134 less-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3135 less-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3136 less-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3137 less-equal[compile-time] 0[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3138 less-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3139 less-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3140 less-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3141 less-equal[compile-time] 0[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3142 less-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3143 less-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3144 less-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3145 less-equal[compile-time] 0[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3146 less-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3147 less-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3148 less-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3149 less-equal[compile-time] 255[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3150 less-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3151 less-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3152 less-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3153 less-equal[compile-time] 255[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:3154 less-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3155 less-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3156 less-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3157 less-equal[compile-time] 255[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3158 less-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3159 less-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3160 less-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3161 less-equal[compile-time] 255[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3162 less-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3163 less-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3164 less-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3165 less-equal[compile-time] 255[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3166 less-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3167 less-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3168 less-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3169 less-equal[compile-time] 32767[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3170 less-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3171 less-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3172 less-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3173 less-equal[compile-time] 32767[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:3174 less-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3175 less-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3176 less-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3177 less-equal[compile-time] 32767[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3178 less-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3179 less-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3180 less-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3181 less-equal[compile-time] 32767[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3182 less-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3183 less-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3184 less-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3185 less-equal[compile-time] 32767[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3186 less-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3187 less-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3188 less-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3189 less-equal[compile-time] 32768[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3190 less-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3191 less-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3192 less-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3193 less-equal[compile-time] 32768[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3194 less-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3195 less-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3196 less-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3197 less-equal[compile-time] 32768[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3198 less-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3199 less-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3200 less-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3201 less-equal[compile-time] 32768[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3202 less-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3203 less-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3204 less-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3205 less-equal[compile-time] 32768[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3206 less-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3207 less-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3208 less-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3209 less-equal[compile-time] 65535[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3210 less-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3211 less-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3212 less-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3213 less-equal[compile-time] 65535[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3214 less-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3215 less-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3216 less-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3217 less-equal[compile-time] 65535[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3218 less-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3219 less-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3220 less-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r False

code auto:3221 less-equal[compile-time] 65535[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32768;
endcode
varvalue r False

$overflow on
code auto:3222 less-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3223 less-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r True

code auto:3224 less-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3225 less-equal[compile-time] 65535[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3226 less-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3227 less-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3228 less-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3229 less-equal[compile-time] 0[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:3230 less-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3231 less-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3232 less-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:3233 less-equal[compile-time] 0[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -127;
endcode
varvalue r False

$overflow on
code auto:3234 less-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3235 less-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3236 less-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3237 less-equal[compile-time] 0[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:3238 less-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3239 less-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3240 less-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3241 less-equal[compile-time] 0[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3242 less-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3243 less-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3244 less-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:3245 less-equal[compile-time] 0[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:3246 less-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3247 less-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3248 less-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:3249 less-equal[compile-time] 0[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:3250 less-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3251 less-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3252 less-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3253 less-equal[compile-time] 255[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:3254 less-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3255 less-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3256 less-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:3257 less-equal[compile-time] 255[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -127;
endcode
varvalue r False

$overflow on
code auto:3258 less-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3259 less-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3260 less-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3261 less-equal[compile-time] 255[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:3262 less-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3263 less-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3264 less-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3265 less-equal[compile-time] 255[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3266 less-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3267 less-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3268 less-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3269 less-equal[compile-time] 255[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:3270 less-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3271 less-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3272 less-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3273 less-equal[compile-time] 255[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:3274 less-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3275 less-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3276 less-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3277 less-equal[compile-time] 32767[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:3278 less-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3279 less-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3280 less-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:3281 less-equal[compile-time] 32767[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -127;
endcode
varvalue r False

$overflow on
code auto:3282 less-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3283 less-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3284 less-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3285 less-equal[compile-time] 32767[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:3286 less-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3287 less-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3288 less-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3289 less-equal[compile-time] 32767[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3290 less-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3291 less-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3292 less-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3293 less-equal[compile-time] 32767[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:3294 less-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3295 less-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3296 less-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3297 less-equal[compile-time] 32767[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:3298 less-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3299 less-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3300 less-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3301 less-equal[compile-time] 32768[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -128;
endcode
varvalue r False

$overflow on
code auto:3302 less-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3303 less-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3304 less-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:3305 less-equal[compile-time] 32768[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -127;
endcode
varvalue r False

$overflow on
code auto:3306 less-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3307 less-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3308 less-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3309 less-equal[compile-time] 32768[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -1;
endcode
varvalue r False

$overflow on
code auto:3310 less-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3311 less-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3312 less-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3313 less-equal[compile-time] 32768[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3314 less-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3315 less-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3316 less-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3317 less-equal[compile-time] 32768[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:3318 less-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3319 less-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3320 less-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3321 less-equal[compile-time] 32768[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:3322 less-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3323 less-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3324 less-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3325 less-equal[compile-time] 65535[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -128;
endcode
varvalue r False

$overflow on
code auto:3326 less-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3327 less-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3328 less-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -127;
endcode
varvalue r False

code auto:3329 less-equal[compile-time] 65535[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -127;
endcode
varvalue r False

$overflow on
code auto:3330 less-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3331 less-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3332 less-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3333 less-equal[compile-time] 65535[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -1;
endcode
varvalue r False

$overflow on
code auto:3334 less-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3335 less-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3336 less-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3337 less-equal[compile-time] 65535[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3338 less-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3339 less-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3340 less-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3341 less-equal[compile-time] 65535[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:3342 less-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3343 less-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3344 less-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3345 less-equal[compile-time] 65535[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:3346 less-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3347 less-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3348 less-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:3349 less-equal[compile-time] 0[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32768;
endcode
varvalue r False

$overflow on
code auto:3350 less-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3351 less-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3352 less-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:3353 less-equal[compile-time] 0[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -32767;
endcode
varvalue r False

$overflow on
code auto:3354 less-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3355 less-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3356 less-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:3357 less-equal[compile-time] 0[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -129;
endcode
varvalue r False

$overflow on
code auto:3358 less-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3359 less-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3360 less-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3361 less-equal[compile-time] 0[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -128;
endcode
varvalue r False

$overflow on
code auto:3362 less-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3363 less-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r False

code auto:3364 less-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3365 less-equal[compile-time] 0[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= -1;
endcode
varvalue r False

$overflow on
code auto:3366 less-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3367 less-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3368 less-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3369 less-equal[compile-time] 0[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3370 less-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3371 less-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3372 less-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:3373 less-equal[compile-time] 0[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:3374 less-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3375 less-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3376 less-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:3377 less-equal[compile-time] 0[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:3378 less-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3379 less-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3380 less-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:3381 less-equal[compile-time] 0[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:3382 less-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3383 less-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3384 less-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3385 less-equal[compile-time] 0[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3386 less-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3387 less-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3388 less-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:3389 less-equal[compile-time] 255[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32768;
endcode
varvalue r False

$overflow on
code auto:3390 less-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3391 less-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3392 less-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:3393 less-equal[compile-time] 255[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -32767;
endcode
varvalue r False

$overflow on
code auto:3394 less-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3395 less-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3396 less-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:3397 less-equal[compile-time] 255[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -129;
endcode
varvalue r False

$overflow on
code auto:3398 less-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3399 less-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3400 less-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3401 less-equal[compile-time] 255[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -128;
endcode
varvalue r False

$overflow on
code auto:3402 less-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3403 less-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3404 less-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3405 less-equal[compile-time] 255[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= -1;
endcode
varvalue r False

$overflow on
code auto:3406 less-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3407 less-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3408 less-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3409 less-equal[compile-time] 255[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3410 less-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3411 less-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3412 less-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3413 less-equal[compile-time] 255[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:3414 less-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3415 less-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3416 less-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3417 less-equal[compile-time] 255[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:3418 less-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3419 less-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3420 less-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3421 less-equal[compile-time] 255[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:3422 less-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3423 less-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3424 less-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3425 less-equal[compile-time] 255[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3426 less-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3427 less-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3428 less-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:3429 less-equal[compile-time] 32767[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32768;
endcode
varvalue r False

$overflow on
code auto:3430 less-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3431 less-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3432 less-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:3433 less-equal[compile-time] 32767[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -32767;
endcode
varvalue r False

$overflow on
code auto:3434 less-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3435 less-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3436 less-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:3437 less-equal[compile-time] 32767[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -129;
endcode
varvalue r False

$overflow on
code auto:3438 less-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3439 less-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3440 less-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3441 less-equal[compile-time] 32767[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -128;
endcode
varvalue r False

$overflow on
code auto:3442 less-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3443 less-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3444 less-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3445 less-equal[compile-time] 32767[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= -1;
endcode
varvalue r False

$overflow on
code auto:3446 less-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3447 less-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3448 less-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3449 less-equal[compile-time] 32767[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3450 less-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3451 less-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3452 less-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3453 less-equal[compile-time] 32767[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:3454 less-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3455 less-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3456 less-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3457 less-equal[compile-time] 32767[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:3458 less-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3459 less-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3460 less-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3461 less-equal[compile-time] 32767[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:3462 less-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3463 less-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3464 less-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3465 less-equal[compile-time] 32767[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3466 less-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3467 less-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3468 less-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:3469 less-equal[compile-time] 32768[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -32768;
endcode
varvalue r False

$overflow on
code auto:3470 less-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3471 less-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3472 less-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:3473 less-equal[compile-time] 32768[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -32767;
endcode
varvalue r False

$overflow on
code auto:3474 less-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3475 less-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3476 less-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:3477 less-equal[compile-time] 32768[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -129;
endcode
varvalue r False

$overflow on
code auto:3478 less-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3479 less-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3480 less-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3481 less-equal[compile-time] 32768[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -128;
endcode
varvalue r False

$overflow on
code auto:3482 less-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3483 less-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3484 less-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3485 less-equal[compile-time] 32768[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= -1;
endcode
varvalue r False

$overflow on
code auto:3486 less-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3487 less-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3488 less-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3489 less-equal[compile-time] 32768[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3490 less-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3491 less-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3492 less-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3493 less-equal[compile-time] 32768[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:3494 less-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3495 less-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3496 less-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3497 less-equal[compile-time] 32768[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:3498 less-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3499 less-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3500 less-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3501 less-equal[compile-time] 32768[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 128;
endcode
varvalue r False

$overflow on
code auto:3502 less-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3503 less-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3504 less-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3505 less-equal[compile-time] 32768[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3506 less-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3507 less-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3508 less-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -32768;
endcode
varvalue r False

code auto:3509 less-equal[compile-time] 65535[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -32768;
endcode
varvalue r False

$overflow on
code auto:3510 less-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3511 less-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3512 less-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -32767;
endcode
varvalue r False

code auto:3513 less-equal[compile-time] 65535[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -32767;
endcode
varvalue r False

$overflow on
code auto:3514 less-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3515 less-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3516 less-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -129;
endcode
varvalue r False

code auto:3517 less-equal[compile-time] 65535[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -129;
endcode
varvalue r False

$overflow on
code auto:3518 less-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3519 less-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3520 less-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -128;
endcode
varvalue r False

code auto:3521 less-equal[compile-time] 65535[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -128;
endcode
varvalue r False

$overflow on
code auto:3522 less-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3523 less-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3524 less-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= -1;
endcode
varvalue r False

code auto:3525 less-equal[compile-time] 65535[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= -1;
endcode
varvalue r False

$overflow on
code auto:3526 less-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3527 less-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3528 less-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3529 less-equal[compile-time] 65535[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3530 less-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3531 less-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3532 less-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3533 less-equal[compile-time] 65535[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:3534 less-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3535 less-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3536 less-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3537 less-equal[compile-time] 65535[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:3538 less-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3539 less-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3540 less-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3541 less-equal[compile-time] 65535[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 128;
endcode
varvalue r False

$overflow on
code auto:3542 less-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3543 less-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3544 less-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3545 less-equal[compile-time] 65535[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3546 less-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3547 less-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3548 less-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3549 less-equal[compile-time] 0[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3550 less-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3551 less-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3552 less-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r True

code auto:3553 less-equal[compile-time] 0[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 1;
endcode
varvalue r True

$overflow on
code auto:3554 less-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3555 less-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3556 less-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r True

code auto:3557 less-equal[compile-time] 0[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 127;
endcode
varvalue r True

$overflow on
code auto:3558 less-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3559 less-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3560 less-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r True

code auto:3561 less-equal[compile-time] 0[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 128;
endcode
varvalue r True

$overflow on
code auto:3562 less-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3563 less-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3564 less-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3565 less-equal[compile-time] 0[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:3566 less-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3567 less-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3568 less-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3569 less-equal[compile-time] 255[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3570 less-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3571 less-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3572 less-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3573 less-equal[compile-time] 255[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 1;
endcode
varvalue r False

$overflow on
code auto:3574 less-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3575 less-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3576 less-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3577 less-equal[compile-time] 255[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 127;
endcode
varvalue r False

$overflow on
code auto:3578 less-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3579 less-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3580 less-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3581 less-equal[compile-time] 255[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 128;
endcode
varvalue r False

$overflow on
code auto:3582 less-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3583 less-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3584 less-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3585 less-equal[compile-time] 255[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:3586 less-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3587 less-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3588 less-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3589 less-equal[compile-time] 32767[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3590 less-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3591 less-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3592 less-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3593 less-equal[compile-time] 32767[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 1;
endcode
varvalue r False

$overflow on
code auto:3594 less-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3595 less-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3596 less-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3597 less-equal[compile-time] 32767[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 127;
endcode
varvalue r False

$overflow on
code auto:3598 less-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3599 less-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3600 less-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3601 less-equal[compile-time] 32767[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 128;
endcode
varvalue r False

$overflow on
code auto:3602 less-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3603 less-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3604 less-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3605 less-equal[compile-time] 32767[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:3606 less-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3607 less-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3608 less-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3609 less-equal[compile-time] 32768[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3610 less-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3611 less-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3612 less-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3613 less-equal[compile-time] 32768[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 1;
endcode
varvalue r False

$overflow on
code auto:3614 less-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3615 less-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3616 less-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3617 less-equal[compile-time] 32768[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 127;
endcode
varvalue r False

$overflow on
code auto:3618 less-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3619 less-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3620 less-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3621 less-equal[compile-time] 32768[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 128;
endcode
varvalue r False

$overflow on
code auto:3622 less-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3623 less-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3624 less-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3625 less-equal[compile-time] 32768[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3626 less-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3627 less-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3628 less-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3629 less-equal[compile-time] 65535[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3630 less-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3631 less-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3632 less-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 1;
endcode
varvalue r False

code auto:3633 less-equal[compile-time] 65535[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 1;
endcode
varvalue r False

$overflow on
code auto:3634 less-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3635 less-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3636 less-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 127;
endcode
varvalue r False

code auto:3637 less-equal[compile-time] 65535[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 127;
endcode
varvalue r False

$overflow on
code auto:3638 less-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3639 less-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3640 less-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 128;
endcode
varvalue r False

code auto:3641 less-equal[compile-time] 65535[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 128;
endcode
varvalue r False

$overflow on
code auto:3642 less-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3643 less-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3644 less-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3645 less-equal[compile-time] 65535[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3646 less-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3647 less-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3648 less-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3649 less-equal[compile-time] 0[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3650 less-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3651 less-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3652 less-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3653 less-equal[compile-time] 0[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:3654 less-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3655 less-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3656 less-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3657 less-equal[compile-time] 0[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3658 less-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3659 less-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3660 less-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3661 less-equal[compile-time] 0[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3662 less-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3663 less-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3664 less-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3665 less-equal[compile-time] 0[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3666 less-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3667 less-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3668 less-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3669 less-equal[compile-time] 255[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3670 less-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3671 less-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3672 less-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3673 less-equal[compile-time] 255[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:3674 less-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3675 less-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3676 less-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3677 less-equal[compile-time] 255[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3678 less-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3679 less-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3680 less-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3681 less-equal[compile-time] 255[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3682 less-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3683 less-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3684 less-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3685 less-equal[compile-time] 255[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3686 less-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3687 less-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3688 less-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3689 less-equal[compile-time] 32767[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3690 less-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3691 less-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3692 less-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3693 less-equal[compile-time] 32767[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:3694 less-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3695 less-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3696 less-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3697 less-equal[compile-time] 32767[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3698 less-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3699 less-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3700 less-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3701 less-equal[compile-time] 32767[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3702 less-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3703 less-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3704 less-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3705 less-equal[compile-time] 32767[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3706 less-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3707 less-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3708 less-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3709 less-equal[compile-time] 32768[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3710 less-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3711 less-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3712 less-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3713 less-equal[compile-time] 32768[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3714 less-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3715 less-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3716 less-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3717 less-equal[compile-time] 32768[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3718 less-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3719 less-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3720 less-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3721 less-equal[compile-time] 32768[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3722 less-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3723 less-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3724 less-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3725 less-equal[compile-time] 32768[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3726 less-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3727 less-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3728 less-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3729 less-equal[compile-time] 65535[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3730 less-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3731 less-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3732 less-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3733 less-equal[compile-time] 65535[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3734 less-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3735 less-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3736 less-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3737 less-equal[compile-time] 65535[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3738 less-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3739 less-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3740 less-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r False

code auto:3741 less-equal[compile-time] 65535[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32768;
endcode
varvalue r False

$overflow on
code auto:3742 less-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3743 less-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r True

code auto:3744 less-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3745 less-equal[compile-time] 65535[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3746 less-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3747 less-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3748 less-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r True

code auto:3749 less-equal[compile-time] 0[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 0;
endcode
varvalue r True

$overflow on
code auto:3750 less-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3751 less-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3752 less-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3753 less-equal[compile-time] 0[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 255;
endcode
varvalue r True

$overflow on
code auto:3754 less-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3755 less-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3756 less-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3757 less-equal[compile-time] 0[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3758 less-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3759 less-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3760 less-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3761 less-equal[compile-time] 0[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3762 less-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3763 less-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <= b;
endcode
varvalue r True

code auto:3764 less-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3765 less-equal[compile-time] 0[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3766 less-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3767 less-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r False

code auto:3768 less-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3769 less-equal[compile-time] 255[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 0;
endcode
varvalue r False

$overflow on
code auto:3770 less-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3771 less-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3772 less-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r True

code auto:3773 less-equal[compile-time] 255[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 255;
endcode
varvalue r True

$overflow on
code auto:3774 less-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3775 less-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3776 less-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3777 less-equal[compile-time] 255[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3778 less-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3779 less-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3780 less-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3781 less-equal[compile-time] 255[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3782 less-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3783 less-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <= b;
endcode
varvalue r True

code auto:3784 less-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3785 less-equal[compile-time] 255[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3786 less-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3787 less-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3788 less-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3789 less-equal[compile-time] 32767[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 0;
endcode
varvalue r False

$overflow on
code auto:3790 less-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3791 less-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r False

code auto:3792 less-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3793 less-equal[compile-time] 32767[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 255;
endcode
varvalue r False

$overflow on
code auto:3794 less-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3795 less-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3796 less-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r True

code auto:3797 less-equal[compile-time] 32767[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32767;
endcode
varvalue r True

$overflow on
code auto:3798 less-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3799 less-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3800 less-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3801 less-equal[compile-time] 32767[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3802 less-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3803 less-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <= b;
endcode
varvalue r True

code auto:3804 less-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3805 less-equal[compile-time] 32767[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3806 less-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3807 less-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3808 less-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3809 less-equal[compile-time] 32768[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 0;
endcode
varvalue r False

$overflow on
code auto:3810 less-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3811 less-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3812 less-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3813 less-equal[compile-time] 32768[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 255;
endcode
varvalue r False

$overflow on
code auto:3814 less-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3815 less-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r False

code auto:3816 less-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3817 less-equal[compile-time] 32768[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3818 less-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3819 less-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3820 less-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r True

code auto:3821 less-equal[compile-time] 32768[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 32768;
endcode
varvalue r True

$overflow on
code auto:3822 less-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3823 less-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 <= b;
endcode
varvalue r True

code auto:3824 less-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3825 less-equal[compile-time] 32768[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3826 less-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3827 less-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3828 less-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 0;
endcode
varvalue r False

code auto:3829 less-equal[compile-time] 65535[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 0;
endcode
varvalue r False

$overflow on
code auto:3830 less-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3831 less-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3832 less-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 255;
endcode
varvalue r False

code auto:3833 less-equal[compile-time] 65535[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 255;
endcode
varvalue r False

$overflow on
code auto:3834 less-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3835 less-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3836 less-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 32767;
endcode
varvalue r False

code auto:3837 less-equal[compile-time] 65535[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32767;
endcode
varvalue r False

$overflow on
code auto:3838 less-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3839 less-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r False

code auto:3840 less-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 32768;
endcode
varvalue r False

code auto:3841 less-equal[compile-time] 65535[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 32768;
endcode
varvalue r False

$overflow on
code auto:3842 less-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3843 less-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 <= b;
endcode
varvalue r True

code auto:3844 less-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <= 65535;
endcode
varvalue r True

code auto:3845 less-equal[compile-time] 65535[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <= 65535;
endcode
varvalue r True

$overflow on
code auto:3846 less-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3847 less-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := False <= b;
endcode
varvalue r True

code auto:3848 less-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a <= False;
endcode
varvalue r True

code auto:3849 less-equal[compile-time] 0[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False <= False;
endcode
varvalue r True

$overflow on
code auto:3850 less-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3851 less-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := False <= b;
endcode
varvalue r True

code auto:3852 less-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a <= True;
endcode
varvalue r True

code auto:3853 less-equal[compile-time] 0[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False <= True;
endcode
varvalue r True

$overflow on
code auto:3854 less-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3855 less-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := True <= b;
endcode
varvalue r False

code auto:3856 less-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a <= False;
endcode
varvalue r False

code auto:3857 less-equal[compile-time] 255[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True <= False;
endcode
varvalue r False

$overflow on
code auto:3858 less-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3859 less-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := True <= b;
endcode
varvalue r True

code auto:3860 less-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a <= True;
endcode
varvalue r True

code auto:3861 less-equal[compile-time] 255[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True <= True;
endcode
varvalue r True

$overflow on
code auto:3862 less-equal[Char] 0[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3863 less-equal[Char] 0[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #0 <= b;
endcode
varvalue r True

code auto:3864 less-equal[Char] 0[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <= #0;
endcode
varvalue r True

code auto:3865 less-equal[compile-time] 0[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <= #0;
endcode
varvalue r True

$overflow on
code auto:3866 less-equal[Char] 0[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3867 less-equal[Char] 0[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #0 <= b;
endcode
varvalue r True

code auto:3868 less-equal[Char] 0[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <= #31;
endcode
varvalue r True

code auto:3869 less-equal[compile-time] 0[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <= #31;
endcode
varvalue r True

$overflow on
code auto:3870 less-equal[Char] 0[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3871 less-equal[Char] 0[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #0 <= b;
endcode
varvalue r True

code auto:3872 less-equal[Char] 0[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <= ' ';
endcode
varvalue r True

code auto:3873 less-equal[compile-time] 0[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <= ' ';
endcode
varvalue r True

$overflow on
code auto:3874 less-equal[Char] 0[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3875 less-equal[Char] 0[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #0 <= b;
endcode
varvalue r True

code auto:3876 less-equal[Char] 0[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <= #255;
endcode
varvalue r True

code auto:3877 less-equal[compile-time] 0[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <= #255;
endcode
varvalue r True

$overflow on
code auto:3878 less-equal[Char] 31[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3879 less-equal[Char] 31[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #31 <= b;
endcode
varvalue r False

code auto:3880 less-equal[Char] 31[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <= #0;
endcode
varvalue r False

code auto:3881 less-equal[compile-time] 31[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <= #0;
endcode
varvalue r False

$overflow on
code auto:3882 less-equal[Char] 31[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3883 less-equal[Char] 31[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #31 <= b;
endcode
varvalue r True

code auto:3884 less-equal[Char] 31[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <= #31;
endcode
varvalue r True

code auto:3885 less-equal[compile-time] 31[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <= #31;
endcode
varvalue r True

$overflow on
code auto:3886 less-equal[Char] 31[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3887 less-equal[Char] 31[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #31 <= b;
endcode
varvalue r True

code auto:3888 less-equal[Char] 31[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <= ' ';
endcode
varvalue r True

code auto:3889 less-equal[compile-time] 31[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <= ' ';
endcode
varvalue r True

$overflow on
code auto:3890 less-equal[Char] 31[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3891 less-equal[Char] 31[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #31 <= b;
endcode
varvalue r True

code auto:3892 less-equal[Char] 31[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <= #255;
endcode
varvalue r True

code auto:3893 less-equal[compile-time] 31[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <= #255;
endcode
varvalue r True

$overflow on
code auto:3894 less-equal[Char] 32[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3895 less-equal[Char] 32[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := ' ' <= b;
endcode
varvalue r False

code auto:3896 less-equal[Char] 32[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <= #0;
endcode
varvalue r False

code auto:3897 less-equal[compile-time] 32[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <= #0;
endcode
varvalue r False

$overflow on
code auto:3898 less-equal[Char] 32[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #31;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3899 less-equal[Char] 32[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := ' ' <= b;
endcode
varvalue r False

code auto:3900 less-equal[Char] 32[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <= #31;
endcode
varvalue r False

code auto:3901 less-equal[compile-time] 32[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <= #31;
endcode
varvalue r False

$overflow on
code auto:3902 less-equal[Char] 32[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3903 less-equal[Char] 32[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := ' ' <= b;
endcode
varvalue r True

code auto:3904 less-equal[Char] 32[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <= ' ';
endcode
varvalue r True

code auto:3905 less-equal[compile-time] 32[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <= ' ';
endcode
varvalue r True

$overflow on
code auto:3906 less-equal[Char] 32[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3907 less-equal[Char] 32[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := ' ' <= b;
endcode
varvalue r True

code auto:3908 less-equal[Char] 32[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <= #255;
endcode
varvalue r True

code auto:3909 less-equal[compile-time] 32[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <= #255;
endcode
varvalue r True

$overflow on
code auto:3910 less-equal[Char] 255[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3911 less-equal[Char] 255[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #255 <= b;
endcode
varvalue r False

code auto:3912 less-equal[Char] 255[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <= #0;
endcode
varvalue r False

code auto:3913 less-equal[compile-time] 255[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <= #0;
endcode
varvalue r False

$overflow on
code auto:3914 less-equal[Char] 255[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3915 less-equal[Char] 255[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #255 <= b;
endcode
varvalue r False

code auto:3916 less-equal[Char] 255[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <= #31;
endcode
varvalue r False

code auto:3917 less-equal[compile-time] 255[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <= #31;
endcode
varvalue r False

$overflow on
code auto:3918 less-equal[Char] 255[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r False

code auto:3919 less-equal[Char] 255[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #255 <= b;
endcode
varvalue r False

code auto:3920 less-equal[Char] 255[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <= ' ';
endcode
varvalue r False

code auto:3921 less-equal[compile-time] 255[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <= ' ';
endcode
varvalue r False

$overflow on
code auto:3922 less-equal[Char] 255[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <= b;
endcode
varvalue r True

code auto:3923 less-equal[Char] 255[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #255 <= b;
endcode
varvalue r True

code auto:3924 less-equal[Char] 255[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <= #255;
endcode
varvalue r True

code auto:3925 less-equal[compile-time] 255[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <= #255;
endcode
varvalue r True

