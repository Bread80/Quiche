;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow on
code auto:2 equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3 equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r True

code auto:4 equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r True

code auto:5 equal[compile-time] -128[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -128;
endcode
varvalue r True

$overflow on
code auto:6 equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:7 equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:8 equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:9 equal[compile-time] -128[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -127;
endcode
varvalue r False

$overflow on
code auto:10 equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:11 equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:12 equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:13 equal[compile-time] -128[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -1;
endcode
varvalue r False

$overflow on
code auto:14 equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:15 equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:16 equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:17 equal[compile-time] -128[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:18 equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:19 equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:20 equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:21 equal[compile-time] -128[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:22 equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:23 equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:24 equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:25 equal[compile-time] -128[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:26 equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:27 equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:28 equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:29 equal[compile-time] -127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -128;
endcode
varvalue r False

$overflow on
code auto:30 equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:31 equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r True

code auto:32 equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r True

code auto:33 equal[compile-time] -127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -127;
endcode
varvalue r True

$overflow on
code auto:34 equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:35 equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:36 equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:37 equal[compile-time] -127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -1;
endcode
varvalue r False

$overflow on
code auto:38 equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:39 equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:40 equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:41 equal[compile-time] -127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 0;
endcode
varvalue r False

$overflow on
code auto:42 equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:43 equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:44 equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:45 equal[compile-time] -127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 1;
endcode
varvalue r False

$overflow on
code auto:46 equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:47 equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:48 equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:49 equal[compile-time] -127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 127;
endcode
varvalue r False

$overflow on
code auto:50 equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:51 equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:52 equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:53 equal[compile-time] -1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -128;
endcode
varvalue r False

$overflow on
code auto:54 equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:55 equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:56 equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:57 equal[compile-time] -1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -127;
endcode
varvalue r False

$overflow on
code auto:58 equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:59 equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r True

code auto:60 equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r True

code auto:61 equal[compile-time] -1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -1;
endcode
varvalue r True

$overflow on
code auto:62 equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:63 equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:64 equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:65 equal[compile-time] -1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:66 equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:67 equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:68 equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:69 equal[compile-time] -1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:70 equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:71 equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:72 equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:73 equal[compile-time] -1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:74 equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:75 equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:76 equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:77 equal[compile-time] 0[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:78 equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:79 equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:80 equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:81 equal[compile-time] 0[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -127;
endcode
varvalue r False

$overflow on
code auto:82 equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:83 equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:84 equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:85 equal[compile-time] 0[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:86 equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:87 equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:88 equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:89 equal[compile-time] 0[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:90 equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:91 equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:92 equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:93 equal[compile-time] 0[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:94 equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:95 equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:96 equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:97 equal[compile-time] 0[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:98 equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:99 equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:100 equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:101 equal[compile-time] 1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:102 equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:103 equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:104 equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:105 equal[compile-time] 1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -127;
endcode
varvalue r False

$overflow on
code auto:106 equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:107 equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:108 equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:109 equal[compile-time] 1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:110 equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:111 equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:112 equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:113 equal[compile-time] 1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:114 equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:115 equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:116 equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:117 equal[compile-time] 1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:118 equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:119 equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:120 equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:121 equal[compile-time] 1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:122 equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:123 equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:124 equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:125 equal[compile-time] 127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:126 equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:127 equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:128 equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:129 equal[compile-time] 127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -127;
endcode
varvalue r False

$overflow on
code auto:130 equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:131 equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:132 equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:133 equal[compile-time] 127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:134 equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:135 equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:136 equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:137 equal[compile-time] 127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:138 equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:139 equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:140 equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:141 equal[compile-time] 127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:142 equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:143 equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:144 equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:145 equal[compile-time] 127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:146 equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:147 equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:148 equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:149 equal[compile-time] -128[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -32768;
endcode
varvalue r False

$overflow on
code auto:150 equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:151 equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:152 equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:153 equal[compile-time] -128[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -32767;
endcode
varvalue r False

$overflow on
code auto:154 equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:155 equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:156 equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:157 equal[compile-time] -128[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -129;
endcode
varvalue r False

$overflow on
code auto:158 equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:159 equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r True

code auto:160 equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r True

code auto:161 equal[compile-time] -128[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -128;
endcode
varvalue r True

$overflow on
code auto:162 equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:163 equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:164 equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:165 equal[compile-time] -128[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -1;
endcode
varvalue r False

$overflow on
code auto:166 equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:167 equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:168 equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:169 equal[compile-time] -128[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:170 equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:171 equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:172 equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:173 equal[compile-time] -128[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:174 equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:175 equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:176 equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:177 equal[compile-time] -128[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:178 equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:179 equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:180 equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:181 equal[compile-time] -128[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 128;
endcode
varvalue r False

$overflow on
code auto:182 equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:183 equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:184 equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:185 equal[compile-time] -128[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:186 equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:187 equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:188 equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:189 equal[compile-time] -127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -32768;
endcode
varvalue r False

$overflow on
code auto:190 equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:191 equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:192 equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:193 equal[compile-time] -127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -32767;
endcode
varvalue r False

$overflow on
code auto:194 equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:195 equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:196 equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:197 equal[compile-time] -127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -129;
endcode
varvalue r False

$overflow on
code auto:198 equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:199 equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:200 equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:201 equal[compile-time] -127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -128;
endcode
varvalue r False

$overflow on
code auto:202 equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:203 equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:204 equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:205 equal[compile-time] -127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = -1;
endcode
varvalue r False

$overflow on
code auto:206 equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:207 equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:208 equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:209 equal[compile-time] -127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 0;
endcode
varvalue r False

$overflow on
code auto:210 equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:211 equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:212 equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:213 equal[compile-time] -127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 1;
endcode
varvalue r False

$overflow on
code auto:214 equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:215 equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:216 equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:217 equal[compile-time] -127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 127;
endcode
varvalue r False

$overflow on
code auto:218 equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:219 equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:220 equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:221 equal[compile-time] -127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 128;
endcode
varvalue r False

$overflow on
code auto:222 equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:223 equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:224 equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:225 equal[compile-time] -127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 32767;
endcode
varvalue r False

$overflow on
code auto:226 equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:227 equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:228 equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:229 equal[compile-time] -1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -32768;
endcode
varvalue r False

$overflow on
code auto:230 equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:231 equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:232 equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:233 equal[compile-time] -1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -32767;
endcode
varvalue r False

$overflow on
code auto:234 equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:235 equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:236 equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:237 equal[compile-time] -1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -129;
endcode
varvalue r False

$overflow on
code auto:238 equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:239 equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:240 equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:241 equal[compile-time] -1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -128;
endcode
varvalue r False

$overflow on
code auto:242 equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:243 equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r True

code auto:244 equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r True

code auto:245 equal[compile-time] -1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -1;
endcode
varvalue r True

$overflow on
code auto:246 equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:247 equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:248 equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:249 equal[compile-time] -1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:250 equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:251 equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:252 equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:253 equal[compile-time] -1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:254 equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:255 equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:256 equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:257 equal[compile-time] -1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:258 equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:259 equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:260 equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:261 equal[compile-time] -1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 128;
endcode
varvalue r False

$overflow on
code auto:262 equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:263 equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:264 equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:265 equal[compile-time] -1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:266 equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:267 equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:268 equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:269 equal[compile-time] 0[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32768;
endcode
varvalue r False

$overflow on
code auto:270 equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:271 equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:272 equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:273 equal[compile-time] 0[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32767;
endcode
varvalue r False

$overflow on
code auto:274 equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:275 equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:276 equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:277 equal[compile-time] 0[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -129;
endcode
varvalue r False

$overflow on
code auto:278 equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:279 equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:280 equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:281 equal[compile-time] 0[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:282 equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:283 equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:284 equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:285 equal[compile-time] 0[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:286 equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:287 equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:288 equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:289 equal[compile-time] 0[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:290 equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:291 equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:292 equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:293 equal[compile-time] 0[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:294 equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:295 equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:296 equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:297 equal[compile-time] 0[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:298 equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:299 equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:300 equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:301 equal[compile-time] 0[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:302 equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:303 equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:304 equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:305 equal[compile-time] 0[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:306 equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:307 equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:308 equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:309 equal[compile-time] 1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32768;
endcode
varvalue r False

$overflow on
code auto:310 equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:311 equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:312 equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:313 equal[compile-time] 1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32767;
endcode
varvalue r False

$overflow on
code auto:314 equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:315 equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:316 equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:317 equal[compile-time] 1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -129;
endcode
varvalue r False

$overflow on
code auto:318 equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:319 equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:320 equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:321 equal[compile-time] 1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:322 equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:323 equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:324 equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:325 equal[compile-time] 1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:326 equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:327 equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:328 equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:329 equal[compile-time] 1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:330 equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:331 equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:332 equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:333 equal[compile-time] 1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:334 equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:335 equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:336 equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:337 equal[compile-time] 1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:338 equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:339 equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:340 equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:341 equal[compile-time] 1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:342 equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:343 equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:344 equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:345 equal[compile-time] 1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:346 equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:347 equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:348 equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:349 equal[compile-time] 127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32768;
endcode
varvalue r False

$overflow on
code auto:350 equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:351 equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:352 equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:353 equal[compile-time] 127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32767;
endcode
varvalue r False

$overflow on
code auto:354 equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:355 equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:356 equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:357 equal[compile-time] 127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -129;
endcode
varvalue r False

$overflow on
code auto:358 equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:359 equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:360 equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:361 equal[compile-time] 127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:362 equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:363 equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:364 equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:365 equal[compile-time] 127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:366 equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:367 equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:368 equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:369 equal[compile-time] 127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:370 equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:371 equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:372 equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:373 equal[compile-time] 127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:374 equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:375 equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:376 equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:377 equal[compile-time] 127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:378 equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:379 equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:380 equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:381 equal[compile-time] 127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:382 equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:383 equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:384 equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:385 equal[compile-time] 127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:386 equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:387 equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:388 equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:389 equal[compile-time] -128[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:390 equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:391 equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:392 equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:393 equal[compile-time] -128[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:394 equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:395 equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:396 equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:397 equal[compile-time] -128[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:398 equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:399 equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:400 equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:401 equal[compile-time] -128[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 128;
endcode
varvalue r False

$overflow on
code auto:402 equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:403 equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:404 equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:405 equal[compile-time] -128[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:406 equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:407 equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:408 equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:409 equal[compile-time] -127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 0;
endcode
varvalue r False

$overflow on
code auto:410 equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:411 equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:412 equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:413 equal[compile-time] -127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 1;
endcode
varvalue r False

$overflow on
code auto:414 equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:415 equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:416 equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:417 equal[compile-time] -127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 127;
endcode
varvalue r False

$overflow on
code auto:418 equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:419 equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:420 equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:421 equal[compile-time] -127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 128;
endcode
varvalue r False

$overflow on
code auto:422 equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:423 equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:424 equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:425 equal[compile-time] -127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 255;
endcode
varvalue r False

$overflow on
code auto:426 equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:427 equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:428 equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:429 equal[compile-time] -1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:430 equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:431 equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:432 equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:433 equal[compile-time] -1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:434 equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:435 equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:436 equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:437 equal[compile-time] -1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:438 equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:439 equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:440 equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:441 equal[compile-time] -1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 128;
endcode
varvalue r False

$overflow on
code auto:442 equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:443 equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:444 equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:445 equal[compile-time] -1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:446 equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:447 equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:448 equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:449 equal[compile-time] 0[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:450 equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:451 equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:452 equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:453 equal[compile-time] 0[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:454 equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:455 equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:456 equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:457 equal[compile-time] 0[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:458 equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:459 equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:460 equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:461 equal[compile-time] 0[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:462 equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:463 equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:464 equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:465 equal[compile-time] 0[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:466 equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:467 equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:468 equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:469 equal[compile-time] 1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:470 equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:471 equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:472 equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:473 equal[compile-time] 1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:474 equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:475 equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:476 equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:477 equal[compile-time] 1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:478 equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:479 equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:480 equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:481 equal[compile-time] 1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:482 equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:483 equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:484 equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:485 equal[compile-time] 1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:486 equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:487 equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:488 equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:489 equal[compile-time] 127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:490 equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:491 equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:492 equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:493 equal[compile-time] 127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:494 equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:495 equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:496 equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:497 equal[compile-time] 127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:498 equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:499 equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:500 equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:501 equal[compile-time] 127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:502 equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:503 equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:504 equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:505 equal[compile-time] 127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:506 equal[Int16] -128[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:507 equal[Int16] -128[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:508 equal[Int16] -128[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:509 equal[compile-time] -128[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:510 equal[Int16] -128[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:511 equal[Int16] -128[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:512 equal[Int16] -128[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:513 equal[compile-time] -128[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:514 equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:515 equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:516 equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:517 equal[compile-time] -128[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:518 equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:519 equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:520 equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:521 equal[compile-time] -128[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32768;
endcode
varvalue r False

$overflow on
code auto:522 equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:523 equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:524 equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:525 equal[compile-time] -128[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 65535;
endcode
varvalue r False

$overflow on
code auto:526 equal[Int16] -127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:527 equal[Int16] -127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:528 equal[Int16] -127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:529 equal[compile-time] -127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 0;
endcode
varvalue r False

$overflow on
code auto:530 equal[Int16] -127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:531 equal[Int16] -127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:532 equal[Int16] -127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:533 equal[compile-time] -127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 255;
endcode
varvalue r False

$overflow on
code auto:534 equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:535 equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:536 equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:537 equal[compile-time] -127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 32767;
endcode
varvalue r False

$overflow on
code auto:538 equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:539 equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:540 equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:541 equal[compile-time] -127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 32768;
endcode
varvalue r False

$overflow on
code auto:542 equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:543 equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:544 equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:545 equal[compile-time] -127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 65535;
endcode
varvalue r False

$overflow on
code auto:546 equal[Int16] -1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:547 equal[Int16] -1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:548 equal[Int16] -1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:549 equal[compile-time] -1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:550 equal[Int16] -1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:551 equal[Int16] -1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:552 equal[Int16] -1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:553 equal[compile-time] -1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:554 equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:555 equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:556 equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:557 equal[compile-time] -1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:558 equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:559 equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:560 equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:561 equal[compile-time] -1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32768;
endcode
varvalue r False

$overflow on
code auto:562 equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:563 equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:564 equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:565 equal[compile-time] -1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 65535;
endcode
varvalue r False

$overflow on
code auto:566 equal[Int16] 0[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:567 equal[Int16] 0[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:568 equal[Int16] 0[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:569 equal[compile-time] 0[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:570 equal[Int16] 0[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:571 equal[Int16] 0[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:572 equal[Int16] 0[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:573 equal[compile-time] 0[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:574 equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:575 equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:576 equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:577 equal[compile-time] 0[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:578 equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:579 equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:580 equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:581 equal[compile-time] 0[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:582 equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:583 equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:584 equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:585 equal[compile-time] 0[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:586 equal[Int16] 1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:587 equal[Int16] 1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:588 equal[Int16] 1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:589 equal[compile-time] 1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:590 equal[Int16] 1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:591 equal[Int16] 1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:592 equal[Int16] 1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:593 equal[compile-time] 1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:594 equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:595 equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:596 equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:597 equal[compile-time] 1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:598 equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:599 equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:600 equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:601 equal[compile-time] 1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:602 equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:603 equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:604 equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:605 equal[compile-time] 1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:606 equal[Int16] 127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:607 equal[Int16] 127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:608 equal[Int16] 127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:609 equal[compile-time] 127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:610 equal[Int16] 127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:611 equal[Int16] 127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:612 equal[Int16] 127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:613 equal[compile-time] 127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:614 equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:615 equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:616 equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:617 equal[compile-time] 127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:618 equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:619 equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:620 equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:621 equal[compile-time] 127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:622 equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:623 equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:624 equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:625 equal[compile-time] 127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:626 equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:627 equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:628 equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:629 equal[compile-time] -128[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:630 equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:631 equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:632 equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:633 equal[compile-time] -128[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:634 equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:635 equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:636 equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:637 equal[compile-time] -128[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:638 equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:639 equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:640 equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:641 equal[compile-time] -128[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32768;
endcode
varvalue r False

$overflow on
code auto:642 equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:643 equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:644 equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:645 equal[compile-time] -128[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 65535;
endcode
varvalue r False

$overflow on
code auto:646 equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:647 equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:648 equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:649 equal[compile-time] -127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 0;
endcode
varvalue r False

$overflow on
code auto:650 equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:651 equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:652 equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:653 equal[compile-time] -127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 255;
endcode
varvalue r False

$overflow on
code auto:654 equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:655 equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:656 equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:657 equal[compile-time] -127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 32767;
endcode
varvalue r False

$overflow on
code auto:658 equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:659 equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:660 equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:661 equal[compile-time] -127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 32768;
endcode
varvalue r False

$overflow on
code auto:662 equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:663 equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -127 = b;
endcode
varvalue r False

code auto:664 equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:665 equal[compile-time] -127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 = 65535;
endcode
varvalue r False

$overflow on
code auto:666 equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:667 equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:668 equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:669 equal[compile-time] -1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:670 equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:671 equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:672 equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:673 equal[compile-time] -1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:674 equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:675 equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:676 equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:677 equal[compile-time] -1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:678 equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:679 equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:680 equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:681 equal[compile-time] -1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32768;
endcode
varvalue r False

$overflow on
code auto:682 equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:683 equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:684 equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:685 equal[compile-time] -1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 65535;
endcode
varvalue r False

$overflow on
code auto:686 equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:687 equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:688 equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:689 equal[compile-time] 0[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:690 equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:691 equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:692 equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:693 equal[compile-time] 0[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:694 equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:695 equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:696 equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:697 equal[compile-time] 0[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:698 equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:699 equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:700 equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:701 equal[compile-time] 0[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:702 equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:703 equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:704 equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:705 equal[compile-time] 0[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:706 equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:707 equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:708 equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:709 equal[compile-time] 1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:710 equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:711 equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:712 equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:713 equal[compile-time] 1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:714 equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:715 equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:716 equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:717 equal[compile-time] 1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:718 equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:719 equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:720 equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:721 equal[compile-time] 1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:722 equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:723 equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:724 equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:725 equal[compile-time] 1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:726 equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:727 equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:728 equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:729 equal[compile-time] 127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:730 equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:731 equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:732 equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:733 equal[compile-time] 127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:734 equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:735 equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:736 equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:737 equal[compile-time] 127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:738 equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:739 equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:740 equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:741 equal[compile-time] 127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:742 equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:743 equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:744 equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:745 equal[compile-time] 127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:746 equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:747 equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:748 equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:749 equal[compile-time] -32768[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -128;
endcode
varvalue r False

$overflow on
code auto:750 equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:751 equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:752 equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:753 equal[compile-time] -32768[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -127;
endcode
varvalue r False

$overflow on
code auto:754 equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:755 equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:756 equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:757 equal[compile-time] -32768[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -1;
endcode
varvalue r False

$overflow on
code auto:758 equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:759 equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:760 equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:761 equal[compile-time] -32768[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 0;
endcode
varvalue r False

$overflow on
code auto:762 equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:763 equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:764 equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:765 equal[compile-time] -32768[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 1;
endcode
varvalue r False

$overflow on
code auto:766 equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:767 equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:768 equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:769 equal[compile-time] -32768[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 127;
endcode
varvalue r False

$overflow on
code auto:770 equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:771 equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:772 equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:773 equal[compile-time] -32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -128;
endcode
varvalue r False

$overflow on
code auto:774 equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:775 equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:776 equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:777 equal[compile-time] -32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -127;
endcode
varvalue r False

$overflow on
code auto:778 equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:779 equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:780 equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:781 equal[compile-time] -32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -1;
endcode
varvalue r False

$overflow on
code auto:782 equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:783 equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:784 equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:785 equal[compile-time] -32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 0;
endcode
varvalue r False

$overflow on
code auto:786 equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:787 equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:788 equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:789 equal[compile-time] -32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 1;
endcode
varvalue r False

$overflow on
code auto:790 equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:791 equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:792 equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:793 equal[compile-time] -32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 127;
endcode
varvalue r False

$overflow on
code auto:794 equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:795 equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:796 equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:797 equal[compile-time] -129[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -128;
endcode
varvalue r False

$overflow on
code auto:798 equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:799 equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:800 equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:801 equal[compile-time] -129[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -127;
endcode
varvalue r False

$overflow on
code auto:802 equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:803 equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:804 equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:805 equal[compile-time] -129[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -1;
endcode
varvalue r False

$overflow on
code auto:806 equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:807 equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:808 equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:809 equal[compile-time] -129[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 0;
endcode
varvalue r False

$overflow on
code auto:810 equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:811 equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:812 equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:813 equal[compile-time] -129[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 1;
endcode
varvalue r False

$overflow on
code auto:814 equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:815 equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:816 equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:817 equal[compile-time] -129[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 127;
endcode
varvalue r False

$overflow on
code auto:818 equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:819 equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r True

code auto:820 equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r True

code auto:821 equal[compile-time] -128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -128;
endcode
varvalue r True

$overflow on
code auto:822 equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:823 equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:824 equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:825 equal[compile-time] -128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -127;
endcode
varvalue r False

$overflow on
code auto:826 equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:827 equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:828 equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:829 equal[compile-time] -128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -1;
endcode
varvalue r False

$overflow on
code auto:830 equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:831 equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:832 equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:833 equal[compile-time] -128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:834 equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:835 equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:836 equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:837 equal[compile-time] -128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:838 equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:839 equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:840 equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:841 equal[compile-time] -128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:842 equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:843 equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:844 equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:845 equal[compile-time] -1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -128;
endcode
varvalue r False

$overflow on
code auto:846 equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:847 equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:848 equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:849 equal[compile-time] -1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -127;
endcode
varvalue r False

$overflow on
code auto:850 equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:851 equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r True

code auto:852 equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r True

code auto:853 equal[compile-time] -1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -1;
endcode
varvalue r True

$overflow on
code auto:854 equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:855 equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:856 equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:857 equal[compile-time] -1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:858 equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:859 equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:860 equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:861 equal[compile-time] -1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:862 equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:863 equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:864 equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:865 equal[compile-time] -1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:866 equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:867 equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:868 equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:869 equal[compile-time] 0[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:870 equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:871 equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:872 equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:873 equal[compile-time] 0[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -127;
endcode
varvalue r False

$overflow on
code auto:874 equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:875 equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:876 equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:877 equal[compile-time] 0[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:878 equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:879 equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:880 equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:881 equal[compile-time] 0[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:882 equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:883 equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:884 equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:885 equal[compile-time] 0[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:886 equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:887 equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:888 equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:889 equal[compile-time] 0[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:890 equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:891 equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:892 equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:893 equal[compile-time] 1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:894 equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:895 equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:896 equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:897 equal[compile-time] 1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -127;
endcode
varvalue r False

$overflow on
code auto:898 equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:899 equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:900 equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:901 equal[compile-time] 1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:902 equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:903 equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:904 equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:905 equal[compile-time] 1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:906 equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:907 equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:908 equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:909 equal[compile-time] 1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:910 equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:911 equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:912 equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:913 equal[compile-time] 1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:914 equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:915 equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:916 equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:917 equal[compile-time] 127[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:918 equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:919 equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:920 equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:921 equal[compile-time] 127[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -127;
endcode
varvalue r False

$overflow on
code auto:922 equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:923 equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:924 equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:925 equal[compile-time] 127[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:926 equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:927 equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:928 equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:929 equal[compile-time] 127[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:930 equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:931 equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:932 equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:933 equal[compile-time] 127[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:934 equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:935 equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:936 equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:937 equal[compile-time] 127[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:938 equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:939 equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:940 equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:941 equal[compile-time] 128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -128;
endcode
varvalue r False

$overflow on
code auto:942 equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:943 equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:944 equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:945 equal[compile-time] 128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -127;
endcode
varvalue r False

$overflow on
code auto:946 equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:947 equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:948 equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:949 equal[compile-time] 128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -1;
endcode
varvalue r False

$overflow on
code auto:950 equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:951 equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:952 equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:953 equal[compile-time] 128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:954 equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:955 equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:956 equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:957 equal[compile-time] 128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:958 equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:959 equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:960 equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:961 equal[compile-time] 128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:962 equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:963 equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:964 equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:965 equal[compile-time] 32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:966 equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:967 equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:968 equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:969 equal[compile-time] 32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -127;
endcode
varvalue r False

$overflow on
code auto:970 equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:971 equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:972 equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:973 equal[compile-time] 32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:974 equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:975 equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:976 equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:977 equal[compile-time] 32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:978 equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:979 equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:980 equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:981 equal[compile-time] 32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:982 equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:983 equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:984 equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:985 equal[compile-time] 32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:986 equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:987 equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r True

code auto:988 equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r True

code auto:989 equal[compile-time] -32768[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -32768;
endcode
varvalue r True

$overflow on
code auto:990 equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:991 equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:992 equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:993 equal[compile-time] -32768[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -32767;
endcode
varvalue r False

$overflow on
code auto:994 equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:995 equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:996 equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:997 equal[compile-time] -32768[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -129;
endcode
varvalue r False

$overflow on
code auto:998 equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:999 equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1000 equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1001 equal[compile-time] -32768[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -128;
endcode
varvalue r False

$overflow on
code auto:1002 equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1003 equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1004 equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1005 equal[compile-time] -32768[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = -1;
endcode
varvalue r False

$overflow on
code auto:1006 equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1007 equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1008 equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1009 equal[compile-time] -32768[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 0;
endcode
varvalue r False

$overflow on
code auto:1010 equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1011 equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1012 equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1013 equal[compile-time] -32768[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 1;
endcode
varvalue r False

$overflow on
code auto:1014 equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1015 equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1016 equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1017 equal[compile-time] -32768[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 127;
endcode
varvalue r False

$overflow on
code auto:1018 equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1019 equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1020 equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1021 equal[compile-time] -32768[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 128;
endcode
varvalue r False

$overflow on
code auto:1022 equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1023 equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1024 equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1025 equal[compile-time] -32768[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:1026 equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1027 equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1028 equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1029 equal[compile-time] -32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -32768;
endcode
varvalue r False

$overflow on
code auto:1030 equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1031 equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r True

code auto:1032 equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r True

code auto:1033 equal[compile-time] -32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -32767;
endcode
varvalue r True

$overflow on
code auto:1034 equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1035 equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1036 equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1037 equal[compile-time] -32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -129;
endcode
varvalue r False

$overflow on
code auto:1038 equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1039 equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1040 equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1041 equal[compile-time] -32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -128;
endcode
varvalue r False

$overflow on
code auto:1042 equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1043 equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1044 equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1045 equal[compile-time] -32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = -1;
endcode
varvalue r False

$overflow on
code auto:1046 equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1047 equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1048 equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1049 equal[compile-time] -32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1050 equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1051 equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1052 equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1053 equal[compile-time] -32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 1;
endcode
varvalue r False

$overflow on
code auto:1054 equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1055 equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1056 equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1057 equal[compile-time] -32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 127;
endcode
varvalue r False

$overflow on
code auto:1058 equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1059 equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1060 equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1061 equal[compile-time] -32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 128;
endcode
varvalue r False

$overflow on
code auto:1062 equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1063 equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1064 equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1065 equal[compile-time] -32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 32767;
endcode
varvalue r False

$overflow on
code auto:1066 equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1067 equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1068 equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1069 equal[compile-time] -129[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -32768;
endcode
varvalue r False

$overflow on
code auto:1070 equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1071 equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1072 equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1073 equal[compile-time] -129[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -32767;
endcode
varvalue r False

$overflow on
code auto:1074 equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1075 equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r True

code auto:1076 equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r True

code auto:1077 equal[compile-time] -129[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -129;
endcode
varvalue r True

$overflow on
code auto:1078 equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1079 equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1080 equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1081 equal[compile-time] -129[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -128;
endcode
varvalue r False

$overflow on
code auto:1082 equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1083 equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1084 equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1085 equal[compile-time] -129[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = -1;
endcode
varvalue r False

$overflow on
code auto:1086 equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1087 equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1088 equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1089 equal[compile-time] -129[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 0;
endcode
varvalue r False

$overflow on
code auto:1090 equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1091 equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1092 equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1093 equal[compile-time] -129[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 1;
endcode
varvalue r False

$overflow on
code auto:1094 equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1095 equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1096 equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1097 equal[compile-time] -129[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 127;
endcode
varvalue r False

$overflow on
code auto:1098 equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1099 equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1100 equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1101 equal[compile-time] -129[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 128;
endcode
varvalue r False

$overflow on
code auto:1102 equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1103 equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1104 equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1105 equal[compile-time] -129[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 32767;
endcode
varvalue r False

$overflow on
code auto:1106 equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1107 equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1108 equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1109 equal[compile-time] -128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -32768;
endcode
varvalue r False

$overflow on
code auto:1110 equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1111 equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1112 equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1113 equal[compile-time] -128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -32767;
endcode
varvalue r False

$overflow on
code auto:1114 equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1115 equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1116 equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1117 equal[compile-time] -128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -129;
endcode
varvalue r False

$overflow on
code auto:1118 equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1119 equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r True

code auto:1120 equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r True

code auto:1121 equal[compile-time] -128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -128;
endcode
varvalue r True

$overflow on
code auto:1122 equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1123 equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1124 equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1125 equal[compile-time] -128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = -1;
endcode
varvalue r False

$overflow on
code auto:1126 equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1127 equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1128 equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1129 equal[compile-time] -128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:1130 equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1131 equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1132 equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1133 equal[compile-time] -128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:1134 equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1135 equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1136 equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1137 equal[compile-time] -128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:1138 equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1139 equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1140 equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1141 equal[compile-time] -128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 128;
endcode
varvalue r False

$overflow on
code auto:1142 equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1143 equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1144 equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1145 equal[compile-time] -128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1146 equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1147 equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1148 equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1149 equal[compile-time] -1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -32768;
endcode
varvalue r False

$overflow on
code auto:1150 equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1151 equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1152 equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1153 equal[compile-time] -1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -32767;
endcode
varvalue r False

$overflow on
code auto:1154 equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1155 equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1156 equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1157 equal[compile-time] -1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -129;
endcode
varvalue r False

$overflow on
code auto:1158 equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1159 equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1160 equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1161 equal[compile-time] -1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -128;
endcode
varvalue r False

$overflow on
code auto:1162 equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1163 equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r True

code auto:1164 equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r True

code auto:1165 equal[compile-time] -1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = -1;
endcode
varvalue r True

$overflow on
code auto:1166 equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1167 equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1168 equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1169 equal[compile-time] -1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:1170 equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1171 equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1172 equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1173 equal[compile-time] -1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:1174 equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1175 equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1176 equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1177 equal[compile-time] -1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:1178 equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1179 equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1180 equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1181 equal[compile-time] -1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 128;
endcode
varvalue r False

$overflow on
code auto:1182 equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1183 equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1184 equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1185 equal[compile-time] -1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1186 equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1187 equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1188 equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1189 equal[compile-time] 0[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32768;
endcode
varvalue r False

$overflow on
code auto:1190 equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1191 equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1192 equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1193 equal[compile-time] 0[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32767;
endcode
varvalue r False

$overflow on
code auto:1194 equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1195 equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1196 equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1197 equal[compile-time] 0[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -129;
endcode
varvalue r False

$overflow on
code auto:1198 equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1199 equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1200 equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1201 equal[compile-time] 0[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:1202 equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1203 equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1204 equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1205 equal[compile-time] 0[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:1206 equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1207 equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:1208 equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:1209 equal[compile-time] 0[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:1210 equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1211 equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1212 equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1213 equal[compile-time] 0[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:1214 equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1215 equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1216 equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1217 equal[compile-time] 0[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:1218 equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1219 equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1220 equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1221 equal[compile-time] 0[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:1222 equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1223 equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1224 equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1225 equal[compile-time] 0[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:1226 equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1227 equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1228 equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1229 equal[compile-time] 1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32768;
endcode
varvalue r False

$overflow on
code auto:1230 equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1231 equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1232 equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1233 equal[compile-time] 1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32767;
endcode
varvalue r False

$overflow on
code auto:1234 equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1235 equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1236 equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1237 equal[compile-time] 1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -129;
endcode
varvalue r False

$overflow on
code auto:1238 equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1239 equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1240 equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1241 equal[compile-time] 1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:1242 equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1243 equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1244 equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1245 equal[compile-time] 1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:1246 equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1247 equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1248 equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1249 equal[compile-time] 1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:1250 equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1251 equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:1252 equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:1253 equal[compile-time] 1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:1254 equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1255 equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1256 equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1257 equal[compile-time] 1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:1258 equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1259 equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1260 equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1261 equal[compile-time] 1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:1262 equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1263 equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1264 equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1265 equal[compile-time] 1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1266 equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1267 equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1268 equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1269 equal[compile-time] 127[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32768;
endcode
varvalue r False

$overflow on
code auto:1270 equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1271 equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1272 equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1273 equal[compile-time] 127[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32767;
endcode
varvalue r False

$overflow on
code auto:1274 equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1275 equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1276 equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1277 equal[compile-time] 127[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -129;
endcode
varvalue r False

$overflow on
code auto:1278 equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1279 equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1280 equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1281 equal[compile-time] 127[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:1282 equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1283 equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1284 equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1285 equal[compile-time] 127[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:1286 equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1287 equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1288 equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1289 equal[compile-time] 127[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:1290 equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1291 equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1292 equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1293 equal[compile-time] 127[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:1294 equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1295 equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:1296 equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:1297 equal[compile-time] 127[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:1298 equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1299 equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1300 equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1301 equal[compile-time] 127[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:1302 equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1303 equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1304 equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1305 equal[compile-time] 127[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:1306 equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1307 equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1308 equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1309 equal[compile-time] 128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -32768;
endcode
varvalue r False

$overflow on
code auto:1310 equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1311 equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1312 equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1313 equal[compile-time] 128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -32767;
endcode
varvalue r False

$overflow on
code auto:1314 equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1315 equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1316 equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1317 equal[compile-time] 128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -129;
endcode
varvalue r False

$overflow on
code auto:1318 equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1319 equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1320 equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1321 equal[compile-time] 128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -128;
endcode
varvalue r False

$overflow on
code auto:1322 equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1323 equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1324 equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1325 equal[compile-time] 128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -1;
endcode
varvalue r False

$overflow on
code auto:1326 equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1327 equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1328 equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1329 equal[compile-time] 128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:1330 equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1331 equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1332 equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1333 equal[compile-time] 128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:1334 equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1335 equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1336 equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1337 equal[compile-time] 128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:1338 equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1339 equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r True

code auto:1340 equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r True

code auto:1341 equal[compile-time] 128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 128;
endcode
varvalue r True

$overflow on
code auto:1342 equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1343 equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1344 equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1345 equal[compile-time] 128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1346 equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1347 equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1348 equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:1349 equal[compile-time] 32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32768;
endcode
varvalue r False

$overflow on
code auto:1350 equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1351 equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1352 equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:1353 equal[compile-time] 32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32767;
endcode
varvalue r False

$overflow on
code auto:1354 equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1355 equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1356 equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:1357 equal[compile-time] 32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -129;
endcode
varvalue r False

$overflow on
code auto:1358 equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1359 equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1360 equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1361 equal[compile-time] 32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:1362 equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1363 equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1364 equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1365 equal[compile-time] 32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:1366 equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1367 equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1368 equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1369 equal[compile-time] 32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1370 equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1371 equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1372 equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1373 equal[compile-time] 32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:1374 equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1375 equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1376 equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1377 equal[compile-time] 32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:1378 equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1379 equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1380 equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1381 equal[compile-time] 32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:1382 equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1383 equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:1384 equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:1385 equal[compile-time] 32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:1386 equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1387 equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1388 equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1389 equal[compile-time] -32768[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 0;
endcode
varvalue r False

$overflow on
code auto:1390 equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1391 equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1392 equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1393 equal[compile-time] -32768[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 1;
endcode
varvalue r False

$overflow on
code auto:1394 equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1395 equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1396 equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1397 equal[compile-time] -32768[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 127;
endcode
varvalue r False

$overflow on
code auto:1398 equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1399 equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1400 equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1401 equal[compile-time] -32768[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 128;
endcode
varvalue r False

$overflow on
code auto:1402 equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1403 equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1404 equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1405 equal[compile-time] -32768[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 255;
endcode
varvalue r False

$overflow on
code auto:1406 equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1407 equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1408 equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1409 equal[compile-time] -32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1410 equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1411 equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1412 equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1413 equal[compile-time] -32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 1;
endcode
varvalue r False

$overflow on
code auto:1414 equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1415 equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1416 equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1417 equal[compile-time] -32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 127;
endcode
varvalue r False

$overflow on
code auto:1418 equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1419 equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1420 equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1421 equal[compile-time] -32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 128;
endcode
varvalue r False

$overflow on
code auto:1422 equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1423 equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1424 equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1425 equal[compile-time] -32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1426 equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1427 equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1428 equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1429 equal[compile-time] -129[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 0;
endcode
varvalue r False

$overflow on
code auto:1430 equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1431 equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1432 equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1433 equal[compile-time] -129[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 1;
endcode
varvalue r False

$overflow on
code auto:1434 equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1435 equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1436 equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1437 equal[compile-time] -129[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 127;
endcode
varvalue r False

$overflow on
code auto:1438 equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1439 equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1440 equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1441 equal[compile-time] -129[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 128;
endcode
varvalue r False

$overflow on
code auto:1442 equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1443 equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1444 equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1445 equal[compile-time] -129[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 255;
endcode
varvalue r False

$overflow on
code auto:1446 equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1447 equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1448 equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1449 equal[compile-time] -128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:1450 equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1451 equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1452 equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1453 equal[compile-time] -128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 1;
endcode
varvalue r False

$overflow on
code auto:1454 equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1455 equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1456 equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1457 equal[compile-time] -128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 127;
endcode
varvalue r False

$overflow on
code auto:1458 equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1459 equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1460 equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1461 equal[compile-time] -128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 128;
endcode
varvalue r False

$overflow on
code auto:1462 equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1463 equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1464 equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1465 equal[compile-time] -128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:1466 equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1467 equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1468 equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1469 equal[compile-time] -1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:1470 equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1471 equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1472 equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1473 equal[compile-time] -1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 1;
endcode
varvalue r False

$overflow on
code auto:1474 equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1475 equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1476 equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1477 equal[compile-time] -1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 127;
endcode
varvalue r False

$overflow on
code auto:1478 equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1479 equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1480 equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1481 equal[compile-time] -1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 128;
endcode
varvalue r False

$overflow on
code auto:1482 equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1483 equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1484 equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1485 equal[compile-time] -1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:1486 equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1487 equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:1488 equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:1489 equal[compile-time] 0[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:1490 equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1491 equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1492 equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1493 equal[compile-time] 0[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:1494 equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1495 equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1496 equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1497 equal[compile-time] 0[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:1498 equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1499 equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1500 equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1501 equal[compile-time] 0[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:1502 equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1503 equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1504 equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1505 equal[compile-time] 0[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:1506 equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1507 equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1508 equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1509 equal[compile-time] 1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:1510 equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1511 equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:1512 equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:1513 equal[compile-time] 1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:1514 equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1515 equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1516 equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1517 equal[compile-time] 1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:1518 equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1519 equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1520 equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1521 equal[compile-time] 1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:1522 equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1523 equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1524 equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1525 equal[compile-time] 1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:1526 equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1527 equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1528 equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1529 equal[compile-time] 127[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:1530 equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1531 equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1532 equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1533 equal[compile-time] 127[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:1534 equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1535 equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:1536 equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:1537 equal[compile-time] 127[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:1538 equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1539 equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1540 equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1541 equal[compile-time] 127[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:1542 equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1543 equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1544 equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1545 equal[compile-time] 127[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:1546 equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1547 equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1548 equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1549 equal[compile-time] 128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:1550 equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1551 equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1552 equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1553 equal[compile-time] 128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:1554 equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1555 equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1556 equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1557 equal[compile-time] 128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:1558 equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1559 equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r True

code auto:1560 equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r True

code auto:1561 equal[compile-time] 128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 128;
endcode
varvalue r True

$overflow on
code auto:1562 equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1563 equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1564 equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1565 equal[compile-time] 128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:1566 equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1567 equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1568 equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1569 equal[compile-time] 32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1570 equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1571 equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1572 equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:1573 equal[compile-time] 32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:1574 equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1575 equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1576 equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:1577 equal[compile-time] 32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:1578 equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1579 equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1580 equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:1581 equal[compile-time] 32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:1582 equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1583 equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1584 equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1585 equal[compile-time] 32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1586 equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1587 equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1588 equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1589 equal[compile-time] -32768[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 0;
endcode
varvalue r False

$overflow on
code auto:1590 equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1591 equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1592 equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1593 equal[compile-time] -32768[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 255;
endcode
varvalue r False

$overflow on
code auto:1594 equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1595 equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1596 equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1597 equal[compile-time] -32768[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:1598 equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1599 equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1600 equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1601 equal[compile-time] -32768[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 32768;
endcode
varvalue r False

$overflow on
code auto:1602 equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1603 equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1604 equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1605 equal[compile-time] -32768[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:1606 equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1607 equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1608 equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1609 equal[compile-time] -32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1610 equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1611 equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1612 equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1613 equal[compile-time] -32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1614 equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1615 equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1616 equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1617 equal[compile-time] -32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 32767;
endcode
varvalue r False

$overflow on
code auto:1618 equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1619 equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1620 equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1621 equal[compile-time] -32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:1622 equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1623 equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1624 equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1625 equal[compile-time] -32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:1626 equal[Int16] -129[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1627 equal[Int16] -129[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1628 equal[Int16] -129[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1629 equal[compile-time] -129[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 0;
endcode
varvalue r False

$overflow on
code auto:1630 equal[Int16] -129[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1631 equal[Int16] -129[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1632 equal[Int16] -129[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1633 equal[compile-time] -129[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 255;
endcode
varvalue r False

$overflow on
code auto:1634 equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1635 equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1636 equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1637 equal[compile-time] -129[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 32767;
endcode
varvalue r False

$overflow on
code auto:1638 equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1639 equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1640 equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1641 equal[compile-time] -129[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 32768;
endcode
varvalue r False

$overflow on
code auto:1642 equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1643 equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1644 equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1645 equal[compile-time] -129[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 65535;
endcode
varvalue r False

$overflow on
code auto:1646 equal[Int16] -128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1647 equal[Int16] -128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1648 equal[Int16] -128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1649 equal[compile-time] -128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:1650 equal[Int16] -128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1651 equal[Int16] -128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1652 equal[Int16] -128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1653 equal[compile-time] -128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:1654 equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1655 equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1656 equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1657 equal[compile-time] -128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1658 equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1659 equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1660 equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1661 equal[compile-time] -128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32768;
endcode
varvalue r False

$overflow on
code auto:1662 equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1663 equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1664 equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1665 equal[compile-time] -128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 65535;
endcode
varvalue r False

$overflow on
code auto:1666 equal[Int16] -1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1667 equal[Int16] -1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1668 equal[Int16] -1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1669 equal[compile-time] -1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:1670 equal[Int16] -1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1671 equal[Int16] -1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1672 equal[Int16] -1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1673 equal[compile-time] -1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:1674 equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1675 equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1676 equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1677 equal[compile-time] -1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1678 equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1679 equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1680 equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1681 equal[compile-time] -1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32768;
endcode
varvalue r False

$overflow on
code auto:1682 equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1683 equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1684 equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1685 equal[compile-time] -1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 65535;
endcode
varvalue r False

$overflow on
code auto:1686 equal[Int16] 0[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1687 equal[Int16] 0[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:1688 equal[Int16] 0[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:1689 equal[compile-time] 0[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:1690 equal[Int16] 0[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1691 equal[Int16] 0[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1692 equal[Int16] 0[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1693 equal[compile-time] 0[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:1694 equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1695 equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1696 equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1697 equal[compile-time] 0[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:1698 equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1699 equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1700 equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1701 equal[compile-time] 0[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:1702 equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1703 equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1704 equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1705 equal[compile-time] 0[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:1706 equal[Int16] 1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1707 equal[Int16] 1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1708 equal[Int16] 1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1709 equal[compile-time] 1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:1710 equal[Int16] 1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1711 equal[Int16] 1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1712 equal[Int16] 1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1713 equal[compile-time] 1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:1714 equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1715 equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1716 equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1717 equal[compile-time] 1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1718 equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1719 equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1720 equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1721 equal[compile-time] 1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:1722 equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1723 equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1724 equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1725 equal[compile-time] 1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:1726 equal[Int16] 127[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1727 equal[Int16] 127[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1728 equal[Int16] 127[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1729 equal[compile-time] 127[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:1730 equal[Int16] 127[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1731 equal[Int16] 127[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1732 equal[Int16] 127[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1733 equal[compile-time] 127[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:1734 equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1735 equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1736 equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1737 equal[compile-time] 127[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:1738 equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1739 equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1740 equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1741 equal[compile-time] 127[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:1742 equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1743 equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1744 equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1745 equal[compile-time] 127[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:1746 equal[Int16] 128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1747 equal[Int16] 128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1748 equal[Int16] 128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1749 equal[compile-time] 128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:1750 equal[Int16] 128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1751 equal[Int16] 128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1752 equal[Int16] 128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1753 equal[compile-time] 128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:1754 equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1755 equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1756 equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1757 equal[compile-time] 128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1758 equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1759 equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1760 equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1761 equal[compile-time] 128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32768;
endcode
varvalue r False

$overflow on
code auto:1762 equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1763 equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1764 equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1765 equal[compile-time] 128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 65535;
endcode
varvalue r False

$overflow on
code auto:1766 equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1767 equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1768 equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1769 equal[compile-time] 32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1770 equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1771 equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1772 equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1773 equal[compile-time] 32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1774 equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1775 equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:1776 equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:1777 equal[compile-time] 32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:1778 equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1779 equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1780 equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1781 equal[compile-time] 32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:1782 equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1783 equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1784 equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1785 equal[compile-time] 32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:1786 equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1787 equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1788 equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1789 equal[compile-time] -32768[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 0;
endcode
varvalue r False

$overflow on
code auto:1790 equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1791 equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1792 equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1793 equal[compile-time] -32768[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 255;
endcode
varvalue r False

$overflow on
code auto:1794 equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1795 equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1796 equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1797 equal[compile-time] -32768[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:1798 equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1799 equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1800 equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1801 equal[compile-time] -32768[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 32768;
endcode
varvalue r False

$overflow on
code auto:1802 equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1803 equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32768 = b;
endcode
varvalue r False

code auto:1804 equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1805 equal[compile-time] -32768[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:1806 equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1807 equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1808 equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1809 equal[compile-time] -32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1810 equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1811 equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1812 equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1813 equal[compile-time] -32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1814 equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1815 equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1816 equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1817 equal[compile-time] -32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 32767;
endcode
varvalue r False

$overflow on
code auto:1818 equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1819 equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1820 equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1821 equal[compile-time] -32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:1822 equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1823 equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32767 = b;
endcode
varvalue r False

code auto:1824 equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1825 equal[compile-time] -32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:1826 equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1827 equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1828 equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1829 equal[compile-time] -129[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 0;
endcode
varvalue r False

$overflow on
code auto:1830 equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1831 equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1832 equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1833 equal[compile-time] -129[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 255;
endcode
varvalue r False

$overflow on
code auto:1834 equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1835 equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1836 equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1837 equal[compile-time] -129[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 32767;
endcode
varvalue r False

$overflow on
code auto:1838 equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1839 equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1840 equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1841 equal[compile-time] -129[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 32768;
endcode
varvalue r False

$overflow on
code auto:1842 equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1843 equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -129 = b;
endcode
varvalue r False

code auto:1844 equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1845 equal[compile-time] -129[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 = 65535;
endcode
varvalue r False

$overflow on
code auto:1846 equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1847 equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1848 equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1849 equal[compile-time] -128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 0;
endcode
varvalue r False

$overflow on
code auto:1850 equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1851 equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1852 equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1853 equal[compile-time] -128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 255;
endcode
varvalue r False

$overflow on
code auto:1854 equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1855 equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1856 equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1857 equal[compile-time] -128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1858 equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1859 equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1860 equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1861 equal[compile-time] -128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 32768;
endcode
varvalue r False

$overflow on
code auto:1862 equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1863 equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 = b;
endcode
varvalue r False

code auto:1864 equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1865 equal[compile-time] -128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 = 65535;
endcode
varvalue r False

$overflow on
code auto:1866 equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1867 equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1868 equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1869 equal[compile-time] -1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 0;
endcode
varvalue r False

$overflow on
code auto:1870 equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1871 equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1872 equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1873 equal[compile-time] -1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 255;
endcode
varvalue r False

$overflow on
code auto:1874 equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1875 equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1876 equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1877 equal[compile-time] -1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1878 equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1879 equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1880 equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1881 equal[compile-time] -1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 32768;
endcode
varvalue r False

$overflow on
code auto:1882 equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1883 equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 = b;
endcode
varvalue r False

code auto:1884 equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1885 equal[compile-time] -1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 = 65535;
endcode
varvalue r False

$overflow on
code auto:1886 equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1887 equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:1888 equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:1889 equal[compile-time] 0[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:1890 equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1891 equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1892 equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1893 equal[compile-time] 0[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:1894 equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1895 equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1896 equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1897 equal[compile-time] 0[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:1898 equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1899 equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1900 equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1901 equal[compile-time] 0[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:1902 equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1903 equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1904 equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1905 equal[compile-time] 0[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:1906 equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1907 equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1908 equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1909 equal[compile-time] 1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:1910 equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1911 equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1912 equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1913 equal[compile-time] 1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:1914 equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1915 equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1916 equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1917 equal[compile-time] 1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:1918 equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1919 equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1920 equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1921 equal[compile-time] 1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:1922 equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1923 equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:1924 equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1925 equal[compile-time] 1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:1926 equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1927 equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1928 equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1929 equal[compile-time] 127[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:1930 equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1931 equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1932 equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1933 equal[compile-time] 127[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:1934 equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1935 equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1936 equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1937 equal[compile-time] 127[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:1938 equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1939 equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1940 equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1941 equal[compile-time] 127[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:1942 equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1943 equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:1944 equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1945 equal[compile-time] 127[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:1946 equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1947 equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1948 equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1949 equal[compile-time] 128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:1950 equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1951 equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1952 equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1953 equal[compile-time] 128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:1954 equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1955 equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1956 equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:1957 equal[compile-time] 128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:1958 equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1959 equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1960 equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1961 equal[compile-time] 128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32768;
endcode
varvalue r False

$overflow on
code auto:1962 equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1963 equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:1964 equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1965 equal[compile-time] 128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 65535;
endcode
varvalue r False

$overflow on
code auto:1966 equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1967 equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1968 equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:1969 equal[compile-time] 32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:1970 equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1971 equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1972 equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:1973 equal[compile-time] 32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:1974 equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1975 equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:1976 equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:1977 equal[compile-time] 32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:1978 equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1979 equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1980 equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:1981 equal[compile-time] 32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:1982 equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1983 equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:1984 equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:1985 equal[compile-time] 32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:1986 equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1987 equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1988 equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:1989 equal[compile-time] 0[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:1990 equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1991 equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1992 equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:1993 equal[compile-time] 0[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -127;
endcode
varvalue r False

$overflow on
code auto:1994 equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:1995 equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:1996 equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:1997 equal[compile-time] 0[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:1998 equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:1999 equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2000 equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2001 equal[compile-time] 0[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2002 equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2003 equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2004 equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2005 equal[compile-time] 0[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2006 equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2007 equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2008 equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2009 equal[compile-time] 0[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2010 equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2011 equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2012 equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2013 equal[compile-time] 1[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:2014 equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2015 equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2016 equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2017 equal[compile-time] 1[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -127;
endcode
varvalue r False

$overflow on
code auto:2018 equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2019 equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2020 equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2021 equal[compile-time] 1[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:2022 equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2023 equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2024 equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2025 equal[compile-time] 1[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:2026 equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2027 equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:2028 equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:2029 equal[compile-time] 1[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:2030 equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2031 equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2032 equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2033 equal[compile-time] 1[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:2034 equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2035 equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2036 equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2037 equal[compile-time] 127[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:2038 equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2039 equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2040 equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2041 equal[compile-time] 127[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -127;
endcode
varvalue r False

$overflow on
code auto:2042 equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2043 equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2044 equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2045 equal[compile-time] 127[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:2046 equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2047 equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2048 equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2049 equal[compile-time] 127[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:2050 equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2051 equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2052 equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2053 equal[compile-time] 127[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:2054 equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2055 equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:2056 equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:2057 equal[compile-time] 127[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:2058 equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2059 equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2060 equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2061 equal[compile-time] 128[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -128;
endcode
varvalue r False

$overflow on
code auto:2062 equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2063 equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2064 equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2065 equal[compile-time] 128[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -127;
endcode
varvalue r False

$overflow on
code auto:2066 equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2067 equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2068 equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2069 equal[compile-time] 128[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -1;
endcode
varvalue r False

$overflow on
code auto:2070 equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2071 equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2072 equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2073 equal[compile-time] 128[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:2074 equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2075 equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2076 equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2077 equal[compile-time] 128[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:2078 equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2079 equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2080 equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2081 equal[compile-time] 128[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:2082 equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2083 equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2084 equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2085 equal[compile-time] 255[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:2086 equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2087 equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2088 equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2089 equal[compile-time] 255[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -127;
endcode
varvalue r False

$overflow on
code auto:2090 equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2091 equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2092 equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2093 equal[compile-time] 255[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:2094 equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2095 equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2096 equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2097 equal[compile-time] 255[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2098 equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2099 equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2100 equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2101 equal[compile-time] 255[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2102 equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2103 equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2104 equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2105 equal[compile-time] 255[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2106 equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2107 equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2108 equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2109 equal[compile-time] 0[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32768;
endcode
varvalue r False

$overflow on
code auto:2110 equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2111 equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2112 equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2113 equal[compile-time] 0[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32767;
endcode
varvalue r False

$overflow on
code auto:2114 equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2115 equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2116 equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2117 equal[compile-time] 0[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -129;
endcode
varvalue r False

$overflow on
code auto:2118 equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2119 equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2120 equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2121 equal[compile-time] 0[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:2122 equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2123 equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2124 equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2125 equal[compile-time] 0[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:2126 equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2127 equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2128 equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2129 equal[compile-time] 0[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2130 equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2131 equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2132 equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2133 equal[compile-time] 0[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2134 equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2135 equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2136 equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2137 equal[compile-time] 0[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2138 equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2139 equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2140 equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2141 equal[compile-time] 0[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:2142 equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2143 equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2144 equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2145 equal[compile-time] 0[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:2146 equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2147 equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2148 equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2149 equal[compile-time] 1[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32768;
endcode
varvalue r False

$overflow on
code auto:2150 equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2151 equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2152 equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2153 equal[compile-time] 1[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -32767;
endcode
varvalue r False

$overflow on
code auto:2154 equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2155 equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2156 equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2157 equal[compile-time] 1[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -129;
endcode
varvalue r False

$overflow on
code auto:2158 equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2159 equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2160 equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2161 equal[compile-time] 1[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -128;
endcode
varvalue r False

$overflow on
code auto:2162 equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2163 equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2164 equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2165 equal[compile-time] 1[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = -1;
endcode
varvalue r False

$overflow on
code auto:2166 equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2167 equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2168 equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2169 equal[compile-time] 1[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:2170 equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2171 equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:2172 equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:2173 equal[compile-time] 1[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:2174 equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2175 equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2176 equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2177 equal[compile-time] 1[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:2178 equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2179 equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2180 equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2181 equal[compile-time] 1[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:2182 equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2183 equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2184 equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2185 equal[compile-time] 1[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:2186 equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2187 equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2188 equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2189 equal[compile-time] 127[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32768;
endcode
varvalue r False

$overflow on
code auto:2190 equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2191 equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2192 equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2193 equal[compile-time] 127[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -32767;
endcode
varvalue r False

$overflow on
code auto:2194 equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2195 equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2196 equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2197 equal[compile-time] 127[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -129;
endcode
varvalue r False

$overflow on
code auto:2198 equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2199 equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2200 equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2201 equal[compile-time] 127[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -128;
endcode
varvalue r False

$overflow on
code auto:2202 equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2203 equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2204 equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2205 equal[compile-time] 127[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = -1;
endcode
varvalue r False

$overflow on
code auto:2206 equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2207 equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2208 equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2209 equal[compile-time] 127[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:2210 equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2211 equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2212 equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2213 equal[compile-time] 127[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:2214 equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2215 equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:2216 equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:2217 equal[compile-time] 127[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:2218 equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2219 equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2220 equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2221 equal[compile-time] 127[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:2222 equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2223 equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2224 equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2225 equal[compile-time] 127[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:2226 equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2227 equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2228 equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2229 equal[compile-time] 128[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -32768;
endcode
varvalue r False

$overflow on
code auto:2230 equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2231 equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2232 equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2233 equal[compile-time] 128[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -32767;
endcode
varvalue r False

$overflow on
code auto:2234 equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2235 equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2236 equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2237 equal[compile-time] 128[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -129;
endcode
varvalue r False

$overflow on
code auto:2238 equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2239 equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2240 equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2241 equal[compile-time] 128[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -128;
endcode
varvalue r False

$overflow on
code auto:2242 equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2243 equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2244 equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2245 equal[compile-time] 128[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = -1;
endcode
varvalue r False

$overflow on
code auto:2246 equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2247 equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2248 equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2249 equal[compile-time] 128[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:2250 equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2251 equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2252 equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2253 equal[compile-time] 128[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:2254 equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2255 equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2256 equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2257 equal[compile-time] 128[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:2258 equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2259 equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r True

code auto:2260 equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r True

code auto:2261 equal[compile-time] 128[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 128;
endcode
varvalue r True

$overflow on
code auto:2262 equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2263 equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2264 equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2265 equal[compile-time] 128[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:2266 equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2267 equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2268 equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2269 equal[compile-time] 255[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32768;
endcode
varvalue r False

$overflow on
code auto:2270 equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2271 equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2272 equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2273 equal[compile-time] 255[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32767;
endcode
varvalue r False

$overflow on
code auto:2274 equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2275 equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2276 equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2277 equal[compile-time] 255[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -129;
endcode
varvalue r False

$overflow on
code auto:2278 equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2279 equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2280 equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2281 equal[compile-time] 255[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:2282 equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2283 equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2284 equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2285 equal[compile-time] 255[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:2286 equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2287 equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2288 equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2289 equal[compile-time] 255[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2290 equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2291 equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2292 equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2293 equal[compile-time] 255[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2294 equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2295 equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2296 equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2297 equal[compile-time] 255[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2298 equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2299 equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2300 equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2301 equal[compile-time] 255[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:2302 equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2303 equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2304 equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2305 equal[compile-time] 255[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:2306 equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2307 equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2308 equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2309 equal[compile-time] 0[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2310 equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2311 equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2312 equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2313 equal[compile-time] 0[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2314 equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2315 equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2316 equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2317 equal[compile-time] 0[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2318 equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2319 equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2320 equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2321 equal[compile-time] 0[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:2322 equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2323 equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2324 equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2325 equal[compile-time] 0[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:2326 equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2327 equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2328 equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2329 equal[compile-time] 1[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:2330 equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2331 equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r True

code auto:2332 equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r True

code auto:2333 equal[compile-time] 1[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 1;
endcode
varvalue r True

$overflow on
code auto:2334 equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2335 equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2336 equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2337 equal[compile-time] 1[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 127;
endcode
varvalue r False

$overflow on
code auto:2338 equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2339 equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2340 equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2341 equal[compile-time] 1[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 128;
endcode
varvalue r False

$overflow on
code auto:2342 equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2343 equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2344 equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2345 equal[compile-time] 1[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:2346 equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2347 equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2348 equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2349 equal[compile-time] 127[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:2350 equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2351 equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2352 equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2353 equal[compile-time] 127[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 1;
endcode
varvalue r False

$overflow on
code auto:2354 equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2355 equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r True

code auto:2356 equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r True

code auto:2357 equal[compile-time] 127[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 127;
endcode
varvalue r True

$overflow on
code auto:2358 equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2359 equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2360 equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2361 equal[compile-time] 127[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 128;
endcode
varvalue r False

$overflow on
code auto:2362 equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2363 equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2364 equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2365 equal[compile-time] 127[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:2366 equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2367 equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2368 equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2369 equal[compile-time] 128[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:2370 equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2371 equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2372 equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2373 equal[compile-time] 128[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 1;
endcode
varvalue r False

$overflow on
code auto:2374 equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2375 equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2376 equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2377 equal[compile-time] 128[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 127;
endcode
varvalue r False

$overflow on
code auto:2378 equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2379 equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r True

code auto:2380 equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r True

code auto:2381 equal[compile-time] 128[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 128;
endcode
varvalue r True

$overflow on
code auto:2382 equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2383 equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2384 equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2385 equal[compile-time] 128[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:2386 equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2387 equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2388 equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2389 equal[compile-time] 255[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2390 equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2391 equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2392 equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2393 equal[compile-time] 255[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2394 equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2395 equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2396 equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2397 equal[compile-time] 255[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2398 equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2399 equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2400 equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2401 equal[compile-time] 255[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:2402 equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2403 equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:2404 equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:2405 equal[compile-time] 255[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:2406 equal[Word] 0[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2407 equal[Word] 0[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2408 equal[Word] 0[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2409 equal[compile-time] 0[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2410 equal[Word] 0[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2411 equal[Word] 0[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2412 equal[Word] 0[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2413 equal[compile-time] 0[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:2414 equal[Word] 0[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2415 equal[Word] 0[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2416 equal[Word] 0[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2417 equal[compile-time] 0[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:2418 equal[Word] 0[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2419 equal[Word] 0[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2420 equal[Word] 0[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2421 equal[compile-time] 0[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:2422 equal[Word] 0[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2423 equal[Word] 0[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2424 equal[Word] 0[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2425 equal[compile-time] 0[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:2426 equal[Word] 1[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2427 equal[Word] 1[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2428 equal[Word] 1[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2429 equal[compile-time] 1[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:2430 equal[Word] 1[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2431 equal[Word] 1[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2432 equal[Word] 1[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2433 equal[compile-time] 1[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:2434 equal[Word] 1[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2435 equal[Word] 1[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2436 equal[Word] 1[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2437 equal[compile-time] 1[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:2438 equal[Word] 1[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2439 equal[Word] 1[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2440 equal[Word] 1[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2441 equal[compile-time] 1[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:2442 equal[Word] 1[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2443 equal[Word] 1[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2444 equal[Word] 1[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2445 equal[compile-time] 1[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:2446 equal[Word] 127[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2447 equal[Word] 127[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2448 equal[Word] 127[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2449 equal[compile-time] 127[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:2450 equal[Word] 127[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2451 equal[Word] 127[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2452 equal[Word] 127[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2453 equal[compile-time] 127[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:2454 equal[Word] 127[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2455 equal[Word] 127[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2456 equal[Word] 127[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2457 equal[compile-time] 127[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:2458 equal[Word] 127[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2459 equal[Word] 127[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2460 equal[Word] 127[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2461 equal[compile-time] 127[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:2462 equal[Word] 127[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2463 equal[Word] 127[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2464 equal[Word] 127[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2465 equal[compile-time] 127[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:2466 equal[Word] 128[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2467 equal[Word] 128[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2468 equal[Word] 128[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2469 equal[compile-time] 128[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:2470 equal[Word] 128[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2471 equal[Word] 128[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2472 equal[Word] 128[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2473 equal[compile-time] 128[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:2474 equal[Word] 128[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2475 equal[Word] 128[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2476 equal[Word] 128[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2477 equal[compile-time] 128[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:2478 equal[Word] 128[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2479 equal[Word] 128[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2480 equal[Word] 128[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2481 equal[compile-time] 128[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32768;
endcode
varvalue r False

$overflow on
code auto:2482 equal[Word] 128[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2483 equal[Word] 128[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2484 equal[Word] 128[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2485 equal[compile-time] 128[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 65535;
endcode
varvalue r False

$overflow on
code auto:2486 equal[Word] 255[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2487 equal[Word] 255[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2488 equal[Word] 255[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2489 equal[compile-time] 255[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2490 equal[Word] 255[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2491 equal[Word] 255[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:2492 equal[Word] 255[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:2493 equal[compile-time] 255[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:2494 equal[Word] 255[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2495 equal[Word] 255[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2496 equal[Word] 255[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2497 equal[compile-time] 255[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:2498 equal[Word] 255[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2499 equal[Word] 255[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2500 equal[Word] 255[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2501 equal[compile-time] 255[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:2502 equal[Word] 255[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2503 equal[Word] 255[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2504 equal[Word] 255[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2505 equal[compile-time] 255[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:2506 equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2507 equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2508 equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2509 equal[compile-time] 0[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2510 equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2511 equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2512 equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2513 equal[compile-time] 0[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:2514 equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2515 equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2516 equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2517 equal[compile-time] 0[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:2518 equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2519 equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2520 equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2521 equal[compile-time] 0[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:2522 equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2523 equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2524 equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2525 equal[compile-time] 0[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:2526 equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2527 equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2528 equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2529 equal[compile-time] 1[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 0;
endcode
varvalue r False

$overflow on
code auto:2530 equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2531 equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2532 equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2533 equal[compile-time] 1[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 255;
endcode
varvalue r False

$overflow on
code auto:2534 equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2535 equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2536 equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2537 equal[compile-time] 1[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32767;
endcode
varvalue r False

$overflow on
code auto:2538 equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2539 equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2540 equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2541 equal[compile-time] 1[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 32768;
endcode
varvalue r False

$overflow on
code auto:2542 equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2543 equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 = b;
endcode
varvalue r False

code auto:2544 equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2545 equal[compile-time] 1[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 = 65535;
endcode
varvalue r False

$overflow on
code auto:2546 equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2547 equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2548 equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2549 equal[compile-time] 127[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 0;
endcode
varvalue r False

$overflow on
code auto:2550 equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2551 equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2552 equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2553 equal[compile-time] 127[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 255;
endcode
varvalue r False

$overflow on
code auto:2554 equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2555 equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2556 equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2557 equal[compile-time] 127[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32767;
endcode
varvalue r False

$overflow on
code auto:2558 equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2559 equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2560 equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2561 equal[compile-time] 127[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 32768;
endcode
varvalue r False

$overflow on
code auto:2562 equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2563 equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 = b;
endcode
varvalue r False

code auto:2564 equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2565 equal[compile-time] 127[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 = 65535;
endcode
varvalue r False

$overflow on
code auto:2566 equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2567 equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2568 equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2569 equal[compile-time] 128[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 0;
endcode
varvalue r False

$overflow on
code auto:2570 equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2571 equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2572 equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2573 equal[compile-time] 128[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 255;
endcode
varvalue r False

$overflow on
code auto:2574 equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2575 equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2576 equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2577 equal[compile-time] 128[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32767;
endcode
varvalue r False

$overflow on
code auto:2578 equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2579 equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2580 equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2581 equal[compile-time] 128[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 32768;
endcode
varvalue r False

$overflow on
code auto:2582 equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2583 equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 = b;
endcode
varvalue r False

code auto:2584 equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2585 equal[compile-time] 128[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 = 65535;
endcode
varvalue r False

$overflow on
code auto:2586 equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2587 equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2588 equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2589 equal[compile-time] 255[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2590 equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2591 equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:2592 equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:2593 equal[compile-time] 255[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:2594 equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2595 equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2596 equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2597 equal[compile-time] 255[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:2598 equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2599 equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2600 equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:2601 equal[compile-time] 255[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:2602 equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2603 equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2604 equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:2605 equal[compile-time] 255[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:2606 equal[Int16] 0[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2607 equal[Int16] 0[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2608 equal[Int16] 0[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2609 equal[compile-time] 0[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:2610 equal[Int16] 0[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2611 equal[Int16] 0[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2612 equal[Int16] 0[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2613 equal[compile-time] 0[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -127;
endcode
varvalue r False

$overflow on
code auto:2614 equal[Int16] 0[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2615 equal[Int16] 0[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2616 equal[Int16] 0[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2617 equal[compile-time] 0[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:2618 equal[Int16] 0[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2619 equal[Int16] 0[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2620 equal[Int16] 0[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2621 equal[compile-time] 0[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2622 equal[Int16] 0[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2623 equal[Int16] 0[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2624 equal[Int16] 0[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2625 equal[compile-time] 0[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2626 equal[Int16] 0[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2627 equal[Int16] 0[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2628 equal[Int16] 0[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2629 equal[compile-time] 0[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2630 equal[Int16] 255[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2631 equal[Int16] 255[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2632 equal[Int16] 255[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2633 equal[compile-time] 255[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:2634 equal[Int16] 255[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2635 equal[Int16] 255[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2636 equal[Int16] 255[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2637 equal[compile-time] 255[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -127;
endcode
varvalue r False

$overflow on
code auto:2638 equal[Int16] 255[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2639 equal[Int16] 255[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2640 equal[Int16] 255[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2641 equal[compile-time] 255[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:2642 equal[Int16] 255[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2643 equal[Int16] 255[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2644 equal[Int16] 255[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2645 equal[compile-time] 255[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2646 equal[Int16] 255[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2647 equal[Int16] 255[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2648 equal[Int16] 255[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2649 equal[compile-time] 255[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2650 equal[Int16] 255[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2651 equal[Int16] 255[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2652 equal[Int16] 255[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2653 equal[compile-time] 255[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2654 equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2655 equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2656 equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2657 equal[compile-time] 32767[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:2658 equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2659 equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2660 equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2661 equal[compile-time] 32767[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -127;
endcode
varvalue r False

$overflow on
code auto:2662 equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2663 equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2664 equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2665 equal[compile-time] 32767[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:2666 equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2667 equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2668 equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2669 equal[compile-time] 32767[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:2670 equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2671 equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2672 equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2673 equal[compile-time] 32767[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:2674 equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2675 equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2676 equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2677 equal[compile-time] 32767[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:2678 equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2679 equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2680 equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2681 equal[compile-time] 32768[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -128;
endcode
varvalue r False

$overflow on
code auto:2682 equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2683 equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2684 equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2685 equal[compile-time] 32768[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -127;
endcode
varvalue r False

$overflow on
code auto:2686 equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2687 equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2688 equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2689 equal[compile-time] 32768[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -1;
endcode
varvalue r False

$overflow on
code auto:2690 equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2691 equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2692 equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2693 equal[compile-time] 32768[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:2694 equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2695 equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2696 equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2697 equal[compile-time] 32768[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:2698 equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2699 equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2700 equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2701 equal[compile-time] 32768[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:2702 equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2703 equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2704 equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2705 equal[compile-time] 65535[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -128;
endcode
varvalue r False

$overflow on
code auto:2706 equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2707 equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2708 equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:2709 equal[compile-time] 65535[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -127;
endcode
varvalue r False

$overflow on
code auto:2710 equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2711 equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2712 equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2713 equal[compile-time] 65535[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -1;
endcode
varvalue r False

$overflow on
code auto:2714 equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2715 equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2716 equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2717 equal[compile-time] 65535[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:2718 equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2719 equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2720 equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2721 equal[compile-time] 65535[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:2722 equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2723 equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2724 equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2725 equal[compile-time] 65535[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:2726 equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2727 equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2728 equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2729 equal[compile-time] 0[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32768;
endcode
varvalue r False

$overflow on
code auto:2730 equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2731 equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2732 equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2733 equal[compile-time] 0[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32767;
endcode
varvalue r False

$overflow on
code auto:2734 equal[Int16] 0[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2735 equal[Int16] 0[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2736 equal[Int16] 0[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2737 equal[compile-time] 0[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -129;
endcode
varvalue r False

$overflow on
code auto:2738 equal[Int16] 0[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2739 equal[Int16] 0[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2740 equal[Int16] 0[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2741 equal[compile-time] 0[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:2742 equal[Int16] 0[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2743 equal[Int16] 0[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2744 equal[Int16] 0[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2745 equal[compile-time] 0[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:2746 equal[Int16] 0[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2747 equal[Int16] 0[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2748 equal[Int16] 0[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2749 equal[compile-time] 0[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2750 equal[Int16] 0[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2751 equal[Int16] 0[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2752 equal[Int16] 0[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2753 equal[compile-time] 0[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2754 equal[Int16] 0[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2755 equal[Int16] 0[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2756 equal[Int16] 0[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2757 equal[compile-time] 0[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2758 equal[Int16] 0[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2759 equal[Int16] 0[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2760 equal[Int16] 0[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2761 equal[compile-time] 0[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:2762 equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2763 equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2764 equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2765 equal[compile-time] 0[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:2766 equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2767 equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2768 equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2769 equal[compile-time] 255[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32768;
endcode
varvalue r False

$overflow on
code auto:2770 equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2771 equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2772 equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2773 equal[compile-time] 255[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32767;
endcode
varvalue r False

$overflow on
code auto:2774 equal[Int16] 255[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2775 equal[Int16] 255[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2776 equal[Int16] 255[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2777 equal[compile-time] 255[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -129;
endcode
varvalue r False

$overflow on
code auto:2778 equal[Int16] 255[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2779 equal[Int16] 255[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2780 equal[Int16] 255[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2781 equal[compile-time] 255[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:2782 equal[Int16] 255[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2783 equal[Int16] 255[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2784 equal[Int16] 255[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2785 equal[compile-time] 255[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:2786 equal[Int16] 255[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2787 equal[Int16] 255[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2788 equal[Int16] 255[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2789 equal[compile-time] 255[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2790 equal[Int16] 255[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2791 equal[Int16] 255[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2792 equal[Int16] 255[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2793 equal[compile-time] 255[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2794 equal[Int16] 255[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2795 equal[Int16] 255[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2796 equal[Int16] 255[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2797 equal[compile-time] 255[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2798 equal[Int16] 255[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2799 equal[Int16] 255[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2800 equal[Int16] 255[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2801 equal[compile-time] 255[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:2802 equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2803 equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2804 equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2805 equal[compile-time] 255[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:2806 equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2807 equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2808 equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2809 equal[compile-time] 32767[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32768;
endcode
varvalue r False

$overflow on
code auto:2810 equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2811 equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2812 equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2813 equal[compile-time] 32767[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32767;
endcode
varvalue r False

$overflow on
code auto:2814 equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2815 equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2816 equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2817 equal[compile-time] 32767[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -129;
endcode
varvalue r False

$overflow on
code auto:2818 equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2819 equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2820 equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2821 equal[compile-time] 32767[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:2822 equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2823 equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2824 equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2825 equal[compile-time] 32767[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:2826 equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2827 equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2828 equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2829 equal[compile-time] 32767[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:2830 equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2831 equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2832 equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2833 equal[compile-time] 32767[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:2834 equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2835 equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2836 equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2837 equal[compile-time] 32767[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:2838 equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2839 equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2840 equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2841 equal[compile-time] 32767[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:2842 equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2843 equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:2844 equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:2845 equal[compile-time] 32767[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:2846 equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2847 equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2848 equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2849 equal[compile-time] 32768[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -32768;
endcode
varvalue r False

$overflow on
code auto:2850 equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2851 equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2852 equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2853 equal[compile-time] 32768[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -32767;
endcode
varvalue r False

$overflow on
code auto:2854 equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2855 equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2856 equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2857 equal[compile-time] 32768[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -129;
endcode
varvalue r False

$overflow on
code auto:2858 equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2859 equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2860 equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2861 equal[compile-time] 32768[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -128;
endcode
varvalue r False

$overflow on
code auto:2862 equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2863 equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2864 equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2865 equal[compile-time] 32768[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -1;
endcode
varvalue r False

$overflow on
code auto:2866 equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2867 equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2868 equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2869 equal[compile-time] 32768[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:2870 equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2871 equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2872 equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2873 equal[compile-time] 32768[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:2874 equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2875 equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2876 equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2877 equal[compile-time] 32768[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:2878 equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2879 equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2880 equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2881 equal[compile-time] 32768[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 128;
endcode
varvalue r False

$overflow on
code auto:2882 equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2883 equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2884 equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2885 equal[compile-time] 32768[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:2886 equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2887 equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2888 equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:2889 equal[compile-time] 65535[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -32768;
endcode
varvalue r False

$overflow on
code auto:2890 equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2891 equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2892 equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:2893 equal[compile-time] 65535[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -32767;
endcode
varvalue r False

$overflow on
code auto:2894 equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2895 equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2896 equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:2897 equal[compile-time] 65535[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -129;
endcode
varvalue r False

$overflow on
code auto:2898 equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2899 equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2900 equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:2901 equal[compile-time] 65535[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -128;
endcode
varvalue r False

$overflow on
code auto:2902 equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2903 equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2904 equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:2905 equal[compile-time] 65535[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -1;
endcode
varvalue r False

$overflow on
code auto:2906 equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2907 equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2908 equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2909 equal[compile-time] 65535[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:2910 equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2911 equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2912 equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2913 equal[compile-time] 65535[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:2914 equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2915 equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2916 equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2917 equal[compile-time] 65535[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:2918 equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2919 equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2920 equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2921 equal[compile-time] 65535[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 128;
endcode
varvalue r False

$overflow on
code auto:2922 equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2923 equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:2924 equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:2925 equal[compile-time] 65535[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:2926 equal[Word] 0[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2927 equal[Word] 0[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:2928 equal[Word] 0[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:2929 equal[compile-time] 0[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:2930 equal[Word] 0[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2931 equal[Word] 0[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2932 equal[Word] 0[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2933 equal[compile-time] 0[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:2934 equal[Word] 0[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2935 equal[Word] 0[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2936 equal[Word] 0[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2937 equal[compile-time] 0[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:2938 equal[Word] 0[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2939 equal[Word] 0[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2940 equal[Word] 0[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2941 equal[compile-time] 0[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:2942 equal[Word] 0[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2943 equal[Word] 0[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:2944 equal[Word] 0[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2945 equal[compile-time] 0[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:2946 equal[Word] 255[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2947 equal[Word] 255[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2948 equal[Word] 255[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2949 equal[compile-time] 255[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:2950 equal[Word] 255[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2951 equal[Word] 255[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2952 equal[Word] 255[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2953 equal[compile-time] 255[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:2954 equal[Word] 255[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2955 equal[Word] 255[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2956 equal[Word] 255[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2957 equal[compile-time] 255[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:2958 equal[Word] 255[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2959 equal[Word] 255[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:2960 equal[Word] 255[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2961 equal[compile-time] 255[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:2962 equal[Word] 255[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:2963 equal[Word] 255[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:2964 equal[Word] 255[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:2965 equal[compile-time] 255[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:2966 equal[Word] 32767[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2967 equal[Word] 32767[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2968 equal[Word] 32767[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2969 equal[compile-time] 32767[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:2970 equal[Word] 32767[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2971 equal[Word] 32767[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2972 equal[Word] 32767[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2973 equal[compile-time] 32767[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:2974 equal[Word] 32767[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2975 equal[Word] 32767[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2976 equal[Word] 32767[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2977 equal[compile-time] 32767[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:2978 equal[Word] 32767[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2979 equal[Word] 32767[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2980 equal[Word] 32767[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:2981 equal[compile-time] 32767[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:2982 equal[Word] 32767[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2983 equal[Word] 32767[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:2984 equal[Word] 32767[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:2985 equal[compile-time] 32767[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:2986 equal[Word] 32768[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2987 equal[Word] 32768[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2988 equal[Word] 32768[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:2989 equal[compile-time] 32768[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:2990 equal[Word] 32768[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2991 equal[Word] 32768[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2992 equal[Word] 32768[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:2993 equal[compile-time] 32768[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:2994 equal[Word] 32768[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2995 equal[Word] 32768[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:2996 equal[Word] 32768[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:2997 equal[compile-time] 32768[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:2998 equal[Word] 32768[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:2999 equal[Word] 32768[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3000 equal[Word] 32768[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3001 equal[compile-time] 32768[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 128;
endcode
varvalue r False

$overflow on
code auto:3002 equal[Word] 32768[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3003 equal[Word] 32768[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3004 equal[Word] 32768[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3005 equal[compile-time] 32768[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3006 equal[Word] 65535[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3007 equal[Word] 65535[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3008 equal[Word] 65535[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3009 equal[compile-time] 65535[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3010 equal[Word] 65535[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3011 equal[Word] 65535[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3012 equal[Word] 65535[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3013 equal[compile-time] 65535[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:3014 equal[Word] 65535[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3015 equal[Word] 65535[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3016 equal[Word] 65535[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3017 equal[compile-time] 65535[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:3018 equal[Word] 65535[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3019 equal[Word] 65535[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3020 equal[Word] 65535[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3021 equal[compile-time] 65535[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 128;
endcode
varvalue r False

$overflow on
code auto:3022 equal[Word] 65535[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3023 equal[Word] 65535[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3024 equal[Word] 65535[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3025 equal[compile-time] 65535[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3026 equal[Word] 0[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3027 equal[Word] 0[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3028 equal[Word] 0[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3029 equal[compile-time] 0[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3030 equal[Word] 0[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3031 equal[Word] 0[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3032 equal[Word] 0[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3033 equal[compile-time] 0[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:3034 equal[Word] 0[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3035 equal[Word] 0[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3036 equal[Word] 0[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3037 equal[compile-time] 0[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:3038 equal[Word] 0[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3039 equal[Word] 0[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3040 equal[Word] 0[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3041 equal[compile-time] 0[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:3042 equal[Word] 0[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3043 equal[Word] 0[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3044 equal[Word] 0[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3045 equal[compile-time] 0[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:3046 equal[Word] 255[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3047 equal[Word] 255[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3048 equal[Word] 255[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3049 equal[compile-time] 255[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3050 equal[Word] 255[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3051 equal[Word] 255[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:3052 equal[Word] 255[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:3053 equal[compile-time] 255[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:3054 equal[Word] 255[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3055 equal[Word] 255[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3056 equal[Word] 255[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3057 equal[compile-time] 255[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:3058 equal[Word] 255[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3059 equal[Word] 255[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3060 equal[Word] 255[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3061 equal[compile-time] 255[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:3062 equal[Word] 255[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3063 equal[Word] 255[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3064 equal[Word] 255[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3065 equal[compile-time] 255[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:3066 equal[Word] 32767[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3067 equal[Word] 32767[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3068 equal[Word] 32767[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3069 equal[compile-time] 32767[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3070 equal[Word] 32767[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3071 equal[Word] 32767[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3072 equal[Word] 32767[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3073 equal[compile-time] 32767[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:3074 equal[Word] 32767[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3075 equal[Word] 32767[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:3076 equal[Word] 32767[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:3077 equal[compile-time] 32767[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:3078 equal[Word] 32767[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3079 equal[Word] 32767[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3080 equal[Word] 32767[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3081 equal[compile-time] 32767[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:3082 equal[Word] 32767[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3083 equal[Word] 32767[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3084 equal[Word] 32767[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3085 equal[compile-time] 32767[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:3086 equal[Word] 32768[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3087 equal[Word] 32768[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3088 equal[Word] 32768[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3089 equal[compile-time] 32768[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3090 equal[Word] 32768[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3091 equal[Word] 32768[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3092 equal[Word] 32768[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3093 equal[compile-time] 32768[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3094 equal[Word] 32768[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3095 equal[Word] 32768[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3096 equal[Word] 32768[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3097 equal[compile-time] 32768[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:3098 equal[Word] 32768[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3099 equal[Word] 32768[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r True

code auto:3100 equal[Word] 32768[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r True

code auto:3101 equal[compile-time] 32768[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32768;
endcode
varvalue r True

$overflow on
code auto:3102 equal[Word] 32768[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3103 equal[Word] 32768[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3104 equal[Word] 32768[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3105 equal[compile-time] 32768[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:3106 equal[Word] 65535[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3107 equal[Word] 65535[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3108 equal[Word] 65535[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3109 equal[compile-time] 65535[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3110 equal[Word] 65535[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3111 equal[Word] 65535[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3112 equal[Word] 65535[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3113 equal[compile-time] 65535[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3114 equal[Word] 65535[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3115 equal[Word] 65535[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3116 equal[Word] 65535[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3117 equal[compile-time] 65535[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:3118 equal[Word] 65535[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3119 equal[Word] 65535[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3120 equal[Word] 65535[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3121 equal[compile-time] 65535[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32768;
endcode
varvalue r False

$overflow on
code auto:3122 equal[Word] 65535[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3123 equal[Word] 65535[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r True

code auto:3124 equal[Word] 65535[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r True

code auto:3125 equal[compile-time] 65535[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 65535;
endcode
varvalue r True

$overflow on
code auto:3126 equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3127 equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3128 equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3129 equal[compile-time] 0[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3130 equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3131 equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3132 equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3133 equal[compile-time] 0[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:3134 equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3135 equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3136 equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3137 equal[compile-time] 0[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:3138 equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3139 equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3140 equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3141 equal[compile-time] 0[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:3142 equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3143 equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3144 equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3145 equal[compile-time] 0[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:3146 equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3147 equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3148 equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3149 equal[compile-time] 255[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3150 equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3151 equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:3152 equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:3153 equal[compile-time] 255[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:3154 equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3155 equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3156 equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3157 equal[compile-time] 255[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:3158 equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3159 equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3160 equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3161 equal[compile-time] 255[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:3162 equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3163 equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3164 equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3165 equal[compile-time] 255[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:3166 equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3167 equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3168 equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3169 equal[compile-time] 32767[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3170 equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3171 equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3172 equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3173 equal[compile-time] 32767[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:3174 equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3175 equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:3176 equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:3177 equal[compile-time] 32767[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:3178 equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3179 equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3180 equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3181 equal[compile-time] 32767[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:3182 equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3183 equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3184 equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3185 equal[compile-time] 32767[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:3186 equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3187 equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3188 equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3189 equal[compile-time] 32768[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3190 equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3191 equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3192 equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3193 equal[compile-time] 32768[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3194 equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3195 equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3196 equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3197 equal[compile-time] 32768[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:3198 equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3199 equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r True

code auto:3200 equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r True

code auto:3201 equal[compile-time] 32768[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32768;
endcode
varvalue r True

$overflow on
code auto:3202 equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3203 equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3204 equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3205 equal[compile-time] 32768[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:3206 equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3207 equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3208 equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3209 equal[compile-time] 65535[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3210 equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3211 equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3212 equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3213 equal[compile-time] 65535[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3214 equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3215 equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3216 equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3217 equal[compile-time] 65535[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:3218 equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3219 equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3220 equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3221 equal[compile-time] 65535[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32768;
endcode
varvalue r False

$overflow on
code auto:3222 equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3223 equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r True

code auto:3224 equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r True

code auto:3225 equal[compile-time] 65535[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 65535;
endcode
varvalue r True

$overflow on
code auto:3226 equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3227 equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3228 equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3229 equal[compile-time] 0[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:3230 equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3231 equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3232 equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:3233 equal[compile-time] 0[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -127;
endcode
varvalue r False

$overflow on
code auto:3234 equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3235 equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3236 equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3237 equal[compile-time] 0[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:3238 equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3239 equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3240 equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3241 equal[compile-time] 0[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3242 equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3243 equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3244 equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3245 equal[compile-time] 0[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:3246 equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3247 equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3248 equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3249 equal[compile-time] 0[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:3250 equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3251 equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3252 equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3253 equal[compile-time] 255[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:3254 equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3255 equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3256 equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:3257 equal[compile-time] 255[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -127;
endcode
varvalue r False

$overflow on
code auto:3258 equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3259 equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3260 equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3261 equal[compile-time] 255[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:3262 equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3263 equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3264 equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3265 equal[compile-time] 255[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3266 equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3267 equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3268 equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3269 equal[compile-time] 255[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:3270 equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3271 equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3272 equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3273 equal[compile-time] 255[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:3274 equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3275 equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3276 equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3277 equal[compile-time] 32767[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:3278 equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3279 equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3280 equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:3281 equal[compile-time] 32767[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -127;
endcode
varvalue r False

$overflow on
code auto:3282 equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3283 equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3284 equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3285 equal[compile-time] 32767[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:3286 equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3287 equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3288 equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3289 equal[compile-time] 32767[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3290 equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3291 equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3292 equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3293 equal[compile-time] 32767[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:3294 equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3295 equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3296 equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3297 equal[compile-time] 32767[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:3298 equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3299 equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3300 equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3301 equal[compile-time] 32768[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -128;
endcode
varvalue r False

$overflow on
code auto:3302 equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3303 equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3304 equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:3305 equal[compile-time] 32768[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -127;
endcode
varvalue r False

$overflow on
code auto:3306 equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3307 equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3308 equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3309 equal[compile-time] 32768[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -1;
endcode
varvalue r False

$overflow on
code auto:3310 equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3311 equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3312 equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3313 equal[compile-time] 32768[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3314 equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3315 equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3316 equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3317 equal[compile-time] 32768[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:3318 equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3319 equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3320 equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3321 equal[compile-time] 32768[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:3322 equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3323 equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3324 equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3325 equal[compile-time] 65535[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -128;
endcode
varvalue r False

$overflow on
code auto:3326 equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3327 equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3328 equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -127;
endcode
varvalue r False

code auto:3329 equal[compile-time] 65535[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -127;
endcode
varvalue r False

$overflow on
code auto:3330 equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3331 equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3332 equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3333 equal[compile-time] 65535[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -1;
endcode
varvalue r False

$overflow on
code auto:3334 equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3335 equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3336 equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3337 equal[compile-time] 65535[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3338 equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3339 equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3340 equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3341 equal[compile-time] 65535[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:3342 equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3343 equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3344 equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3345 equal[compile-time] 65535[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:3346 equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3347 equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3348 equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:3349 equal[compile-time] 0[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32768;
endcode
varvalue r False

$overflow on
code auto:3350 equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3351 equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3352 equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:3353 equal[compile-time] 0[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -32767;
endcode
varvalue r False

$overflow on
code auto:3354 equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3355 equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3356 equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:3357 equal[compile-time] 0[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -129;
endcode
varvalue r False

$overflow on
code auto:3358 equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3359 equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3360 equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3361 equal[compile-time] 0[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -128;
endcode
varvalue r False

$overflow on
code auto:3362 equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3363 equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3364 equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3365 equal[compile-time] 0[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = -1;
endcode
varvalue r False

$overflow on
code auto:3366 equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3367 equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3368 equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3369 equal[compile-time] 0[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3370 equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3371 equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3372 equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3373 equal[compile-time] 0[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:3374 equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3375 equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3376 equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3377 equal[compile-time] 0[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:3378 equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3379 equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3380 equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3381 equal[compile-time] 0[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:3382 equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3383 equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3384 equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3385 equal[compile-time] 0[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:3386 equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3387 equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3388 equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:3389 equal[compile-time] 255[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32768;
endcode
varvalue r False

$overflow on
code auto:3390 equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3391 equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3392 equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:3393 equal[compile-time] 255[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -32767;
endcode
varvalue r False

$overflow on
code auto:3394 equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3395 equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3396 equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:3397 equal[compile-time] 255[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -129;
endcode
varvalue r False

$overflow on
code auto:3398 equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3399 equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3400 equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3401 equal[compile-time] 255[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -128;
endcode
varvalue r False

$overflow on
code auto:3402 equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3403 equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3404 equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3405 equal[compile-time] 255[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = -1;
endcode
varvalue r False

$overflow on
code auto:3406 equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3407 equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3408 equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3409 equal[compile-time] 255[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3410 equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3411 equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3412 equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3413 equal[compile-time] 255[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:3414 equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3415 equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3416 equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3417 equal[compile-time] 255[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:3418 equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3419 equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3420 equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3421 equal[compile-time] 255[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:3422 equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3423 equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3424 equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3425 equal[compile-time] 255[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:3426 equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3427 equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3428 equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:3429 equal[compile-time] 32767[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32768;
endcode
varvalue r False

$overflow on
code auto:3430 equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3431 equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3432 equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:3433 equal[compile-time] 32767[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -32767;
endcode
varvalue r False

$overflow on
code auto:3434 equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3435 equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3436 equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:3437 equal[compile-time] 32767[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -129;
endcode
varvalue r False

$overflow on
code auto:3438 equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3439 equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3440 equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3441 equal[compile-time] 32767[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -128;
endcode
varvalue r False

$overflow on
code auto:3442 equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3443 equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3444 equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3445 equal[compile-time] 32767[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = -1;
endcode
varvalue r False

$overflow on
code auto:3446 equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3447 equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3448 equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3449 equal[compile-time] 32767[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3450 equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3451 equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3452 equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3453 equal[compile-time] 32767[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:3454 equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3455 equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3456 equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3457 equal[compile-time] 32767[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:3458 equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3459 equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3460 equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3461 equal[compile-time] 32767[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:3462 equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3463 equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:3464 equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:3465 equal[compile-time] 32767[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:3466 equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3467 equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3468 equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:3469 equal[compile-time] 32768[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -32768;
endcode
varvalue r False

$overflow on
code auto:3470 equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3471 equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3472 equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:3473 equal[compile-time] 32768[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -32767;
endcode
varvalue r False

$overflow on
code auto:3474 equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3475 equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3476 equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:3477 equal[compile-time] 32768[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -129;
endcode
varvalue r False

$overflow on
code auto:3478 equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3479 equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3480 equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3481 equal[compile-time] 32768[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -128;
endcode
varvalue r False

$overflow on
code auto:3482 equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3483 equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3484 equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3485 equal[compile-time] 32768[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = -1;
endcode
varvalue r False

$overflow on
code auto:3486 equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3487 equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3488 equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3489 equal[compile-time] 32768[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3490 equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3491 equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3492 equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3493 equal[compile-time] 32768[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:3494 equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3495 equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3496 equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3497 equal[compile-time] 32768[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:3498 equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3499 equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3500 equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3501 equal[compile-time] 32768[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 128;
endcode
varvalue r False

$overflow on
code auto:3502 equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3503 equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3504 equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3505 equal[compile-time] 32768[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:3506 equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3507 equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3508 equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -32768;
endcode
varvalue r False

code auto:3509 equal[compile-time] 65535[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -32768;
endcode
varvalue r False

$overflow on
code auto:3510 equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3511 equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3512 equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -32767;
endcode
varvalue r False

code auto:3513 equal[compile-time] 65535[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -32767;
endcode
varvalue r False

$overflow on
code auto:3514 equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3515 equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3516 equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -129;
endcode
varvalue r False

code auto:3517 equal[compile-time] 65535[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -129;
endcode
varvalue r False

$overflow on
code auto:3518 equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3519 equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3520 equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -128;
endcode
varvalue r False

code auto:3521 equal[compile-time] 65535[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -128;
endcode
varvalue r False

$overflow on
code auto:3522 equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3523 equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3524 equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = -1;
endcode
varvalue r False

code auto:3525 equal[compile-time] 65535[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = -1;
endcode
varvalue r False

$overflow on
code auto:3526 equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3527 equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3528 equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3529 equal[compile-time] 65535[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3530 equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3531 equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3532 equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3533 equal[compile-time] 65535[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:3534 equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3535 equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3536 equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3537 equal[compile-time] 65535[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:3538 equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3539 equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3540 equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3541 equal[compile-time] 65535[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 128;
endcode
varvalue r False

$overflow on
code auto:3542 equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3543 equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3544 equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3545 equal[compile-time] 65535[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:3546 equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3547 equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3548 equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3549 equal[compile-time] 0[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3550 equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3551 equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3552 equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3553 equal[compile-time] 0[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 1;
endcode
varvalue r False

$overflow on
code auto:3554 equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3555 equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3556 equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3557 equal[compile-time] 0[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 127;
endcode
varvalue r False

$overflow on
code auto:3558 equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3559 equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3560 equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3561 equal[compile-time] 0[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 128;
endcode
varvalue r False

$overflow on
code auto:3562 equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3563 equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3564 equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3565 equal[compile-time] 0[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:3566 equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3567 equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3568 equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3569 equal[compile-time] 255[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3570 equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3571 equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3572 equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3573 equal[compile-time] 255[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 1;
endcode
varvalue r False

$overflow on
code auto:3574 equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3575 equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3576 equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3577 equal[compile-time] 255[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 127;
endcode
varvalue r False

$overflow on
code auto:3578 equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3579 equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3580 equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3581 equal[compile-time] 255[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 128;
endcode
varvalue r False

$overflow on
code auto:3582 equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3583 equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:3584 equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:3585 equal[compile-time] 255[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:3586 equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3587 equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3588 equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3589 equal[compile-time] 32767[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3590 equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3591 equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3592 equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3593 equal[compile-time] 32767[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 1;
endcode
varvalue r False

$overflow on
code auto:3594 equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3595 equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3596 equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3597 equal[compile-time] 32767[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 127;
endcode
varvalue r False

$overflow on
code auto:3598 equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3599 equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3600 equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3601 equal[compile-time] 32767[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 128;
endcode
varvalue r False

$overflow on
code auto:3602 equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3603 equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3604 equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3605 equal[compile-time] 32767[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:3606 equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3607 equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3608 equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3609 equal[compile-time] 32768[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3610 equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3611 equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3612 equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3613 equal[compile-time] 32768[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 1;
endcode
varvalue r False

$overflow on
code auto:3614 equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3615 equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3616 equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3617 equal[compile-time] 32768[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 127;
endcode
varvalue r False

$overflow on
code auto:3618 equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3619 equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3620 equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3621 equal[compile-time] 32768[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 128;
endcode
varvalue r False

$overflow on
code auto:3622 equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3623 equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3624 equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3625 equal[compile-time] 32768[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3626 equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3627 equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3628 equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3629 equal[compile-time] 65535[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3630 equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3631 equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3632 equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 1;
endcode
varvalue r False

code auto:3633 equal[compile-time] 65535[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 1;
endcode
varvalue r False

$overflow on
code auto:3634 equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3635 equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3636 equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 127;
endcode
varvalue r False

code auto:3637 equal[compile-time] 65535[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 127;
endcode
varvalue r False

$overflow on
code auto:3638 equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3639 equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3640 equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 128;
endcode
varvalue r False

code auto:3641 equal[compile-time] 65535[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 128;
endcode
varvalue r False

$overflow on
code auto:3642 equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3643 equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3644 equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3645 equal[compile-time] 65535[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3646 equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3647 equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3648 equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3649 equal[compile-time] 0[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3650 equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3651 equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3652 equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3653 equal[compile-time] 0[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:3654 equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3655 equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3656 equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3657 equal[compile-time] 0[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:3658 equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3659 equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3660 equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3661 equal[compile-time] 0[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:3662 equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3663 equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3664 equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3665 equal[compile-time] 0[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:3666 equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3667 equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3668 equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3669 equal[compile-time] 255[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3670 equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3671 equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:3672 equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:3673 equal[compile-time] 255[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:3674 equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3675 equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3676 equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3677 equal[compile-time] 255[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:3678 equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3679 equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3680 equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3681 equal[compile-time] 255[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:3682 equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3683 equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3684 equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3685 equal[compile-time] 255[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:3686 equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3687 equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3688 equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3689 equal[compile-time] 32767[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3690 equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3691 equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3692 equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3693 equal[compile-time] 32767[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:3694 equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3695 equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:3696 equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:3697 equal[compile-time] 32767[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:3698 equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3699 equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3700 equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3701 equal[compile-time] 32767[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:3702 equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3703 equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3704 equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3705 equal[compile-time] 32767[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:3706 equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3707 equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3708 equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3709 equal[compile-time] 32768[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3710 equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3711 equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3712 equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3713 equal[compile-time] 32768[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3714 equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3715 equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3716 equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3717 equal[compile-time] 32768[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:3718 equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3719 equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r True

code auto:3720 equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r True

code auto:3721 equal[compile-time] 32768[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32768;
endcode
varvalue r True

$overflow on
code auto:3722 equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3723 equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3724 equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3725 equal[compile-time] 32768[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:3726 equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3727 equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3728 equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3729 equal[compile-time] 65535[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3730 equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3731 equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3732 equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3733 equal[compile-time] 65535[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3734 equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3735 equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3736 equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3737 equal[compile-time] 65535[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:3738 equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3739 equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3740 equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3741 equal[compile-time] 65535[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32768;
endcode
varvalue r False

$overflow on
code auto:3742 equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3743 equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r True

code auto:3744 equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r True

code auto:3745 equal[compile-time] 65535[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 65535;
endcode
varvalue r True

$overflow on
code auto:3746 equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3747 equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r True

code auto:3748 equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r True

code auto:3749 equal[compile-time] 0[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 0;
endcode
varvalue r True

$overflow on
code auto:3750 equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3751 equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3752 equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3753 equal[compile-time] 0[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 255;
endcode
varvalue r False

$overflow on
code auto:3754 equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3755 equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3756 equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3757 equal[compile-time] 0[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32767;
endcode
varvalue r False

$overflow on
code auto:3758 equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3759 equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3760 equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3761 equal[compile-time] 0[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 32768;
endcode
varvalue r False

$overflow on
code auto:3762 equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3763 equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 = b;
endcode
varvalue r False

code auto:3764 equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3765 equal[compile-time] 0[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 = 65535;
endcode
varvalue r False

$overflow on
code auto:3766 equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3767 equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3768 equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3769 equal[compile-time] 255[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 0;
endcode
varvalue r False

$overflow on
code auto:3770 equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3771 equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r True

code auto:3772 equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r True

code auto:3773 equal[compile-time] 255[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 255;
endcode
varvalue r True

$overflow on
code auto:3774 equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3775 equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3776 equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3777 equal[compile-time] 255[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32767;
endcode
varvalue r False

$overflow on
code auto:3778 equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3779 equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3780 equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3781 equal[compile-time] 255[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 32768;
endcode
varvalue r False

$overflow on
code auto:3782 equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3783 equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 = b;
endcode
varvalue r False

code auto:3784 equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3785 equal[compile-time] 255[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 = 65535;
endcode
varvalue r False

$overflow on
code auto:3786 equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3787 equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3788 equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3789 equal[compile-time] 32767[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 0;
endcode
varvalue r False

$overflow on
code auto:3790 equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3791 equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3792 equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3793 equal[compile-time] 32767[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 255;
endcode
varvalue r False

$overflow on
code auto:3794 equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3795 equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r True

code auto:3796 equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r True

code auto:3797 equal[compile-time] 32767[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32767;
endcode
varvalue r True

$overflow on
code auto:3798 equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3799 equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3800 equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3801 equal[compile-time] 32767[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 32768;
endcode
varvalue r False

$overflow on
code auto:3802 equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3803 equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 = b;
endcode
varvalue r False

code auto:3804 equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3805 equal[compile-time] 32767[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 = 65535;
endcode
varvalue r False

$overflow on
code auto:3806 equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3807 equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3808 equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3809 equal[compile-time] 32768[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 0;
endcode
varvalue r False

$overflow on
code auto:3810 equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3811 equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3812 equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3813 equal[compile-time] 32768[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 255;
endcode
varvalue r False

$overflow on
code auto:3814 equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3815 equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3816 equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3817 equal[compile-time] 32768[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32767;
endcode
varvalue r False

$overflow on
code auto:3818 equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3819 equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r True

code auto:3820 equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r True

code auto:3821 equal[compile-time] 32768[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 32768;
endcode
varvalue r True

$overflow on
code auto:3822 equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3823 equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 = b;
endcode
varvalue r False

code auto:3824 equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r False

code auto:3825 equal[compile-time] 32768[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 = 65535;
endcode
varvalue r False

$overflow on
code auto:3826 equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3827 equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3828 equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 0;
endcode
varvalue r False

code auto:3829 equal[compile-time] 65535[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 0;
endcode
varvalue r False

$overflow on
code auto:3830 equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3831 equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3832 equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 255;
endcode
varvalue r False

code auto:3833 equal[compile-time] 65535[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 255;
endcode
varvalue r False

$overflow on
code auto:3834 equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3835 equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3836 equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 32767;
endcode
varvalue r False

code auto:3837 equal[compile-time] 65535[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32767;
endcode
varvalue r False

$overflow on
code auto:3838 equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3839 equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r False

code auto:3840 equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 32768;
endcode
varvalue r False

code auto:3841 equal[compile-time] 65535[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 32768;
endcode
varvalue r False

$overflow on
code auto:3842 equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3843 equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 = b;
endcode
varvalue r True

code auto:3844 equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a = 65535;
endcode
varvalue r True

code auto:3845 equal[compile-time] 65535[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 = 65535;
endcode
varvalue r True

$overflow on
code auto:3846 equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3847 equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := False = b;
endcode
varvalue r True

code auto:3848 equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a = False;
endcode
varvalue r True

code auto:3849 equal[compile-time] 0[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False = False;
endcode
varvalue r True

$overflow on
code auto:3850 equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3851 equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := False = b;
endcode
varvalue r False

code auto:3852 equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a = True;
endcode
varvalue r False

code auto:3853 equal[compile-time] 0[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False = True;
endcode
varvalue r False

$overflow on
code auto:3854 equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3855 equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := True = b;
endcode
varvalue r False

code auto:3856 equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a = False;
endcode
varvalue r False

code auto:3857 equal[compile-time] 255[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True = False;
endcode
varvalue r False

$overflow on
code auto:3858 equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3859 equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := True = b;
endcode
varvalue r True

code auto:3860 equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a = True;
endcode
varvalue r True

code auto:3861 equal[compile-time] 255[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True = True;
endcode
varvalue r True

$overflow on
code auto:3862 equal[Char] 0[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3863 equal[Char] 0[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #0 = b;
endcode
varvalue r True

code auto:3864 equal[Char] 0[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a = #0;
endcode
varvalue r True

code auto:3865 equal[compile-time] 0[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 = #0;
endcode
varvalue r True

$overflow on
code auto:3866 equal[Char] 0[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #31;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3867 equal[Char] 0[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #0 = b;
endcode
varvalue r False

code auto:3868 equal[Char] 0[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a = #31;
endcode
varvalue r False

code auto:3869 equal[compile-time] 0[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 = #31;
endcode
varvalue r False

$overflow on
code auto:3870 equal[Char] 0[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3871 equal[Char] 0[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #0 = b;
endcode
varvalue r False

code auto:3872 equal[Char] 0[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a = ' ';
endcode
varvalue r False

code auto:3873 equal[compile-time] 0[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 = ' ';
endcode
varvalue r False

$overflow on
code auto:3874 equal[Char] 0[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3875 equal[Char] 0[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #0 = b;
endcode
varvalue r False

code auto:3876 equal[Char] 0[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a = #255;
endcode
varvalue r False

code auto:3877 equal[compile-time] 0[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 = #255;
endcode
varvalue r False

$overflow on
code auto:3878 equal[Char] 31[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3879 equal[Char] 31[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #31 = b;
endcode
varvalue r False

code auto:3880 equal[Char] 31[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a = #0;
endcode
varvalue r False

code auto:3881 equal[compile-time] 31[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 = #0;
endcode
varvalue r False

$overflow on
code auto:3882 equal[Char] 31[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #31;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3883 equal[Char] 31[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #31 = b;
endcode
varvalue r True

code auto:3884 equal[Char] 31[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a = #31;
endcode
varvalue r True

code auto:3885 equal[compile-time] 31[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 = #31;
endcode
varvalue r True

$overflow on
code auto:3886 equal[Char] 31[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3887 equal[Char] 31[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #31 = b;
endcode
varvalue r False

code auto:3888 equal[Char] 31[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a = ' ';
endcode
varvalue r False

code auto:3889 equal[compile-time] 31[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 = ' ';
endcode
varvalue r False

$overflow on
code auto:3890 equal[Char] 31[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3891 equal[Char] 31[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #31 = b;
endcode
varvalue r False

code auto:3892 equal[Char] 31[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a = #255;
endcode
varvalue r False

code auto:3893 equal[compile-time] 31[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 = #255;
endcode
varvalue r False

$overflow on
code auto:3894 equal[Char] 32[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3895 equal[Char] 32[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := ' ' = b;
endcode
varvalue r False

code auto:3896 equal[Char] 32[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a = #0;
endcode
varvalue r False

code auto:3897 equal[compile-time] 32[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' = #0;
endcode
varvalue r False

$overflow on
code auto:3898 equal[Char] 32[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #31;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3899 equal[Char] 32[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := ' ' = b;
endcode
varvalue r False

code auto:3900 equal[Char] 32[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a = #31;
endcode
varvalue r False

code auto:3901 equal[compile-time] 32[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' = #31;
endcode
varvalue r False

$overflow on
code auto:3902 equal[Char] 32[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = ' ';
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3903 equal[Char] 32[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := ' ' = b;
endcode
varvalue r True

code auto:3904 equal[Char] 32[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a = ' ';
endcode
varvalue r True

code auto:3905 equal[compile-time] 32[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' = ' ';
endcode
varvalue r True

$overflow on
code auto:3906 equal[Char] 32[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3907 equal[Char] 32[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := ' ' = b;
endcode
varvalue r False

code auto:3908 equal[Char] 32[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a = #255;
endcode
varvalue r False

code auto:3909 equal[compile-time] 32[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' = #255;
endcode
varvalue r False

$overflow on
code auto:3910 equal[Char] 255[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #0;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3911 equal[Char] 255[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #255 = b;
endcode
varvalue r False

code auto:3912 equal[Char] 255[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a = #0;
endcode
varvalue r False

code auto:3913 equal[compile-time] 255[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 = #0;
endcode
varvalue r False

$overflow on
code auto:3914 equal[Char] 255[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #31;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3915 equal[Char] 255[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #255 = b;
endcode
varvalue r False

code auto:3916 equal[Char] 255[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a = #31;
endcode
varvalue r False

code auto:3917 equal[compile-time] 255[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 = #31;
endcode
varvalue r False

$overflow on
code auto:3918 equal[Char] 255[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a = b;
endcode
varvalue r False

code auto:3919 equal[Char] 255[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #255 = b;
endcode
varvalue r False

code auto:3920 equal[Char] 255[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a = ' ';
endcode
varvalue r False

code auto:3921 equal[compile-time] 255[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 = ' ';
endcode
varvalue r False

$overflow on
code auto:3922 equal[Char] 255[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #255;
  var  r: Boolean;
  r := a = b;
endcode
varvalue r True

code auto:3923 equal[Char] 255[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #255 = b;
endcode
varvalue r True

code auto:3924 equal[Char] 255[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a = #255;
endcode
varvalue r True

code auto:3925 equal[compile-time] 255[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 = #255;
endcode
varvalue r True

