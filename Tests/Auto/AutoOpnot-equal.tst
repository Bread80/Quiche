;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow on
code auto:2 not-equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3 not-equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r False

code auto:4 not-equal[Int8] -128[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r False

code auto:5 not-equal[compile-time] -128[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -128;
endcode
varvalue r False

$overflow on
code auto:6 not-equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:7 not-equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:8 not-equal[Int8] -128[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:9 not-equal[compile-time] -128[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -127;
endcode
varvalue r True

$overflow on
code auto:10 not-equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:11 not-equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:12 not-equal[Int8] -128[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:13 not-equal[compile-time] -128[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -1;
endcode
varvalue r True

$overflow on
code auto:14 not-equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:15 not-equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:16 not-equal[Int8] -128[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:17 not-equal[compile-time] -128[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:18 not-equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:19 not-equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:20 not-equal[Int8] -128[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:21 not-equal[compile-time] -128[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:22 not-equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:23 not-equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:24 not-equal[Int8] -128[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:25 not-equal[compile-time] -128[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:26 not-equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:27 not-equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:28 not-equal[Int8] -127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:29 not-equal[compile-time] -127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -128;
endcode
varvalue r True

$overflow on
code auto:30 not-equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:31 not-equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r False

code auto:32 not-equal[Int8] -127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r False

code auto:33 not-equal[compile-time] -127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -127;
endcode
varvalue r False

$overflow on
code auto:34 not-equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:35 not-equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:36 not-equal[Int8] -127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:37 not-equal[compile-time] -127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -1;
endcode
varvalue r True

$overflow on
code auto:38 not-equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:39 not-equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:40 not-equal[Int8] -127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:41 not-equal[compile-time] -127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 0;
endcode
varvalue r True

$overflow on
code auto:42 not-equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:43 not-equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:44 not-equal[Int8] -127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:45 not-equal[compile-time] -127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 1;
endcode
varvalue r True

$overflow on
code auto:46 not-equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:47 not-equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:48 not-equal[Int8] -127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:49 not-equal[compile-time] -127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 127;
endcode
varvalue r True

$overflow on
code auto:50 not-equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:51 not-equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:52 not-equal[Int8] -1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:53 not-equal[compile-time] -1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -128;
endcode
varvalue r True

$overflow on
code auto:54 not-equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:55 not-equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:56 not-equal[Int8] -1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:57 not-equal[compile-time] -1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -127;
endcode
varvalue r True

$overflow on
code auto:58 not-equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:59 not-equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r False

code auto:60 not-equal[Int8] -1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r False

code auto:61 not-equal[compile-time] -1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -1;
endcode
varvalue r False

$overflow on
code auto:62 not-equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:63 not-equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:64 not-equal[Int8] -1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:65 not-equal[compile-time] -1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:66 not-equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:67 not-equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:68 not-equal[Int8] -1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:69 not-equal[compile-time] -1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:70 not-equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:71 not-equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:72 not-equal[Int8] -1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:73 not-equal[compile-time] -1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:74 not-equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:75 not-equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:76 not-equal[Int8] 0[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:77 not-equal[compile-time] 0[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:78 not-equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:79 not-equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:80 not-equal[Int8] 0[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:81 not-equal[compile-time] 0[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -127;
endcode
varvalue r True

$overflow on
code auto:82 not-equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:83 not-equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:84 not-equal[Int8] 0[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:85 not-equal[compile-time] 0[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:86 not-equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:87 not-equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:88 not-equal[Int8] 0[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:89 not-equal[compile-time] 0[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:90 not-equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:91 not-equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:92 not-equal[Int8] 0[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:93 not-equal[compile-time] 0[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:94 not-equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:95 not-equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:96 not-equal[Int8] 0[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:97 not-equal[compile-time] 0[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:98 not-equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:99 not-equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:100 not-equal[Int8] 1[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:101 not-equal[compile-time] 1[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:102 not-equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:103 not-equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:104 not-equal[Int8] 1[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:105 not-equal[compile-time] 1[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -127;
endcode
varvalue r True

$overflow on
code auto:106 not-equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:107 not-equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:108 not-equal[Int8] 1[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:109 not-equal[compile-time] 1[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:110 not-equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:111 not-equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:112 not-equal[Int8] 1[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:113 not-equal[compile-time] 1[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:114 not-equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:115 not-equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:116 not-equal[Int8] 1[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:117 not-equal[compile-time] 1[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:118 not-equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:119 not-equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:120 not-equal[Int8] 1[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:121 not-equal[compile-time] 1[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:122 not-equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:123 not-equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:124 not-equal[Int8] 127[Int8], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:125 not-equal[compile-time] 127[Int8], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:126 not-equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:127 not-equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:128 not-equal[Int8] 127[Int8], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:129 not-equal[compile-time] 127[Int8], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -127;
endcode
varvalue r True

$overflow on
code auto:130 not-equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:131 not-equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:132 not-equal[Int8] 127[Int8], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:133 not-equal[compile-time] 127[Int8], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:134 not-equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:135 not-equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:136 not-equal[Int8] 127[Int8], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:137 not-equal[compile-time] 127[Int8], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:138 not-equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:139 not-equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:140 not-equal[Int8] 127[Int8], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:141 not-equal[compile-time] 127[Int8], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:142 not-equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:143 not-equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:144 not-equal[Int8] 127[Int8], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:145 not-equal[compile-time] 127[Int8], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:146 not-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:147 not-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:148 not-equal[Int16] -128[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:149 not-equal[compile-time] -128[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -32768;
endcode
varvalue r True

$overflow on
code auto:150 not-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:151 not-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:152 not-equal[Int16] -128[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:153 not-equal[compile-time] -128[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -32767;
endcode
varvalue r True

$overflow on
code auto:154 not-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:155 not-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:156 not-equal[Int16] -128[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:157 not-equal[compile-time] -128[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -129;
endcode
varvalue r True

$overflow on
code auto:158 not-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:159 not-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r False

code auto:160 not-equal[Int16] -128[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r False

code auto:161 not-equal[compile-time] -128[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -128;
endcode
varvalue r False

$overflow on
code auto:162 not-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:163 not-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:164 not-equal[Int16] -128[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:165 not-equal[compile-time] -128[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -1;
endcode
varvalue r True

$overflow on
code auto:166 not-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:167 not-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:168 not-equal[Int16] -128[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:169 not-equal[compile-time] -128[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:170 not-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:171 not-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:172 not-equal[Int16] -128[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:173 not-equal[compile-time] -128[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:174 not-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:175 not-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:176 not-equal[Int16] -128[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:177 not-equal[compile-time] -128[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:178 not-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:179 not-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:180 not-equal[Int16] -128[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:181 not-equal[compile-time] -128[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 128;
endcode
varvalue r True

$overflow on
code auto:182 not-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:183 not-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:184 not-equal[Int16] -128[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:185 not-equal[compile-time] -128[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:186 not-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:187 not-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:188 not-equal[Int16] -127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:189 not-equal[compile-time] -127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -32768;
endcode
varvalue r True

$overflow on
code auto:190 not-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:191 not-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:192 not-equal[Int16] -127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:193 not-equal[compile-time] -127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -32767;
endcode
varvalue r True

$overflow on
code auto:194 not-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:195 not-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:196 not-equal[Int16] -127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:197 not-equal[compile-time] -127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -129;
endcode
varvalue r True

$overflow on
code auto:198 not-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:199 not-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:200 not-equal[Int16] -127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:201 not-equal[compile-time] -127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -128;
endcode
varvalue r True

$overflow on
code auto:202 not-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:203 not-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:204 not-equal[Int16] -127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:205 not-equal[compile-time] -127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> -1;
endcode
varvalue r True

$overflow on
code auto:206 not-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:207 not-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:208 not-equal[Int16] -127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:209 not-equal[compile-time] -127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 0;
endcode
varvalue r True

$overflow on
code auto:210 not-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:211 not-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:212 not-equal[Int16] -127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:213 not-equal[compile-time] -127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 1;
endcode
varvalue r True

$overflow on
code auto:214 not-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:215 not-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:216 not-equal[Int16] -127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:217 not-equal[compile-time] -127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 127;
endcode
varvalue r True

$overflow on
code auto:218 not-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:219 not-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:220 not-equal[Int16] -127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:221 not-equal[compile-time] -127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 128;
endcode
varvalue r True

$overflow on
code auto:222 not-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:223 not-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:224 not-equal[Int16] -127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:225 not-equal[compile-time] -127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:226 not-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:227 not-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:228 not-equal[Int16] -1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:229 not-equal[compile-time] -1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -32768;
endcode
varvalue r True

$overflow on
code auto:230 not-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:231 not-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:232 not-equal[Int16] -1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:233 not-equal[compile-time] -1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -32767;
endcode
varvalue r True

$overflow on
code auto:234 not-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:235 not-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:236 not-equal[Int16] -1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:237 not-equal[compile-time] -1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -129;
endcode
varvalue r True

$overflow on
code auto:238 not-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:239 not-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:240 not-equal[Int16] -1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:241 not-equal[compile-time] -1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -128;
endcode
varvalue r True

$overflow on
code auto:242 not-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:243 not-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r False

code auto:244 not-equal[Int16] -1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r False

code auto:245 not-equal[compile-time] -1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -1;
endcode
varvalue r False

$overflow on
code auto:246 not-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:247 not-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:248 not-equal[Int16] -1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:249 not-equal[compile-time] -1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:250 not-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:251 not-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:252 not-equal[Int16] -1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:253 not-equal[compile-time] -1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:254 not-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:255 not-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:256 not-equal[Int16] -1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:257 not-equal[compile-time] -1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:258 not-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:259 not-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:260 not-equal[Int16] -1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:261 not-equal[compile-time] -1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 128;
endcode
varvalue r True

$overflow on
code auto:262 not-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:263 not-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:264 not-equal[Int16] -1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:265 not-equal[compile-time] -1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:266 not-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:267 not-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:268 not-equal[Int16] 0[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:269 not-equal[compile-time] 0[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32768;
endcode
varvalue r True

$overflow on
code auto:270 not-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:271 not-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:272 not-equal[Int16] 0[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:273 not-equal[compile-time] 0[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32767;
endcode
varvalue r True

$overflow on
code auto:274 not-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:275 not-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:276 not-equal[Int16] 0[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:277 not-equal[compile-time] 0[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -129;
endcode
varvalue r True

$overflow on
code auto:278 not-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:279 not-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:280 not-equal[Int16] 0[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:281 not-equal[compile-time] 0[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:282 not-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:283 not-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:284 not-equal[Int16] 0[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:285 not-equal[compile-time] 0[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:286 not-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:287 not-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:288 not-equal[Int16] 0[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:289 not-equal[compile-time] 0[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:290 not-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:291 not-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:292 not-equal[Int16] 0[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:293 not-equal[compile-time] 0[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:294 not-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:295 not-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:296 not-equal[Int16] 0[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:297 not-equal[compile-time] 0[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:298 not-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:299 not-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:300 not-equal[Int16] 0[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:301 not-equal[compile-time] 0[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:302 not-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:303 not-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:304 not-equal[Int16] 0[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:305 not-equal[compile-time] 0[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:306 not-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:307 not-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:308 not-equal[Int16] 1[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:309 not-equal[compile-time] 1[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32768;
endcode
varvalue r True

$overflow on
code auto:310 not-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:311 not-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:312 not-equal[Int16] 1[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:313 not-equal[compile-time] 1[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32767;
endcode
varvalue r True

$overflow on
code auto:314 not-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:315 not-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:316 not-equal[Int16] 1[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:317 not-equal[compile-time] 1[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -129;
endcode
varvalue r True

$overflow on
code auto:318 not-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:319 not-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:320 not-equal[Int16] 1[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:321 not-equal[compile-time] 1[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:322 not-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:323 not-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:324 not-equal[Int16] 1[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:325 not-equal[compile-time] 1[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:326 not-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:327 not-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:328 not-equal[Int16] 1[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:329 not-equal[compile-time] 1[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:330 not-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:331 not-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:332 not-equal[Int16] 1[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:333 not-equal[compile-time] 1[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:334 not-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:335 not-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:336 not-equal[Int16] 1[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:337 not-equal[compile-time] 1[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:338 not-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:339 not-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:340 not-equal[Int16] 1[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:341 not-equal[compile-time] 1[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:342 not-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:343 not-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:344 not-equal[Int16] 1[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:345 not-equal[compile-time] 1[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:346 not-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:347 not-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:348 not-equal[Int16] 127[Int8], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:349 not-equal[compile-time] 127[Int8], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32768;
endcode
varvalue r True

$overflow on
code auto:350 not-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:351 not-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:352 not-equal[Int16] 127[Int8], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:353 not-equal[compile-time] 127[Int8], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32767;
endcode
varvalue r True

$overflow on
code auto:354 not-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:355 not-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:356 not-equal[Int16] 127[Int8], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:357 not-equal[compile-time] 127[Int8], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -129;
endcode
varvalue r True

$overflow on
code auto:358 not-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:359 not-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:360 not-equal[Int16] 127[Int8], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:361 not-equal[compile-time] 127[Int8], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:362 not-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:363 not-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:364 not-equal[Int16] 127[Int8], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:365 not-equal[compile-time] 127[Int8], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:366 not-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:367 not-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:368 not-equal[Int16] 127[Int8], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:369 not-equal[compile-time] 127[Int8], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:370 not-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:371 not-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:372 not-equal[Int16] 127[Int8], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:373 not-equal[compile-time] 127[Int8], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:374 not-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:375 not-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:376 not-equal[Int16] 127[Int8], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:377 not-equal[compile-time] 127[Int8], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:378 not-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:379 not-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:380 not-equal[Int16] 127[Int8], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:381 not-equal[compile-time] 127[Int8], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:382 not-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:383 not-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:384 not-equal[Int16] 127[Int8], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:385 not-equal[compile-time] 127[Int8], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:386 not-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:387 not-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:388 not-equal[Int16] -128[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:389 not-equal[compile-time] -128[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:390 not-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:391 not-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:392 not-equal[Int16] -128[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:393 not-equal[compile-time] -128[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:394 not-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:395 not-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:396 not-equal[Int16] -128[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:397 not-equal[compile-time] -128[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:398 not-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:399 not-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:400 not-equal[Int16] -128[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:401 not-equal[compile-time] -128[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 128;
endcode
varvalue r True

$overflow on
code auto:402 not-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:403 not-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:404 not-equal[Int16] -128[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:405 not-equal[compile-time] -128[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:406 not-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:407 not-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:408 not-equal[Int16] -127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:409 not-equal[compile-time] -127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 0;
endcode
varvalue r True

$overflow on
code auto:410 not-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:411 not-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:412 not-equal[Int16] -127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:413 not-equal[compile-time] -127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 1;
endcode
varvalue r True

$overflow on
code auto:414 not-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:415 not-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:416 not-equal[Int16] -127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:417 not-equal[compile-time] -127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 127;
endcode
varvalue r True

$overflow on
code auto:418 not-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:419 not-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:420 not-equal[Int16] -127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:421 not-equal[compile-time] -127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 128;
endcode
varvalue r True

$overflow on
code auto:422 not-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:423 not-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:424 not-equal[Int16] -127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:425 not-equal[compile-time] -127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 255;
endcode
varvalue r True

$overflow on
code auto:426 not-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:427 not-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:428 not-equal[Int16] -1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:429 not-equal[compile-time] -1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:430 not-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:431 not-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:432 not-equal[Int16] -1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:433 not-equal[compile-time] -1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:434 not-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:435 not-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:436 not-equal[Int16] -1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:437 not-equal[compile-time] -1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:438 not-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:439 not-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:440 not-equal[Int16] -1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:441 not-equal[compile-time] -1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 128;
endcode
varvalue r True

$overflow on
code auto:442 not-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:443 not-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:444 not-equal[Int16] -1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:445 not-equal[compile-time] -1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:446 not-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:447 not-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:448 not-equal[Int16] 0[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:449 not-equal[compile-time] 0[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:450 not-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:451 not-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:452 not-equal[Int16] 0[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:453 not-equal[compile-time] 0[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:454 not-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:455 not-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:456 not-equal[Int16] 0[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:457 not-equal[compile-time] 0[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:458 not-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:459 not-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:460 not-equal[Int16] 0[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:461 not-equal[compile-time] 0[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:462 not-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:463 not-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:464 not-equal[Int16] 0[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:465 not-equal[compile-time] 0[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:466 not-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:467 not-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:468 not-equal[Int16] 1[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:469 not-equal[compile-time] 1[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:470 not-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:471 not-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:472 not-equal[Int16] 1[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:473 not-equal[compile-time] 1[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:474 not-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:475 not-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:476 not-equal[Int16] 1[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:477 not-equal[compile-time] 1[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:478 not-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:479 not-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:480 not-equal[Int16] 1[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:481 not-equal[compile-time] 1[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:482 not-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:483 not-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:484 not-equal[Int16] 1[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:485 not-equal[compile-time] 1[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:486 not-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:487 not-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:488 not-equal[Int16] 127[Int8], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:489 not-equal[compile-time] 127[Int8], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:490 not-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:491 not-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:492 not-equal[Int16] 127[Int8], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:493 not-equal[compile-time] 127[Int8], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:494 not-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:495 not-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:496 not-equal[Int16] 127[Int8], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:497 not-equal[compile-time] 127[Int8], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:498 not-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:499 not-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:500 not-equal[Int16] 127[Int8], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:501 not-equal[compile-time] 127[Int8], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:502 not-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:503 not-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:504 not-equal[Int16] 127[Int8], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:505 not-equal[compile-time] 127[Int8], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:506 not-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:507 not-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:508 not-equal[Int16] -128[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:509 not-equal[compile-time] -128[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:510 not-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:511 not-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:512 not-equal[Int16] -128[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:513 not-equal[compile-time] -128[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:514 not-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:515 not-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:516 not-equal[Int16] -128[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:517 not-equal[compile-time] -128[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:518 not-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:519 not-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:520 not-equal[Int16] -128[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:521 not-equal[compile-time] -128[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:522 not-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:523 not-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:524 not-equal[Int16] -128[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:525 not-equal[compile-time] -128[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:526 not-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:527 not-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:528 not-equal[Int16] -127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:529 not-equal[compile-time] -127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 0;
endcode
varvalue r True

$overflow on
code auto:530 not-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:531 not-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:532 not-equal[Int16] -127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:533 not-equal[compile-time] -127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 255;
endcode
varvalue r True

$overflow on
code auto:534 not-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:535 not-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:536 not-equal[Int16] -127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:537 not-equal[compile-time] -127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:538 not-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:539 not-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:540 not-equal[Int16] -127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:541 not-equal[compile-time] -127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:542 not-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:543 not-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:544 not-equal[Int16] -127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:545 not-equal[compile-time] -127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:546 not-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:547 not-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:548 not-equal[Int16] -1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:549 not-equal[compile-time] -1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:550 not-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:551 not-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:552 not-equal[Int16] -1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:553 not-equal[compile-time] -1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:554 not-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:555 not-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:556 not-equal[Int16] -1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:557 not-equal[compile-time] -1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:558 not-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:559 not-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:560 not-equal[Int16] -1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:561 not-equal[compile-time] -1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:562 not-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:563 not-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:564 not-equal[Int16] -1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:565 not-equal[compile-time] -1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:566 not-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:567 not-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:568 not-equal[Int16] 0[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:569 not-equal[compile-time] 0[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:570 not-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:571 not-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:572 not-equal[Int16] 0[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:573 not-equal[compile-time] 0[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:574 not-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:575 not-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:576 not-equal[Int16] 0[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:577 not-equal[compile-time] 0[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:578 not-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:579 not-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:580 not-equal[Int16] 0[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:581 not-equal[compile-time] 0[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:582 not-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:583 not-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:584 not-equal[Int16] 0[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:585 not-equal[compile-time] 0[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:586 not-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:587 not-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:588 not-equal[Int16] 1[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:589 not-equal[compile-time] 1[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:590 not-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:591 not-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:592 not-equal[Int16] 1[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:593 not-equal[compile-time] 1[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:594 not-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:595 not-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:596 not-equal[Int16] 1[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:597 not-equal[compile-time] 1[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:598 not-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:599 not-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:600 not-equal[Int16] 1[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:601 not-equal[compile-time] 1[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:602 not-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:603 not-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:604 not-equal[Int16] 1[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:605 not-equal[compile-time] 1[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:606 not-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:607 not-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:608 not-equal[Int16] 127[Int8], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:609 not-equal[compile-time] 127[Int8], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:610 not-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:611 not-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:612 not-equal[Int16] 127[Int8], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:613 not-equal[compile-time] 127[Int8], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:614 not-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:615 not-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:616 not-equal[Int16] 127[Int8], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:617 not-equal[compile-time] 127[Int8], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:618 not-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:619 not-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:620 not-equal[Int16] 127[Int8], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:621 not-equal[compile-time] 127[Int8], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:622 not-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:623 not-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:624 not-equal[Int16] 127[Int8], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:625 not-equal[compile-time] 127[Int8], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:626 not-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:627 not-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:628 not-equal[Pointer] -128[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:629 not-equal[compile-time] -128[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:630 not-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:631 not-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:632 not-equal[Pointer] -128[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:633 not-equal[compile-time] -128[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:634 not-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:635 not-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:636 not-equal[Pointer] -128[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:637 not-equal[compile-time] -128[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:638 not-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:639 not-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:640 not-equal[Pointer] -128[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:641 not-equal[compile-time] -128[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:642 not-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:643 not-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:644 not-equal[Pointer] -128[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:645 not-equal[compile-time] -128[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:646 not-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:647 not-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:648 not-equal[Pointer] -127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:649 not-equal[compile-time] -127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 0;
endcode
varvalue r True

$overflow on
code auto:650 not-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:651 not-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:652 not-equal[Pointer] -127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:653 not-equal[compile-time] -127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 255;
endcode
varvalue r True

$overflow on
code auto:654 not-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:655 not-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:656 not-equal[Pointer] -127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:657 not-equal[compile-time] -127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:658 not-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:659 not-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:660 not-equal[Pointer] -127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:661 not-equal[compile-time] -127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:662 not-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:663 not-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -127 <> b;
endcode
varvalue r True

code auto:664 not-equal[Pointer] -127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:665 not-equal[compile-time] -127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:666 not-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:667 not-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:668 not-equal[Pointer] -1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:669 not-equal[compile-time] -1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:670 not-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:671 not-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:672 not-equal[Pointer] -1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:673 not-equal[compile-time] -1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:674 not-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:675 not-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:676 not-equal[Pointer] -1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:677 not-equal[compile-time] -1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:678 not-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:679 not-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:680 not-equal[Pointer] -1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:681 not-equal[compile-time] -1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:682 not-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:683 not-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:684 not-equal[Pointer] -1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:685 not-equal[compile-time] -1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:686 not-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:687 not-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:688 not-equal[Pointer] 0[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:689 not-equal[compile-time] 0[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:690 not-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:691 not-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:692 not-equal[Pointer] 0[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:693 not-equal[compile-time] 0[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:694 not-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:695 not-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:696 not-equal[Pointer] 0[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:697 not-equal[compile-time] 0[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:698 not-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:699 not-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:700 not-equal[Pointer] 0[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:701 not-equal[compile-time] 0[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:702 not-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:703 not-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:704 not-equal[Pointer] 0[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:705 not-equal[compile-time] 0[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:706 not-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:707 not-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:708 not-equal[Pointer] 1[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:709 not-equal[compile-time] 1[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:710 not-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:711 not-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:712 not-equal[Pointer] 1[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:713 not-equal[compile-time] 1[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:714 not-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:715 not-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:716 not-equal[Pointer] 1[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:717 not-equal[compile-time] 1[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:718 not-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:719 not-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:720 not-equal[Pointer] 1[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:721 not-equal[compile-time] 1[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:722 not-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:723 not-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:724 not-equal[Pointer] 1[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:725 not-equal[compile-time] 1[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:726 not-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:727 not-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:728 not-equal[Pointer] 127[Int8], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:729 not-equal[compile-time] 127[Int8], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:730 not-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:731 not-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:732 not-equal[Pointer] 127[Int8], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:733 not-equal[compile-time] 127[Int8], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:734 not-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:735 not-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:736 not-equal[Pointer] 127[Int8], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:737 not-equal[compile-time] 127[Int8], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:738 not-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:739 not-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:740 not-equal[Pointer] 127[Int8], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:741 not-equal[compile-time] 127[Int8], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:742 not-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:743 not-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:744 not-equal[Pointer] 127[Int8], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:745 not-equal[compile-time] 127[Int8], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:746 not-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:747 not-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:748 not-equal[Int16] -32768[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:749 not-equal[compile-time] -32768[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:750 not-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:751 not-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:752 not-equal[Int16] -32768[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:753 not-equal[compile-time] -32768[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -127;
endcode
varvalue r True

$overflow on
code auto:754 not-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:755 not-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:756 not-equal[Int16] -32768[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:757 not-equal[compile-time] -32768[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:758 not-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:759 not-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:760 not-equal[Int16] -32768[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:761 not-equal[compile-time] -32768[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:762 not-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:763 not-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:764 not-equal[Int16] -32768[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:765 not-equal[compile-time] -32768[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:766 not-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:767 not-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:768 not-equal[Int16] -32768[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:769 not-equal[compile-time] -32768[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:770 not-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:771 not-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:772 not-equal[Int16] -32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:773 not-equal[compile-time] -32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:774 not-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:775 not-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:776 not-equal[Int16] -32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:777 not-equal[compile-time] -32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -127;
endcode
varvalue r True

$overflow on
code auto:778 not-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:779 not-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:780 not-equal[Int16] -32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:781 not-equal[compile-time] -32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:782 not-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:783 not-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:784 not-equal[Int16] -32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:785 not-equal[compile-time] -32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:786 not-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:787 not-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:788 not-equal[Int16] -32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:789 not-equal[compile-time] -32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:790 not-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:791 not-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:792 not-equal[Int16] -32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:793 not-equal[compile-time] -32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:794 not-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:795 not-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:796 not-equal[Int16] -129[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:797 not-equal[compile-time] -129[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -128;
endcode
varvalue r True

$overflow on
code auto:798 not-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:799 not-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:800 not-equal[Int16] -129[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:801 not-equal[compile-time] -129[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -127;
endcode
varvalue r True

$overflow on
code auto:802 not-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:803 not-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:804 not-equal[Int16] -129[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:805 not-equal[compile-time] -129[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -1;
endcode
varvalue r True

$overflow on
code auto:806 not-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:807 not-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:808 not-equal[Int16] -129[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:809 not-equal[compile-time] -129[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 0;
endcode
varvalue r True

$overflow on
code auto:810 not-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:811 not-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:812 not-equal[Int16] -129[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:813 not-equal[compile-time] -129[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 1;
endcode
varvalue r True

$overflow on
code auto:814 not-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:815 not-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:816 not-equal[Int16] -129[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:817 not-equal[compile-time] -129[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 127;
endcode
varvalue r True

$overflow on
code auto:818 not-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:819 not-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r False

code auto:820 not-equal[Int16] -128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r False

code auto:821 not-equal[compile-time] -128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -128;
endcode
varvalue r False

$overflow on
code auto:822 not-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:823 not-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:824 not-equal[Int16] -128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:825 not-equal[compile-time] -128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -127;
endcode
varvalue r True

$overflow on
code auto:826 not-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:827 not-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:828 not-equal[Int16] -128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:829 not-equal[compile-time] -128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -1;
endcode
varvalue r True

$overflow on
code auto:830 not-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:831 not-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:832 not-equal[Int16] -128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:833 not-equal[compile-time] -128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:834 not-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:835 not-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:836 not-equal[Int16] -128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:837 not-equal[compile-time] -128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:838 not-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:839 not-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:840 not-equal[Int16] -128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:841 not-equal[compile-time] -128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:842 not-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:843 not-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:844 not-equal[Int16] -1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:845 not-equal[compile-time] -1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -128;
endcode
varvalue r True

$overflow on
code auto:846 not-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:847 not-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:848 not-equal[Int16] -1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:849 not-equal[compile-time] -1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -127;
endcode
varvalue r True

$overflow on
code auto:850 not-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:851 not-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r False

code auto:852 not-equal[Int16] -1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r False

code auto:853 not-equal[compile-time] -1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -1;
endcode
varvalue r False

$overflow on
code auto:854 not-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:855 not-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:856 not-equal[Int16] -1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:857 not-equal[compile-time] -1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:858 not-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:859 not-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:860 not-equal[Int16] -1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:861 not-equal[compile-time] -1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:862 not-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:863 not-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:864 not-equal[Int16] -1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:865 not-equal[compile-time] -1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:866 not-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:867 not-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:868 not-equal[Int16] 0[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:869 not-equal[compile-time] 0[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:870 not-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:871 not-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:872 not-equal[Int16] 0[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:873 not-equal[compile-time] 0[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -127;
endcode
varvalue r True

$overflow on
code auto:874 not-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:875 not-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:876 not-equal[Int16] 0[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:877 not-equal[compile-time] 0[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:878 not-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:879 not-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:880 not-equal[Int16] 0[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:881 not-equal[compile-time] 0[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:882 not-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:883 not-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:884 not-equal[Int16] 0[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:885 not-equal[compile-time] 0[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:886 not-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:887 not-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:888 not-equal[Int16] 0[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:889 not-equal[compile-time] 0[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:890 not-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:891 not-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:892 not-equal[Int16] 1[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:893 not-equal[compile-time] 1[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:894 not-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:895 not-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:896 not-equal[Int16] 1[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:897 not-equal[compile-time] 1[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -127;
endcode
varvalue r True

$overflow on
code auto:898 not-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:899 not-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:900 not-equal[Int16] 1[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:901 not-equal[compile-time] 1[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:902 not-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:903 not-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:904 not-equal[Int16] 1[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:905 not-equal[compile-time] 1[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:906 not-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:907 not-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:908 not-equal[Int16] 1[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:909 not-equal[compile-time] 1[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:910 not-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:911 not-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:912 not-equal[Int16] 1[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:913 not-equal[compile-time] 1[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:914 not-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:915 not-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:916 not-equal[Int16] 127[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:917 not-equal[compile-time] 127[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:918 not-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:919 not-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:920 not-equal[Int16] 127[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:921 not-equal[compile-time] 127[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -127;
endcode
varvalue r True

$overflow on
code auto:922 not-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:923 not-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:924 not-equal[Int16] 127[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:925 not-equal[compile-time] 127[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:926 not-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:927 not-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:928 not-equal[Int16] 127[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:929 not-equal[compile-time] 127[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:930 not-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:931 not-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:932 not-equal[Int16] 127[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:933 not-equal[compile-time] 127[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:934 not-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:935 not-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:936 not-equal[Int16] 127[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:937 not-equal[compile-time] 127[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:938 not-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:939 not-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:940 not-equal[Int16] 128[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:941 not-equal[compile-time] 128[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -128;
endcode
varvalue r True

$overflow on
code auto:942 not-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:943 not-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:944 not-equal[Int16] 128[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:945 not-equal[compile-time] 128[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -127;
endcode
varvalue r True

$overflow on
code auto:946 not-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:947 not-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:948 not-equal[Int16] 128[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:949 not-equal[compile-time] 128[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -1;
endcode
varvalue r True

$overflow on
code auto:950 not-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:951 not-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:952 not-equal[Int16] 128[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:953 not-equal[compile-time] 128[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:954 not-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:955 not-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:956 not-equal[Int16] 128[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:957 not-equal[compile-time] 128[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:958 not-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:959 not-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:960 not-equal[Int16] 128[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:961 not-equal[compile-time] 128[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:962 not-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:963 not-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:964 not-equal[Int16] 32767[Int16], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:965 not-equal[compile-time] 32767[Int16], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:966 not-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:967 not-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:968 not-equal[Int16] 32767[Int16], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:969 not-equal[compile-time] 32767[Int16], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -127;
endcode
varvalue r True

$overflow on
code auto:970 not-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:971 not-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:972 not-equal[Int16] 32767[Int16], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:973 not-equal[compile-time] 32767[Int16], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:974 not-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:975 not-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:976 not-equal[Int16] 32767[Int16], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:977 not-equal[compile-time] 32767[Int16], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:978 not-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:979 not-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:980 not-equal[Int16] 32767[Int16], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:981 not-equal[compile-time] 32767[Int16], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:982 not-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:983 not-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:984 not-equal[Int16] 32767[Int16], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:985 not-equal[compile-time] 32767[Int16], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:986 not-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:987 not-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r False

code auto:988 not-equal[Int16] -32768[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r False

code auto:989 not-equal[compile-time] -32768[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -32768;
endcode
varvalue r False

$overflow on
code auto:990 not-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:991 not-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:992 not-equal[Int16] -32768[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:993 not-equal[compile-time] -32768[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -32767;
endcode
varvalue r True

$overflow on
code auto:994 not-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:995 not-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:996 not-equal[Int16] -32768[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:997 not-equal[compile-time] -32768[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -129;
endcode
varvalue r True

$overflow on
code auto:998 not-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:999 not-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1000 not-equal[Int16] -32768[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1001 not-equal[compile-time] -32768[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:1002 not-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1003 not-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1004 not-equal[Int16] -32768[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1005 not-equal[compile-time] -32768[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:1006 not-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1007 not-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1008 not-equal[Int16] -32768[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1009 not-equal[compile-time] -32768[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:1010 not-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1011 not-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1012 not-equal[Int16] -32768[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1013 not-equal[compile-time] -32768[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:1014 not-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1015 not-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1016 not-equal[Int16] -32768[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1017 not-equal[compile-time] -32768[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:1018 not-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1019 not-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1020 not-equal[Int16] -32768[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1021 not-equal[compile-time] -32768[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:1022 not-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1023 not-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1024 not-equal[Int16] -32768[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1025 not-equal[compile-time] -32768[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1026 not-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1027 not-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1028 not-equal[Int16] -32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1029 not-equal[compile-time] -32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1030 not-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1031 not-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r False

code auto:1032 not-equal[Int16] -32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r False

code auto:1033 not-equal[compile-time] -32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -32767;
endcode
varvalue r False

$overflow on
code auto:1034 not-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1035 not-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1036 not-equal[Int16] -32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1037 not-equal[compile-time] -32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -129;
endcode
varvalue r True

$overflow on
code auto:1038 not-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1039 not-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1040 not-equal[Int16] -32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1041 not-equal[compile-time] -32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:1042 not-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1043 not-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1044 not-equal[Int16] -32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1045 not-equal[compile-time] -32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:1046 not-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1047 not-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1048 not-equal[Int16] -32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1049 not-equal[compile-time] -32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1050 not-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1051 not-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1052 not-equal[Int16] -32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1053 not-equal[compile-time] -32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:1054 not-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1055 not-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1056 not-equal[Int16] -32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1057 not-equal[compile-time] -32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:1058 not-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1059 not-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1060 not-equal[Int16] -32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1061 not-equal[compile-time] -32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:1062 not-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1063 not-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1064 not-equal[Int16] -32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1065 not-equal[compile-time] -32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1066 not-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1067 not-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1068 not-equal[Int16] -129[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1069 not-equal[compile-time] -129[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1070 not-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1071 not-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1072 not-equal[Int16] -129[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1073 not-equal[compile-time] -129[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1074 not-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1075 not-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r False

code auto:1076 not-equal[Int16] -129[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r False

code auto:1077 not-equal[compile-time] -129[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -129;
endcode
varvalue r False

$overflow on
code auto:1078 not-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1079 not-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1080 not-equal[Int16] -129[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1081 not-equal[compile-time] -129[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -128;
endcode
varvalue r True

$overflow on
code auto:1082 not-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1083 not-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1084 not-equal[Int16] -129[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1085 not-equal[compile-time] -129[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> -1;
endcode
varvalue r True

$overflow on
code auto:1086 not-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1087 not-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1088 not-equal[Int16] -129[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1089 not-equal[compile-time] -129[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 0;
endcode
varvalue r True

$overflow on
code auto:1090 not-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1091 not-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1092 not-equal[Int16] -129[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1093 not-equal[compile-time] -129[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 1;
endcode
varvalue r True

$overflow on
code auto:1094 not-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1095 not-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1096 not-equal[Int16] -129[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1097 not-equal[compile-time] -129[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 127;
endcode
varvalue r True

$overflow on
code auto:1098 not-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1099 not-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1100 not-equal[Int16] -129[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1101 not-equal[compile-time] -129[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 128;
endcode
varvalue r True

$overflow on
code auto:1102 not-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1103 not-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1104 not-equal[Int16] -129[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1105 not-equal[compile-time] -129[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1106 not-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1107 not-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1108 not-equal[Int16] -128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1109 not-equal[compile-time] -128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1110 not-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1111 not-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1112 not-equal[Int16] -128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1113 not-equal[compile-time] -128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1114 not-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1115 not-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1116 not-equal[Int16] -128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1117 not-equal[compile-time] -128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -129;
endcode
varvalue r True

$overflow on
code auto:1118 not-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1119 not-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r False

code auto:1120 not-equal[Int16] -128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r False

code auto:1121 not-equal[compile-time] -128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -128;
endcode
varvalue r False

$overflow on
code auto:1122 not-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1123 not-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1124 not-equal[Int16] -128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1125 not-equal[compile-time] -128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> -1;
endcode
varvalue r True

$overflow on
code auto:1126 not-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1127 not-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1128 not-equal[Int16] -128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1129 not-equal[compile-time] -128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1130 not-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1131 not-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1132 not-equal[Int16] -128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1133 not-equal[compile-time] -128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:1134 not-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1135 not-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1136 not-equal[Int16] -128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1137 not-equal[compile-time] -128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:1138 not-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1139 not-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1140 not-equal[Int16] -128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1141 not-equal[compile-time] -128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 128;
endcode
varvalue r True

$overflow on
code auto:1142 not-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1143 not-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1144 not-equal[Int16] -128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1145 not-equal[compile-time] -128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1146 not-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1147 not-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1148 not-equal[Int16] -1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1149 not-equal[compile-time] -1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1150 not-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1151 not-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1152 not-equal[Int16] -1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1153 not-equal[compile-time] -1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1154 not-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1155 not-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1156 not-equal[Int16] -1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1157 not-equal[compile-time] -1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -129;
endcode
varvalue r True

$overflow on
code auto:1158 not-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1159 not-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1160 not-equal[Int16] -1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1161 not-equal[compile-time] -1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -128;
endcode
varvalue r True

$overflow on
code auto:1162 not-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1163 not-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r False

code auto:1164 not-equal[Int16] -1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r False

code auto:1165 not-equal[compile-time] -1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> -1;
endcode
varvalue r False

$overflow on
code auto:1166 not-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1167 not-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1168 not-equal[Int16] -1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1169 not-equal[compile-time] -1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1170 not-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1171 not-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1172 not-equal[Int16] -1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1173 not-equal[compile-time] -1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:1174 not-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1175 not-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1176 not-equal[Int16] -1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1177 not-equal[compile-time] -1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:1178 not-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1179 not-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1180 not-equal[Int16] -1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1181 not-equal[compile-time] -1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 128;
endcode
varvalue r True

$overflow on
code auto:1182 not-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1183 not-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1184 not-equal[Int16] -1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1185 not-equal[compile-time] -1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1186 not-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1187 not-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1188 not-equal[Int16] 0[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1189 not-equal[compile-time] 0[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1190 not-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1191 not-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1192 not-equal[Int16] 0[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1193 not-equal[compile-time] 0[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1194 not-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1195 not-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1196 not-equal[Int16] 0[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1197 not-equal[compile-time] 0[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -129;
endcode
varvalue r True

$overflow on
code auto:1198 not-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1199 not-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1200 not-equal[Int16] 0[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1201 not-equal[compile-time] 0[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:1202 not-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1203 not-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1204 not-equal[Int16] 0[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1205 not-equal[compile-time] 0[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:1206 not-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1207 not-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:1208 not-equal[Int16] 0[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:1209 not-equal[compile-time] 0[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:1210 not-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1211 not-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1212 not-equal[Int16] 0[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1213 not-equal[compile-time] 0[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:1214 not-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1215 not-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1216 not-equal[Int16] 0[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1217 not-equal[compile-time] 0[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:1218 not-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1219 not-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1220 not-equal[Int16] 0[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1221 not-equal[compile-time] 0[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:1222 not-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1223 not-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1224 not-equal[Int16] 0[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1225 not-equal[compile-time] 0[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1226 not-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1227 not-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1228 not-equal[Int16] 1[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1229 not-equal[compile-time] 1[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1230 not-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1231 not-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1232 not-equal[Int16] 1[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1233 not-equal[compile-time] 1[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1234 not-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1235 not-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1236 not-equal[Int16] 1[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1237 not-equal[compile-time] 1[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -129;
endcode
varvalue r True

$overflow on
code auto:1238 not-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1239 not-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1240 not-equal[Int16] 1[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1241 not-equal[compile-time] 1[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:1242 not-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1243 not-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1244 not-equal[Int16] 1[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1245 not-equal[compile-time] 1[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:1246 not-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1247 not-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1248 not-equal[Int16] 1[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1249 not-equal[compile-time] 1[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1250 not-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1251 not-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:1252 not-equal[Int16] 1[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:1253 not-equal[compile-time] 1[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:1254 not-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1255 not-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1256 not-equal[Int16] 1[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1257 not-equal[compile-time] 1[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:1258 not-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1259 not-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1260 not-equal[Int16] 1[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1261 not-equal[compile-time] 1[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:1262 not-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1263 not-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1264 not-equal[Int16] 1[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1265 not-equal[compile-time] 1[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1266 not-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1267 not-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1268 not-equal[Int16] 127[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1269 not-equal[compile-time] 127[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1270 not-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1271 not-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1272 not-equal[Int16] 127[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1273 not-equal[compile-time] 127[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1274 not-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1275 not-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1276 not-equal[Int16] 127[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1277 not-equal[compile-time] 127[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -129;
endcode
varvalue r True

$overflow on
code auto:1278 not-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1279 not-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1280 not-equal[Int16] 127[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1281 not-equal[compile-time] 127[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:1282 not-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1283 not-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1284 not-equal[Int16] 127[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1285 not-equal[compile-time] 127[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:1286 not-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1287 not-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1288 not-equal[Int16] 127[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1289 not-equal[compile-time] 127[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:1290 not-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1291 not-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1292 not-equal[Int16] 127[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1293 not-equal[compile-time] 127[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:1294 not-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1295 not-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:1296 not-equal[Int16] 127[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:1297 not-equal[compile-time] 127[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:1298 not-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1299 not-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1300 not-equal[Int16] 127[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1301 not-equal[compile-time] 127[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:1302 not-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1303 not-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1304 not-equal[Int16] 127[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1305 not-equal[compile-time] 127[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1306 not-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1307 not-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1308 not-equal[Int16] 128[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1309 not-equal[compile-time] 128[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1310 not-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1311 not-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1312 not-equal[Int16] 128[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1313 not-equal[compile-time] 128[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1314 not-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1315 not-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1316 not-equal[Int16] 128[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1317 not-equal[compile-time] 128[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -129;
endcode
varvalue r True

$overflow on
code auto:1318 not-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1319 not-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1320 not-equal[Int16] 128[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1321 not-equal[compile-time] 128[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -128;
endcode
varvalue r True

$overflow on
code auto:1322 not-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1323 not-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1324 not-equal[Int16] 128[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1325 not-equal[compile-time] 128[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -1;
endcode
varvalue r True

$overflow on
code auto:1326 not-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1327 not-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1328 not-equal[Int16] 128[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1329 not-equal[compile-time] 128[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1330 not-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1331 not-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1332 not-equal[Int16] 128[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1333 not-equal[compile-time] 128[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:1334 not-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1335 not-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1336 not-equal[Int16] 128[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1337 not-equal[compile-time] 128[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:1338 not-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1339 not-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r False

code auto:1340 not-equal[Int16] 128[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r False

code auto:1341 not-equal[compile-time] 128[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 128;
endcode
varvalue r False

$overflow on
code auto:1342 not-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1343 not-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1344 not-equal[Int16] 128[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1345 not-equal[compile-time] 128[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1346 not-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1347 not-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1348 not-equal[Int16] 32767[Int16], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:1349 not-equal[compile-time] 32767[Int16], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32768;
endcode
varvalue r True

$overflow on
code auto:1350 not-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1351 not-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1352 not-equal[Int16] 32767[Int16], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:1353 not-equal[compile-time] 32767[Int16], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32767;
endcode
varvalue r True

$overflow on
code auto:1354 not-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1355 not-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1356 not-equal[Int16] 32767[Int16], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:1357 not-equal[compile-time] 32767[Int16], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -129;
endcode
varvalue r True

$overflow on
code auto:1358 not-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1359 not-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1360 not-equal[Int16] 32767[Int16], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1361 not-equal[compile-time] 32767[Int16], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:1362 not-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1363 not-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1364 not-equal[Int16] 32767[Int16], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1365 not-equal[compile-time] 32767[Int16], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:1366 not-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1367 not-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1368 not-equal[Int16] 32767[Int16], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1369 not-equal[compile-time] 32767[Int16], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1370 not-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1371 not-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1372 not-equal[Int16] 32767[Int16], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1373 not-equal[compile-time] 32767[Int16], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:1374 not-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1375 not-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1376 not-equal[Int16] 32767[Int16], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1377 not-equal[compile-time] 32767[Int16], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:1378 not-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1379 not-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1380 not-equal[Int16] 32767[Int16], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1381 not-equal[compile-time] 32767[Int16], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:1382 not-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1383 not-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:1384 not-equal[Int16] 32767[Int16], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:1385 not-equal[compile-time] 32767[Int16], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:1386 not-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1387 not-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1388 not-equal[Int16] -32768[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1389 not-equal[compile-time] -32768[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:1390 not-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1391 not-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1392 not-equal[Int16] -32768[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1393 not-equal[compile-time] -32768[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:1394 not-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1395 not-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1396 not-equal[Int16] -32768[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1397 not-equal[compile-time] -32768[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:1398 not-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1399 not-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1400 not-equal[Int16] -32768[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1401 not-equal[compile-time] -32768[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:1402 not-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1403 not-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1404 not-equal[Int16] -32768[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1405 not-equal[compile-time] -32768[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:1406 not-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1407 not-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1408 not-equal[Int16] -32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1409 not-equal[compile-time] -32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1410 not-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1411 not-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1412 not-equal[Int16] -32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1413 not-equal[compile-time] -32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:1414 not-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1415 not-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1416 not-equal[Int16] -32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1417 not-equal[compile-time] -32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:1418 not-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1419 not-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1420 not-equal[Int16] -32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1421 not-equal[compile-time] -32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:1422 not-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1423 not-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1424 not-equal[Int16] -32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1425 not-equal[compile-time] -32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1426 not-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1427 not-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1428 not-equal[Int16] -129[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1429 not-equal[compile-time] -129[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 0;
endcode
varvalue r True

$overflow on
code auto:1430 not-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1431 not-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1432 not-equal[Int16] -129[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1433 not-equal[compile-time] -129[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 1;
endcode
varvalue r True

$overflow on
code auto:1434 not-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1435 not-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1436 not-equal[Int16] -129[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1437 not-equal[compile-time] -129[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 127;
endcode
varvalue r True

$overflow on
code auto:1438 not-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1439 not-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1440 not-equal[Int16] -129[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1441 not-equal[compile-time] -129[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 128;
endcode
varvalue r True

$overflow on
code auto:1442 not-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1443 not-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1444 not-equal[Int16] -129[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1445 not-equal[compile-time] -129[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 255;
endcode
varvalue r True

$overflow on
code auto:1446 not-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1447 not-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1448 not-equal[Int16] -128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1449 not-equal[compile-time] -128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1450 not-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1451 not-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1452 not-equal[Int16] -128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1453 not-equal[compile-time] -128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 1;
endcode
varvalue r True

$overflow on
code auto:1454 not-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1455 not-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1456 not-equal[Int16] -128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1457 not-equal[compile-time] -128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 127;
endcode
varvalue r True

$overflow on
code auto:1458 not-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1459 not-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1460 not-equal[Int16] -128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1461 not-equal[compile-time] -128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 128;
endcode
varvalue r True

$overflow on
code auto:1462 not-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1463 not-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1464 not-equal[Int16] -128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1465 not-equal[compile-time] -128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1466 not-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1467 not-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1468 not-equal[Int16] -1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1469 not-equal[compile-time] -1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1470 not-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1471 not-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1472 not-equal[Int16] -1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1473 not-equal[compile-time] -1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 1;
endcode
varvalue r True

$overflow on
code auto:1474 not-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1475 not-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1476 not-equal[Int16] -1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1477 not-equal[compile-time] -1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 127;
endcode
varvalue r True

$overflow on
code auto:1478 not-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1479 not-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1480 not-equal[Int16] -1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1481 not-equal[compile-time] -1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 128;
endcode
varvalue r True

$overflow on
code auto:1482 not-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1483 not-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1484 not-equal[Int16] -1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1485 not-equal[compile-time] -1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1486 not-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1487 not-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:1488 not-equal[Int16] 0[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:1489 not-equal[compile-time] 0[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:1490 not-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1491 not-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1492 not-equal[Int16] 0[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1493 not-equal[compile-time] 0[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:1494 not-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1495 not-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1496 not-equal[Int16] 0[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1497 not-equal[compile-time] 0[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:1498 not-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1499 not-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1500 not-equal[Int16] 0[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1501 not-equal[compile-time] 0[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:1502 not-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1503 not-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1504 not-equal[Int16] 0[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1505 not-equal[compile-time] 0[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:1506 not-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1507 not-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1508 not-equal[Int16] 1[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1509 not-equal[compile-time] 1[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1510 not-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1511 not-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:1512 not-equal[Int16] 1[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:1513 not-equal[compile-time] 1[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:1514 not-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1515 not-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1516 not-equal[Int16] 1[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1517 not-equal[compile-time] 1[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:1518 not-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1519 not-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1520 not-equal[Int16] 1[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1521 not-equal[compile-time] 1[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:1522 not-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1523 not-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1524 not-equal[Int16] 1[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1525 not-equal[compile-time] 1[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1526 not-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1527 not-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1528 not-equal[Int16] 127[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1529 not-equal[compile-time] 127[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:1530 not-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1531 not-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1532 not-equal[Int16] 127[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1533 not-equal[compile-time] 127[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:1534 not-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1535 not-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:1536 not-equal[Int16] 127[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:1537 not-equal[compile-time] 127[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:1538 not-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1539 not-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1540 not-equal[Int16] 127[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1541 not-equal[compile-time] 127[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:1542 not-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1543 not-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1544 not-equal[Int16] 127[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1545 not-equal[compile-time] 127[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:1546 not-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1547 not-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1548 not-equal[Int16] 128[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1549 not-equal[compile-time] 128[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1550 not-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1551 not-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1552 not-equal[Int16] 128[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1553 not-equal[compile-time] 128[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:1554 not-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1555 not-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1556 not-equal[Int16] 128[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1557 not-equal[compile-time] 128[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:1558 not-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1559 not-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r False

code auto:1560 not-equal[Int16] 128[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r False

code auto:1561 not-equal[compile-time] 128[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 128;
endcode
varvalue r False

$overflow on
code auto:1562 not-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1563 not-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1564 not-equal[Int16] 128[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1565 not-equal[compile-time] 128[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1566 not-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1567 not-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1568 not-equal[Int16] 32767[Int16], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1569 not-equal[compile-time] 32767[Int16], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1570 not-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1571 not-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1572 not-equal[Int16] 32767[Int16], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:1573 not-equal[compile-time] 32767[Int16], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:1574 not-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1575 not-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1576 not-equal[Int16] 32767[Int16], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:1577 not-equal[compile-time] 32767[Int16], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:1578 not-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1579 not-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1580 not-equal[Int16] 32767[Int16], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:1581 not-equal[compile-time] 32767[Int16], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:1582 not-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1583 not-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1584 not-equal[Int16] 32767[Int16], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1585 not-equal[compile-time] 32767[Int16], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1586 not-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1587 not-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1588 not-equal[Int16] -32768[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1589 not-equal[compile-time] -32768[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:1590 not-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1591 not-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1592 not-equal[Int16] -32768[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1593 not-equal[compile-time] -32768[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:1594 not-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1595 not-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1596 not-equal[Int16] -32768[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1597 not-equal[compile-time] -32768[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1598 not-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1599 not-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1600 not-equal[Int16] -32768[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1601 not-equal[compile-time] -32768[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1602 not-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1603 not-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1604 not-equal[Int16] -32768[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1605 not-equal[compile-time] -32768[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1606 not-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1607 not-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1608 not-equal[Int16] -32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1609 not-equal[compile-time] -32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1610 not-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1611 not-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1612 not-equal[Int16] -32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1613 not-equal[compile-time] -32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1614 not-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1615 not-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1616 not-equal[Int16] -32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1617 not-equal[compile-time] -32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1618 not-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1619 not-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1620 not-equal[Int16] -32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1621 not-equal[compile-time] -32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1622 not-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1623 not-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1624 not-equal[Int16] -32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1625 not-equal[compile-time] -32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1626 not-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1627 not-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1628 not-equal[Int16] -129[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1629 not-equal[compile-time] -129[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 0;
endcode
varvalue r True

$overflow on
code auto:1630 not-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1631 not-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1632 not-equal[Int16] -129[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1633 not-equal[compile-time] -129[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 255;
endcode
varvalue r True

$overflow on
code auto:1634 not-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1635 not-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1636 not-equal[Int16] -129[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1637 not-equal[compile-time] -129[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1638 not-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1639 not-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1640 not-equal[Int16] -129[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1641 not-equal[compile-time] -129[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1642 not-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1643 not-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1644 not-equal[Int16] -129[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1645 not-equal[compile-time] -129[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1646 not-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1647 not-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1648 not-equal[Int16] -128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1649 not-equal[compile-time] -128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1650 not-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1651 not-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1652 not-equal[Int16] -128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1653 not-equal[compile-time] -128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1654 not-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1655 not-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1656 not-equal[Int16] -128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1657 not-equal[compile-time] -128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1658 not-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1659 not-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1660 not-equal[Int16] -128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1661 not-equal[compile-time] -128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1662 not-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1663 not-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1664 not-equal[Int16] -128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1665 not-equal[compile-time] -128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1666 not-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1667 not-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1668 not-equal[Int16] -1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1669 not-equal[compile-time] -1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1670 not-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1671 not-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1672 not-equal[Int16] -1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1673 not-equal[compile-time] -1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1674 not-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1675 not-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1676 not-equal[Int16] -1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1677 not-equal[compile-time] -1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1678 not-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1679 not-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1680 not-equal[Int16] -1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1681 not-equal[compile-time] -1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1682 not-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1683 not-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1684 not-equal[Int16] -1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1685 not-equal[compile-time] -1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1686 not-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1687 not-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:1688 not-equal[Int16] 0[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:1689 not-equal[compile-time] 0[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:1690 not-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1691 not-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1692 not-equal[Int16] 0[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1693 not-equal[compile-time] 0[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:1694 not-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1695 not-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1696 not-equal[Int16] 0[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1697 not-equal[compile-time] 0[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1698 not-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1699 not-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1700 not-equal[Int16] 0[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1701 not-equal[compile-time] 0[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1702 not-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1703 not-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1704 not-equal[Int16] 0[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1705 not-equal[compile-time] 0[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1706 not-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1707 not-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1708 not-equal[Int16] 1[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1709 not-equal[compile-time] 1[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1710 not-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1711 not-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1712 not-equal[Int16] 1[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1713 not-equal[compile-time] 1[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1714 not-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1715 not-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1716 not-equal[Int16] 1[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1717 not-equal[compile-time] 1[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1718 not-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1719 not-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1720 not-equal[Int16] 1[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1721 not-equal[compile-time] 1[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1722 not-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1723 not-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1724 not-equal[Int16] 1[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1725 not-equal[compile-time] 1[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1726 not-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1727 not-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1728 not-equal[Int16] 127[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1729 not-equal[compile-time] 127[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:1730 not-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1731 not-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1732 not-equal[Int16] 127[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1733 not-equal[compile-time] 127[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:1734 not-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1735 not-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1736 not-equal[Int16] 127[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1737 not-equal[compile-time] 127[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1738 not-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1739 not-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1740 not-equal[Int16] 127[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1741 not-equal[compile-time] 127[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1742 not-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1743 not-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1744 not-equal[Int16] 127[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1745 not-equal[compile-time] 127[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1746 not-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1747 not-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1748 not-equal[Int16] 128[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1749 not-equal[compile-time] 128[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1750 not-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1751 not-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1752 not-equal[Int16] 128[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1753 not-equal[compile-time] 128[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1754 not-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1755 not-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1756 not-equal[Int16] 128[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1757 not-equal[compile-time] 128[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1758 not-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1759 not-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1760 not-equal[Int16] 128[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1761 not-equal[compile-time] 128[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1762 not-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1763 not-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1764 not-equal[Int16] 128[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1765 not-equal[compile-time] 128[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1766 not-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1767 not-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1768 not-equal[Int16] 32767[Int16], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1769 not-equal[compile-time] 32767[Int16], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1770 not-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1771 not-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1772 not-equal[Int16] 32767[Int16], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1773 not-equal[compile-time] 32767[Int16], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1774 not-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1775 not-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:1776 not-equal[Int16] 32767[Int16], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:1777 not-equal[compile-time] 32767[Int16], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:1778 not-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1779 not-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1780 not-equal[Int16] 32767[Int16], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1781 not-equal[compile-time] 32767[Int16], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1782 not-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1783 not-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1784 not-equal[Int16] 32767[Int16], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1785 not-equal[compile-time] 32767[Int16], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1786 not-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1787 not-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1788 not-equal[Pointer] -32768[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1789 not-equal[compile-time] -32768[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:1790 not-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1791 not-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1792 not-equal[Pointer] -32768[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1793 not-equal[compile-time] -32768[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:1794 not-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1795 not-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1796 not-equal[Pointer] -32768[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1797 not-equal[compile-time] -32768[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1798 not-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1799 not-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1800 not-equal[Pointer] -32768[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1801 not-equal[compile-time] -32768[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1802 not-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1803 not-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32768 <> b;
endcode
varvalue r True

code auto:1804 not-equal[Pointer] -32768[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1805 not-equal[compile-time] -32768[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1806 not-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1807 not-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1808 not-equal[Pointer] -32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1809 not-equal[compile-time] -32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1810 not-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1811 not-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1812 not-equal[Pointer] -32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1813 not-equal[compile-time] -32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1814 not-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1815 not-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1816 not-equal[Pointer] -32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1817 not-equal[compile-time] -32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1818 not-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1819 not-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1820 not-equal[Pointer] -32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1821 not-equal[compile-time] -32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1822 not-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1823 not-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -32767 <> b;
endcode
varvalue r True

code auto:1824 not-equal[Pointer] -32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1825 not-equal[compile-time] -32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1826 not-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1827 not-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1828 not-equal[Pointer] -129[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1829 not-equal[compile-time] -129[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 0;
endcode
varvalue r True

$overflow on
code auto:1830 not-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1831 not-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1832 not-equal[Pointer] -129[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1833 not-equal[compile-time] -129[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 255;
endcode
varvalue r True

$overflow on
code auto:1834 not-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1835 not-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1836 not-equal[Pointer] -129[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1837 not-equal[compile-time] -129[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1838 not-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1839 not-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1840 not-equal[Pointer] -129[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1841 not-equal[compile-time] -129[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1842 not-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -129;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1843 not-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -129 <> b;
endcode
varvalue r True

code auto:1844 not-equal[Pointer] -129[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -129;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1845 not-equal[compile-time] -129[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -129 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1846 not-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1847 not-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1848 not-equal[Pointer] -128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1849 not-equal[compile-time] -128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1850 not-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1851 not-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1852 not-equal[Pointer] -128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1853 not-equal[compile-time] -128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1854 not-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1855 not-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1856 not-equal[Pointer] -128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1857 not-equal[compile-time] -128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1858 not-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1859 not-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1860 not-equal[Pointer] -128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1861 not-equal[compile-time] -128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1862 not-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1863 not-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -128 <> b;
endcode
varvalue r True

code auto:1864 not-equal[Pointer] -128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1865 not-equal[compile-time] -128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1866 not-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1867 not-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1868 not-equal[Pointer] -1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1869 not-equal[compile-time] -1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1870 not-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1871 not-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1872 not-equal[Pointer] -1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1873 not-equal[compile-time] -1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1874 not-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1875 not-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1876 not-equal[Pointer] -1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1877 not-equal[compile-time] -1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1878 not-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1879 not-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1880 not-equal[Pointer] -1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1881 not-equal[compile-time] -1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1882 not-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = -1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1883 not-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := -1 <> b;
endcode
varvalue r True

code auto:1884 not-equal[Pointer] -1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = -1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1885 not-equal[compile-time] -1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := -1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1886 not-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1887 not-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:1888 not-equal[Pointer] 0[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:1889 not-equal[compile-time] 0[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:1890 not-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1891 not-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1892 not-equal[Pointer] 0[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1893 not-equal[compile-time] 0[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:1894 not-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1895 not-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1896 not-equal[Pointer] 0[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1897 not-equal[compile-time] 0[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1898 not-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1899 not-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1900 not-equal[Pointer] 0[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1901 not-equal[compile-time] 0[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1902 not-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1903 not-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1904 not-equal[Pointer] 0[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1905 not-equal[compile-time] 0[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1906 not-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1907 not-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1908 not-equal[Pointer] 1[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1909 not-equal[compile-time] 1[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:1910 not-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1911 not-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1912 not-equal[Pointer] 1[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1913 not-equal[compile-time] 1[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:1914 not-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1915 not-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1916 not-equal[Pointer] 1[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1917 not-equal[compile-time] 1[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1918 not-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1919 not-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1920 not-equal[Pointer] 1[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1921 not-equal[compile-time] 1[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1922 not-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1923 not-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:1924 not-equal[Pointer] 1[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1925 not-equal[compile-time] 1[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1926 not-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1927 not-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1928 not-equal[Pointer] 127[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1929 not-equal[compile-time] 127[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:1930 not-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1931 not-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1932 not-equal[Pointer] 127[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1933 not-equal[compile-time] 127[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:1934 not-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1935 not-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1936 not-equal[Pointer] 127[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1937 not-equal[compile-time] 127[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1938 not-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1939 not-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1940 not-equal[Pointer] 127[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1941 not-equal[compile-time] 127[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1942 not-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1943 not-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:1944 not-equal[Pointer] 127[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1945 not-equal[compile-time] 127[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1946 not-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1947 not-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1948 not-equal[Pointer] 128[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1949 not-equal[compile-time] 128[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:1950 not-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1951 not-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1952 not-equal[Pointer] 128[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1953 not-equal[compile-time] 128[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:1954 not-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1955 not-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1956 not-equal[Pointer] 128[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:1957 not-equal[compile-time] 128[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:1958 not-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1959 not-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1960 not-equal[Pointer] 128[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1961 not-equal[compile-time] 128[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1962 not-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1963 not-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:1964 not-equal[Pointer] 128[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1965 not-equal[compile-time] 128[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1966 not-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1967 not-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1968 not-equal[Pointer] 32767[Int16], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:1969 not-equal[compile-time] 32767[Int16], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:1970 not-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1971 not-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1972 not-equal[Pointer] 32767[Int16], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:1973 not-equal[compile-time] 32767[Int16], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:1974 not-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1975 not-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:1976 not-equal[Pointer] 32767[Int16], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:1977 not-equal[compile-time] 32767[Int16], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:1978 not-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1979 not-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1980 not-equal[Pointer] 32767[Int16], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:1981 not-equal[compile-time] 32767[Int16], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:1982 not-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Int16 = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1983 not-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:1984 not-equal[Pointer] 32767[Int16], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Int16 = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:1985 not-equal[compile-time] 32767[Int16], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:1986 not-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1987 not-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1988 not-equal[Int16] 0[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:1989 not-equal[compile-time] 0[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:1990 not-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1991 not-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1992 not-equal[Int16] 0[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:1993 not-equal[compile-time] 0[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -127;
endcode
varvalue r True

$overflow on
code auto:1994 not-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:1995 not-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:1996 not-equal[Int16] 0[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:1997 not-equal[compile-time] 0[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:1998 not-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:1999 not-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2000 not-equal[Int16] 0[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2001 not-equal[compile-time] 0[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2002 not-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2003 not-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2004 not-equal[Int16] 0[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2005 not-equal[compile-time] 0[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2006 not-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2007 not-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2008 not-equal[Int16] 0[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2009 not-equal[compile-time] 0[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2010 not-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2011 not-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2012 not-equal[Int16] 1[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2013 not-equal[compile-time] 1[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:2014 not-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2015 not-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2016 not-equal[Int16] 1[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2017 not-equal[compile-time] 1[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -127;
endcode
varvalue r True

$overflow on
code auto:2018 not-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2019 not-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2020 not-equal[Int16] 1[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2021 not-equal[compile-time] 1[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:2022 not-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2023 not-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2024 not-equal[Int16] 1[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2025 not-equal[compile-time] 1[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:2026 not-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2027 not-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:2028 not-equal[Int16] 1[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:2029 not-equal[compile-time] 1[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:2030 not-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2031 not-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2032 not-equal[Int16] 1[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2033 not-equal[compile-time] 1[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:2034 not-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2035 not-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2036 not-equal[Int16] 127[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2037 not-equal[compile-time] 127[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:2038 not-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2039 not-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2040 not-equal[Int16] 127[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2041 not-equal[compile-time] 127[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -127;
endcode
varvalue r True

$overflow on
code auto:2042 not-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2043 not-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2044 not-equal[Int16] 127[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2045 not-equal[compile-time] 127[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:2046 not-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2047 not-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2048 not-equal[Int16] 127[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2049 not-equal[compile-time] 127[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:2050 not-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2051 not-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2052 not-equal[Int16] 127[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2053 not-equal[compile-time] 127[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:2054 not-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2055 not-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:2056 not-equal[Int16] 127[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:2057 not-equal[compile-time] 127[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:2058 not-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2059 not-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2060 not-equal[Int16] 128[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2061 not-equal[compile-time] 128[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -128;
endcode
varvalue r True

$overflow on
code auto:2062 not-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2063 not-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2064 not-equal[Int16] 128[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2065 not-equal[compile-time] 128[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -127;
endcode
varvalue r True

$overflow on
code auto:2066 not-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2067 not-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2068 not-equal[Int16] 128[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2069 not-equal[compile-time] 128[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -1;
endcode
varvalue r True

$overflow on
code auto:2070 not-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2071 not-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2072 not-equal[Int16] 128[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2073 not-equal[compile-time] 128[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:2074 not-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2075 not-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2076 not-equal[Int16] 128[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2077 not-equal[compile-time] 128[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:2078 not-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2079 not-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2080 not-equal[Int16] 128[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2081 not-equal[compile-time] 128[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:2082 not-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2083 not-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2084 not-equal[Int16] 255[Byte], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2085 not-equal[compile-time] 255[Byte], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:2086 not-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2087 not-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2088 not-equal[Int16] 255[Byte], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2089 not-equal[compile-time] 255[Byte], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -127;
endcode
varvalue r True

$overflow on
code auto:2090 not-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2091 not-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2092 not-equal[Int16] 255[Byte], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2093 not-equal[compile-time] 255[Byte], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:2094 not-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2095 not-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2096 not-equal[Int16] 255[Byte], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2097 not-equal[compile-time] 255[Byte], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2098 not-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2099 not-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2100 not-equal[Int16] 255[Byte], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2101 not-equal[compile-time] 255[Byte], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2102 not-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2103 not-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2104 not-equal[Int16] 255[Byte], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2105 not-equal[compile-time] 255[Byte], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2106 not-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2107 not-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2108 not-equal[Int16] 0[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2109 not-equal[compile-time] 0[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2110 not-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2111 not-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2112 not-equal[Int16] 0[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2113 not-equal[compile-time] 0[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2114 not-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2115 not-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2116 not-equal[Int16] 0[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2117 not-equal[compile-time] 0[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -129;
endcode
varvalue r True

$overflow on
code auto:2118 not-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2119 not-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2120 not-equal[Int16] 0[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2121 not-equal[compile-time] 0[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:2122 not-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2123 not-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2124 not-equal[Int16] 0[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2125 not-equal[compile-time] 0[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:2126 not-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2127 not-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2128 not-equal[Int16] 0[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2129 not-equal[compile-time] 0[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2130 not-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2131 not-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2132 not-equal[Int16] 0[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2133 not-equal[compile-time] 0[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2134 not-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2135 not-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2136 not-equal[Int16] 0[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2137 not-equal[compile-time] 0[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2138 not-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2139 not-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2140 not-equal[Int16] 0[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2141 not-equal[compile-time] 0[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:2142 not-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2143 not-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2144 not-equal[Int16] 0[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2145 not-equal[compile-time] 0[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2146 not-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2147 not-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2148 not-equal[Int16] 1[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2149 not-equal[compile-time] 1[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2150 not-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2151 not-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2152 not-equal[Int16] 1[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2153 not-equal[compile-time] 1[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2154 not-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2155 not-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2156 not-equal[Int16] 1[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2157 not-equal[compile-time] 1[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -129;
endcode
varvalue r True

$overflow on
code auto:2158 not-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2159 not-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2160 not-equal[Int16] 1[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2161 not-equal[compile-time] 1[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -128;
endcode
varvalue r True

$overflow on
code auto:2162 not-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2163 not-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2164 not-equal[Int16] 1[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2165 not-equal[compile-time] 1[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> -1;
endcode
varvalue r True

$overflow on
code auto:2166 not-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2167 not-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2168 not-equal[Int16] 1[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2169 not-equal[compile-time] 1[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:2170 not-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2171 not-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:2172 not-equal[Int16] 1[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:2173 not-equal[compile-time] 1[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:2174 not-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2175 not-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2176 not-equal[Int16] 1[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2177 not-equal[compile-time] 1[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:2178 not-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2179 not-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2180 not-equal[Int16] 1[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2181 not-equal[compile-time] 1[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:2182 not-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2183 not-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2184 not-equal[Int16] 1[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2185 not-equal[compile-time] 1[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2186 not-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2187 not-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2188 not-equal[Int16] 127[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2189 not-equal[compile-time] 127[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2190 not-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2191 not-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2192 not-equal[Int16] 127[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2193 not-equal[compile-time] 127[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2194 not-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2195 not-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2196 not-equal[Int16] 127[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2197 not-equal[compile-time] 127[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -129;
endcode
varvalue r True

$overflow on
code auto:2198 not-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2199 not-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2200 not-equal[Int16] 127[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2201 not-equal[compile-time] 127[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -128;
endcode
varvalue r True

$overflow on
code auto:2202 not-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2203 not-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2204 not-equal[Int16] 127[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2205 not-equal[compile-time] 127[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> -1;
endcode
varvalue r True

$overflow on
code auto:2206 not-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2207 not-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2208 not-equal[Int16] 127[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2209 not-equal[compile-time] 127[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:2210 not-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2211 not-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2212 not-equal[Int16] 127[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2213 not-equal[compile-time] 127[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:2214 not-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2215 not-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:2216 not-equal[Int16] 127[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:2217 not-equal[compile-time] 127[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:2218 not-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2219 not-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2220 not-equal[Int16] 127[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2221 not-equal[compile-time] 127[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:2222 not-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2223 not-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2224 not-equal[Int16] 127[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2225 not-equal[compile-time] 127[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2226 not-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2227 not-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2228 not-equal[Int16] 128[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2229 not-equal[compile-time] 128[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2230 not-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2231 not-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2232 not-equal[Int16] 128[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2233 not-equal[compile-time] 128[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2234 not-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2235 not-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2236 not-equal[Int16] 128[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2237 not-equal[compile-time] 128[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -129;
endcode
varvalue r True

$overflow on
code auto:2238 not-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2239 not-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2240 not-equal[Int16] 128[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2241 not-equal[compile-time] 128[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -128;
endcode
varvalue r True

$overflow on
code auto:2242 not-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2243 not-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2244 not-equal[Int16] 128[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2245 not-equal[compile-time] 128[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> -1;
endcode
varvalue r True

$overflow on
code auto:2246 not-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2247 not-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2248 not-equal[Int16] 128[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2249 not-equal[compile-time] 128[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:2250 not-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2251 not-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2252 not-equal[Int16] 128[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2253 not-equal[compile-time] 128[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:2254 not-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2255 not-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2256 not-equal[Int16] 128[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2257 not-equal[compile-time] 128[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:2258 not-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2259 not-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r False

code auto:2260 not-equal[Int16] 128[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r False

code auto:2261 not-equal[compile-time] 128[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 128;
endcode
varvalue r False

$overflow on
code auto:2262 not-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2263 not-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2264 not-equal[Int16] 128[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2265 not-equal[compile-time] 128[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2266 not-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2267 not-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2268 not-equal[Int16] 255[Byte], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2269 not-equal[compile-time] 255[Byte], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2270 not-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2271 not-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2272 not-equal[Int16] 255[Byte], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2273 not-equal[compile-time] 255[Byte], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2274 not-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2275 not-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2276 not-equal[Int16] 255[Byte], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2277 not-equal[compile-time] 255[Byte], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -129;
endcode
varvalue r True

$overflow on
code auto:2278 not-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2279 not-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2280 not-equal[Int16] 255[Byte], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2281 not-equal[compile-time] 255[Byte], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:2282 not-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2283 not-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2284 not-equal[Int16] 255[Byte], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2285 not-equal[compile-time] 255[Byte], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:2286 not-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2287 not-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2288 not-equal[Int16] 255[Byte], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2289 not-equal[compile-time] 255[Byte], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2290 not-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2291 not-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2292 not-equal[Int16] 255[Byte], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2293 not-equal[compile-time] 255[Byte], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2294 not-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2295 not-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2296 not-equal[Int16] 255[Byte], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2297 not-equal[compile-time] 255[Byte], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2298 not-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2299 not-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2300 not-equal[Int16] 255[Byte], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2301 not-equal[compile-time] 255[Byte], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:2302 not-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2303 not-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2304 not-equal[Int16] 255[Byte], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2305 not-equal[compile-time] 255[Byte], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2306 not-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2307 not-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2308 not-equal[Byte] 0[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2309 not-equal[compile-time] 0[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2310 not-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2311 not-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2312 not-equal[Byte] 0[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2313 not-equal[compile-time] 0[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2314 not-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2315 not-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2316 not-equal[Byte] 0[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2317 not-equal[compile-time] 0[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2318 not-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2319 not-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2320 not-equal[Byte] 0[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2321 not-equal[compile-time] 0[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:2322 not-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2323 not-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2324 not-equal[Byte] 0[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2325 not-equal[compile-time] 0[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:2326 not-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2327 not-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2328 not-equal[Byte] 1[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2329 not-equal[compile-time] 1[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:2330 not-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2331 not-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r False

code auto:2332 not-equal[Byte] 1[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r False

code auto:2333 not-equal[compile-time] 1[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 1;
endcode
varvalue r False

$overflow on
code auto:2334 not-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2335 not-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2336 not-equal[Byte] 1[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2337 not-equal[compile-time] 1[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 127;
endcode
varvalue r True

$overflow on
code auto:2338 not-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2339 not-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2340 not-equal[Byte] 1[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2341 not-equal[compile-time] 1[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 128;
endcode
varvalue r True

$overflow on
code auto:2342 not-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2343 not-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2344 not-equal[Byte] 1[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2345 not-equal[compile-time] 1[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:2346 not-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2347 not-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2348 not-equal[Byte] 127[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2349 not-equal[compile-time] 127[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:2350 not-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2351 not-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2352 not-equal[Byte] 127[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2353 not-equal[compile-time] 127[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 1;
endcode
varvalue r True

$overflow on
code auto:2354 not-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2355 not-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r False

code auto:2356 not-equal[Byte] 127[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r False

code auto:2357 not-equal[compile-time] 127[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 127;
endcode
varvalue r False

$overflow on
code auto:2358 not-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2359 not-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2360 not-equal[Byte] 127[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2361 not-equal[compile-time] 127[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 128;
endcode
varvalue r True

$overflow on
code auto:2362 not-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2363 not-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2364 not-equal[Byte] 127[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2365 not-equal[compile-time] 127[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:2366 not-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2367 not-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2368 not-equal[Byte] 128[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2369 not-equal[compile-time] 128[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:2370 not-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2371 not-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2372 not-equal[Byte] 128[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2373 not-equal[compile-time] 128[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 1;
endcode
varvalue r True

$overflow on
code auto:2374 not-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2375 not-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2376 not-equal[Byte] 128[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2377 not-equal[compile-time] 128[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 127;
endcode
varvalue r True

$overflow on
code auto:2378 not-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2379 not-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r False

code auto:2380 not-equal[Byte] 128[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r False

code auto:2381 not-equal[compile-time] 128[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 128;
endcode
varvalue r False

$overflow on
code auto:2382 not-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2383 not-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2384 not-equal[Byte] 128[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2385 not-equal[compile-time] 128[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:2386 not-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2387 not-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2388 not-equal[Byte] 255[Byte], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2389 not-equal[compile-time] 255[Byte], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2390 not-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2391 not-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2392 not-equal[Byte] 255[Byte], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2393 not-equal[compile-time] 255[Byte], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2394 not-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2395 not-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2396 not-equal[Byte] 255[Byte], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2397 not-equal[compile-time] 255[Byte], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2398 not-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2399 not-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2400 not-equal[Byte] 255[Byte], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2401 not-equal[compile-time] 255[Byte], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:2402 not-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2403 not-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:2404 not-equal[Byte] 255[Byte], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:2405 not-equal[compile-time] 255[Byte], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:2406 not-equal[Word] 0[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2407 not-equal[Word] 0[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2408 not-equal[Word] 0[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2409 not-equal[compile-time] 0[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2410 not-equal[Word] 0[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2411 not-equal[Word] 0[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2412 not-equal[Word] 0[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2413 not-equal[compile-time] 0[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:2414 not-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2415 not-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2416 not-equal[Word] 0[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2417 not-equal[compile-time] 0[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2418 not-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2419 not-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2420 not-equal[Word] 0[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2421 not-equal[compile-time] 0[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2422 not-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2423 not-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2424 not-equal[Word] 0[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2425 not-equal[compile-time] 0[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2426 not-equal[Word] 1[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2427 not-equal[Word] 1[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2428 not-equal[Word] 1[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2429 not-equal[compile-time] 1[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:2430 not-equal[Word] 1[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2431 not-equal[Word] 1[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2432 not-equal[Word] 1[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2433 not-equal[compile-time] 1[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:2434 not-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2435 not-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2436 not-equal[Word] 1[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2437 not-equal[compile-time] 1[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2438 not-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2439 not-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2440 not-equal[Word] 1[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2441 not-equal[compile-time] 1[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2442 not-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2443 not-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2444 not-equal[Word] 1[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2445 not-equal[compile-time] 1[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2446 not-equal[Word] 127[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2447 not-equal[Word] 127[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2448 not-equal[Word] 127[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2449 not-equal[compile-time] 127[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:2450 not-equal[Word] 127[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2451 not-equal[Word] 127[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2452 not-equal[Word] 127[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2453 not-equal[compile-time] 127[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:2454 not-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2455 not-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2456 not-equal[Word] 127[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2457 not-equal[compile-time] 127[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2458 not-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2459 not-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2460 not-equal[Word] 127[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2461 not-equal[compile-time] 127[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2462 not-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2463 not-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2464 not-equal[Word] 127[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2465 not-equal[compile-time] 127[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2466 not-equal[Word] 128[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2467 not-equal[Word] 128[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2468 not-equal[Word] 128[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2469 not-equal[compile-time] 128[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:2470 not-equal[Word] 128[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2471 not-equal[Word] 128[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2472 not-equal[Word] 128[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2473 not-equal[compile-time] 128[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:2474 not-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2475 not-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2476 not-equal[Word] 128[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2477 not-equal[compile-time] 128[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2478 not-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2479 not-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2480 not-equal[Word] 128[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2481 not-equal[compile-time] 128[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2482 not-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2483 not-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2484 not-equal[Word] 128[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2485 not-equal[compile-time] 128[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2486 not-equal[Word] 255[Byte], 0[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2487 not-equal[Word] 255[Byte], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2488 not-equal[Word] 255[Byte], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2489 not-equal[compile-time] 255[Byte], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2490 not-equal[Word] 255[Byte], 255[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2491 not-equal[Word] 255[Byte], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:2492 not-equal[Word] 255[Byte], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:2493 not-equal[compile-time] 255[Byte], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:2494 not-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2495 not-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2496 not-equal[Word] 255[Byte], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2497 not-equal[compile-time] 255[Byte], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2498 not-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2499 not-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2500 not-equal[Word] 255[Byte], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2501 not-equal[compile-time] 255[Byte], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2502 not-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2503 not-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2504 not-equal[Word] 255[Byte], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2505 not-equal[compile-time] 255[Byte], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2506 not-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2507 not-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2508 not-equal[Pointer] 0[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2509 not-equal[compile-time] 0[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2510 not-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2511 not-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2512 not-equal[Pointer] 0[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2513 not-equal[compile-time] 0[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:2514 not-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2515 not-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2516 not-equal[Pointer] 0[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2517 not-equal[compile-time] 0[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2518 not-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2519 not-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2520 not-equal[Pointer] 0[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2521 not-equal[compile-time] 0[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2522 not-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2523 not-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2524 not-equal[Pointer] 0[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2525 not-equal[compile-time] 0[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2526 not-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2527 not-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2528 not-equal[Pointer] 1[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2529 not-equal[compile-time] 1[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 0;
endcode
varvalue r True

$overflow on
code auto:2530 not-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2531 not-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2532 not-equal[Pointer] 1[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2533 not-equal[compile-time] 1[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 255;
endcode
varvalue r True

$overflow on
code auto:2534 not-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2535 not-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2536 not-equal[Pointer] 1[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2537 not-equal[compile-time] 1[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2538 not-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2539 not-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2540 not-equal[Pointer] 1[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2541 not-equal[compile-time] 1[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2542 not-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2543 not-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 1 <> b;
endcode
varvalue r True

code auto:2544 not-equal[Pointer] 1[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2545 not-equal[compile-time] 1[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 1 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2546 not-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2547 not-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2548 not-equal[Pointer] 127[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2549 not-equal[compile-time] 127[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 0;
endcode
varvalue r True

$overflow on
code auto:2550 not-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2551 not-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2552 not-equal[Pointer] 127[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2553 not-equal[compile-time] 127[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 255;
endcode
varvalue r True

$overflow on
code auto:2554 not-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2555 not-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2556 not-equal[Pointer] 127[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2557 not-equal[compile-time] 127[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2558 not-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2559 not-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2560 not-equal[Pointer] 127[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2561 not-equal[compile-time] 127[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2562 not-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2563 not-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 127 <> b;
endcode
varvalue r True

code auto:2564 not-equal[Pointer] 127[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2565 not-equal[compile-time] 127[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 127 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2566 not-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2567 not-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2568 not-equal[Pointer] 128[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2569 not-equal[compile-time] 128[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 0;
endcode
varvalue r True

$overflow on
code auto:2570 not-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2571 not-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2572 not-equal[Pointer] 128[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2573 not-equal[compile-time] 128[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 255;
endcode
varvalue r True

$overflow on
code auto:2574 not-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2575 not-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2576 not-equal[Pointer] 128[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2577 not-equal[compile-time] 128[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2578 not-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2579 not-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2580 not-equal[Pointer] 128[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2581 not-equal[compile-time] 128[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2582 not-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2583 not-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 128 <> b;
endcode
varvalue r True

code auto:2584 not-equal[Pointer] 128[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2585 not-equal[compile-time] 128[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 128 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2586 not-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2587 not-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2588 not-equal[Pointer] 255[Byte], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2589 not-equal[compile-time] 255[Byte], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2590 not-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2591 not-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:2592 not-equal[Pointer] 255[Byte], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:2593 not-equal[compile-time] 255[Byte], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:2594 not-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2595 not-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2596 not-equal[Pointer] 255[Byte], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2597 not-equal[compile-time] 255[Byte], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2598 not-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2599 not-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2600 not-equal[Pointer] 255[Byte], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:2601 not-equal[compile-time] 255[Byte], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:2602 not-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2603 not-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2604 not-equal[Pointer] 255[Byte], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:2605 not-equal[compile-time] 255[Byte], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:2606 not-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2607 not-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2608 not-equal[Int16] 0[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2609 not-equal[compile-time] 0[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:2610 not-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2611 not-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2612 not-equal[Int16] 0[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2613 not-equal[compile-time] 0[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -127;
endcode
varvalue r True

$overflow on
code auto:2614 not-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2615 not-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2616 not-equal[Int16] 0[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2617 not-equal[compile-time] 0[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:2618 not-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2619 not-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2620 not-equal[Int16] 0[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2621 not-equal[compile-time] 0[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2622 not-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2623 not-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2624 not-equal[Int16] 0[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2625 not-equal[compile-time] 0[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2626 not-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2627 not-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2628 not-equal[Int16] 0[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2629 not-equal[compile-time] 0[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2630 not-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2631 not-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2632 not-equal[Int16] 255[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2633 not-equal[compile-time] 255[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:2634 not-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2635 not-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2636 not-equal[Int16] 255[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2637 not-equal[compile-time] 255[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -127;
endcode
varvalue r True

$overflow on
code auto:2638 not-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2639 not-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2640 not-equal[Int16] 255[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2641 not-equal[compile-time] 255[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:2642 not-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2643 not-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2644 not-equal[Int16] 255[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2645 not-equal[compile-time] 255[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2646 not-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2647 not-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2648 not-equal[Int16] 255[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2649 not-equal[compile-time] 255[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2650 not-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2651 not-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2652 not-equal[Int16] 255[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2653 not-equal[compile-time] 255[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2654 not-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2655 not-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2656 not-equal[Int16] 32767[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2657 not-equal[compile-time] 32767[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:2658 not-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2659 not-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2660 not-equal[Int16] 32767[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2661 not-equal[compile-time] 32767[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -127;
endcode
varvalue r True

$overflow on
code auto:2662 not-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2663 not-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2664 not-equal[Int16] 32767[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2665 not-equal[compile-time] 32767[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:2666 not-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2667 not-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2668 not-equal[Int16] 32767[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2669 not-equal[compile-time] 32767[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:2670 not-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2671 not-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2672 not-equal[Int16] 32767[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2673 not-equal[compile-time] 32767[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:2674 not-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2675 not-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2676 not-equal[Int16] 32767[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2677 not-equal[compile-time] 32767[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:2678 not-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2679 not-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2680 not-equal[Int16] 32768[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2681 not-equal[compile-time] 32768[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:2682 not-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2683 not-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2684 not-equal[Int16] 32768[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2685 not-equal[compile-time] 32768[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -127;
endcode
varvalue r True

$overflow on
code auto:2686 not-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2687 not-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2688 not-equal[Int16] 32768[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2689 not-equal[compile-time] 32768[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:2690 not-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2691 not-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2692 not-equal[Int16] 32768[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2693 not-equal[compile-time] 32768[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:2694 not-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2695 not-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2696 not-equal[Int16] 32768[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2697 not-equal[compile-time] 32768[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:2698 not-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2699 not-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2700 not-equal[Int16] 32768[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2701 not-equal[compile-time] 32768[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:2702 not-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2703 not-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2704 not-equal[Int16] 65535[Word], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2705 not-equal[compile-time] 65535[Word], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -128;
endcode
varvalue r True

$overflow on
code auto:2706 not-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2707 not-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2708 not-equal[Int16] 65535[Word], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:2709 not-equal[compile-time] 65535[Word], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -127;
endcode
varvalue r True

$overflow on
code auto:2710 not-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2711 not-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2712 not-equal[Int16] 65535[Word], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2713 not-equal[compile-time] 65535[Word], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -1;
endcode
varvalue r True

$overflow on
code auto:2714 not-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2715 not-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2716 not-equal[Int16] 65535[Word], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2717 not-equal[compile-time] 65535[Word], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:2718 not-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2719 not-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2720 not-equal[Int16] 65535[Word], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2721 not-equal[compile-time] 65535[Word], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:2722 not-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2723 not-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2724 not-equal[Int16] 65535[Word], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2725 not-equal[compile-time] 65535[Word], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:2726 not-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2727 not-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2728 not-equal[Int16] 0[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2729 not-equal[compile-time] 0[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2730 not-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2731 not-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2732 not-equal[Int16] 0[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2733 not-equal[compile-time] 0[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2734 not-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2735 not-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2736 not-equal[Int16] 0[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2737 not-equal[compile-time] 0[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -129;
endcode
varvalue r True

$overflow on
code auto:2738 not-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2739 not-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2740 not-equal[Int16] 0[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2741 not-equal[compile-time] 0[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:2742 not-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2743 not-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2744 not-equal[Int16] 0[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2745 not-equal[compile-time] 0[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:2746 not-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2747 not-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2748 not-equal[Int16] 0[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2749 not-equal[compile-time] 0[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2750 not-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2751 not-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2752 not-equal[Int16] 0[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2753 not-equal[compile-time] 0[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2754 not-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2755 not-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2756 not-equal[Int16] 0[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2757 not-equal[compile-time] 0[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2758 not-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2759 not-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2760 not-equal[Int16] 0[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2761 not-equal[compile-time] 0[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:2762 not-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2763 not-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2764 not-equal[Int16] 0[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2765 not-equal[compile-time] 0[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2766 not-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2767 not-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2768 not-equal[Int16] 255[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2769 not-equal[compile-time] 255[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2770 not-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2771 not-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2772 not-equal[Int16] 255[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2773 not-equal[compile-time] 255[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2774 not-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2775 not-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2776 not-equal[Int16] 255[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2777 not-equal[compile-time] 255[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -129;
endcode
varvalue r True

$overflow on
code auto:2778 not-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2779 not-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2780 not-equal[Int16] 255[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2781 not-equal[compile-time] 255[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:2782 not-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2783 not-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2784 not-equal[Int16] 255[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2785 not-equal[compile-time] 255[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:2786 not-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2787 not-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2788 not-equal[Int16] 255[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2789 not-equal[compile-time] 255[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2790 not-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2791 not-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2792 not-equal[Int16] 255[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2793 not-equal[compile-time] 255[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2794 not-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2795 not-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2796 not-equal[Int16] 255[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2797 not-equal[compile-time] 255[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2798 not-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2799 not-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2800 not-equal[Int16] 255[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2801 not-equal[compile-time] 255[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:2802 not-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2803 not-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2804 not-equal[Int16] 255[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2805 not-equal[compile-time] 255[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2806 not-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2807 not-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2808 not-equal[Int16] 32767[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2809 not-equal[compile-time] 32767[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2810 not-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2811 not-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2812 not-equal[Int16] 32767[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2813 not-equal[compile-time] 32767[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2814 not-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2815 not-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2816 not-equal[Int16] 32767[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2817 not-equal[compile-time] 32767[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -129;
endcode
varvalue r True

$overflow on
code auto:2818 not-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2819 not-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2820 not-equal[Int16] 32767[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2821 not-equal[compile-time] 32767[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:2822 not-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2823 not-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2824 not-equal[Int16] 32767[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2825 not-equal[compile-time] 32767[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:2826 not-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2827 not-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2828 not-equal[Int16] 32767[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2829 not-equal[compile-time] 32767[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:2830 not-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2831 not-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2832 not-equal[Int16] 32767[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2833 not-equal[compile-time] 32767[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:2834 not-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2835 not-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2836 not-equal[Int16] 32767[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2837 not-equal[compile-time] 32767[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:2838 not-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2839 not-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2840 not-equal[Int16] 32767[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2841 not-equal[compile-time] 32767[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:2842 not-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2843 not-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:2844 not-equal[Int16] 32767[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:2845 not-equal[compile-time] 32767[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:2846 not-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2847 not-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2848 not-equal[Int16] 32768[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2849 not-equal[compile-time] 32768[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2850 not-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2851 not-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2852 not-equal[Int16] 32768[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2853 not-equal[compile-time] 32768[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2854 not-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2855 not-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2856 not-equal[Int16] 32768[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2857 not-equal[compile-time] 32768[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -129;
endcode
varvalue r True

$overflow on
code auto:2858 not-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2859 not-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2860 not-equal[Int16] 32768[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2861 not-equal[compile-time] 32768[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:2862 not-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2863 not-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2864 not-equal[Int16] 32768[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2865 not-equal[compile-time] 32768[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:2866 not-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2867 not-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2868 not-equal[Int16] 32768[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2869 not-equal[compile-time] 32768[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:2870 not-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2871 not-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2872 not-equal[Int16] 32768[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2873 not-equal[compile-time] 32768[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:2874 not-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2875 not-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2876 not-equal[Int16] 32768[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2877 not-equal[compile-time] 32768[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:2878 not-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2879 not-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2880 not-equal[Int16] 32768[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2881 not-equal[compile-time] 32768[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:2882 not-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2883 not-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2884 not-equal[Int16] 32768[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2885 not-equal[compile-time] 32768[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2886 not-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2887 not-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2888 not-equal[Int16] 65535[Word], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:2889 not-equal[compile-time] 65535[Word], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -32768;
endcode
varvalue r True

$overflow on
code auto:2890 not-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2891 not-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2892 not-equal[Int16] 65535[Word], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:2893 not-equal[compile-time] 65535[Word], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -32767;
endcode
varvalue r True

$overflow on
code auto:2894 not-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2895 not-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2896 not-equal[Int16] 65535[Word], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:2897 not-equal[compile-time] 65535[Word], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -129;
endcode
varvalue r True

$overflow on
code auto:2898 not-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2899 not-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2900 not-equal[Int16] 65535[Word], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:2901 not-equal[compile-time] 65535[Word], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -128;
endcode
varvalue r True

$overflow on
code auto:2902 not-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2903 not-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2904 not-equal[Int16] 65535[Word], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:2905 not-equal[compile-time] 65535[Word], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -1;
endcode
varvalue r True

$overflow on
code auto:2906 not-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2907 not-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2908 not-equal[Int16] 65535[Word], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2909 not-equal[compile-time] 65535[Word], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:2910 not-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2911 not-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2912 not-equal[Int16] 65535[Word], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2913 not-equal[compile-time] 65535[Word], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:2914 not-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2915 not-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2916 not-equal[Int16] 65535[Word], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2917 not-equal[compile-time] 65535[Word], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:2918 not-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2919 not-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2920 not-equal[Int16] 65535[Word], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2921 not-equal[compile-time] 65535[Word], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 128;
endcode
varvalue r True

$overflow on
code auto:2922 not-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2923 not-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:2924 not-equal[Int16] 65535[Word], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:2925 not-equal[compile-time] 65535[Word], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:2926 not-equal[Word] 0[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2927 not-equal[Word] 0[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:2928 not-equal[Word] 0[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:2929 not-equal[compile-time] 0[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:2930 not-equal[Word] 0[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2931 not-equal[Word] 0[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2932 not-equal[Word] 0[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2933 not-equal[compile-time] 0[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:2934 not-equal[Word] 0[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2935 not-equal[Word] 0[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2936 not-equal[Word] 0[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2937 not-equal[compile-time] 0[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:2938 not-equal[Word] 0[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2939 not-equal[Word] 0[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2940 not-equal[Word] 0[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2941 not-equal[compile-time] 0[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:2942 not-equal[Word] 0[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2943 not-equal[Word] 0[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:2944 not-equal[Word] 0[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2945 not-equal[compile-time] 0[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:2946 not-equal[Word] 255[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2947 not-equal[Word] 255[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2948 not-equal[Word] 255[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2949 not-equal[compile-time] 255[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:2950 not-equal[Word] 255[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2951 not-equal[Word] 255[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2952 not-equal[Word] 255[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2953 not-equal[compile-time] 255[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:2954 not-equal[Word] 255[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2955 not-equal[Word] 255[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2956 not-equal[Word] 255[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2957 not-equal[compile-time] 255[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:2958 not-equal[Word] 255[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2959 not-equal[Word] 255[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:2960 not-equal[Word] 255[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2961 not-equal[compile-time] 255[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:2962 not-equal[Word] 255[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:2963 not-equal[Word] 255[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:2964 not-equal[Word] 255[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:2965 not-equal[compile-time] 255[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:2966 not-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2967 not-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2968 not-equal[Word] 32767[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2969 not-equal[compile-time] 32767[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:2970 not-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2971 not-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2972 not-equal[Word] 32767[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2973 not-equal[compile-time] 32767[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:2974 not-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2975 not-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2976 not-equal[Word] 32767[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2977 not-equal[compile-time] 32767[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:2978 not-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2979 not-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2980 not-equal[Word] 32767[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:2981 not-equal[compile-time] 32767[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:2982 not-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2983 not-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:2984 not-equal[Word] 32767[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:2985 not-equal[compile-time] 32767[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:2986 not-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2987 not-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2988 not-equal[Word] 32768[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:2989 not-equal[compile-time] 32768[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:2990 not-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2991 not-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2992 not-equal[Word] 32768[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:2993 not-equal[compile-time] 32768[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:2994 not-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2995 not-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:2996 not-equal[Word] 32768[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:2997 not-equal[compile-time] 32768[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:2998 not-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:2999 not-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3000 not-equal[Word] 32768[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3001 not-equal[compile-time] 32768[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:3002 not-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3003 not-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3004 not-equal[Word] 32768[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3005 not-equal[compile-time] 32768[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3006 not-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3007 not-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3008 not-equal[Word] 65535[Word], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3009 not-equal[compile-time] 65535[Word], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3010 not-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3011 not-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3012 not-equal[Word] 65535[Word], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3013 not-equal[compile-time] 65535[Word], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:3014 not-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3015 not-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3016 not-equal[Word] 65535[Word], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3017 not-equal[compile-time] 65535[Word], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:3018 not-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3019 not-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3020 not-equal[Word] 65535[Word], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3021 not-equal[compile-time] 65535[Word], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 128;
endcode
varvalue r True

$overflow on
code auto:3022 not-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3023 not-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3024 not-equal[Word] 65535[Word], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3025 not-equal[compile-time] 65535[Word], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3026 not-equal[Word] 0[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3027 not-equal[Word] 0[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3028 not-equal[Word] 0[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3029 not-equal[compile-time] 0[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3030 not-equal[Word] 0[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3031 not-equal[Word] 0[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3032 not-equal[Word] 0[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3033 not-equal[compile-time] 0[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:3034 not-equal[Word] 0[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3035 not-equal[Word] 0[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3036 not-equal[Word] 0[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3037 not-equal[compile-time] 0[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3038 not-equal[Word] 0[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3039 not-equal[Word] 0[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3040 not-equal[Word] 0[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3041 not-equal[compile-time] 0[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3042 not-equal[Word] 0[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3043 not-equal[Word] 0[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3044 not-equal[Word] 0[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3045 not-equal[compile-time] 0[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3046 not-equal[Word] 255[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3047 not-equal[Word] 255[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3048 not-equal[Word] 255[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3049 not-equal[compile-time] 255[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3050 not-equal[Word] 255[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3051 not-equal[Word] 255[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:3052 not-equal[Word] 255[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:3053 not-equal[compile-time] 255[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:3054 not-equal[Word] 255[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3055 not-equal[Word] 255[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3056 not-equal[Word] 255[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3057 not-equal[compile-time] 255[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3058 not-equal[Word] 255[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3059 not-equal[Word] 255[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3060 not-equal[Word] 255[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3061 not-equal[compile-time] 255[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3062 not-equal[Word] 255[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3063 not-equal[Word] 255[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3064 not-equal[Word] 255[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3065 not-equal[compile-time] 255[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3066 not-equal[Word] 32767[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3067 not-equal[Word] 32767[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3068 not-equal[Word] 32767[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3069 not-equal[compile-time] 32767[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3070 not-equal[Word] 32767[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3071 not-equal[Word] 32767[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3072 not-equal[Word] 32767[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3073 not-equal[compile-time] 32767[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:3074 not-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3075 not-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:3076 not-equal[Word] 32767[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:3077 not-equal[compile-time] 32767[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:3078 not-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3079 not-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3080 not-equal[Word] 32767[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3081 not-equal[compile-time] 32767[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3082 not-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3083 not-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3084 not-equal[Word] 32767[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3085 not-equal[compile-time] 32767[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3086 not-equal[Word] 32768[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3087 not-equal[Word] 32768[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3088 not-equal[Word] 32768[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3089 not-equal[compile-time] 32768[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3090 not-equal[Word] 32768[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3091 not-equal[Word] 32768[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3092 not-equal[Word] 32768[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3093 not-equal[compile-time] 32768[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3094 not-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3095 not-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3096 not-equal[Word] 32768[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3097 not-equal[compile-time] 32768[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3098 not-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3099 not-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r False

code auto:3100 not-equal[Word] 32768[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r False

code auto:3101 not-equal[compile-time] 32768[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32768;
endcode
varvalue r False

$overflow on
code auto:3102 not-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3103 not-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3104 not-equal[Word] 32768[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3105 not-equal[compile-time] 32768[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3106 not-equal[Word] 65535[Word], 0[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3107 not-equal[Word] 65535[Word], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3108 not-equal[Word] 65535[Word], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3109 not-equal[compile-time] 65535[Word], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3110 not-equal[Word] 65535[Word], 255[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3111 not-equal[Word] 65535[Word], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3112 not-equal[Word] 65535[Word], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3113 not-equal[compile-time] 65535[Word], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3114 not-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3115 not-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3116 not-equal[Word] 65535[Word], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3117 not-equal[compile-time] 65535[Word], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3118 not-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3119 not-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3120 not-equal[Word] 65535[Word], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3121 not-equal[compile-time] 65535[Word], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3122 not-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3123 not-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r False

code auto:3124 not-equal[Word] 65535[Word], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r False

code auto:3125 not-equal[compile-time] 65535[Word], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 65535;
endcode
varvalue r False

$overflow on
code auto:3126 not-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3127 not-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3128 not-equal[Pointer] 0[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3129 not-equal[compile-time] 0[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3130 not-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3131 not-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3132 not-equal[Pointer] 0[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3133 not-equal[compile-time] 0[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:3134 not-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3135 not-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3136 not-equal[Pointer] 0[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3137 not-equal[compile-time] 0[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3138 not-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3139 not-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3140 not-equal[Pointer] 0[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3141 not-equal[compile-time] 0[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3142 not-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3143 not-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3144 not-equal[Pointer] 0[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3145 not-equal[compile-time] 0[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3146 not-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3147 not-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3148 not-equal[Pointer] 255[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3149 not-equal[compile-time] 255[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3150 not-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3151 not-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:3152 not-equal[Pointer] 255[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:3153 not-equal[compile-time] 255[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:3154 not-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3155 not-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3156 not-equal[Pointer] 255[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3157 not-equal[compile-time] 255[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3158 not-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3159 not-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3160 not-equal[Pointer] 255[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3161 not-equal[compile-time] 255[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3162 not-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3163 not-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3164 not-equal[Pointer] 255[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3165 not-equal[compile-time] 255[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3166 not-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3167 not-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3168 not-equal[Pointer] 32767[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3169 not-equal[compile-time] 32767[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3170 not-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3171 not-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3172 not-equal[Pointer] 32767[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3173 not-equal[compile-time] 32767[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:3174 not-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3175 not-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:3176 not-equal[Pointer] 32767[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:3177 not-equal[compile-time] 32767[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:3178 not-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3179 not-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3180 not-equal[Pointer] 32767[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3181 not-equal[compile-time] 32767[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3182 not-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3183 not-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3184 not-equal[Pointer] 32767[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3185 not-equal[compile-time] 32767[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3186 not-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3187 not-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3188 not-equal[Pointer] 32768[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3189 not-equal[compile-time] 32768[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3190 not-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3191 not-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3192 not-equal[Pointer] 32768[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3193 not-equal[compile-time] 32768[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3194 not-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3195 not-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3196 not-equal[Pointer] 32768[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3197 not-equal[compile-time] 32768[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3198 not-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3199 not-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r False

code auto:3200 not-equal[Pointer] 32768[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r False

code auto:3201 not-equal[compile-time] 32768[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32768;
endcode
varvalue r False

$overflow on
code auto:3202 not-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3203 not-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3204 not-equal[Pointer] 32768[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3205 not-equal[compile-time] 32768[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3206 not-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3207 not-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3208 not-equal[Pointer] 65535[Word], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3209 not-equal[compile-time] 65535[Word], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3210 not-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3211 not-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3212 not-equal[Pointer] 65535[Word], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3213 not-equal[compile-time] 65535[Word], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3214 not-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3215 not-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3216 not-equal[Pointer] 65535[Word], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3217 not-equal[compile-time] 65535[Word], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3218 not-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3219 not-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3220 not-equal[Pointer] 65535[Word], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3221 not-equal[compile-time] 65535[Word], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3222 not-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3223 not-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r False

code auto:3224 not-equal[Pointer] 65535[Word], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r False

code auto:3225 not-equal[compile-time] 65535[Word], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 65535;
endcode
varvalue r False

$overflow on
code auto:3226 not-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3227 not-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3228 not-equal[Pointer] 0[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3229 not-equal[compile-time] 0[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:3230 not-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3231 not-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3232 not-equal[Pointer] 0[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:3233 not-equal[compile-time] 0[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -127;
endcode
varvalue r True

$overflow on
code auto:3234 not-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3235 not-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3236 not-equal[Pointer] 0[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3237 not-equal[compile-time] 0[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:3238 not-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3239 not-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3240 not-equal[Pointer] 0[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3241 not-equal[compile-time] 0[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3242 not-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3243 not-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3244 not-equal[Pointer] 0[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3245 not-equal[compile-time] 0[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:3246 not-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3247 not-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3248 not-equal[Pointer] 0[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3249 not-equal[compile-time] 0[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:3250 not-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3251 not-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3252 not-equal[Pointer] 255[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3253 not-equal[compile-time] 255[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:3254 not-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3255 not-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3256 not-equal[Pointer] 255[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:3257 not-equal[compile-time] 255[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -127;
endcode
varvalue r True

$overflow on
code auto:3258 not-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3259 not-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3260 not-equal[Pointer] 255[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3261 not-equal[compile-time] 255[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:3262 not-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3263 not-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3264 not-equal[Pointer] 255[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3265 not-equal[compile-time] 255[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3266 not-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3267 not-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3268 not-equal[Pointer] 255[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3269 not-equal[compile-time] 255[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:3270 not-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3271 not-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3272 not-equal[Pointer] 255[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3273 not-equal[compile-time] 255[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:3274 not-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3275 not-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3276 not-equal[Pointer] 32767[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3277 not-equal[compile-time] 32767[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:3278 not-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3279 not-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3280 not-equal[Pointer] 32767[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:3281 not-equal[compile-time] 32767[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -127;
endcode
varvalue r True

$overflow on
code auto:3282 not-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3283 not-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3284 not-equal[Pointer] 32767[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3285 not-equal[compile-time] 32767[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:3286 not-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3287 not-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3288 not-equal[Pointer] 32767[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3289 not-equal[compile-time] 32767[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3290 not-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3291 not-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3292 not-equal[Pointer] 32767[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3293 not-equal[compile-time] 32767[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:3294 not-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3295 not-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3296 not-equal[Pointer] 32767[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3297 not-equal[compile-time] 32767[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:3298 not-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3299 not-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3300 not-equal[Pointer] 32768[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3301 not-equal[compile-time] 32768[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:3302 not-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3303 not-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3304 not-equal[Pointer] 32768[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:3305 not-equal[compile-time] 32768[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -127;
endcode
varvalue r True

$overflow on
code auto:3306 not-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3307 not-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3308 not-equal[Pointer] 32768[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3309 not-equal[compile-time] 32768[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:3310 not-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3311 not-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3312 not-equal[Pointer] 32768[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3313 not-equal[compile-time] 32768[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3314 not-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3315 not-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3316 not-equal[Pointer] 32768[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3317 not-equal[compile-time] 32768[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:3318 not-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3319 not-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3320 not-equal[Pointer] 32768[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3321 not-equal[compile-time] 32768[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:3322 not-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3323 not-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3324 not-equal[Pointer] 65535[Pointer], -128[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3325 not-equal[compile-time] 65535[Pointer], -128[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -128;
endcode
varvalue r True

$overflow on
code auto:3326 not-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3327 not-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3328 not-equal[Pointer] 65535[Pointer], -127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -127;
endcode
varvalue r True

code auto:3329 not-equal[compile-time] 65535[Pointer], -127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -127;
endcode
varvalue r True

$overflow on
code auto:3330 not-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3331 not-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3332 not-equal[Pointer] 65535[Pointer], -1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3333 not-equal[compile-time] 65535[Pointer], -1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -1;
endcode
varvalue r True

$overflow on
code auto:3334 not-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3335 not-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3336 not-equal[Pointer] 65535[Pointer], 0[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3337 not-equal[compile-time] 65535[Pointer], 0[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3338 not-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3339 not-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3340 not-equal[Pointer] 65535[Pointer], 1[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3341 not-equal[compile-time] 65535[Pointer], 1[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:3342 not-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3343 not-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3344 not-equal[Pointer] 65535[Pointer], 127[Int8] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3345 not-equal[compile-time] 65535[Pointer], 127[Int8] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:3346 not-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3347 not-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3348 not-equal[Pointer] 0[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:3349 not-equal[compile-time] 0[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32768;
endcode
varvalue r True

$overflow on
code auto:3350 not-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3351 not-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3352 not-equal[Pointer] 0[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:3353 not-equal[compile-time] 0[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -32767;
endcode
varvalue r True

$overflow on
code auto:3354 not-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3355 not-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3356 not-equal[Pointer] 0[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:3357 not-equal[compile-time] 0[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -129;
endcode
varvalue r True

$overflow on
code auto:3358 not-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3359 not-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3360 not-equal[Pointer] 0[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3361 not-equal[compile-time] 0[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -128;
endcode
varvalue r True

$overflow on
code auto:3362 not-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3363 not-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3364 not-equal[Pointer] 0[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3365 not-equal[compile-time] 0[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> -1;
endcode
varvalue r True

$overflow on
code auto:3366 not-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3367 not-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3368 not-equal[Pointer] 0[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3369 not-equal[compile-time] 0[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3370 not-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3371 not-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3372 not-equal[Pointer] 0[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3373 not-equal[compile-time] 0[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:3374 not-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3375 not-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3376 not-equal[Pointer] 0[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3377 not-equal[compile-time] 0[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:3378 not-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3379 not-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3380 not-equal[Pointer] 0[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3381 not-equal[compile-time] 0[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:3382 not-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3383 not-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3384 not-equal[Pointer] 0[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3385 not-equal[compile-time] 0[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3386 not-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3387 not-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3388 not-equal[Pointer] 255[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:3389 not-equal[compile-time] 255[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32768;
endcode
varvalue r True

$overflow on
code auto:3390 not-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3391 not-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3392 not-equal[Pointer] 255[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:3393 not-equal[compile-time] 255[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -32767;
endcode
varvalue r True

$overflow on
code auto:3394 not-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3395 not-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3396 not-equal[Pointer] 255[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:3397 not-equal[compile-time] 255[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -129;
endcode
varvalue r True

$overflow on
code auto:3398 not-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3399 not-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3400 not-equal[Pointer] 255[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3401 not-equal[compile-time] 255[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -128;
endcode
varvalue r True

$overflow on
code auto:3402 not-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3403 not-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3404 not-equal[Pointer] 255[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3405 not-equal[compile-time] 255[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> -1;
endcode
varvalue r True

$overflow on
code auto:3406 not-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3407 not-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3408 not-equal[Pointer] 255[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3409 not-equal[compile-time] 255[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3410 not-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3411 not-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3412 not-equal[Pointer] 255[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3413 not-equal[compile-time] 255[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:3414 not-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3415 not-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3416 not-equal[Pointer] 255[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3417 not-equal[compile-time] 255[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:3418 not-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3419 not-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3420 not-equal[Pointer] 255[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3421 not-equal[compile-time] 255[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:3422 not-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3423 not-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3424 not-equal[Pointer] 255[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3425 not-equal[compile-time] 255[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3426 not-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3427 not-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3428 not-equal[Pointer] 32767[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:3429 not-equal[compile-time] 32767[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32768;
endcode
varvalue r True

$overflow on
code auto:3430 not-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3431 not-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3432 not-equal[Pointer] 32767[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:3433 not-equal[compile-time] 32767[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -32767;
endcode
varvalue r True

$overflow on
code auto:3434 not-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3435 not-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3436 not-equal[Pointer] 32767[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:3437 not-equal[compile-time] 32767[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -129;
endcode
varvalue r True

$overflow on
code auto:3438 not-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3439 not-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3440 not-equal[Pointer] 32767[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3441 not-equal[compile-time] 32767[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -128;
endcode
varvalue r True

$overflow on
code auto:3442 not-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3443 not-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3444 not-equal[Pointer] 32767[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3445 not-equal[compile-time] 32767[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> -1;
endcode
varvalue r True

$overflow on
code auto:3446 not-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3447 not-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3448 not-equal[Pointer] 32767[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3449 not-equal[compile-time] 32767[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3450 not-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3451 not-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3452 not-equal[Pointer] 32767[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3453 not-equal[compile-time] 32767[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:3454 not-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3455 not-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3456 not-equal[Pointer] 32767[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3457 not-equal[compile-time] 32767[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:3458 not-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3459 not-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3460 not-equal[Pointer] 32767[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3461 not-equal[compile-time] 32767[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:3462 not-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3463 not-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:3464 not-equal[Pointer] 32767[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:3465 not-equal[compile-time] 32767[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:3466 not-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3467 not-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3468 not-equal[Pointer] 32768[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:3469 not-equal[compile-time] 32768[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -32768;
endcode
varvalue r True

$overflow on
code auto:3470 not-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3471 not-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3472 not-equal[Pointer] 32768[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:3473 not-equal[compile-time] 32768[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -32767;
endcode
varvalue r True

$overflow on
code auto:3474 not-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3475 not-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3476 not-equal[Pointer] 32768[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:3477 not-equal[compile-time] 32768[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -129;
endcode
varvalue r True

$overflow on
code auto:3478 not-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3479 not-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3480 not-equal[Pointer] 32768[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3481 not-equal[compile-time] 32768[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -128;
endcode
varvalue r True

$overflow on
code auto:3482 not-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3483 not-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3484 not-equal[Pointer] 32768[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3485 not-equal[compile-time] 32768[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> -1;
endcode
varvalue r True

$overflow on
code auto:3486 not-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3487 not-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3488 not-equal[Pointer] 32768[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3489 not-equal[compile-time] 32768[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3490 not-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3491 not-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3492 not-equal[Pointer] 32768[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3493 not-equal[compile-time] 32768[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:3494 not-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3495 not-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3496 not-equal[Pointer] 32768[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3497 not-equal[compile-time] 32768[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:3498 not-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3499 not-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3500 not-equal[Pointer] 32768[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3501 not-equal[compile-time] 32768[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:3502 not-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3503 not-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3504 not-equal[Pointer] 32768[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3505 not-equal[compile-time] 32768[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3506 not-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3507 not-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3508 not-equal[Pointer] 65535[Pointer], -32768[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -32768;
endcode
varvalue r True

code auto:3509 not-equal[compile-time] 65535[Pointer], -32768[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -32768;
endcode
varvalue r True

$overflow on
code auto:3510 not-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3511 not-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3512 not-equal[Pointer] 65535[Pointer], -32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -32767;
endcode
varvalue r True

code auto:3513 not-equal[compile-time] 65535[Pointer], -32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -32767;
endcode
varvalue r True

$overflow on
code auto:3514 not-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -129;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3515 not-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -129;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3516 not-equal[Pointer] 65535[Pointer], -129[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -129;
endcode
varvalue r True

code auto:3517 not-equal[compile-time] 65535[Pointer], -129[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -129;
endcode
varvalue r True

$overflow on
code auto:3518 not-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3519 not-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3520 not-equal[Pointer] 65535[Pointer], -128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -128;
endcode
varvalue r True

code auto:3521 not-equal[compile-time] 65535[Pointer], -128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -128;
endcode
varvalue r True

$overflow on
code auto:3522 not-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = -1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3523 not-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = -1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3524 not-equal[Pointer] 65535[Pointer], -1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> -1;
endcode
varvalue r True

code auto:3525 not-equal[compile-time] 65535[Pointer], -1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> -1;
endcode
varvalue r True

$overflow on
code auto:3526 not-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3527 not-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3528 not-equal[Pointer] 65535[Pointer], 0[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3529 not-equal[compile-time] 65535[Pointer], 0[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3530 not-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3531 not-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3532 not-equal[Pointer] 65535[Pointer], 1[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3533 not-equal[compile-time] 65535[Pointer], 1[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:3534 not-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3535 not-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3536 not-equal[Pointer] 65535[Pointer], 127[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3537 not-equal[compile-time] 65535[Pointer], 127[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:3538 not-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3539 not-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3540 not-equal[Pointer] 65535[Pointer], 128[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3541 not-equal[compile-time] 65535[Pointer], 128[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 128;
endcode
varvalue r True

$overflow on
code auto:3542 not-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3543 not-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Left immediate $overflow on
  var  b: Int16 = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3544 not-equal[Pointer] 65535[Pointer], 32767[Int16] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3545 not-equal[compile-time] 65535[Pointer], 32767[Int16] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3546 not-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3547 not-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3548 not-equal[Pointer] 0[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3549 not-equal[compile-time] 0[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3550 not-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3551 not-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3552 not-equal[Pointer] 0[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3553 not-equal[compile-time] 0[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 1;
endcode
varvalue r True

$overflow on
code auto:3554 not-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3555 not-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3556 not-equal[Pointer] 0[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3557 not-equal[compile-time] 0[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 127;
endcode
varvalue r True

$overflow on
code auto:3558 not-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3559 not-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3560 not-equal[Pointer] 0[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3561 not-equal[compile-time] 0[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 128;
endcode
varvalue r True

$overflow on
code auto:3562 not-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3563 not-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3564 not-equal[Pointer] 0[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3565 not-equal[compile-time] 0[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:3566 not-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3567 not-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3568 not-equal[Pointer] 255[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3569 not-equal[compile-time] 255[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3570 not-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3571 not-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3572 not-equal[Pointer] 255[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3573 not-equal[compile-time] 255[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 1;
endcode
varvalue r True

$overflow on
code auto:3574 not-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3575 not-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3576 not-equal[Pointer] 255[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3577 not-equal[compile-time] 255[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 127;
endcode
varvalue r True

$overflow on
code auto:3578 not-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3579 not-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3580 not-equal[Pointer] 255[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3581 not-equal[compile-time] 255[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 128;
endcode
varvalue r True

$overflow on
code auto:3582 not-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3583 not-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:3584 not-equal[Pointer] 255[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:3585 not-equal[compile-time] 255[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:3586 not-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3587 not-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3588 not-equal[Pointer] 32767[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3589 not-equal[compile-time] 32767[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3590 not-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3591 not-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3592 not-equal[Pointer] 32767[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3593 not-equal[compile-time] 32767[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 1;
endcode
varvalue r True

$overflow on
code auto:3594 not-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3595 not-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3596 not-equal[Pointer] 32767[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3597 not-equal[compile-time] 32767[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 127;
endcode
varvalue r True

$overflow on
code auto:3598 not-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3599 not-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3600 not-equal[Pointer] 32767[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3601 not-equal[compile-time] 32767[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 128;
endcode
varvalue r True

$overflow on
code auto:3602 not-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3603 not-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3604 not-equal[Pointer] 32767[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3605 not-equal[compile-time] 32767[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:3606 not-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3607 not-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3608 not-equal[Pointer] 32768[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3609 not-equal[compile-time] 32768[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3610 not-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3611 not-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3612 not-equal[Pointer] 32768[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3613 not-equal[compile-time] 32768[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 1;
endcode
varvalue r True

$overflow on
code auto:3614 not-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3615 not-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3616 not-equal[Pointer] 32768[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3617 not-equal[compile-time] 32768[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 127;
endcode
varvalue r True

$overflow on
code auto:3618 not-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3619 not-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3620 not-equal[Pointer] 32768[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3621 not-equal[compile-time] 32768[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 128;
endcode
varvalue r True

$overflow on
code auto:3622 not-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3623 not-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3624 not-equal[Pointer] 32768[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3625 not-equal[compile-time] 32768[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3626 not-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3627 not-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3628 not-equal[Pointer] 65535[Pointer], 0[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3629 not-equal[compile-time] 65535[Pointer], 0[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3630 not-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3631 not-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3632 not-equal[Pointer] 65535[Pointer], 1[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 1;
endcode
varvalue r True

code auto:3633 not-equal[compile-time] 65535[Pointer], 1[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 1;
endcode
varvalue r True

$overflow on
code auto:3634 not-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3635 not-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3636 not-equal[Pointer] 65535[Pointer], 127[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 127;
endcode
varvalue r True

code auto:3637 not-equal[compile-time] 65535[Pointer], 127[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 127;
endcode
varvalue r True

$overflow on
code auto:3638 not-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3639 not-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3640 not-equal[Pointer] 65535[Pointer], 128[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 128;
endcode
varvalue r True

code auto:3641 not-equal[compile-time] 65535[Pointer], 128[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 128;
endcode
varvalue r True

$overflow on
code auto:3642 not-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3643 not-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3644 not-equal[Pointer] 65535[Pointer], 255[Byte] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3645 not-equal[compile-time] 65535[Pointer], 255[Byte] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3646 not-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3647 not-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3648 not-equal[Pointer] 0[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3649 not-equal[compile-time] 0[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3650 not-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3651 not-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3652 not-equal[Pointer] 0[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3653 not-equal[compile-time] 0[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:3654 not-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3655 not-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3656 not-equal[Pointer] 0[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3657 not-equal[compile-time] 0[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3658 not-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3659 not-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3660 not-equal[Pointer] 0[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3661 not-equal[compile-time] 0[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3662 not-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3663 not-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3664 not-equal[Pointer] 0[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3665 not-equal[compile-time] 0[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3666 not-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3667 not-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3668 not-equal[Pointer] 255[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3669 not-equal[compile-time] 255[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3670 not-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3671 not-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:3672 not-equal[Pointer] 255[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:3673 not-equal[compile-time] 255[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:3674 not-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3675 not-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3676 not-equal[Pointer] 255[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3677 not-equal[compile-time] 255[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3678 not-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3679 not-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3680 not-equal[Pointer] 255[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3681 not-equal[compile-time] 255[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3682 not-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3683 not-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3684 not-equal[Pointer] 255[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3685 not-equal[compile-time] 255[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3686 not-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3687 not-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3688 not-equal[Pointer] 32767[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3689 not-equal[compile-time] 32767[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3690 not-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3691 not-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3692 not-equal[Pointer] 32767[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3693 not-equal[compile-time] 32767[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:3694 not-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3695 not-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:3696 not-equal[Pointer] 32767[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:3697 not-equal[compile-time] 32767[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:3698 not-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3699 not-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3700 not-equal[Pointer] 32767[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3701 not-equal[compile-time] 32767[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3702 not-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3703 not-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3704 not-equal[Pointer] 32767[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3705 not-equal[compile-time] 32767[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3706 not-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3707 not-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3708 not-equal[Pointer] 32768[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3709 not-equal[compile-time] 32768[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3710 not-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3711 not-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3712 not-equal[Pointer] 32768[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3713 not-equal[compile-time] 32768[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3714 not-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3715 not-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3716 not-equal[Pointer] 32768[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3717 not-equal[compile-time] 32768[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3718 not-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3719 not-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r False

code auto:3720 not-equal[Pointer] 32768[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r False

code auto:3721 not-equal[compile-time] 32768[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32768;
endcode
varvalue r False

$overflow on
code auto:3722 not-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3723 not-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3724 not-equal[Pointer] 32768[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3725 not-equal[compile-time] 32768[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3726 not-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3727 not-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3728 not-equal[Pointer] 65535[Pointer], 0[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3729 not-equal[compile-time] 65535[Pointer], 0[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3730 not-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3731 not-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3732 not-equal[Pointer] 65535[Pointer], 255[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3733 not-equal[compile-time] 65535[Pointer], 255[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3734 not-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3735 not-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3736 not-equal[Pointer] 65535[Pointer], 32767[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3737 not-equal[compile-time] 65535[Pointer], 32767[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3738 not-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3739 not-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3740 not-equal[Pointer] 65535[Pointer], 32768[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3741 not-equal[compile-time] 65535[Pointer], 32768[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3742 not-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3743 not-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r False

code auto:3744 not-equal[Pointer] 65535[Pointer], 65535[Word] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r False

code auto:3745 not-equal[compile-time] 65535[Pointer], 65535[Word] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 65535;
endcode
varvalue r False

$overflow on
code auto:3746 not-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3747 not-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r False

code auto:3748 not-equal[Pointer] 0[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r False

code auto:3749 not-equal[compile-time] 0[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 0;
endcode
varvalue r False

$overflow on
code auto:3750 not-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3751 not-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3752 not-equal[Pointer] 0[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3753 not-equal[compile-time] 0[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 255;
endcode
varvalue r True

$overflow on
code auto:3754 not-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3755 not-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3756 not-equal[Pointer] 0[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3757 not-equal[compile-time] 0[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3758 not-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3759 not-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3760 not-equal[Pointer] 0[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3761 not-equal[compile-time] 0[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3762 not-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3763 not-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 0 <> b;
endcode
varvalue r True

code auto:3764 not-equal[Pointer] 0[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 0;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3765 not-equal[compile-time] 0[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 0 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3766 not-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3767 not-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3768 not-equal[Pointer] 255[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3769 not-equal[compile-time] 255[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 0;
endcode
varvalue r True

$overflow on
code auto:3770 not-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3771 not-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r False

code auto:3772 not-equal[Pointer] 255[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r False

code auto:3773 not-equal[compile-time] 255[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 255;
endcode
varvalue r False

$overflow on
code auto:3774 not-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3775 not-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3776 not-equal[Pointer] 255[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3777 not-equal[compile-time] 255[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3778 not-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3779 not-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3780 not-equal[Pointer] 255[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3781 not-equal[compile-time] 255[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3782 not-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3783 not-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 255 <> b;
endcode
varvalue r True

code auto:3784 not-equal[Pointer] 255[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 255;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3785 not-equal[compile-time] 255[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 255 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3786 not-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3787 not-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3788 not-equal[Pointer] 32767[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3789 not-equal[compile-time] 32767[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 0;
endcode
varvalue r True

$overflow on
code auto:3790 not-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3791 not-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3792 not-equal[Pointer] 32767[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3793 not-equal[compile-time] 32767[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 255;
endcode
varvalue r True

$overflow on
code auto:3794 not-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3795 not-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r False

code auto:3796 not-equal[Pointer] 32767[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r False

code auto:3797 not-equal[compile-time] 32767[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32767;
endcode
varvalue r False

$overflow on
code auto:3798 not-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3799 not-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3800 not-equal[Pointer] 32767[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3801 not-equal[compile-time] 32767[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3802 not-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3803 not-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32767 <> b;
endcode
varvalue r True

code auto:3804 not-equal[Pointer] 32767[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32767;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3805 not-equal[compile-time] 32767[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32767 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3806 not-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3807 not-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3808 not-equal[Pointer] 32768[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3809 not-equal[compile-time] 32768[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 0;
endcode
varvalue r True

$overflow on
code auto:3810 not-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3811 not-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3812 not-equal[Pointer] 32768[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3813 not-equal[compile-time] 32768[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 255;
endcode
varvalue r True

$overflow on
code auto:3814 not-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3815 not-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3816 not-equal[Pointer] 32768[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3817 not-equal[compile-time] 32768[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3818 not-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3819 not-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r False

code auto:3820 not-equal[Pointer] 32768[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r False

code auto:3821 not-equal[compile-time] 32768[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 32768;
endcode
varvalue r False

$overflow on
code auto:3822 not-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3823 not-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 32768 <> b;
endcode
varvalue r True

code auto:3824 not-equal[Pointer] 32768[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 32768;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r True

code auto:3825 not-equal[compile-time] 32768[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 32768 <> 65535;
endcode
varvalue r True

$overflow on
code auto:3826 not-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3827 not-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 0;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3828 not-equal[Pointer] 65535[Pointer], 0[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 0;
endcode
varvalue r True

code auto:3829 not-equal[compile-time] 65535[Pointer], 0[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 0;
endcode
varvalue r True

$overflow on
code auto:3830 not-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3831 not-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 255;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3832 not-equal[Pointer] 65535[Pointer], 255[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 255;
endcode
varvalue r True

code auto:3833 not-equal[compile-time] 65535[Pointer], 255[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 255;
endcode
varvalue r True

$overflow on
code auto:3834 not-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3835 not-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32767;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3836 not-equal[Pointer] 65535[Pointer], 32767[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 32767;
endcode
varvalue r True

code auto:3837 not-equal[compile-time] 65535[Pointer], 32767[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32767;
endcode
varvalue r True

$overflow on
code auto:3838 not-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3839 not-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 32768;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r True

code auto:3840 not-equal[Pointer] 65535[Pointer], 32768[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 32768;
endcode
varvalue r True

code auto:3841 not-equal[compile-time] 65535[Pointer], 32768[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 32768;
endcode
varvalue r True

$overflow on
code auto:3842 not-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3843 not-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Left immediate $overflow on
  var  b: Pointer = 65535;
  var  r: Boolean;
  r := 65535 <> b;
endcode
varvalue r False

code auto:3844 not-equal[Pointer] 65535[Pointer], 65535[Pointer] -> [Boolean] Right immediate $overflow on
  var  a: Pointer = 65535;
  var  r: Boolean;
  r := a <> 65535;
endcode
varvalue r False

code auto:3845 not-equal[compile-time] 65535[Pointer], 65535[Pointer] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := 65535 <> 65535;
endcode
varvalue r False

$overflow on
code auto:3846 not-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3847 not-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := False <> b;
endcode
varvalue r False

code auto:3848 not-equal[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a <> False;
endcode
varvalue r False

code auto:3849 not-equal[compile-time] 0[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False <> False;
endcode
varvalue r False

$overflow on
code auto:3850 not-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3851 not-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := False <> b;
endcode
varvalue r True

code auto:3852 not-equal[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a <> True;
endcode
varvalue r True

code auto:3853 not-equal[compile-time] 0[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False <> True;
endcode
varvalue r True

$overflow on
code auto:3854 not-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3855 not-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := True <> b;
endcode
varvalue r True

code auto:3856 not-equal[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a <> False;
endcode
varvalue r True

code auto:3857 not-equal[compile-time] 255[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True <> False;
endcode
varvalue r True

$overflow on
code auto:3858 not-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3859 not-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := True <> b;
endcode
varvalue r False

code auto:3860 not-equal[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a <> True;
endcode
varvalue r False

code auto:3861 not-equal[compile-time] 255[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True <> True;
endcode
varvalue r False

$overflow on
code auto:3862 not-equal[Char] 0[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3863 not-equal[Char] 0[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #0 <> b;
endcode
varvalue r False

code auto:3864 not-equal[Char] 0[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <> #0;
endcode
varvalue r False

code auto:3865 not-equal[compile-time] 0[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <> #0;
endcode
varvalue r False

$overflow on
code auto:3866 not-equal[Char] 0[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3867 not-equal[Char] 0[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #0 <> b;
endcode
varvalue r True

code auto:3868 not-equal[Char] 0[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <> #31;
endcode
varvalue r True

code auto:3869 not-equal[compile-time] 0[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <> #31;
endcode
varvalue r True

$overflow on
code auto:3870 not-equal[Char] 0[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3871 not-equal[Char] 0[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #0 <> b;
endcode
varvalue r True

code auto:3872 not-equal[Char] 0[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <> ' ';
endcode
varvalue r True

code auto:3873 not-equal[compile-time] 0[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <> ' ';
endcode
varvalue r True

$overflow on
code auto:3874 not-equal[Char] 0[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #0;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3875 not-equal[Char] 0[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #0 <> b;
endcode
varvalue r True

code auto:3876 not-equal[Char] 0[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #0;
  var  r: Boolean;
  r := a <> #255;
endcode
varvalue r True

code auto:3877 not-equal[compile-time] 0[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #0 <> #255;
endcode
varvalue r True

$overflow on
code auto:3878 not-equal[Char] 31[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3879 not-equal[Char] 31[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #31 <> b;
endcode
varvalue r True

code auto:3880 not-equal[Char] 31[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <> #0;
endcode
varvalue r True

code auto:3881 not-equal[compile-time] 31[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <> #0;
endcode
varvalue r True

$overflow on
code auto:3882 not-equal[Char] 31[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3883 not-equal[Char] 31[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #31 <> b;
endcode
varvalue r False

code auto:3884 not-equal[Char] 31[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <> #31;
endcode
varvalue r False

code auto:3885 not-equal[compile-time] 31[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <> #31;
endcode
varvalue r False

$overflow on
code auto:3886 not-equal[Char] 31[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3887 not-equal[Char] 31[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #31 <> b;
endcode
varvalue r True

code auto:3888 not-equal[Char] 31[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <> ' ';
endcode
varvalue r True

code auto:3889 not-equal[compile-time] 31[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <> ' ';
endcode
varvalue r True

$overflow on
code auto:3890 not-equal[Char] 31[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #31;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3891 not-equal[Char] 31[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #31 <> b;
endcode
varvalue r True

code auto:3892 not-equal[Char] 31[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #31;
  var  r: Boolean;
  r := a <> #255;
endcode
varvalue r True

code auto:3893 not-equal[compile-time] 31[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #31 <> #255;
endcode
varvalue r True

$overflow on
code auto:3894 not-equal[Char] 32[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3895 not-equal[Char] 32[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := ' ' <> b;
endcode
varvalue r True

code auto:3896 not-equal[Char] 32[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <> #0;
endcode
varvalue r True

code auto:3897 not-equal[compile-time] 32[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <> #0;
endcode
varvalue r True

$overflow on
code auto:3898 not-equal[Char] 32[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #31;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3899 not-equal[Char] 32[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := ' ' <> b;
endcode
varvalue r True

code auto:3900 not-equal[Char] 32[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <> #31;
endcode
varvalue r True

code auto:3901 not-equal[compile-time] 32[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <> #31;
endcode
varvalue r True

$overflow on
code auto:3902 not-equal[Char] 32[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3903 not-equal[Char] 32[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := ' ' <> b;
endcode
varvalue r False

code auto:3904 not-equal[Char] 32[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <> ' ';
endcode
varvalue r False

code auto:3905 not-equal[compile-time] 32[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <> ' ';
endcode
varvalue r False

$overflow on
code auto:3906 not-equal[Char] 32[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = ' ';
  var  b: Char = #255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3907 not-equal[Char] 32[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := ' ' <> b;
endcode
varvalue r True

code auto:3908 not-equal[Char] 32[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = ' ';
  var  r: Boolean;
  r := a <> #255;
endcode
varvalue r True

code auto:3909 not-equal[compile-time] 32[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := ' ' <> #255;
endcode
varvalue r True

$overflow on
code auto:3910 not-equal[Char] 255[Char], 0[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #0;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3911 not-equal[Char] 255[Char], 0[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #0;
  var  r: Boolean;
  r := #255 <> b;
endcode
varvalue r True

code auto:3912 not-equal[Char] 255[Char], 0[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <> #0;
endcode
varvalue r True

code auto:3913 not-equal[compile-time] 255[Char], 0[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <> #0;
endcode
varvalue r True

$overflow on
code auto:3914 not-equal[Char] 255[Char], 31[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #31;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3915 not-equal[Char] 255[Char], 31[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #31;
  var  r: Boolean;
  r := #255 <> b;
endcode
varvalue r True

code auto:3916 not-equal[Char] 255[Char], 31[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <> #31;
endcode
varvalue r True

code auto:3917 not-equal[compile-time] 255[Char], 31[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <> #31;
endcode
varvalue r True

$overflow on
code auto:3918 not-equal[Char] 255[Char], 32[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = ' ';
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r True

code auto:3919 not-equal[Char] 255[Char], 32[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = ' ';
  var  r: Boolean;
  r := #255 <> b;
endcode
varvalue r True

code auto:3920 not-equal[Char] 255[Char], 32[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <> ' ';
endcode
varvalue r True

code auto:3921 not-equal[compile-time] 255[Char], 32[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <> ' ';
endcode
varvalue r True

$overflow on
code auto:3922 not-equal[Char] 255[Char], 255[Char] -> [Boolean] Var $overflow on
  var  a: Char = #255;
  var  b: Char = #255;
  var  r: Boolean;
  r := a <> b;
endcode
varvalue r False

code auto:3923 not-equal[Char] 255[Char], 255[Char] -> [Boolean] Left immediate $overflow on
  var  b: Char = #255;
  var  r: Boolean;
  r := #255 <> b;
endcode
varvalue r False

code auto:3924 not-equal[Char] 255[Char], 255[Char] -> [Boolean] Right immediate $overflow on
  var  a: Char = #255;
  var  r: Boolean;
  r := a <> #255;
endcode
varvalue r False

code auto:3925 not-equal[compile-time] 255[Char], 255[Char] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := #255 <> #255;
endcode
varvalue r False

