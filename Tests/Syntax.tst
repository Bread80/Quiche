;Syntax;These tests are largely verifying statement breaks, new lines and comments.;==================Expressionscode Expr valid syntaxes  var a:= 1  a := a + 1    a := a +    1  a :=     a + 1  a     := a + 1 endcodecompile noerrorcode Expr incomplete  var a:= 1  a := a + endcodecompile errorcode Expr invalid break point 1  var a:= 1  a := a     + 1endcodecompile errorcode SubExpr valid syntaxes  var a:= 1  a := (a + 1)  a := a +    (1 - a)  a := (    a + 1)  a := (a) + 1  a := (((a)+1))endcodecompile noerrorcode SubExpr invalid breakpoint 1  var a:= 1  a := (a + 1    )endcodecompile errorcode SubExpr unmatched  var a:= 1  a := (a + 1endcodecompile errorcode SubExpr unmatched 1  var a:= 1  a := (a + 1endcodecompile errorcode SubExpr unmatched 2  var a:= 1  a := a + 1)endcodecompile errorcode SubExpr unmatched 3  var a:= 1  a := a) + 1endcodecompile errorcode Expr Continuation  var a:= 1  a := a \    +1endcodecompile noerrorcode Expr Invalid Continuation 1  var a:= 1  a := a \ +1endcodecompile errorcode Expr Invalid Continuation 2  var a:= 1  a := a \ //Comment    +1endcodecompile error;=====================COMMENTS;Curly commentscode Comment Curly  var a:=1 {A comment}{ comment }  var {these}b{are}:={all}1{comments}  var c := a + {A  multiline  comment  }  1  var d:=b + {A 	comment} 1    var e := d {A               comment}endcodecompile noerrorcode Comment Curly Unterminaed  var a:=1 {A commentendcodecompile errorcode Comment Curly Invalid line break  var a:=1 {A 	comment} + 1endcodecompile error;;Bracket star commentscode Comment Bracket  var a:=1 (*A comment*)(* comment *)  var (*these*)b(*are*):=(*all*)1(*comments*)  var c := a + (*A  multiline  comment  *)  1  var d:=b + (*A 	comment*) 1  endcodecompile noerrorcode Comment Bracket Unterminaed  var a:=1 (*A commentendcodecompile errorcode Comment Bracket Invalid line break  var a:=1 (*A 	comment*) + 1endcodecompile error;; Slash-slash commentscode Comment slash-slash  var a:=1 //A comment//A commentendcodecompile noerror;================BLOCK structurecode Single  var x:=1  var y:=2  if x=2 then	x := -x  y:=40endcodecompile noerrorvarvalue y 40code Block  var x:=1  var y:=2  if x=2 then  begin	x := -x    y:=40  endendcodecompile noerrorvarvalue y 2code Inline  var x:=1  var y:=2  if x=2 then x := -x  y:=40endcodecompile noerrorvarvalue y 40code Empty 1  var x:=1  var y:=2  if x=2 then     ;  y:=40endcodecompile noerrorvarvalue y 40code Empty Inline  var x:=1  var y:=2  if x=2 then ;  y:=40endcodecompile noerrorvarvalue y 40code Empty Then with Else  var x:=1  var y:=2  if x=2 then   else    y:=20  y:=40endcodecompile noerrorvarvalue y 40code Empty Then with Else - Semecolon fails  var x:=1  var y:=2  if x=2 then     ;  else    y:=20  y:=40endcodecompile errorcode Optional THEN  var x:=1  var y:=2  if x=2    y:=20  y:=40endcodecompile noerrorvarvalue y 40code Optional Empty THEN  var x:=1  var y:=2  if x=2  else    y:=20  y:=40endcodecompile noerrorcode Optional THEN with comment  var x:=1  var y:=2  if x=2 { a           comment }    y:=20  y:=40endcodecompile noerrorvarvalue y 40varvalue y 40code Statements  var x:=1;var y:=2endcodecompile noerrorcode Statements error  var x:=1 var y:=2endcodecompile errorcode BlockVars are local single  var x:=1  if x=1 then    var y:=10  y:=20endcodecompile errorcode BlockVars are local sub-block  var x:=1  if x=1 then  begin    var y:=10  end  y:=20endcodecompile error;=================SEPARATORScode Pre-separator  ;  var a:=1endcodecompile noerrorcode Block Pre-separator  var x:=10  if x=1 then  begin    ;	x:=100  endendcodecompile noerror