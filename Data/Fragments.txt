;This file contains code fragments which are used by the compiler to
;generate primitives and intrinsics

;Data can be inserted into a fragment using substitiions.
;Substitutions are placed in angle brackets, e.g.
;inc <p1.r8>

;Substitutions are split into two parts: prefix and suffix.
;The prefix specifies which parameter the data is to be for.
;Valid values are:
;d.		Destination
;p1.	First parameter
;p2.	Second parameter
;vars.	Data about variables and parameters used when generating stack frames

;Suffix specifies the actual data required from the parameter
;Valid values are:
;immbyte	- immediate value as a byte
;immword	- immediate value as a word
;r8			- an 8 bit register
;r16		- a 16 bit register pair
;r16low		- the low register of a register pair
;r16high	- the high register of a register pair
;offset		- the offset to a stack variable
;offsetlow	- offset to the low byte of a stack variable
;offsethigh	- offset to the high byte of a stack variable
;varname	- Fully qualified name of the variable

;Variables and stackframe data
;paramsbytesize	- number of bytes allocated on the stack for parameters by the current function
;localsbytesize	- number of bytes allocated on the stack for local variables by the current function

;Invalid values will result in a compiler exception or assertion failure.

;In addition the $$ parameter can be used to susbitute meta data into the comments
;of the output code. The exact data to be substituted is dependant on the 
;substitutions above but is usually the variable name.

;Validation
;===============================================
;Validate the result of an operation, or that a type conversion
;will fit into the destination type.

=c_overflow
  jp c,raise_overflow

=nc_overflow
  jp nc,raise_overflow
  
=nz_overflow
  jp nz,raise_overflow
  
=p_overflow
  jp p,raise_overflow
  
=m_overflow
  jp m,raise_overflow
  
=pe_overflow
  jp pe,raise_overflow

;Raise overflow unless all 9 of the high bits are equal.
;I.e all set or all clear. Used to validate conversion from an 
;signed 16 bit to signed 8 bit where we can only accept values -$80 to +$7f
;Corrupts: a,f
=h9neov
  ld a,<d.r16low>
  rla				;Bit 7 of low byte into carry flag
  ld a,<d.r16high>
  adc a,0			;$ff + carry set gives $00, $00 + carry clear gives $00
  jp nz,raise_overflow	;All others overflow
  
;Raise an overflow error unless all of the highest nine bits of the
;destination register pair are zero
;Invalid if negative or > $7f (1)
;of > $7f (2)
;I.e top nine bits must be clear
;Corrupts: a,f
=h9nzov
  ld a,<d.r16low>
  and $80			;Mask all but top bit of low byte
  or <d.r16high>	
  jp nz,raise_overflow
  
;Test if the high byte of the dest is non-zero. If so raise an overflow error
;Corrupts: a,f 
=hnzov
  ld a,<d.r16high>
  and a
  jp nz,raise_overflow
  
;Raise oveflow if the H register is non-zero
;Corrupts a,f
=hreg_nz_overflow
  ld a,h
  and a
  jp nz,raise_overflow
  
;Loads  
;====================================================

=load_p1r8_imm
  ld <p1.r8>,<p1.immbyte>

=load_p1r16_imm
  ld <p1.r16>,<p1.immword>
  
=load_p1r16high_zero
  ld <p1.r16high>,$00
  
  
=load_p1r8_abs_a
  ld a,(<p1.varname>)	;$$

=load_p1r8_abs_via_a
  ld a,(<p1.varname>)	;$$
  ld <p1.r8>,a

=load_p1r8_abslow_a
  ld a,(<p1.varname>)	;$$
  
=load_p1r8_abslow_via_a
  ld a,(<p1.varname>)	;$$
  ld <p1.r8>,a

=load_p1r8_abshigh_a
  ld a,(<p1.varname> + 1)	;$$
  
=load_p1r8_abshigh_via_a
  ld a,(<p1.varname> + 1)	;$$
  ld <p1.r8>,a
 
=load_p1r16_abs
  ld <p1.r16>,(<p1.varname>)	;$$
  
=load_p1r16low_abslow_a
  ld a,(<p1.varname>)	;$$

=load_p1r16low_abslow_via_a
  ld a,(<p1.varname>)	;$$
  ld <p1.r16low>,a  


=load_p1r8_rel
  ld <p1.r8>,(ix<p1.offset>)	;$$

=load_p1r8_rellow
  ld <p1.r8>,(ix<p1.offsetlow>)	;$$
  
=load_p1r8_relhigh
  ld <p1.r8>,(ix<p1.offsethigh>)	;$$
    
=load_p1r16_rel
  ld <p1.r16low>,(ix<p1.offsetlow>)	;$$  
  ld <p1.r16high>,(ix<p1.offsethigh>)

=load_p1r16low_rellow
  ld <p1.r16low>,(ix<p1.offsetlow>)	;$$
  
  
=load_p2r8_imm
  ld <p2.r8>,<p2.immbyte>

=load_p2r16_imm
  ld <p2.r16>,<p2.immword>
  
=load_p2r16high_zero
  ld <p2.r16high>,$00

=load_p2r8_abs_a
  ld a,(<p2.varname>)	;$$
  
=load_p2r8_abs_via_a
  ld a,(<p2.varname>)	;$$
  ld <p2.r8>,a


 
=load_p2r16_abs
  ld <p2.r16>,(<p2.varname>)	;$$

=load_p2r16low_abs_a
  ld a,(<p2.varname>)	;$$ 
  
=load_p2r16low_abslow_via_a
  ld a,(<p2.varname>)	;$$
  ld <p2.r16low>,a
  

=load_p2r8_rel
  ld <p2.r8>,(ix<p2.offset>)	;$$

=load_p2r16_rel
  ld <p2.r16low>,(ix<p2.offsetlow>)	;$$  
  ld <p2.r16high>,(ix<p2.offsethigh>)

=load_p2r16low_rellow
  ld <p2.r16low>,(ix<p2.offsetlow>)	;$$


;Assigns
;===================================================
;An assignment copies one register, or an immediate value, to
;another
  
=assign_abs8_imm8
  ld a,<p1.immbyte>
  ld (<d.varname>),a		;$$
  
=assign_abs16_imm8_neg
  ld a,<p1.immbyte>
  ld (<d.varname>),a		;$$
  ld a,$ff
  ld (<d.varname> + 1),a

=assign_abs16_imm8
  ld a,<p1.immbyte>
  ld (<d.varname>),a		;$$
  xor a
  ld (<d.varname> + 1),a

=assign_abs16_imm16
  ld a,<p1.immwordlow>
  ld (<d.varname>),a		;$$
  ld a,<p1.immwordhigh>
  ld (<d.varname> + 1),a
 
 
=assign_rel8_imm8
  ld (ix<d.offset>),<p1.immbyte>	;$$
  
=assign_rel16_imm8
  ld (ix<d.offsetlow>),<p1.immbyte>	;$$
  ld (ix<d.offsethigh>),$00

=assign_rel16_imm8_neg
  ld (ix<d.offsetlow>),<p1.immbyte>	;$$
  ld (ix<d.offsethigh>),$ff

=assign_rel16_imm16
  ld (ix<d.offsetlow>),<p1.immwordlow>	;$$
  ld (ix<d.offsethigh>),<p1.immwordhigh>


=assign_abs16_r8
;TODO: ONLY FOR A!
  ld (<d.varname>),<p1.r8>	;$$
  xor a
  ld (<d.varname> + 1),a

=assign_abs8_r8
;TODO: ONLY FOR A!
  ld (<d.varname>),<p1.r8> 	;$$ assign_abs8_r8

=assign_abs8_r16low
;TODO: ONLY FOR A!
  ld (<d.varname>),<p1.r16low>   ;$$
  

=assign_rel16_r8
  ld (ix<d.offsetlow>),<p1.r8>	;$$
  ld (ix<d.offsethigh>),$00

=assign_rel8_r8
  ld (ix<d.offset>),<p1.r8> 	;$$

=assign_rel8r_16low
  ld (ix<d.offset>),<p1.r16low>   ;$$


;Stores
;====================================================
;A store copies the result of a primitive into a variable

=store_abs8_a
  ld (<d.varname>),a		;$$
  
=store_abs8_r8_a
  ld (<d.varname>),a		;$$
  
=store_abs8_r8_via_a
  ld a,<d.r8>
  ld (<d.varname>),a	;$$

=store_abs16_r8_a
  ld (<d.varname>),a
  xor a
  ld (<d.varname> + 1),a	;$$
 
=store_abs16_r8_via_a
  xor a
  ld (<d.varname> + 1),a	;$$
  ld a,<d.r8>
  ld (<d.varname>),a
  
;Store to low byte of absolute variable
;For use before a sign extend
=store_abs16low_r8_a
  ld (<d.varname>),a	;$$

=store_abs16low_r8_via_a
  ld a,<d.r8>
  ld (<d.varname>),a	;$$
  
;Store to high byte of absolute variable
;For use after a sign extend
=store_abs16high_a
  ld (<d.varname> + 1),a		;$$

;For use after a sign extend
=store_abs16high_via_a
  ld a,<d.r8>
  ld (<d.varname> + 1),a	;$$

=store_abs16_r16
  ld (<d.varname>),<d.r16>	;$$

=store_abs8_r16low_via_a
  ld a,<d.r16low>
  ld (<d.varname>),a	;$$
  
  
=store_rel8_a
  ld (ix<d.offset>),a        ;$$  
  
=store_rel8_r8
  ld (ix<d.offset>),<d.r8>	;$$
  
=store_rel16_r8
  ld (ix<d.offsethigh>),$00	;$$
  ld (ix<d.offsetlow>),<d.r8>
  
;For use before a sign extend
=store_rel16low_r8
  ld (ix<d.offsetlow>),<d.r8>	;$$

;For use after a sign extend
=store_rel16high_a
  ld (ix<d.offsethigh>),a		;$$
  
;For use after a sign extend
=store_rel16high_r8
  ld (ix<d.offsethigh>),<d.r8>	;$$

=store_rel16_r16
  ld (ix<d.offsetlow>),<d.r16low>	;$$
  ld (ix<d.offsethigh>),<d.r16high>

=store_rel8_r16low
  ld (ix<d.offsetlow>),<d.r16low>	;$$
  
;Stack operations
;================

=stacklocal_enter
  ld hl,-<vars.localsbytesize>
  call stacklocal_enter
  
=stacklocal_exit
;ld de,return_value_if_any
  ld hl,<vars.paramsbytesize> + $0004	;+ Stack frame size (return addr, prev IX)
  jp stacklocal_exit

  
;Push byte to the stack
=push_byte_a
  push af
  inc sp
  
=push_word
  push <d.r16>
    
;ALU operations
;=========================================================

;----Addition

;8 bit add to immediate
=add8_reg_imm
  add a,<p2.immbyte>

;8 bit add to register
=add8_reg_reg
  add a,<p2.r8>

;16 bit add. Can only test for unsigned overflow due to ADD HL,ss opcode
=add16_nooverflow
  add hl,<p2.r16>	
  
;16 bit add. Affects all needed flags for validation and 16 bit conversion
=add16_overflow
  or a				;Clear carry
  adc hl,<p2.r16>

=inc8_reg
  inc <p1.r8>

=inc16_reg
  inc <p1.r16>

=dec8_reg
  dec <p1.r8>

=dec16_reg
  dec <p1.r16>
  
;----Subtraction

;8 bit immediate subtract
=sub8_reg_imm
  sub a,<p2.immbyte>

;8 bit register subtract
=sub8_reg_reg
  sub a,<p2.r8>

;16 bit subtract
=sub16
  and a
  sbc hl,<p2.r16>	
  
;----Negation

=negate_s8
  neg				;Parity flag set if A was $80

;=negate_u16
;  ld hl,$0000
;  and a
;  sbc hl,de

;----Comparisons
;Note: We need to set A for assignments, flags for branches

=compare8_reg_imm
  cp <p2.immbyte>

;Swapped parameter ordering
=compare8swap_reg_imm
  cp <p1.immbyte>

=compare8_reg_reg
  cp <p2.r8>
  
;Swapped parameter ordering
=compare8swap_reg_reg
  cp <p1.r8>  
  
;Compare and set A to zero if equal
=equalx16
  and a				;Clear carry
  sbc hl,<p2.r16>
  ld a,h			;Set to zero if result was equal
  or l

;p1 < p2 for boolean operands. Equivalent to !p1 AND p2
=bool_less8_reg_imm
  cpl
  and <p2.immbyte>
  
;p1 < p2 for boolean operands. Equivalent to !p1 AND p2
=bool_less8_reg_reg
  cpl
  and <p2.r8>

;p1 > p2 for boolean operands. Equivalent to p1 AND !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greater8_reg_imm
  cpl
  and <p1.immbyte>
  
;p1 > p2 for boolean operands. Equivalent to p1 AND !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greater8_reg_reg
  cpl
  and <p1.r8>

;p1 <= p2 for boolean operands. Equivalent to !p1 OR p2
=bool_lessequal8_reg_imm
  cpl
  or <p2.immbyte>
  
;p1 <= p2 for boolean operands. Equivalent to !p1 OR p2
=bool_lessequal8_reg_reg
  cpl
  or <p2.r8>
  
;p1 >= p2 for boolean operands. Equivalent to p1 OR !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greaterequal8_reg_imm
  cpl
  or <p1.immbyte>
  
;p1 >= p2 for boolean operands. Equivalent to p1 OR !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greaterequal8_reg_reg
  cpl
  or <p1.r8>
  
=odd8_reg
  rra
  sbc a,a
  
=odd8_reg_branch
  rra
  
;====Conversions to Boolean

;If A is non-zero outputs A=$ff, otherwise A=$00 (unchanged)
=atoboolean
  neg				;Set carry if A not equal 0
  sbc a,a			;Set A to -1 or 0
  
;If A is non-zero, outputs A=$00, otherwise A=$ff
=notatoboolean
  neg				;Set carry if A not equal 0
  sbc a,a			;Set A to -1 or 0
  cpl				;Invert bits of A
  
=atozf
  and a
  
;If Zero flag set, outputs A=$ff, otherwise A=$00
=zftoboolean
  ld a,0
  jr nz,$+3
  dec a

;If zero flag is clear, outputs A=$00, otherwise A=$ff
=nzftoboolean
  ld a,0
  jr z,$+3
  dec a
  
;If carry set, outputs A=$ff, otherwise A=$00
=cftoboolean
  sbc a,a
  
;If carry set, outputs A=$ff, otherwise A=$ff
=ncftoboolean
  sbc a,a
  cpl
  
;====Logic (and other boolean stuff)

;Complement the A register (i.e. bitwise invert)
=cpla
  cpl

=or8_reg_imm
  or <p2.immbyte>
  
=or8_reg_reg
  or <p2.r8>
  
=or16_reg_imm
  ld a,<p1.r16low>
  or <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  or <p2.immwordhigh>
  ld <p1.r16high>,a
  
=or16_reg_reg
  ld a,<p1.r16low>
  or <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  or <p2.r16high>
  ld <p1.r16high>,a

=and8_reg_imm
  and <p2.immbyte>
  
=and8_reg_reg
  and <p2.r8>
  
=and16_reg_imm
  ld a,<p1.r16low>
  and <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  and <p2.immwordhigh>
  ld <p1.r16high>,a
  
=and16_reg_reg
  ld a,<p1.r16low>
  and <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  and <p2.r16high>
  ld <p1.r16high>,a
  
=xor8_reg_imm
  xor <p2.immbyte>

=xor8_reg_reg
  xor <p2.r8>
  
=xor16_reg_imm
  ld a,<p1.r16low>
  xor <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  xor <p2.immwordhigh>
  ld <p1.r16high>,a
  
=xor16_reg_reg
  ld a,<p1.r16low>
  xor <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  xor <p2.r16high>
  ld <p1.r16high>,a
  
;16 bit complement
=cpl16_reg
  ld a,<p1.r16low>
  cpl
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  cpl
  ld <p1.r16high>,a  