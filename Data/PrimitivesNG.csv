,,Table of available Primitives,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,"The parser will search this list to ascertain that a combination of parameter types and operator is available, and the result type that combination will return.",,,,,,,,,,,,,,,,,,
,,The code generator will search this list to find the optimum routine to generate for the combination of parameter types and locations.,,,,,,,,,,,,,,,,,,
,,The register allocater will use the list to choose registers to parameters and results to.,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,For full documentation see TPrimitive record in the Def.Primitives.pas file,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,"Valid values for Lreg, Rregs and ResultRegs:",,,,,,,,,,,,,,,,,,
,,,"imm, static, stack, or a semicolon separated list of CPU registers and flags. Imm is invalid for ResultReg.",,,,,,,,,,,,,,,,,
,,,"imm, static, stack cannot be included in a list or locations - they must be the only value given",,,,,,,,,,,,,,,,,
,,,"Where imm, static or stack are given another variant which uses register must (usually!) be available",,,,,,,,,,,,,,,,,
,,"Lines will be ignored if they begin with a semicolon, or if Operation column is empty",,,,,,,,,,,,,,,,,,
,,Terminate the file with 'END' in capitals in first column,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,;Notes: Ordering of items in the table is significant!,,,,,,,,,,,,,,,,,,
,,,;All handlers for an operation must be grouped together,,,,,,,,,,,,,,,,,
,,,;Smaller types /should/ be listed before larger types (but not currently a requirement),,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
;,Binary operators,,,,,,,,(Empty columns for formatting),,,,,,,,,,,
;,,----Primitive Selection----,,,,,,----Primitive Data----,,,,,KEEP!!,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,add,Byte,Byte,y,Byte,x,,add8_reg_imm,,,,,,,c_overflow,m_range,,,,
,add,Byte,Byte,y,Byte,x,,add8_reg_reg,,,,,,,c_overflow,m_range,,,,
,add,Int8,Int8,y,Int8,x,,add8_reg_imm,,,,,,,pe_overflow,,m_range,,m_range,
,add,Int8,Int8,y,Int8,x,,add8_reg_reg,,,,,,,pe_overflow,,m_range,,m_range,
,add,Word,Word,y,Word,y,,add16_overflow,,,,,,,c_overflow,,,m_range,,"Uses ADC HL,ss which does set sign flag"
,add,Word,Word,y,Word,x,,add16_nooverflow,,,,,,,c_overflow,,,,,"Uses ADD HL,ss which doesn't set flags needed for conversions, but is faster"
,add,Integer,Integer,y,Integer,y,,add16_overflow,,,,,,,pe_overflow,,,,m_range,"Uses ADC HL,ss which sets all flags"
,add,Integer,Integer,y,Integer,n,,add16_nooverflow,,,,,,,,,,,,"Uses ADD HL,ss"
,add,Integer,Word,y,Integer,n,,add16_nooverflow,,,,,,,,,,,,"Uses ADD HL,ss"
,add,Integer,Word,y,Word,n,,add16_nooverflow,,,,,,,,,,,,"Uses ADD HL,ss"
,add,Integer,Word,y,Integer,y,,:add16_s_u__s_raise_errors,,,hl,de,hl,hl;de;bc;f,empty,,,,,Add signed to unsigned returning signed. Overflow raised by routine.
,add,Integer,Word,y,Word,y,,:add16_s_u__u_raise_errors,,,hl,de,hl,hl;de;bc;f,empty,,,,,Addsigned to unsigned returning unsigned. Overflow raised by routine
;,add,Char,Char,n,String,x,,:concat_char,,,a,l,hl,?,empty,,,,,c+c
;,add,Char,String,n,String,x,,:concat_char_string,,,a,hl,hl,?,empty,,,,,c+s
;,add,String,Char,n,String,x,,:concat_string_char,,,hl,a,hl,?,empty,,,,,s+c
;,add,String,String,n,String,x,,:concat_string,,,hl,de,hl,?,empty,,,,,s+s
,,,,,,,,,,,,,,,,,,,,
,subtract,Byte,Byte,n,Byte,x,,sub8_reg_imm,,,,,,,c_overflow,m_rangecheck,,,,
,subtract,Byte,Byte,n,Byte,x,,sub8_reg_reg,,,,,,,c_overflow,m_rangecheck,,,,
,subtract,Int8,Int8,n,Int8,x,,sub8_reg_imm,,,,,,,pe_overflow,,m_range,,m_range,
,subtract,Int8,Int8,n,Int8,x,,sub8_reg_reg,,,,,,,pe_overflow,,m_range,,m_range,
,subtract,Word,Word,n,Word,x,,sub16,,,,,,,c_overflow,,,m_range,,
,subtract,Integer,Integer,n,Integer,x,,sub16,,,,,,,pe_overflow,,,,m_range,
,subtract,Integer,Word,n,Integer,n,,sub16,,,,,,,,,,,,
,subtract,Integer,Word,n,Word,n,,sub16,,,,,,,,,,,,
,subtract,Word,Integer,n,Integer,n,,sub16,,,,,,,,,,,,
,subtract,Word,Integer,n,Word,n,,sub16,,,,,,,,,,,,
,subtract,Integer,Word,n,Integer,y,,:sub16_s_u__s_raise_errors,,,hl,de,hl,h;l;f,empty,,,,,"First param is the S16, output is s16"
,subtract,Word,Integer,n,Integer,y,,:sub16_u_s__s_raise_errors,,,hl,de,hl,h;l;f,empty,,,,,"First param is the u16, output is s16"
,subtract,Integer,Word,n,Word,y,,:sub16_s_u__u_raise_errors,,,hl,de,hl,h;l;f,empty,,,,,"First param is the S16, output is u16"
,subtract,Word,Integer,n,Word,y,,:sub16_u_s__u_raise_errors,,,hl,de,hl,h;l;f,empty,,,,,"First param is the u16, output is u16"
,,,,,,,,,,,,,,,,,,,,
,multiply,Byte,Byte,y,Byte,x,,:mult8_h_e__hl,,,h,e,l,a;f;b;d;e;h;l,hreg_nz_overflow,,,,,
,multiply,Byte,Byte,y,Word,x,,:mult8_h_e__hl,,,h,e,hl,a;f;b;d;e;h;l,empty,,,,,"Technically we could do this, but it violates other expression parsing rules."
,multiply,Integer,Integer,y,Integer,x,,:mult16_s_s__s,,,hl,de,hl,a;f;b;d;e;h;l,nc_overflow,,,,,
,multiply,Word,Word,y,Word,x,,:mult16_u_u__u,,,hl,de,hl,a;f;d;e;h;l,c_overflow,,,,,
,multiply,Integer,Word,y,Integer,x,,:mult16_s_u__s,,,hl,de,hl,a;f;b;d;e;h;l,nc_overflow,,,,,
,multiply,Integer,Word,y,Word,x,,:mult16_s_u__u,,,hl,de,hl,a;f;b;d;e;h;l,nc_overflow,,,,,
,,,,,,,,,,,,,,,,,,,,
,div,Byte,Byte,n,Byte,x,,:div8_c_d__c_a,,,c,d,c,a;f;b;c,empty,,,,,
,div,Word,Word,n,Word,x,,:div16_u_u__u,,,hl,de,hl,a;f;b;c;d;e;h;l,empty,,,,,
,div,Integer,Integer,n,Integer,x,,:div16_s_s__s,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,div,Integer,Word,n,Integer,x,,:div16_s_u__s,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,div,Word,Integer,n,Integer,x,,:div16_u_s__s,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,div,Integer,Word,n,Word,x,,:div16_s_u__u,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,div,Word,Integer,n,Word,x,,:div16_u_s__u,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,,,,,,,,,,,,,,,,,,,,
,mod,Byte,Byte,n,Byte,x,,:div8_c_d__c_a,,,c,d,a,a;f;b;c,empty,,,,,
,mod,Word,Word,n,Word,x,,:div16_u_u__u,,,hl,de,de,a;f;b;c;d;e;h;l,empty,,,,,
,mod,Integer,Integer,n,Integer,x,,:mod16_s_s__s,,,hl,de,hl,a;f;b;c;d;e;h;l,empty,,,,,
,mod,Integer,Word,n,Integer,x,,:mod16_s_u__s,,,hl,de,hl,a;f;b;c;d;e;h;l,empty,,,,,
,mod,Word,Integer,n,Integer,x,,:mod16_u_s__s,,,hl,de,de,a;f;b;c;d;e;h;l,empty,,,,,
,mod,Integer,Word,n,Word,x,,:mod16_s_u__u,,,hl,de,hl,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,mod,Word,Integer,n,Word,x,,:mod16_u_s__u,,,hl,de,de,a;f;b;c;d;e;h;l,nc_overflow,,,,,
,,,,,,,,,,,,,,,,,,,,
,shl,Byte,Byte,n,LType,x,,:left_shift_8_by_8,,,a,b,a,,,,,,,This is crying out for optimised routines for constant shift values
,shl,Byte,Int8,n,LType,x,,:left_shift_8_by_8,,,a,b,a,,,,,,,
,shl,Byte,Word,n,LType,x,,:left_shift_8_by_16,,,a,bc,a,,,,,,,
,shl,Byte,Integer,n,LType,x,,:left_shift_8_by_16,,,a,bc,a,,,,,,,
,shl,Int8,Byte,n,LType,x,,:left_shift_8_by_8,,,a,b,a,,,,,,,
,shl,Int8,Int8,n,LType,x,,:left_shift_8_by_8,,,a,b,a,,,,,,,
,shl,Int8,Word,n,LType,x,,:left_shift_8_by_16,,,a,bc,a,,,,,,,
,shl,Int8,Integer,n,LType,x,,:left_shift_8_by_16,,,a,bc,a,,,,,,,
,shl,Integer,Byte,n,LType,x,,:left_shift_16_by_8,,,hl,b,hl,,,,,,,
,shl,Integer,Int8,n,LType,x,,:left_shift_16_by_8,,,hl,b,hl,,,,,,,
,shl,Integer,Word,n,LType,x,,:left_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shl,Integer,Integer,n,LType,x,,:left_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shl,Word,Byte,n,LType,x,,:left_shift_16_by_8,,,hl,b,hl,,,,,,,
,shl,Word,Int8,n,LType,x,,:left_shift_16_by_8,,,hl,b,hl,,,,,,,
,shl,Word,Integer,n,LType,x,,:left_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shl,Word,Word,n,LType,x,,:left_shift_16_by_16,,,hl,bc,hl,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,shr,Byte,Byte,n,LType,x,,:right_shift_8_by_8,,,a,b,a,,,,,,,
,shr,Byte,Int8,n,LType,x,,:right_shift_8_by_8,,,a,b,a,,,,,,,
,shr,Byte,Word,n,LType,x,,:right_shift_8_by_16,,,a,bc,a,,,,,,,
,shr,Byte,Integer,n,LType,x,,:right_shift_8_by_16,,,a,bc,a,,,,,,,
,shr,Int8,Byte,n,LType,x,,:right_shift_8_by_8,,,a,b,a,,,,,,,
,shr,Int8,Int8,n,LType,x,,:right_shift_8_by_8,,,a,b,a,,,,,,,
,shr,Int8,Word,n,LType,x,,:right_shift_8_by_16,,,a,bc,a,,,,,,,
,shr,Int8,Integer,n,LType,x,,:right_shift_8_by_16,,,a,bc,a,,,,,,,
,shr,Integer,Byte,n,LType,x,,:right_shift_16_by_8,,,hl,b,hl,,,,,,,
,shr,Integer,Int8,n,LType,x,,:right_shift_16_by_8,,,hl,b,hl,,,,,,,
,shr,Integer,Word,n,LType,x,,:right_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shr,Integer,Integer,n,LType,x,,:right_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shr,Word,Byte,n,LType,x,,:right_shift_16_by_8,,,hl,b,hl,,,,,,,
,shr,Word,Int8,n,LType,x,,:right_shift_16_by_8,,,hl,b,hl,,,,,,,
,shr,Word,Integer,n,LType,x,,:right_shift_16_by_16,,,hl,bc,hl,,,,,,,
,shr,Word,Word,n,LType,x,,:right_shift_16_by_16,,,hl,bc,hl,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,(Empty columns for formatting),,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,equal,Byte,Byte,y,<Flag>,x,,compare8_reg_imm,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Byte,Byte,y,<Flag>,x,,compare8_reg_reg,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Byte,Byte,y,Boolean,x,,sub8_reg_imm,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,equal,Byte,Byte,y,Boolean,x,,sub8_reg_reg,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,equal,Int8,Int8,y,<Flag>,x,,compare8_reg_imm,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Int8,Int8,y,<Flag>,x,,compare8_reg_reg,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Int8,Int8,y,Boolean,x,,sub8_reg_imm,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,equal,Int8,Int8,y,Boolean,x,,sub8_reg_reg,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,equal,Word,Word,y,<Flag>,x,,:compare_u16,,,hl,de,zf,a;f,empty,,,,,
,equal,Word,Word,y,Boolean,x,,:compare_u16,,,hl,de,zf,a;f,empty,,,,,
,equal,Integer,Integer,y,<Flag>,x,,:compare_u16,,,hl,de,zf,a;f,empty,,,,,
,equal,Integer,Integer,y,Boolean,x,,:compare_u16,,,hl,de,zf,a;f,empty,,,,,
,equal,Word,Integer,y,<Flag>,x,,:equal_m16,,,hl,de,zf,a;h;l;f,empty,,,,,
,equal,Integer,Word,y,<Flag>,x,,:equal_m16,,,hl,de,zf,a;h;l;f,empty,,,,,
,equal,Word,Integer,y,Boolean,x,,:equal_m16,,,hl,de,zf,a;h;l;f,empty,,,,,
,equal,Integer,Word,y,Boolean,x,,:equal_m16,,,hl,de,zf,a;h;l;f,empty,,,,,
,equal,Boolean,Boolean,y,<Flag>,x,,xor8_reg_imm,,,,,zf,,empty,,,,,
,equal,Boolean,Boolean,y,<Flag>,x,,xor8_reg_reg,,,,,zf,,empty,,,,,
,equal,Boolean,Boolean,y,Boolean,x,,xor8_reg_imm,,,,,cpla,,empty,,,,,Result in complement (invert) of A
,equal,Boolean,Boolean,y,Boolean,x,,xor8_reg_reg,,,,,cpla,,empty,,,,,Result in complement (invert) of A
,equal,Char,Char,y,<Flag>,x,,compare8_reg_imm,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Char,Char,y,<Flag>,x,,compare8_reg_reg,,,,,zf,,empty,,,,,For branches - only sets flag
,equal,Char,Char,y,Boolean,x,,sub8_reg_imm,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,equal,Char,Char,y,Boolean,x,,sub8_reg_reg,,,,,zfa,,empty,,,,,zfa: sets z flag and a <> 0
,,,,,,,,,,,,,,,,,,,,
,notequal,Byte,Byte,y,<Flag>,x,,compare8_reg_imm,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Byte,Byte,y,<Flag>,x,,compare8_reg_reg,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Byte,Byte,y,Boolean,x,,sub8_reg_imm,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,notequal,Byte,Byte,y,Boolean,x,,sub8_reg_reg,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,notequal,Int8,Int8,y,<Flag>,x,,compare8_reg_imm,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Int8,Int8,y,<Flag>,x,,compare8_reg_reg,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Int8,Int8,y,Boolean,x,,sub8_reg_imm,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,notequal,Int8,Int8,y,Boolean,x,,sub8_reg_reg,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,notequal,Word,Word,y,<Flag>,x,,:compare_u16,,,hl,de,nzf,a;f,empty,,,,,
,notequal,Word,Word,y,Boolean,x,,:compare_u16,,,hl,de,nzf,a;f,empty,,,,,
,notequal,Integer,Integer,y,<Flag>,x,,:compare_u16,,,hl,de,nzf,a;f,empty,,,,,
,notequal,Integer,Integer,y,Boolean,x,,:compare_u16,,,hl,de,nzf,a;f,empty,,,,,
,notequal,Word,Integer,y,<Flag>,x,,:equal_m16,,,hl,de,nzf,a;h;l;f,empty,,,,,
,notequal,Integer,Word,y,<Flag>,x,,:equal_m16,,,hl,de,nzf,a;h;l;f,empty,,,,,
,notequal,Word,Integer,y,Boolean,x,,:equal_m16,,,hl,de,nzf,a;h;l;f,empty,,,,,
,notequal,Integer,Word,y,Boolean,x,,:equal_m16,,,hl,de,nzf,a;h;l;f,empty,,,,,
,notequal,Boolean,Boolean,y,<Flag>,x,,xor8_reg_imm,,,,,nzf,,empty,,,,,
,notequal,Boolean,Boolean,y,<Flag>,x,,xor8_reg_reg,,,,,nzf,,empty,,,,,
,notequal,Boolean,Boolean,y,Boolean,x,,xor8_reg_imm,,,,,a,,empty,,,,,Result in A
,notequal,Boolean,Boolean,y,Boolean,x,,xor8_reg_reg,,,,,a,,empty,,,,,Result in A
,notequal,Char,Char,y,<Flag>,x,,compare8_reg_imm,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Char,Char,y,<Flag>,x,,compare8_reg_reg,,,,,nzf,,empty,,,,,For branches - only sets flag
,notequal,Char,Char,y,Boolean,x,,sub8_reg_imm,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,notequal,Char,Char,y,Boolean,x,,sub8_reg_reg,,,,,nzfa,,empty,,,,,nzfa: sets z flag and a = 0
,,,,,,,,,,,,,,,,,,,,
,less,Byte,Byte,n,<Flag>,x,,compare8_reg_imm,,,,,cf,,empty,,,,,For branches - only sets flag
,less,Byte,Byte,n,<Flag>,x,,compare8_reg_reg,,,,,cf,,empty,,,,,For branches - only sets flag
,less,Byte,Byte,n,Boolean,x,,compare8_reg_imm,,,,,cf,,empty,,,,,
,less,Byte,Byte,n,Boolean,x,,compare8_reg_reg,,,,,cf,,empty,,,,,
,less,Word,Word,n,<Flag>,x,,:compare_u16,,,hl,de,cf,a;f,empty,,,,,
,less,Word,Word,n,Boolean,x,,:compare_u16,,,hl,de,cf,a;f,empty,,,,,
,less,Integer,Integer,n,<Flag>,x,,:compare_s16,,,hl,de,cf,a;f,empty,,,,,
,less,Integer,Integer,n,Boolean,x,,:compare_s16,,,hl,de,cf,a;f,empty,,,,,
,less,Word,Integer,n,<Flag>,x,,:compare_u16_s16,,,hl,de,cf,a;h;l;f,empty,,,,,
,less,Word,Integer,n,Boolean,x,,:compare_u16_s16,,,hl,de,cf,a;h;l;f,empty,,,,,
,less,Integer,Word,n,<Flag>,x,,:compare_s16_u16,,,hl,de,cf,a;h;l;f,empty,,,,,
,less,Integer,Word,n,Boolean,x,,:compare_s16_u16,,,hl,de,cf,a;h;l;f,empty,,,,,
,less,Boolean,Boolean,n,<Flag>,x,,compare8_reg_imm,,,,,cf,,empty,,,,,
,less,Boolean,Boolean,n,<Flag>,x,,compare8_reg_reg,,,,,cf,,empty,,,,,
,less,Boolean,Boolean,n,Boolean,x,,bool_less8_reg_imm,,,,,a,,empty,,,,,Result in A
,less,Boolean,Boolean,n,Boolean,x,,bool_less8_reg_reg,,,,,a,,empty,,,,,Result in A
,less,Char,Char,n,<Flag>,x,,compare8_reg_imm,,,,,cf,,empty,,,,,For branches - only sets flag
,less,Char,Char,n,<Flag>,x,,compare8_reg_reg,,,,,cf,,empty,,,,,For branches - only sets flag
,less,Char,Char,n,Boolean,x,,compare8_reg_imm,,,,,cf,,empty,,,,,
,less,Char,Char,n,Boolean,x,,compare8_reg_reg,,,,,cf,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,greaterequal,Byte,Byte,n,<Flag>,x,,compare8_reg_imm,,,,,ncf,,empty,,,,,For branches - only sets flag
,greaterequal,Byte,Byte,n,<Flag>,x,,compare8_reg_reg,,,,,ncf,,empty,,,,,For branches - only sets flag
,greaterequal,Byte,Byte,n,Boolean,x,,compare8_reg_imm,,,,,ncf,,empty,,,,,
,greaterequal,Byte,Byte,n,Boolean,x,,compare8_reg_reg,,,,,ncf,,empty,,,,,
,greaterequal,Word,Word,n,<Flag>,x,,:compare_u16,,,hl,de,ncf,a;f,empty,,,,,
,greaterequal,Word,Word,n,Boolean,x,,:compare_u16,,,hl,de,ncf,a;f,empty,,,,,
,greaterequal,Integer,Integer,n,<Flag>,x,,:compare_s16,,,hl,de,ncf,a;f,empty,,,,,
,greaterequal,Integer,Integer,n,Boolean,x,,:compare_s16,,,hl,de,ncf,a;f,empty,,,,,
,greaterequal,Word,Integer,n,<Flag>,x,,:compare_u16_s16,,,hl,de,ncf,a;h;l;f,empty,,,,,
,greaterequal,Word,Integer,n,Boolean,x,,:compare_u16_s16,,,hl,de,ncf,a;h;l;f,empty,,,,,
,greaterequal,Integer,Word,n,<Flag>,x,,:compare_s16_u16,,,hl,de,ncf,a;h;l;f,empty,,,,,
,greaterequal,Integer,Word,n,Boolean,x,,:compare_s16_u16,,,hl,de,ncf,a;h;l;f,empty,,,,,
,greaterequal,Boolean,Boolean,n,<Flag>,x,,compare8_reg_imm,,,,,ncf,,empty,,,,,
,greaterequal,Boolean,Boolean,n,<Flag>,x,,compare8_reg_reg,,,,,ncf,,empty,,,,,
,greaterequal,Boolean,Boolean,n,Boolean,x,,bool_greaterequal8_reg_imm,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greaterequal,Boolean,Boolean,n,Boolean,x,,bool_greaterequal8_reg_reg,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greaterequal,Char,Char,n,<Flag>,x,,compare8_reg_imm,,,,,ncf,,empty,,,,,For branches - only sets flag
,greaterequal,Char,Char,n,<Flag>,x,,compare8_reg_reg,,,,,ncf,,empty,,,,,For branches - only sets flag
,greaterequal,Char,Char,n,Boolean,x,,compare8_reg_imm,,,,,ncf,,empty,,,,,
,greaterequal,Char,Char,n,Boolean,x,,compare8_reg_reg,,,,,ncf,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,greater,Byte,Byte,n,<Flag>,x,,compare8swap_reg_imm,,,,,cf,,empty,,,,,For branches - only sets flag
,greater,Byte,Byte,n,<Flag>,x,,compare8swap_reg_reg,,,,,cf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Byte,Byte,n,Boolean,x,,compare8swap_reg_imm,,,,,cf,,empty,,,,,
,greater,Byte,Byte,n,Boolean,x,,compare8swap_reg_reg,,,,,cf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Word,Word,n,<Flag>,x,,:compare_u16,,,de,hl,cf,a;f,empty,,,,,
,greater,Word,Word,n,Boolean,x,,:compare_u16,,,de,hl,cf,a;f,empty,,,,,
,greater,Integer,Integer,n,<Flag>,x,,:compare_s16,,,de,hl,cf,a;f,empty,,,,,
,greater,Integer,Integer,n,Boolean,x,,:compare_s16,,,de,hl,cf,a;f,empty,,,,,
,greater,Word,Integer,n,<Flag>,x,,:compare_s16_u16,,,de,hl,cf,a;h;l;f,empty,,,,,
,greater,Word,Integer,n,Boolean,x,,:compare_s16_u16,,,de,hl,cf,a;h;l;f,empty,,,,,
,greater,Integer,Word,n,<Flag>,x,,:compare_u16_s16,,,de,hl,cf,a;h;l;f,empty,,,,,
,greater,Integer,Word,n,Boolean,x,,:compare_u16_s16,,,de,hl,cf,a;h;l;f,empty,,,,,
,greater,Boolean,Boolean,n,<Flag>,x,,compare8swap_reg_imm,,,,,cf,,empty,,,,,
,greater,Boolean,Boolean,n,<Flag>,x,,compare8swap_reg_reg,,,,,cf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Boolean,Boolean,n,Boolean,x,,bool_greater8_reg_imm,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Boolean,Boolean,n,Boolean,x,,bool_greater8_reg_reg,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Char,Char,n,<Flag>,x,,compare8swap_reg_imm,,,,,cf,,empty,,,,,For branches - only sets flag
,greater,Char,Char,n,<Flag>,x,,compare8swap_reg_reg,,,,,cf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,greater,Char,Char,n,Boolean,x,,compare8swap_reg_imm,,,,,cf,,empty,,,,,
,greater,Char,Char,n,Boolean,x,,compare8swap_reg_reg,,,,,cf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,,,,,,,,,,,,,,,,,,,,
,lessequal,Byte,Byte,n,<Flag>,x,,compare8swap_reg_imm,,,,,ncf,,empty,,,,,For branches - only sets flag
,lessequal,Byte,Byte,n,<Flag>,x,,compare8swap_reg_reg,,,,,ncf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Byte,Byte,n,Boolean,x,,compare8swap_reg_imm,,,,,ncf,,empty,,,,,
,lessequal,Byte,Byte,n,Boolean,x,,compare8swap_reg_reg,,,,,ncf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Word,Word,n,<Flag>,x,,:compare_u16,,,de,hl,ncf,a;f,empty,,,,,
,lessequal,Word,Word,n,Boolean,x,,:compare_u16,,,de,hl,ncf,a;f,empty,,,,,
,lessequal,Integer,Integer,n,<Flag>,x,,:compare_s16,,,de,hl,ncf,a;f,empty,,,,,
,lessequal,Integer,Integer,n,Boolean,x,,:compare_s16,,,de,hl,ncf,a;f,empty,,,,,
,lessequal,Word,Integer,n,<Flag>,x,,:compare_s16_u16,,,de,hl,ncf,a;h;l;f,empty,,,,,
,lessequal,Word,Integer,n,Boolean,x,,:compare_s16_u16,,,de,hl,ncf,a;h;l;f,empty,,,,,
,lessequal,Integer,Word,n,<Flag>,x,,:compare_u16_s16,,,de,hl,ncf,a;h;l;f,empty,,,,,
,lessequal,Integer,Word,n,Boolean,x,,:compare_u16_s16,,,de,hl,ncf,a;h;l;f,empty,,,,,
,lessequal,Boolean,Boolean,n,<Flag>,x,,compare8swap_reg_imm,,,,,ncf,,empty,,,,,
,lessequal,Boolean,Boolean,n,<Flag>,x,,compare8swap_reg_reg,,,,,ncf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Boolean,Boolean,n,Boolean,x,,bool_lessequal8_reg_imm,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Boolean,Boolean,n,Boolean,x,,bool_lessequal8_reg_reg,,,,,a,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Char,Char,n,<Flag>,x,,compare8swap_reg_imm,,,,,ncf,,empty,,,,,For branches - only sets flag
,lessequal,Char,Char,n,<Flag>,x,,compare8swap_reg_reg,,,,,ncf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,lessequal,Char,Char,n,Boolean,x,,compare8swap_reg_imm,,,,,ncf,,empty,,,,,
,lessequal,Char,Char,n,Boolean,x,,compare8swap_reg_reg,,,,,ncf,,empty,,,,,"Operands reversed. A should be an option for param1, but allocator is greedy and would choose A for param1 and fail on param2"
,,,,,,,,,,,,,,,,,,,,
,istrue,Boolean,none,n,<Flag>,x,,cpla,,,,,nzf,,empty,,,,,"Tests if boolean varaiable is True, result in zero flag"
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,(Empty columns for formatting),,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,or,Byte,Byte,y,Byte,x,,or8_reg_imm,,,,,,,empty,,,,,
,or,Byte,Byte,y,Byte,x,,or8_reg_reg,,,,,,,empty,,,,,
,or,Int8,Int8,y,Int8,x,,or8_reg_imm,,,,,,,empty,,,,,
,or,Int8,Int8,y,Int8,x,,or8_reg_reg,,,,,,,empty,,,,,
,or,Byte,Int8,y,Byte,x,,or8_reg_imm,,,,,,,empty,,,,,
,or,Byte,Int8,y,Byte,x,,or8_reg_reg,,,,,,,empty,,,,,
,or,Word,Word,y,Word,x,,or16_reg_imm,,,,,,,empty,,,,,
,or,Word,Word,y,Word,x,,or16_reg_reg,,,,,,,empty,,,,,
,or,Integer,Integer,y,Integer,x,,or16_reg_imm,,,,,,,empty,,,,,
,or,Integer,Integer,y,Integer,x,,or16_reg_reg,,,,,,,empty,,,,,
,or,Word,Integer,y,Word,x,,or16_reg_imm,,,,,,,empty,,,,,
,or,Word,Integer,y,Word,x,,or16_reg_reg,,,,,,,empty,,,,,
,or,Boolean,Boolean,y,Boolean,x,,or8_reg_imm,,,,,,,empty,,,,,
,or,Boolean,Boolean,y,Boolean,x,,or8_reg_reg,,,,,,,empty,,,,,
,or,Boolean,Boolean,y,<Flag>,x,,or8_reg_reg,,,,,nzf,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,and,Byte,Byte,y,Byte,x,,and8_reg_imm,,,,,,,empty,,,,,
,and,Byte,Byte,y,Byte,x,,and8_reg_reg,,,,,,,empty,,,,,
,and,Int8,Int8,y,Int8,x,,and8_reg_imm,,,,,,,empty,,,,,
,and,Int8,Int8,y,Int8,x,,and8_reg_reg,,,,,,,empty,,,,,
,and,Byte,Int8,y,Byte,x,,and8_reg_imm,,,,,,,empty,,,,,
,and,Byte,Int8,y,Byte,x,,and8_reg_reg,,,,,,,empty,,,,,
,and,Word,Word,y,Word,x,,and16_reg_imm,,,,,,,empty,,,,,
,and,Word,Word,y,Word,x,,and16_reg_reg,,,,,,,empty,,,,,
,and,Integer,Integer,y,Integer,x,,and16_reg_imm,,,,,,,empty,,,,,
,and,Integer,Integer,y,Integer,x,,and16_reg_reg,,,,,,,empty,,,,,
,and,Word,Integer,y,Word,x,,and16_reg_imm,,,,,,,empty,,,,,
,and,Word,Integer,y,Word,x,,and16_reg_reg,,,,,,,empty,,,,,
,and,Boolean,Boolean,y,Boolean,x,,and8_reg_imm,,,,,,,empty,,,,,
,and,Boolean,Boolean,y,Boolean,x,,and8_reg_reg,,,,,,,empty,,,,,
,and,Boolean,Boolean,y,<Flag>,x,,and8_reg_reg,,,,,nzf,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,xor,Byte,Byte,y,Byte,x,,xor8_reg_imm,,,,,,,empty,,,,,
,xor,Byte,Byte,y,Byte,x,,xor8_reg_reg,,,,,,,empty,,,,,
,xor,Int8,Int8,y,Int8,x,,xor8_reg_imm,,,,,,,empty,,,,,
,xor,Int8,Int8,y,Int8,x,,xor8_reg_reg,,,,,,,empty,,,,,
,xor,Byte,Int8,y,Byte,x,,xor8_reg_imm,,,,,,,empty,,,,,
,xor,Byte,Int8,y,Byte,x,,xor8_reg_reg,,,,,,,empty,,,,,
,xor,Word,Word,y,Word,x,,xor16_reg_imm,,,,,,,empty,,,,,
,xor,Word,Word,y,Word,x,,xor16_reg_reg,,,,,,,empty,,,,,
,xor,Integer,Integer,y,Integer,x,,xor16_reg_imm,,,,,,,empty,,,,,
,xor,Integer,Integer,y,Integer,x,,xor16_reg_reg,,,,,,,empty,,,,,
,xor,Word,Integer,y,Word,x,,xor16_reg_imm,,,,,,,empty,,,,,
,xor,Word,Integer,y,Word,x,,xor16_reg_reg,,,,,,,empty,,,,,
,xor,Boolean,Boolean,y,Boolean,x,,xor8_reg_imm,,,,,,,empty,,,,,
,xor,Boolean,Boolean,y,Boolean,x,,xor8_reg_reg,,,,,,,empty,,,,,
,xor,Boolean,Boolean,y,<Flag>,x,,xor8_reg_reg,,,,,nzf,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
;,Unary operators,,,,,,,(Empty columns for formatting),,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,negate,Int8,none,n,Int8,x,,negate_s8,,,,,,,pe_overflow,,,,,
,negate,Word,none,n,Integer,y,,:negate_u16_with_overflow,,,hl,,hl,h;l;d;e;f,nc_overflow,,nz_range,p_range,nz_range,
,negate,Word,none,n,Integer,n,,:negate_s16,,,hl,,hl,h;l;a;f,,,,,,
,negate,Integer,none,n,Integer,y,,:negate_HL_with_overflow,,,hl,,hl,h;l;a;f,nc_overflow,,,,,
,negate,Integer,none,n,Integer,n,,:negate_s16,,,hl,,hl,h;l;a;f,,,,,,
,,,,,,,,,,,,,,,,,,,,
,complement,Byte,none,n,Byte,x,,cpla,,,,,,,empty,,,,,The way we're storing Booleans means we use the same code for bitwise and logical operations
,complement,Int8,none,n,Int8,x,,cpla,,,,,,,empty,,,,,The way we're storing Booleans means we use the same code for bitwise and logical operations
,complement,Word,none,n,Word,x,,cpl16_reg,,,,,,,empty,,,,,
,complement,Pointer,none,n,Pointer,x,,cpl16_reg,,,,,,,empty,,,,,
,complement,Integer,none,n,Integer,x,,cpl16_reg,,,,,,,empty,,,,,
,complement,Boolean,none,n,Boolean,x,,cpla,,,,,,,empty,,,,,Does NOT set zero flag…
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
;,Typecasts,,,,,,,,,,,,,,,,,,,
;,,,,,,,,(Empty columns for formatting),,,,,,,!! 'Empty' here explicitly specifies no checking !!,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,Int8,Int8,none,n,Int8,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Integer,none,n,Int8,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Byte,none,n,Int8,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Word,none,n,Int8,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Pointer,none,n,Int8,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Boolean,none,n,Int8,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Int8,Char,none,n,Int8,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Integer,Int8,none,n,Integer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Integer,none,n,Integer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Byte,none,n,Integer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Word,none,n,Integer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Pointer,none,n,Integer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Boolean,none,n,Integer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Integer,Char,none,n,Integer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Byte,Int8,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Integer,none,n,Byte,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Byte,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Word,none,n,Byte,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Pointer,none,n,Byte,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Boolean,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Byte,Char,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Word,Int8,none,n,Word,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Integer,none,n,Word,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Byte,none,n,Word,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Word,none,n,Word,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Pointer,none,n,Word,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Boolean,none,n,Word,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Word,Char,none,n,Word,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Int8,none,n,Pointer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Integer,none,n,Pointer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Byte,none,n,Pointer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Word,none,n,Pointer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Pointer,none,n,Pointer,x,,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Boolean,none,n,Pointer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Pointer,Char,none,n,Pointer,x,load_rp_low,empty,,,hl;de;bc,,param1,,empty,empty,empty,empty,empty,
,Boolean,Int8,none,n,Boolean,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Integer,none,n,Boolean,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Byte,none,n,Boolean,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Word,none,n,Boolean,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Pointer,none,n,Boolean,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Boolean,none,n,Boolean,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Boolean,Char,none,n,Boolean,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Int8,none,n,Char,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Integer,none,n,Char,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Byte,none,n,Char,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Word,none,n,Char,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Pointer,none,n,Char,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Boolean,none,n,Char,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,Char,Char,none,n,Char,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,empty,empty,empty,empty,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
;,Intrinsics (I.e. small operations mostly enacted via CPU instructions),,,,,,,,,,,,,,,,,,,
;,,,,,,,,,,,,,,,,,,,,
,,,,,,,,(Empty columns for formatting),,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,abs,Integer,none,n,Integer,x,,:abs_hl_with_overflow,,,hl,,hl,a;f;h;l,nc_overflow,,,,,
,abs,Byte,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,Does nothing!
,abs,Word,none,n,Word,x,,empty,,,hl;de;bc,,param1,,empty,,,,,Does nothing!
,abs,Pointer,none,n,Pointer,x,,empty,,,hl;de;bc,,param1,,empty,,,,,Does nothing!
,,,,,,,,,,,,,,,,,,,,
,dec,Byte,Integer,n,None,x,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Byte,Word,n,None,x,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Int8,Integer,n,None,x,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Int8,Word,n,None,x,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Word,Integer,n,None,x,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Word,Word,n,None,x,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Integer,Integer,n,None,x,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,dec,Integer,Word,n,None,x,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use DECs or SUBs
,,,,,,,,,,,,,,,,,,,,
,inc,Byte,Integer,n,None,x,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Byte,Word,n,None,x,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Int8,Integer,n,None,x,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Int8,Word,n,None,x,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Word,Integer,n,None,x,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Word,Word,n,None,x,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Integer,Integer,n,None,x,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,inc,Integer,Word,n,None,x,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking. Proc chooses whether to use INCs or ADDs
,,,,,,,,,,,,,,,,,,,,
,odd,Byte,none,n,<Flag>,x,,odd8_rra,,,,,,,,,,,,Only A reg. Destructive
;,odd,Byte,none,n,Boolean,x,,odd8_rr,,,,,,***Compiler can't handle '-corrupts p1',,,,,,Any register. Destructive. Result in CF
,odd,Byte,none,n,<Flag>,x,,odd8_bit,,,,,,,,,,,,Any register. Non-destructive. Result in ZF
,odd,Int8,none,n,<Flag>,x,,odd8_rra,,,,,,,,,,,,Only A reg. Destructive
;,odd,Int8,none,n,Boolean,x,,odd8_rr,,,,,,***Compiler can't handle '-corrupts p1',,,,,,Any register. Destructive. Result in CF
,odd,Int8,none,n,<Flag>,x,,odd8_bit,,,,,,,,,,,,Any register. Non-destructive. Result in ZF
,odd,Word,none,n,<Flag>,x,load_rp_low,odd8_rra,,,,,,,,,,,,Only A reg. Destructive
;,odd,Word,none,n,Boolean,x,load_rp_low,odd8_rr,,,,,,***Compiler can't handle '-corrupts p1',,,,,,Any register. Destructive. Result in CF
,odd,Word,none,n,<Flag>,x,load_rp_low,odd8_bit,,,,,,,,,,,,Any register. Non-destructive. Result in ZF
,odd,Integer,none,n,<Flag>,x,load_rp_low,odd8_rra,,,,,,,,,,,,Only A reg. Destructive
;,odd,Integer,none,n,Boolean,x,load_rp_low,odd8_rr,,,,,,***Compiler can't handle '-corrupts p1',,,,,,Any register. Destructive. Result in CF
,odd,Integer,none,n,<Flag>,x,load_rp_low,odd8_bit,,,,,,,,,,,,Any register. Non-destructive. Result in ZF
,,,,,,,,,,,,,,,,,,,,
,addrof,Pointer,none,n,Pointer,x,,addrof_static,,,,,,,empty,,,,,Address of static variable
,addrof,Pointer,none,n,Pointer,x,,addrof_stack_via_de,,,,,,,empty,,,,,Address of stack variable.
;,addrof,Pointer,none,n,Pointer,x,,addrof_stack_via_bc,,,,,,,empty,,,,,Address of stack variable. Untested
,,,,,,,,,,,,,,,,,,,,
,hi,Word,none,n,Byte,x,load_rp_high,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,hi,Integer,none,n,Byte,x,load_rp_high,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,high,Byte,none,n,Byte,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Word,none,n,Word,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Int8,none,n,Int8,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Integer,none,n,Integer,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Pointer,none,n,Pointer,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Char,none,n,Char,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,high,Boolean,none,n,Boolean,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,,,,,,,,,,,,,,,,,,,,
,inp,Word,none,n,Byte,x,,in_reg_bc,,,,,,,,,,,,Current Primitive data can't cope with multiple result register options
;,inp,Byte,none,n,Byte,x,,in_a_n,,,,,,,,,,,,Not yet supported (How to differentiate between the two? Compiler option?)
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,(Empty columns for formatting),,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,lo,Word,none,n,Byte,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,lo,Integer,none,n,Byte,x,load_rp_low,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,low,Byte,none,n,Byte,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Word,none,n,Word,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Int8,none,n,Int8,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Integer,none,n,Integer,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Pointer,none,n,Pointer,x,,error,,,imm,,hl,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Char,none,n,Char,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,low,Boolean,none,n,Boolean,x,,error,,,imm,,a,,empty,,,,,Compile time only. Returns a constant at compile time. This is just a placeholder.
,,,,,,,,,,,,,,,,,,,,
,ord,Byte,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,ord,Int8,none,n,Int8,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,ord,Word,none,n,LType,x,,empty,,,hl;de;bc,,param1,,empty,,,,,
,ord,Integer,none,n,Integer,x,,empty,,,hl;de;bc,,param1,,empty,,,,,
,ord,Boolean,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,ord,Char,none,n,Byte,x,,empty,,,a;b;c;d;e;h;l,,param1,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,out,Word,Byte,n,None,x,,out_bc_reg,,,,,,,,,,,,
,out,Word,Char,n,None,x,,out_bc_reg,,,,,,,,,,,,
;,out,Byte,Byte,n,None,x,,out_n_a,,,,,,,,,,,,Not yet supported (How to differentiate between the two? Compiler option?)
;,out,Byte,Char,n,None,x,,out_n_a,,,,,,,,,,,,Not yet supported (How to differentiate between the two? Compiler option?)
,,,,,,,,,,,,,,,,,,,,
,peek,Word,Byte,n,Byte,x,,peek8_imm,,,,,,,empty,,,,,Param2 is consumed at compile time. We put imm here to fool the Primitive search algorithm
,peek,Word,Byte,n,Byte,x,,peek8_r8_hl,,,,,,,empty,,,,,
;,peek,Word,Byte,n,Byte,x,,peek8_a_r16,,,,,,,empty,,,,,
,peek,Word,Int8,n,Int8,x,,peek8_imm,,,,,,,empty,,,,,Code gen can't handle choice of result registers
,peek,Word,Int8,n,Int8,x,,peek8_r8_hl,,,,,,,empty,,,,,Code gen can't handle choice of result registers
;,peek,Word,Int8,n,Int8,x,,peek8_a_r16,,,,,,,empty,,,,,Code gen can't handle choice of result registers
,peek,Word,Word,n,Word,x,,peek16_imm,,,,,,,empty,,,,,
,peek,Word,Word,n,Word,x,,peek16_reg16,,,,,,,empty,,,,,
,peek,Word,Pointer,n,Pointer,x,,peek16_imm,,,,,,,empty,,,,,
,peek,Word,Pointer,n,Pointer,x,,peek16_reg16,,,,,,,empty,,,,,
,peek,Word,Integer,n,Integer,x,,peek16_imm,,,,,,,empty,,,,,
,peek,Word,Integer,n,Integer,x,,peek16_reg16,,,,,,,empty,,,,,
,peek,Word,Boolean,n,Boolean,x,,peek8_imm,,,,,,,empty,,,,,
,peek,Word,Boolean,n,Boolean,x,,peek8_r8_hl,,,,,,,empty,,,,,
;,peek,Word,Boolean,n,Boolean,x,,peek8_a_r16,,,,,,,empty,,,,,
,peek,Word,Char,n,Char,x,,peek8_imm,,,,,,,empty,,,,,
,peek,Word,Char,n,Char,x,,peek8_r8_hl,,,,,,,empty,,,,,
;,peek,Word,Char,n,Char,x,,peek8_a_r16,,,,,,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,poke,Word,Byte,n,None,x,,poke_imm_a,,,,,,,empty,,,,,
,poke,Word,Byte,n,None,x,,poke_hl_imm8,,,,,,,empty,,,,,
,poke,Word,Byte,n,None,x,,poke_hl_reg8,,,,,,,empty,,,,,
,poke,Word,Int8,n,None,x,,poke_imm_a,,,,,,,empty,,,,,
,poke,Word,Int8,n,None,x,,poke_hl_imm8,,,,,,,empty,,,,,
,poke,Word,Int8,n,None,x,,poke_hl_reg8,,,,,,,empty,,,,,
,poke,Word,Word,n,None,x,load_rp_low,poke_imm_a,,,,,,,empty,Does the programmer want to poke a word or just the low byte of the 16-bit value? We can't tell!,,,,
,poke,Word,Integer,n,None,x,load_rp_low,poke_imm_a,,,,,,,empty,For now all pokes are 8 bit until this can be resolved.,,,,
,poke,Word,Word,n,None,x,,poke_hl_imm8,,,,,,,empty,Possibly this requires an extra intrinsic: poke byte and poke typed.,,,,
,poke,Word,Integer,n,None,x,,poke_hl_imm8,,,,,,,empty,,,,,
,poke,Word,Word,n,None,x,load_rp_low,poke_hl_reg8,,,,,,,empty,,,,,
,poke,Word,Integer,n,None,x,load_rp_low,poke_hl_reg8,,,,,,,empty,,,,,
,poke,Word,Boolean,n,None,x,,poke_imm_a,,,,,,,empty,,,,,
,poke,Word,Boolean,n,None,x,,poke_hl_imm8,,,,,,,empty,,,,,
,poke,Word,Boolean,n,None,x,,poke_hl_reg8,,,,,,,empty,,,,,
,poke,Word,Char,n,None,x,,poke_imm_a,,,,,,,empty,,,,,
,poke,Word,Char,n,None,x,,poke_hl_imm8,,,,,,,empty,,,,,
,poke,Word,Char,n,None,x,,poke_hl_reg8,,,,,,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,pred,Byte,Byte,n,Byte,n,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,pred,Byte,Byte,n,Byte,y,,sub8_reg_imm,,,,,,,c_overflow,m_overflow,,,,
,pred,Int8,Int8,n,Int8,n,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,pred,Int8,Int8,n,Int8,y,,sub8_reg_imm,,,,,,,pe_overflow,,m_range,,m_range,
,pred,Word,Integer,n,Word,n,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,pred,Word,Word,n,Word,y,,sub16,,,,,,,c_overflow,,,m_range,,
,pred,Pointer,Integer,n,Pointer,n,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,pred,Pointer,Word,n,Pointer,y,,sub16,,,,,,,c_overflow,,,m_range,,
,pred,Integer,Integer,n,Integer,n,,proc_dec16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,pred,Integer,Integer,n,Integer,y,,sub16,,,,,,,pe_overflow,,,,m_range,
,pred,Boolean,Integer,n,Boolean,n,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,pred,Boolean,Byte,n,Boolean,y,,cpla,,,,,,,c_overflow,m_range,,,,TODO: BoolDEC should be INC!! Error if result not $00
,pred,Char,Integer,n,Char,n,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,pred,Char,Byte,n,Char,y,,sub8_reg_imm,,,,,,,c_overflow,m_range,,,,
,,,,,,,,,,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,sizeof,Typedef,none,n,Word,x,,,,,hl,,hl,,empty,,,,,Compile time only (until we have variant arrays <g>)
,,,,,,,,,,,,,,,,,,,,
,succ,Byte,Byte,n,Byte,n,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,succ,Byte,Byte,n,Byte,y,,add8_reg_imm,,,,,,,c_overflow,m_range,,,,
,succ,Int8,Int8,n,Int8,n,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,succ,Int8,Int8,n,Int8,y,,add8_reg_imm,,,,,,,pe_overflow,,m_range,,m_range,
,succ,Word,Integer,n,Word,n,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,succ,Word,Word,n,Word,y,,add16_overflow,,,,,,,c_overflow,,,m_range,,
,succ,Pointer,Integer,n,Pointer,n,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,succ,Pointer,Word,n,Pointer,y,,add16_overflow,,,,,,,c_overflow,,,m_range,,
,succ,Integer,Integer,n,Integer,n,,proc_inc16_reg,,,hl;de;bc,imm,param1,,empty,,,,,No overflow checking
,succ,Integer,Integer,n,Integer,y,,add16_overflow,,,,,,,pe_overflow,,,,m_range,
,succ,Boolean,Integer,n,Boolean,n,,proc_dec8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,succ,Boolean,Byte,n,Boolean,y,,cpla,,,,,,,c_overflow,m_range,,,,TODO: BoolINC should be DEC!! Error if result not $ff
,succ,Char,Integer,n,Char,n,,proc_inc8_reg,,,a;b;c;d;e;h;l,imm,param1,f,empty,,,,,No overflow checking
,succ,Char,Byte,n,Char,y,,add8_reg_imm,,,,,,,c_overflow,m_range,,,,
,,,,,,,,,,,,,,,,,,,,
,swap,Word,none,n,Word,x,,swap_reg_reg,,,,,,,empty,,,,,Lreg and ResultReg must be different
,swap,Integer,none,n,Integer,x,,swap_reg_reg,,,,,,,empty,,,,,Lreg and ResultReg must be different
,,,,,,,,,,,,,,,,,,,,
,write,Int8,none,n,none,x,,:write_integer,,,hl,,,a;f;hl,empty,,,,,
,write,Integer,none,n,none,x,,:write_integer,,,hl,,,a;f;hl,empty,,,,,
,write,Byte,none,n,none,x,,:write_byte,,,l,,,a;f;hl,empty,,,,,
,write,Word,none,n,none,x,,:write_word,,,hl,,,a;f;hl,empty,,,,,
,write,Pointer,none,n,none,x,,:write_word,,,hl,,,a;f;hl,empty,,,,,
,write,Boolean,none,n,none,x,,:write_bool,,,a,,,a;f;hl,empty,,,,,
,write,Char,none,n,none,x,,:s_writechar,,,a,,,,empty,,,,,
,writeln,none,none,n,none,x,,:s_newline,,,,,,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
;,,----Primitive Selection----,,,,----Primitive Data----,,,,,,,,,,Optimised range checks for type conversions,,,,
;,Operation,Ltype,Rtype,Commutative,ResultType,Validation,Flags,Proc/Fragment/Subroutine,,,Lregs,Rregs,ResultRegs,Corrupts,OverflowCheck,Int8,Byte,Integer,Word,Notes
,chr,Byte,none,n,Char,x,,empty,,,a;b;c;d;e;h;l,,Param1,,empty,,,,,Basically we're doing a tyecast but with validation available
,,,,,,,,,,,,,,,,,,,,
,downcase,Char,none,n,Char,x,,:downcase_char,,,a,,a,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,upcase,Char,none,n,Char,x,,:upcase_char,,,a,,a,,empty,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,
END,,,,,,,,,,,,,,,,,,,,
