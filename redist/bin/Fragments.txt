;====================== CODE FRAGMENTS ===========================

;This file contains code fragments which are used by the compiler to
;generate primitives and intrinsics

;Data can be inserted into a fragment using substitutions.
;Substitutions are placed in angle brackets, e.g.
;inc <p1.r8>

;Substitutions are split into two parts: prefix and suffix.
;The prefix specifies which parameter the data is to be for.
;Valid values are:
;d.		Destination
;p1.	First parameter
;p2.	Second parameter
;vars.	Data about variables and parameters used when generating stack frames

;Suffix specifies the actual data required from the parameter
;Valid values are:
;immbyte	- immediate value as a byte
;immword	- immediate value as a word
;r8			- an 8 bit register
;r16		- a 16 bit register pair
;r16low		- the low register of a register pair
;r16high	- the high register of a register pair
;offset		- IX based the offset to a stack variable (IX+/-name)
;offsetlow	- IX based offset to the low byte of a stack variable (IX+/-name)
;offsethigh	- IX based offset to the high byte of a stack variable (IX+/-name+1)
;varname	- Fully qualified name of the variable
;rawoffset  - Offset to a stack variable - just the offset

;Variables and stackframe data
;paramsbytesize	- number of bytes allocated on the stack for parameters by the current function
;localsbytesize	- number of bytes allocated on the stack for local variables by the current function

;Invalid values will result in a compiler exception or assertion failure.

;In addition the $$ parameter can be used to susbitute meta data into the comments
;of the output code. The exact data to be substituted is dependant on the 
;substitutions above but is usually the variable name.

;==========Meta data
;-p1 <reg-list>|<data-location>   - Register(s) which can contain the first/left parameter
;-p2 <reg-list>|<data-location>   - Register(s) which can contain the second/right parameter
;-d  <reg-list>|<data-location>   - Register(s) which can contain the result/return value
;-corrupts <reg-list> - Registers and flags which are corrupted 
;                       Any registers and flags not specified are assumed to be preserved
;                       The Flags item does not include carry and zero flags. If required
;                       each of these must be explicitly specified
;                       Valid registers are: A,B,C,D,E,H,L,CF,ZF,F
;-entry <literal-list> - Register literal values which must be satisfied on entry.
;                       If this is not the current CPU state (or the state is unknown) the 
;                       code generator will add the relevant code to generate the required state

;  <reg-list> is a list of one or more of the following separated by commas or spaces:
;  None,A,B,C,D,E,H,L,AF,BC,DE,HL,IX,IY,SP,ZF,ZFA,NZF,NZFA,CF,NCF,CPLA,Flags
;  (not all register/flag values are valid in all commands).
;  Where
;    None  - No value accepted or returned
;    ZF    - Zero flag set
;    ZFA   - Zero flag set or clear and sets A register as a boolean
;    NZF   - Zero flag clear or set (inverted)
;    NZFA  - Zero flag clear or set (inverted) and set A register as a boolean
;    CF    - Carry flag set or clear
;    NCF   - Carry flag clear or set (inverted)
;    CPLA  - Result is the complement of A (for boolean reasults only)
;    F     - Flags other than zero and carry (ie Sign and Parity/Overflow - other flags 
;            are not tracked by the compiler)
;            For -corrupts and -preserves zero and carry flag must be specified explicitly
;            if their values are corrupted or preserved.
;  <data-location> is one of the following:
;    imm    - An immediate (constant, literal) (not for results!)
;    static - Fragment can directly read (and/or write) a static variable
;    stack  - Fragment can directly read (and/or write) a static variable
;  <literal-list> is
;    <register-name>[':'|'=']<literal>
;    Register name can be a register or flag.
;    Literal can be a decimal or hex value. Hex values are prefixed with '$'.


  
;-exit  - register literal values set on exit, eg. A=0, CF=1
;  Do NOT include registers which contain return/result values
;-preservesall - if all registers are preserved
;-preserves - registers which are preserved (ie. all others are corrupt), eg preserves ABC,CF,ZF
;  Do NOT include registers which contain result values
;-stateproc - if CPU state changes are too complex for -corrupts, -exit etc that
;  the task of updating CPU state can be passed to a procedure inside the compiler
;  If -stateproc is specified then this will happen.
;  The available procedures and their names are listed in Z80.GenProcs and can be found using
;  FindStateProc to map between Fragment name and procedure.

;-bytes=<integer>   - The number of bytes of code generated
;-cycles=<integer>  - The number of execution cycles required


;============================================SPECIAL
;For those times when no code is needed but we need data...
=dummy -preservesall
  -bytes 0 -cycles 0
  
;============================================OVERFLOW CHECKING
;Validate the result of an operation, or that a type conversion
;will fit into the destination type.

;Raise overflow if carry flag set
=c_overflow  -exit CF=0
  -bytes 3 -cycles 10
  jp c,raise_overflow

;Raise overflow if carry flag clear
=nc_overflow  -exit CF=1
  -bytes 3 -cycles 10
  jp nc,raise_overflow
  
;Raise overflow if zero flag clear
=nz_overflow  -exit ZF=1
  -bytes 3 -cycles 10
  jp nz,raise_overflow
  
;Raise overflow if sign flag clear (result is positive, bit 7 clear)
;Useful when converting signed to unsigned and vice versa
=p_overflow  -preservesall
  -bytes 3 -cycles 10
  jp p,raise_overflow
  
;Raise overflow if sign flag set (result is negative, bit 7 set)
=m_overflow  -preservesall
  -bytes 3 -cycles 10
  jp m,raise_overflow
  
;Raise overflow if parity/overflow even (indicating signed overflow)
=pe_overflow  -preservesall
  -bytes 3 -cycles 10
  jp pe,raise_overflow

=hreg_nz_overflow  -corrupts f
  -exit a:0 zf:1 cf:0  ;A register will always be zero (as will H)
  -bytes 5 -cycles 18
  ld a,h
  and a
  jp nz,raise_overflow
  
;==================================SINGLE PARAM ALGOS

;Loads  
;====================================================
;Load data from a constant or variable into a register

;--Immediates
   
=load_r8_imm -preservesall
  -bytes 2 -cycles 7
  ld <p.r8>,<p.immbyte>

=load_r16_imm -preservesall -stateproc
  -bytes 3 -cycles 10
  ld <p.r16>,<p.immword>
  
=load_xy_imm -preservesall
  -bytes 4 -cycles 14
  ld <p.r16>,<p.immword>
  
=set_cf -exit CF=1
  bytes 1 -cycles 4
  scf
  
=clear_cf -exit CF=0
  -bytes 2 -cycles 8
  scf
  ccf
  
;=====16-bit loads

 
=load_hl_static -stateproc
  -bytes 3 -cycles 16
  ld hl,(<p.varname>)
  
=load_r16_static -stateproc   ;**** 3 bytes/16 cycles if RP is HL ****
  -bytes 4 -cycles 20
  ld <p.r16>,(<p.varname>)	;$$
    
=load_r16_stack -stateproc
  -bytes 6 -cycles 38
  ld <p.r16low>,(ix<p.offsetlow>)	;$$  
  ld <p.r16high>,(ix<p.offsethigh>)


;OBSOLETED - these items are now generated in code

 
;=load_r16high_zero
;  -bytes  -cycles 7
;  ld <p.r16high>,$00
  
  
;=load_r8_abs_a
;  -bytes 3 -cycles 13
;  ld a,(<p.varname>)	;$$

;=load_r8_abs_via_a
;  -bytes 4 -cycles 17
;  ld a,(<p.varname>)	;$$
;  ld <p.r8>,a

;=load_r8_abslow_a
;  -bytes 3 -cycles 13
;  ld a,(<p.varname>)	;$$
  
;=load_r8_abslow_via_a
;  -bytes 4 -cycles 17
;  ld a,(<p.varname>)	;$$
;  ld <p.r8>,a

;=load_r8_abshigh_a
;  -bytes 3 -cycles 13
;  ld a,(<p.varname> + 1)	;$$
  
=load_r8_abshigh_via_a -corrupts a
  -bytes 4 -cycles 17
  ld a,(<p.varname> + 1)	;$$
  ld <p.r8>,a

;=load_r16low_abslow_a
;  -bytes 3 -cycles 13
;  ld a,(<p.varname>)	;$$

;=load_r16low_abslow_via_a
;  -bytes 4 -cycles 17
;  ld a,(<p.varname>)	;$$
;  ld <p.r16low>,a  


;=load_r8_rel
;  -bytes 3 -cycles 19
;  ld <p.r8>,(ix<p.offset>)	;$$

;=load_r8_rellow
;  -bytes 3 -cycles 19
;  ld <p.r8>,(ix<p.offsetlow>)	;$$
  
;=load_r8_relhigh
;  -bytes 3 -cycles 19
;  ld <p.r8>,(ix<p.offsethigh>)	;$$

;=load_pr16low_rellow
;  -bytes 3 -cycles 19
;  ld <p.r16low>,(ix<p.offsetlow>)	;$$

;Assigns
;===================================================
;Assigns are used to (usually) set varaibles from constant values.
;OBSOLETED - these items are now generated in code

;Where an assign can directly use an immediate value it will. If not
;the Primitive will specify a register or choice of registers to place
;value into and the Assign will store the value in that register. The
;end result here is that if the Assign is storing a value from a register
;it will use the /Param1/ register, whereas a store will use the Dest 
;register. The Primitive will use the code generator load-before-primitive
;functionality to put the value into that register.

;PS. Most of these are a hangover from the days when numeric constants where
;stored by the compiler in Z80 type sized variables. They're now in x86 sized
;variables, but may well be needed on a Z80 hosted compiler so worth keeping 
;around

;=assign_abs8_a
;  -bytes 3 -cycles 13
;  ld (<d.varname>),a		;$$

;=assign_abs16_r16
;  -bytes 4 -cycles 20
;  ld (<d.varname>),<p1.r16>	;$$  
  
;=assign_abs16_imm8_neg
;  -bytes 10 -cycles 40  ;7+13+7+13
;  ld a,<p1.immbyte>
;  ld (<d.varname>),a		;$$
;  ld a,$ff
;  ld (<d.varname> + 1),a

;=assign_abs16_imm8
;  -bytes 9 -cycles 37   ;7+13+4+13
;  ld a,<p1.immbyte>
;  ld (<d.varname>),a		;$$
;  xor a
;  ld (<d.varname> + 1),a

;=assign_abs16_imm16
;  -bytes 10 -cycles 40
;  ld a,<p1.immwordlow>
;  ld (<d.varname>),a		;$$
;  ld a,<p1.immwordhigh>
;  ld (<d.varname> + 1),a
 

;=assign_rel8_imm8
;  -bytes 
;  ld (ix<d.offset>),<p1.immbyte>	;$$ 
  
;=assign_rel16_imm8
;  ld (ix<d.offsetlow>),<p1.immbyte>	;$$
;  ld (ix<d.offsethigh>),$00

;=assign_rel16_imm8_neg
;  ld (ix<d.offsetlow>),<p1.immbyte>	;$$
;  ld (ix<d.offsethigh>),$ff

;=assign_rel16_imm16
;  ld (ix<d.offsetlow>),<p1.immwordlow>	;$$
;  ld (ix<d.offsethigh>),<p1.immwordhigh>



;=assign_abs16_r8
;TODO: ONLY FOR A!
;  ld (<d.varname>),<p1.r8>	;$$
;  xor a
;  ld (<d.varname> + 1),a

;=assign_abs8_r8
;TODO: ONLY FOR A!
;  ld (<d.varname>),<p1.r8> 	;$$ assign_abs8_r8

;=assign_abs8_r16low
;TODO: ONLY FOR A!
;  ld (<d.varname>),<p1.r16low>   ;$$
  

;=assign_rel16_r8
;  ld (ix<d.offsetlow>),<p1.r8>	;$$
;  ld (ix<d.offsethigh>),$00

;=assign_rel8_r8
;  ld (ix<d.offset>),<p1.r8> 	;$$

;=assign_rel8r_16low
;  ld (ix<d.offset>),<p1.r16low>   ;$$

;Moves
;====================================================

=move_from_pair -stateproc
  -bytes 2 -cycles 8
  ld <p.r16low>,<ar.r16low>
  ld <p.r16high>,<ar.r16high>
  
=ex_hl_de -stateproc
  -bytes 1 -cycles 4
  ex hl,de

;Stores
;====================================================
;A store copies the result of a primitive into a variable

=store_static_hl -preservesall
  -bytes 3 -cycles 16
  ld (<d.varname>),hl
  
=store_static_r16 -preservesall
  -bytes 4 -cycles 20
  ld (<d.varname>),<d.r16>	;$$

=store_stack_r16 -preservesall
  -bytes 6 -cycles 38
  ld (ix<d.offsetlow>),<d.r16low>	;$$
  ld (ix<d.offsethigh>),<d.r16high>

;OBSOLETED - these items are now generated in code

;=store_abs8_a
;  ld (<d.varname>),a		;$$
  
;=store_abs8_r8_a
;  ld (<d.varname>),a		;$$
  
;=store_abs8_r8_via_a
;  ld a,<d.r8>
;  ld (<d.varname>),a	;$$


;=store_abs16_r8_a
;  ld (<d.varname>),a
;  xor a
;  ld (<d.varname> + 1),a	;$$
 
;=store_abs16_r8_via_a
;  xor a
;  ld (<d.varname> + 1),a	;$$
;  ld a,<d.r8>
;  ld (<d.varname>),a
  
;Store to low byte of absolute variable
;For use before a sign extend
;=store_abs16low_r8_a
;  ld (<d.varname>),a	;$$

;=store_abs16low_r8_via_a
;  ld a,<d.r8>
;  ld (<d.varname>),a	;$$
  
;Store to high byte of absolute variable
;For use after a sign extend
;=store_abs16high_a
;  ld (<d.varname> + 1),a		;$$

;For use after a sign extend
;=store_abs16high_via_a
;  ld a,<d.r8>
;  ld (<d.varname> + 1),a	;$$

;=store_abs8_r16low_via_a
;  ld a,<d.r16low>
;  ld (<d.varname>),a	;$$
  
  
;=store_rel8_a
;  ld (ix<d.offset>),a        ;$$  
  
;=store_rel8_r8
;  ld (ix<d.offset>),<d.r8>	;$$

;=store_rel8_r16low
;  ld (ix<d.offsetlow>),<d.r16low>	;$$
    
  
;=store_rel16_r8
;  ld (ix<d.offsethigh>),$00	;$$
;  ld (ix<d.offsetlow>),<d.r8>

;For use before a sign extend
;=store_rel16low_r8
;  ld (ix<d.offsetlow>),<d.r8>	;$$

;For use after a sign extend
;=store_rel16high_a
;  ld (ix<d.offsethigh>),a		;$$
  
;For use after a sign extend
;=store_rel16high_r8
;  ld (ix<d.offsethigh>),<d.r8>	;$$

;Stack operations
;================

=stacklocal_enter  ;Meta data handled by code generator
  ld hl,-<vars.localsbytesize>
  call stacklocal_enter

;Return value passed in DE (and output in HL) or A.   
=stacklocal_exit  ;Meta data handled by code generator
  ld hl,<vars.paramsbytesize> + $0004	;+ Stack frame size (return addr, prev IX)
  jp stacklocal_exit

  
;Push byte to the stack
;=push_byte_a
;  push af
;  inc sp
  
;=push_word
;  push <d.r16>
    

;=====================ADDITION

;8 bit add to immediate
=add8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,zf,cf
  -bytes 2 -cycles 7
  add a,<p2.immbyte>

;8 bit add to register
=add8_reg_reg  -p1 a -p2 a,b,c,d,e,h,l -d a -corrupts f,zf,cf
  -bytes 1 -cycles 4
  add a,<p2.r8>

;16 bit add. Can only test for unsigned overflow due to ADD HL,ss opcode
=add16_nooverflow  -p1 hl -p2 hl,de,bc -d hl -corrupts cf  ;ZF, SF, PVF preserved
  -bytes 1 -cycles 11
  add hl,<p2.r16>	
  
;16 bit add. Affects all needed flags for validation and 16 bit conversion
=add16_overflow  -p1 hl -p2 hl,de,bc -d hl -corrupts f,zf,cf
  -entry cf:0
  -bytes 2 -cycles 15
  adc hl,<p2.r16>

;;============================INC/DEC
;TODO: INC/DECs are procedurally generated. Procedures don't (currently) handle meta data
=inc8_reg  -p1 a,b,c,d,e,h,l -d p1 -corrupts f,zf ;Preserves CF
  -bytes 1 -cycles 4
  inc <p1.r8>

=inc16_reg  -p1 hl,de,bc -d p1 -preservesall
  -bytes 1 -cycles 6
  inc <p1.r16>

=dec8_reg  -p1 a,b,c,d,e,h,l -d p1 -corrupts f,zf ;Preserves CF
  -bytes 1 -cycles 4
  dec <p1.r8>

=dec16_reg  -p1 hl,de,bc -d p1 -preservesall
  -bytes 1 -cycles 6
  dec <p1.r16>
  
;==================SUBTRACTION

;8 bit immediate subtract
=sub8_reg_imm  -p1 a -p2 imm -d a -corrupts f,zf,cf
  -bytes 2 -cycles 7
  sub a,<p2.immbyte>

;8 bit register subtract
=sub8_reg_reg  -p1 a -p2 a,b,c,d,e,h,l -d a -corrupts f,zf,cf
  -bytes 1 -cycles 4
  sub a,<p2.r8>

;16 bit subtract
=sub16  -p1 hl -p2 hl,de,bc -d hl -corrupts f,zf,cf
  -entry cf:0
  -bytes 2 -cycles 15
  sbc hl,<p2.r16>	
  
;----Negation

=negate_s8 -p1 a d a -corrupts f,zf,cf
  -bytes 2 -cycles 8
  neg				;Parity flag set if A was $80

;=================COMPARISONS

;Note: We need to set A for assignments, flags for branches

=compare8_reg_imm  -p1 a  -p2 imm  -corrupts f,zf,cf
  ;-d zf or cf as specified in Primitives file
  -bytes 2 -cycles 7
  cp <p2.immbyte>

;Swapped parameter ordering
=compare8swap_reg_imm -p1 imm -p2 a -corrupts f,zf,cf
  ;-d zf or cf
  -bytes 2 -cycles 7
  cp <p1.immbyte>

=compare8_reg_reg  -p1 a -p2 a,b,c,d,e,h,l  -corrupts f,zf,cf
  ;-d zf or cf
  -bytes 1 -cycles 4
  cp <p2.r8>
  
;Swapped parameter ordering
=compare8swap_reg_reg  -p1 b,c,d,e,h,l  -p2 a  -corrupts f,zf,cf
  ;-d zf or cf
  -bytes 1 -cycles 4
  cp <p1.r8>  
 
;NOT USED 
;Compare and set A to zero if equal
;=equalx16
;  -entry cf:0
;  -a:? f:?
;  and a				;Clear carry
;  sbc hl,<p2.r16>
;  ld a,h			;Set to zero if result was equal
;  or l

;;===============BOOLEAN COMPARISONS (<bool> <= <bool> etc)

;p1 < p2 for boolean operands. Equivalent to !p1 AND p2
=bool_less8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 3 -cycles 11
  cpl
  and <p2.immbyte>
  
;p1 < p2 for boolean operands. Equivalent to !p1 AND p2
=bool_less8_reg_reg  -p1 a  -p2 a,b,c,d,e,h,l  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 2 -cycles 8
  cpl
  and <p2.r8>

;p1 > p2 for boolean operands. Equivalent to p1 AND !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greater8_reg_imm  -p1 imm  -p2 b,c,d,e,h,l  -d a-corrupts f,cf,zf
  -exit cf:0
  -bytes 3 -cycles 11
  cpl
  and <p1.immbyte>
  
;p1 > p2 for boolean operands. Equivalent to p1 AND !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greater8_reg_reg  -p1 b,c,d,e,h,l  -p2 a  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 2 -cycles 8
  cpl
  and <p1.r8>

;p1 <= p2 for boolean operands. Equivalent to !p1 OR p2
=bool_lessequal8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 3 -cycles 11
  cpl
  or <p2.immbyte>
  
;p1 <= p2 for boolean operands. Equivalent to !p1 OR p2
=bool_lessequal8_reg_reg  -p1 a  -p2 a,b,c,d,e,h,l  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 2 -cycles 8
  cpl
  or <p2.r8>
  
;p1 >= p2 for boolean operands. Equivalent to p1 OR !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greaterequal8_reg_imm  -p1 imm  -p2 b,c,d,e,h,l  -d a -corrupts f,cf,zf
  -exit cf:0
  -bytes 3 -cycles 8
  cpl
  or <p1.immbyte>
  
;p1 >= p2 for boolean operands. Equivalent to p1 OR !p2
;NOTE: To generate this we need to reverse the order of the operands!
=bool_greaterequal8_reg_reg  -p1 b,c,d,e,h,l  -p2 a  -d a  -corrupts f,cf,zf
  -exit cf:0
  -bytes 2 -cycles 8
  cpl
  or <p1.r8>
  
;==============
  
=odd8_rra  -p1 a  -d cf  -corrupts a
  -bytes 1 -cycles 4
  rra

;TODO: Compiler can't cope with Corrupts p1
;=odd8_rr  -p1 b,c,d,e,h,l  -d cf  -corrupts p1
;  rr <p1.r8>

=odd8_bit  -p1 a,b,c,d,e,h,l  -d zf  -preservesall
  -bytes 2 -cycles 8
  bit 0,<p1.r8>
  
;====Conversions to Boolean

;Not used by Primitives.
;Used internally by code generator to convert result values

;If A is non-zero outputs A=$ff, otherwise A=$00 (unchanged)
=atoboolean  -p1 a  -d a  -corrupts f,zf,cf
  -bytes 3 -cycles 12
  neg				;Set carry if A not equal 0
  sbc a,a			;Set A to -1 or 0
  
;If A is non-zero, outputs A=$00, otherwise A=$ff
=notatoboolean  -p1 a  -d a  -corrupts f,zf,cf
  -bytes 4 -cycles 16
  neg				;Set carry if A not equal 0
  sbc a,a			;Set A to -1 or 0
  cpl				;Invert bits of A
  
=atozf  -p1 a  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 1 -cycles 4
  and a
  
;If Zero flag set, outputs A=$ff, otherwise A=$00
=zftoboolean  -p1 zf  -d a  -corrupts f,zf  ;Preserves CF
  -entry a:0
  -bytes 3 -cycles 12 ;12 cycles if branch taken; (7+4) if not
  jr nz,$+3
  dec a

;If zero flag is clear, outputs A=$00, otherwise A=$ff
=nzftoboolean  -p1 zf  -d a  -corrupts f,zf  ;Preserves CF
  -entry a:0
  -bytes 3 -cycles 12 ;12 cycles if branch taken; (7+4) if not
  jr z,$+3
  dec a
  
;If carry set, outputs A=$ff, otherwise A=$00
=cftoboolean  -p1 cf  -d a  -corrupts f,zf  ;Preserves CF
  -bytes 1 -cycles 4
  sbc a,a
  
;If carry set, outputs A=$ff, otherwise A=$ff
=ncftoboolean  -p1 cf  -d a  -corrupts f,zf  ;Preserves CF
  -bytes 2 -cycles 8
  sbc a,a
  cpl
   
;====Logic (and other boolean stuff)

;Complement the A register (i.e. bitwise invert)
=cpla  -p1 a  -d a  -preservesall
  -bytes 1 -cycles 4
  cpl

=or8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 2 -cycles 7
  or <p2.immbyte>
  
=or8_reg_reg  -p1 a  -p2 a,b,c,d,e,h,l  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 1 -cycles 7
  or <p2.r8>
  
=or16_reg_imm -p1 hl,de,bc  -p2 imm  -d p1  -corrupts a,f,zf
  -exit cf:0
  -bytes 8 -cycles 30
  ld a,<p1.r16low>
  or <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  or <p2.immwordhigh>
  ld <p1.r16high>,a
  
=or16_reg_reg -p1 hl,de,bc  -p2 hl,de,bc  -d p1  -corrupts a,f,zf
  -exit cf:0
  -bytes 6 -cycles 24
  ld a,<p1.r16low>
  or <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  or <p2.r16high>
  ld <p1.r16high>,a

=and8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 2 -cycles 7
  and <p2.immbyte>
  
=and8_reg_reg  -p1 a  -p2 a,b,c,d,e,h,l  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 1 -cycles 4
  and <p2.r8>
  
=and16_reg_imm -p1 hl,de,bc  -p2 imm  -d p1  -corrupts a,f,zf
  -exit cf:0 
  -bytes 8 -cycles 30
  ld a,<p1.r16low>
  and <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  and <p2.immwordhigh>
  ld <p1.r16high>,a
  
=and16_reg_reg -p1 hl,de,bc  -p2 hl,de,bc  -d p1  -corrupts a,f,zf
  -exit cf:0
  -bytes 6 -cycles 24
  ld a,<p1.r16low>
  and <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  and <p2.r16high>
  ld <p1.r16high>,a
  
=xor8_reg_imm  -p1 a  -p2 imm  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 2 -cycles 7
  xor <p2.immbyte>

=xor8_reg_reg  -p1 a  -p2 a,b,c,d,e,h,l  -d a  -corrupts f,zf
  -exit cf:0
  -bytes 1 -cycles 4
  xor <p2.r8>
  
=xor16_reg_imm -p1 hl,de,bc  -p2 imm  -d p1  -corrupts a,f,zf
  -exit cf:0
  -bytes 8 -cycles 30
  ld a,<p1.r16low>
  xor <p2.immwordlow>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  xor <p2.immwordhigh>
  ld <p1.r16high>,a
  
=xor16_reg_reg -p1 hl,de,bc  -p2 hl,de,bc  -d p1  -corrupts a,f,zf
  -exit cf:0
  -bytes 6 -cycles 24
  ld a,<p1.r16low>
  xor <p2.r16low>
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  xor <p2.r16high>
  ld <p1.r16high>,a
  
;============MISC

;16 bit complement
=cpl16_reg  -p1 hl,de,bc  -d p1  -corrupts a  ;CPL preserves all meaningful registers
  -bytes 6 -cycles 24
  ld a,<p1.r16low>
  cpl
  ld <p1.r16low>,a
  ld a,<p1.r16high>
  cpl
  ld <p1.r16high>,a  
  
;Swap two halves of a register pair
=swap_reg_reg  -p1 hl,de,bc  -d p1  -corrupts a
  -bytes 3 -cycles 12
  ld a,<p1.r16low>
  ld <p1.r16low>,<p1.r16high>
  ld <p1.r16high>,a
  
;=== Hardware

=in_reg_bc  -p1 bc  -d a,b,c,d,e,h,l  -corrupts f,zf  ;preserves cf
  -bytes 2 -cycles 12
  in <d.r8>,(c)
  
;Not currently used (how to select between the two INs?
;=in_a_n  -p1 imm  -d a  -preservesall
;  -bytes 1 -cycles 11
;  in a,(<p1.immbyte>)
  
=out_bc_reg  -p1 bc  -p2 a,b,c,d,e,h,l  -preservesall
  -bytes 2 -cycles 12
  out (c),<p2.r8>
  
=out_n_a  -p1 imm  -p2 a  -preservesall
  -bytes 1 -cycles 11
  out (<p1.immbyte>),a

;Loads and stores read or write to/from variables whereas peeks and pokes
;read or write unmanaged memory
;The second parameter here is only for the the compiler and specified the 
;data type (and therefore the size) of the read. We need to include it here 
;(as an Immediate) for the primitive selector to work.
=peek8_imm  -p1 imm  -p1 imm  -d a  -preservesall
  -bytes 3 -cycles 13
  ld a,(<p1.immword>)
  
;Any pair to A
=peek8_a_reg16  -p1 hl,de,bc  -p2 imm  -d a  -preservesall
  -bytes 1 -cycles 7
  ld a,(<p1.r16>)
  
;HL to any Reg8
=peek8_r8_hl  -p1 hl  -d a,b,c,d,e,h,l  -p2 imm  -preservesall
  -bytes 1 -cycles 7
  ld <d.r8>,(hl)
  
=peek16_imm  -p1 imm  -d hl,de,bc -p2 imm  -preservesall
  -bytes 4 -cycles 20
  ld <d.r16>,(<p1.immword>)
  
=peek16_reg16  -p1 hl  -d de  -p2 imm  -corrupts hl
  -bytes 3 -cycles 20
  ld e,(hl)
  inc hl
  ld d,(hl)
  
=poke_imm_a  -p1 imm  -p2 a  -preservesall
  -bytes 3 -cycles 13
  ld (<p1.immword>),a
  
=poke_hl_imm8  -p1 hl  -p2 imm  -preservesall
  -bytes 2 -cycles 10
  ld (hl),<p2.immbyte>
  
=poke_hl_reg8  -p1 hl  -p2 a,b,c,d,e,h,l  -preservesall
  -bytes 1 -cycles 7
  ld (hl),<p2.r8>

=poke_r16_a  -p1 hl,de,bc  -p2 a  -preservesall
  -bytes 1 -cycles 7
  ld (<p1.r16>),a
  
=poke_hl_reg16low  -p1 hl  -p2 hl,de,bc  -preservesall
  -bytes 1 -cycles 7
  ld (hl),<p2.r16low>
  
;!!all pokes, at the moment, are 8 bit
;=poke_imm_hl  -p1 imm  -p2 hl  -preservesall
;  -bytes 4 -cycles 20
;  ld (<p1.immword>),hl
  
;=poke_hl_imm16  -p1 hl  -p2 imm  -corrupts hl
;  -bytes 5 -cycles 26
;  ld (hl),<p2.immwordlow>
;  inc hl
;  ld (hl),<p2.immwordhigh>
  
;=poke_hl_reg16  -p1 hl  -p2 hl,de,bc  -corrupts hl
;  -bytes 3 -cycles 20
;  ld (hl),<p2.r16low>
;  inc hl
;  ld (hl),<p2.r16high>

;======================================ADDR operator @

;Address of static variable
=addrof_static  -p1 static  -d hl,de,bc,ix,iy  -preservesall
  -bytes 3 -cycles 10
  ld <d.r16>,<p1.varname>

;Address of stack variable
=addrof_stack_via_de  -p1 stack  -d hl  -corrupts de,cf
  ;ADD only affects CF
  -bytes 7 -cycles 50   ;15+14+10+11
  push ix
  pop hl
  ld de,<p1.rawoffset>
  add hl,de

;Untested
;=addrof_stack_via_bc  -p1 stack  -d hl  -corrupts bc,cf
  ;ADD only affects CF
;  push ix
;  pop hl
;  ld bc,<p1.rawoffset>
;  add hl,bc
;  ld c,l
;  ld b,h