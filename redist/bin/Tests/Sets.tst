;============SET TYPES;========================= SET DECLARATIONScode Sets Basic  type TypeSet = set of Byte  type EnumSet = set of (Red, Green, Blue)  type RangeSet = set of 'a'..'z'endcodecompile noerror code Set of Enum  type Colours = (Red, Green, Blue)  type EnumSet = set of Coloursendcodecompile noerror code Set of Range  type Numbers = 0..10  type RangeSet = set of Numbersendcodecompile noerror code Set Not Ordinal 1  type MySet = set of Stringendcodecompile OrdinalTypeExpected code Set Not Ordinal 2  type MySet = set of ^Byteendcodecompile OrdinalTypeExpected code Set Not Ordinal 3  type CharSet = set of Char  type MySet = set of CharSetendcodecompile OrdinalTypeExpected;=================== INSTANTIATE VARIABLE;Short Set is 1..8 elementscode Instantiate Short Set Typed  type TColour = (Red, Green, Blue)  type TColours = set of TColour  var Colours: TColoursendcodecompile noerrorcode Instantiate Short Set Inline  type TColour = (Red, Green, Blue)  var Colours: set of TColourendcodecompile noerror;Long is 9..16 elementscode Instantiate Long Set Typed  type TItem = (A, B, C, D, E, F, G, H, L, M)  type TItems = set of TItem  var Items: TItemsendcodecompile noerrorcode Instantiate Long Set Inline  type TItem = (A, B, C, D, E, F, G, H, L, M)  var: set of TItemendcodecompile noerror;XLong is > 16 elementscode Instantiate XLong Set Typed  type TItems = set of Byte  var Items: TItemsendcodecompile noerrorcode Instantiate XLong Set Inline  var Items: set of Byteendcodecompile noerror