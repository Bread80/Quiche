parsetype declarationscode Functions Valid Parameter Lists  function AFunc: Integer;call 0;  function B(Param: Char): Boolean;call 0;  function C ( Param :Char ) :Boolean ; call 0 ;  function D :Char;call 0;  function E(I,J, K ,L: Byte): Byte;call 0;  function F(I,J: Byte;K,L: Word): Byte;call 0;  function G(I: Byte ; J: Word): Byte;call 0;  begin  end.endcodecompile noerrorcode Procedures Valid Parameter Lists  procedure A;call 0;  procedure B(J: Byte);call 0;  begin  end.endcodecompile noerrorcode Error: name is reserved identifier  function and: Byte;call 0;  begin  end.endcodecompile ReservedWordcode Error: parameter is reserved word  procedure x(begin: Integer);call 0;  begin  end.endcodecompile ReservedWordcode Error: unknown type result  function x: MadeUpInnit;call 0;  begin  end.endcodecompile UnknownTypecode Error: unknown type parameter  function a(i,j: MadeUpInnit): byte;call 0;  begin  end.endcodecompile UnknownTypecode Error: Params with same name  function a(i: Byte;i: Char): byte;call 0;  begin  end.endcodecompile ParamNameRedeclaredcode Error: Params with same name (list)  function a(i,i: Byte): byte;call 0;  begin  end.endcodecompile ParamNameRedeclaredcode Parameter specifiers procedure A(var I: Byte);call 0; procedure B(const J: Byte);call 0; procedure C(out K: Byte);call 0; procedure D(var I,J: Byte;const K: Word);call 0; begin end.endcodecompile noerrorcode Register parameters procedures  procedure A(I: A);call 0;  procedure B(J :HL );call 0;  procedure C(K: A as Byte);call 0;  procedure D(L :HL as Word );call 0;  procedure E(I: A;out J:B);call 0;  procedure F(I:A;B:HL;C:DE);call 0;  procedure H(I: A as Char; J: HL as Pointer ;C: DE);call 0;  procedure I(X: CF);call 0;  procedure J(Y:ZF as Boolean);call 0;  begin  end.endcodecompile noerrorcode Register parameters functions  function A(I: A): A;call 0;  function B(J :HL ) :HL;call 0;  function C(K: A as Byte): A as Char ;call 0;  function D(L :HL as Word ): HL as Pointer;call 0;  function E(I: A;out J:B as Byte): ZF;call 0;  function F(I: A;out J:A): C;call 0;  function G(I: A): A;call 0;  begin  end.endcodecompile noerrorcode Error: Illegal register  function a(i: Z): HL;call 0;  begin  end.endcodecompile UnknownTypecode Error: Duplicate register in  function a(i: A;j: A): HL;call 0;  begin  end.endcodecompile RegisterParamRedeclaredcode Error: Duplicate register out  function a(out i: A): A;call 0;  begin  end.endcodecompile RegisterParamRedeclaredcode Error: Duplicate register list  function a(i,j: A): HL;call 0;  begin  end.endcodecompile RegisterParamRedeclaredcode Error: Mix of register and non register params 1  function a(i: A;j: Integer): HL;call 0;  begin  end.endcodecompile RegisterParamMismatchcode Error: Mix of register and non register params 2  function a(i: Integer;j: A as Byte): HL;call 0;  begin  end.endcodecompile RegisterParamMismatchcode Error: Mix of register and non register result 1  function a(i: A): Integer;call 0;  begin  end.endcodecompile RegisterParamMismatchcode Error: Mix of register and non register result 2  function a(i: Integer): A;call 0;  begin  end.endcodecompile RegisterParamMismatchcode Error: Illegal param specifier var  function a(var i: A): HL;call 0;  begin  end.endcodecompile RegisterParamInvalidAccessTypecode Error: Illegal param specifier const  function a(const i: A): HL;call 0;  begin  end.endcodecompile RegisterParamInvalidAccessTypecode Extern functions  procedure A(X: Integer);call $0100;  begin  end.endcodecompile noerrorcode Extern functions invalid negative  procedure A(X: Integer);call -100;  begin  end.endcodecompile CallDirectiveOutOfRangecode Extern functions invalid char  procedure A(X: Integer);call 'c';  begin  end.endcodecompile IntegerExpectedForCALLOrRSTcode Forward  procedure A(I: Byte);forward;  procedure A(I: Byte);call 0;  begin  end.endcodecompile noerrorcode Forward doesn't match arg specifier  procedure A(I: Byte);forward;  procedure A(const I: Byte);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match arg name  procedure A(I: Byte);forward;  procedure A(J: Byte);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match arg type  procedure A(I: Byte);forward;  procedure A(I: Word);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match arg count  procedure A(I: Byte);forward;  procedure A(I: Byte;J: Byte);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match register 1  procedure A(I: Byte);forward;  procedure A(I: A);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match register 2  procedure A(I: A);forward;  procedure A(I: B);call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match result type  function A(I: Byte): Byte;forward;  function A(I: Byte): Word;call 0;  begin  end.endcodecompile FuncDecDoesntMatchcode Forward doesn't match result register  function A(I: A): B;forward;  function A(I: A): C;call 0;  begin  end.endcodecompile FuncDecDoesntMatch;Errors: Unsatisfied forward declaration (probably via codegen fixups)code Forward: Unsatisfied forward  function A(I: Byte): Byte;forward;  begin  end.endcodecompile UnsatisfiedForward;;==================================STACKcode Stack 16-bit Parameter  var x:Word = 0;    procedure f(a: Word);stack;  begin    x := a;  end;    begin    var i:Word = 2000;	f(i);  end.endcodevarvalue x 2000code Stack 8-bit Parameter  var x:Byte = 0;    procedure f(a: Byte);stack;  begin    x := a;  end;    begin    var i:Byte = 200;	f(i);  end.endcodevarvalue x 200code Stack 16-bit Parameter Pair  var x:Word = 0;  var y:Word = 0;    procedure f(a: Word;b:Word);stack;  begin    x := a;	y := b;  end;    begin    var i:Word = 2000;	var j:Word = 3000;	f(i, j);  end.endcodevarvalue x 2000varvalue y 3000code Stack 8-bit Parameter Pair  var x:Byte = 0;  var y:Byte = 0;    procedure f(a: Byte;b: Byte);stack;  begin    x := a;    y := b;  end;    begin    var i:Byte = 200;    var j:Byte = 100;    f(i, j);  end.endcodevarvalue x 200varvalue y 100code Stack 16-bit Parameter Pair Copy  var x:Word = 0;  var y:Word = 0;    procedure f(a: Word;b:Word);stack;  begin    x := a;	y := b;  end;    begin    var i:Word = 2000;	f(i, i);  end.endcodevarvalue x 2000varvalue y 2000code Stack 8-bit Parameter Pair Copy  var x:Byte = 0;  var y:Byte = 0;    procedure f(a: Byte;b: Byte);stack;  begin    x := a;    y := b;  end;    begin    var i:Byte = 200;    f(i, i);  end.endcodevarvalue x 200varvalue y 200code Stack 16-bit Parameter Calced  var x:Word = 0;    procedure f(a: Word);stack;  begin    x := a;  end;    begin    var i:Word = 2000;	f(i div 2);  end.endcodevarvalue x 1000code Stack 8-bit Parameter Calced  var x:Byte = 0;    procedure f(a: Byte);stack;  begin    x := a;  end;    begin    var i:Byte = 200;    f(i div 2);  end.endcodevarvalue x 100code Stack 16-bit Parameter Implicit Typecast  var x:Word = 0;    procedure f(a: Word);stack;  begin    x := a;  end;    begin    var i:Byte = 200;    f(i);  end.endcodevarvalue x 200code Stack 8-bit Parameter Calced Implicit Typecast  var x:Byte = 0;    procedure f(a: Byte);stack;  begin    x := a;  end;    begin    var i:Word = 200;    f(i div 2);  end.endcodevarvalue x 100code Stack 16-bit Parameter Literal  var x:Word = 0;    procedure f(a: Word);stack;  begin    x := a;  end;    begin    f(2000);  end.endcodevarvalue x 2000code Stack 8-bit Parameter Literal  var x:Byte = 0;    procedure f(a: Byte);stack;  begin    x := a;  end;    begin    f(100);  end.endcodevarvalue x 100code Stack Return 16-bit  function f:Word;stack;  begin    Result := 10000;  end;    var x:Word = 0;  begin    x := f;   end.endcodevarvalue x 10000code Stack Return 8-bit  function f:Byte;stack;  begin    Result := 100;  end;    var x:Byte = 0;  begin    x := f;  end.endcodevarvalue x 100code Stack Return 16-bit Implicit Typecast  function f:Word;stack;  begin    Result := 42;  end;    var x:Byte = 0;  begin    x := f;   end.endcodevarvalue x 42code Stack Return 8-bit Implicit Typecast  function f:Byte;stack;  begin    Result := 100;  end;    var x:Integer = 0;  begin    x := f;  end.endcodevarvalue x 100;;==================================REGISTERcode Register 16-bit Parameter  var x:Word = 0;    procedure f(a: Word);register;  begin    x := a;  end;    begin    var i:Word = 2000;	f(i);  end.endcodevarvalue x 2000code Register 8-bit Parameter  var x:Byte = 0;    procedure f(a: Byte);register;  begin    x := a;  end;    begin    var i:Byte = 200;	f(i);  end.endcodevarvalue x 200code Register 16-bit Parameter Pair  var x:Word = 0;  var y:Word = 0;    procedure f(a: Word;b:Word);register;  begin    x := a;	y := b;  end;    begin    var i:Word = 2000;	var j:Word = 3000;	f(i, j);  end.endcodevarvalue x 2000varvalue y 3000code Register 8-bit Parameter Pair  var x:Byte = 0;  var y:Byte = 0;   procedure f(a: Byte;b: Byte);register;  begin    x := a;    y := b;  end;    begin    var i:Byte = 200;    var j:Byte = 100;    f(i, j);  end.endcodevarvalue x 200varvalue y 100code Register 16-bit Parameter Pair Copy  var x:Word = 0;  var y:Word = 0;    procedure f(a: Word;b:Word);register;  begin    x := a;	y := b;  end;    begin    var i:Word = 2000;	f(i, i);  end.endcodevarvalue x 2000varvalue y 2000code Register 8-bit Parameter Pair Copy  var x:Byte = 0;  var y:Byte = 0;    procedure f(a: Byte;b: Byte);register;  begin    x := a;    y := b;  end;    begin    var i:Byte = 200;    f(i, i);  end.endcodevarvalue x 200varvalue y 200code Register 16-bit Parameter Calced  var x:Word = 0;    procedure f(a: Word);register;  begin    x := a;  end;    begin    var i:Word = 2000;	f(i div 2);  end.endcodevarvalue x 1000code Register 8-bit Parameter Calced  var x:Byte = 0;    procedure f(a: Byte);register;  begin    x := a;  end;    begin    var i:Byte = 200;    f(i div 2);  end.endcodevarvalue x 100code Register 16-bit Parameter Implicit Typecast  var x:Word = 0;    procedure f(a: Word);register;  begin    x := a;  end;    begin    var i:Byte = 200;    f(i);  end.endcodevarvalue x 200code Register 8-bit Parameter Calced Implicit Typecast  var x:Byte = 0;    procedure f(a: Byte);register;  begin    x := a;  end;    begin    var i:Word = 200;    f(i div 2);  end.endcodevarvalue x 100code Register 16-bit Parameter Literal  var x:Word = 0;    procedure f(a: Word);register;  begin    x := a;  end;    begin    f(2000);  end.endcodevarvalue x 2000code Register 8-bit Parameter Literal  var x:Byte = 0;    procedure f(a: Byte);register;  begin    x := a;  end;    begin    f(100);  end.endcodevarvalue x 100code Register Return 16-bit  function f:Word;register;  begin    Result := 10000;  end;    var x:Word = 0;  begin    x := f;   end.endcodevarvalue x 10000code Register Return 8-bit  function f:Byte;register;  begin    Result := 100;  end;    var x:Byte = 0;  begin    x := f;  end.endcodevarvalue x 100code Register Return 16-bit Implicit Typecast  function f:Word;register;  begin    Result := 42;  end;    var x:Byte = 0;  begin    x := f;   end.endcodevarvalue x 42code Register Return 8-bit Implicit Typecast  function f:Byte;register;  begin    Result := 100;  end;    var x:Integer = 0;  begin    x := f;  end.endcodevarvalue x 100