;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow on
code auto:2 and[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:3 and[Byte] 0[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:4 and[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:5 and[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:6 and[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:7 and[Byte] 0[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:8 and[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 0

code auto:9 and[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 1;
endcode
varvalue r 0

$overflow on
code auto:10 and[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:11 and[Byte] 0[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:12 and[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 0

code auto:13 and[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 127;
endcode
varvalue r 0

$overflow on
code auto:14 and[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:15 and[Byte] 0[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:16 and[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:17 and[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 128;
endcode
varvalue r 0

$overflow on
code auto:18 and[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:19 and[Byte] 0[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:20 and[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 0

code auto:21 and[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:22 and[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:23 and[Byte] 1[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 0

code auto:24 and[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:25 and[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 0;
endcode
varvalue r 0

$overflow on
code auto:26 and[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:27 and[Byte] 1[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:28 and[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:29 and[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 1;
endcode
varvalue r 1

$overflow on
code auto:30 and[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:31 and[Byte] 1[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:32 and[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 1

code auto:33 and[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 127;
endcode
varvalue r 1

$overflow on
code auto:34 and[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:35 and[Byte] 1[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 0

code auto:36 and[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:37 and[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 128;
endcode
varvalue r 0

$overflow on
code auto:38 and[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:39 and[Byte] 1[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:40 and[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 1

code auto:41 and[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 255;
endcode
varvalue r 1

$overflow on
code auto:42 and[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:43 and[Byte] 127[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 0

code auto:44 and[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:45 and[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 0;
endcode
varvalue r 0

$overflow on
code auto:46 and[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:47 and[Byte] 127[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 1

code auto:48 and[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:49 and[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 1;
endcode
varvalue r 1

$overflow on
code auto:50 and[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:51 and[Byte] 127[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 127

code auto:52 and[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 127

code auto:53 and[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 127;
endcode
varvalue r 127

$overflow on
code auto:54 and[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:55 and[Byte] 127[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 0

code auto:56 and[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:57 and[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 128;
endcode
varvalue r 0

$overflow on
code auto:58 and[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:59 and[Byte] 127[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 127

code auto:60 and[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 127

code auto:61 and[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 255;
endcode
varvalue r 127

$overflow on
code auto:62 and[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:63 and[Byte] 128[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:64 and[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:65 and[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 0;
endcode
varvalue r 0

$overflow on
code auto:66 and[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:67 and[Byte] 128[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:68 and[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 0

code auto:69 and[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 1;
endcode
varvalue r 0

$overflow on
code auto:70 and[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:71 and[Byte] 128[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:72 and[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 0

code auto:73 and[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 127;
endcode
varvalue r 0

$overflow on
code auto:74 and[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:75 and[Byte] 128[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 128

code auto:76 and[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 128

code auto:77 and[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 128;
endcode
varvalue r 128

$overflow on
code auto:78 and[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:79 and[Byte] 128[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 128

code auto:80 and[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 128

code auto:81 and[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 255;
endcode
varvalue r 128

$overflow on
code auto:82 and[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:83 and[Byte] 255[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 0

code auto:84 and[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:85 and[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:86 and[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:87 and[Byte] 255[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 1

code auto:88 and[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:89 and[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 1;
endcode
varvalue r 1

$overflow on
code auto:90 and[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:91 and[Byte] 255[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 127

code auto:92 and[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 127

code auto:93 and[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 127;
endcode
varvalue r 127

$overflow on
code auto:94 and[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:95 and[Byte] 255[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 128

code auto:96 and[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 128

code auto:97 and[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 128;
endcode
varvalue r 128

$overflow on
code auto:98 and[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:99 and[Byte] 255[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 255

code auto:100 and[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 255

code auto:101 and[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 255;
endcode
varvalue r 255

$overflow on
code auto:102 and[Word] 0[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:103 and[Word] 0[Byte], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:104 and[Word] 0[Byte], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:105 and[compile-time] 0[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:106 and[Word] 0[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:107 and[Word] 0[Byte], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:108 and[Word] 0[Byte], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:109 and[compile-time] 0[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:110 and[Word] 0[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:111 and[Word] 0[Byte], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:112 and[Word] 0[Byte], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 0

code auto:113 and[compile-time] 0[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32767;
endcode
varvalue r 0

$overflow on
code auto:114 and[Word] 0[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:115 and[Word] 0[Byte], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:116 and[Word] 0[Byte], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:117 and[compile-time] 0[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32768;
endcode
varvalue r 0

$overflow on
code auto:118 and[Word] 0[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:119 and[Word] 0[Byte], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:120 and[Word] 0[Byte], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 0

code auto:121 and[compile-time] 0[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 65535;
endcode
varvalue r 0

$overflow on
code auto:122 and[Word] 1[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:123 and[Word] 1[Byte], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 0

code auto:124 and[Word] 1[Byte], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:125 and[compile-time] 1[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 0;
endcode
varvalue r 0

$overflow on
code auto:126 and[Word] 1[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:127 and[Word] 1[Byte], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:128 and[Word] 1[Byte], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 1

code auto:129 and[compile-time] 1[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 255;
endcode
varvalue r 1

$overflow on
code auto:130 and[Word] 1[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:131 and[Word] 1[Byte], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:132 and[Word] 1[Byte], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 1

code auto:133 and[compile-time] 1[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 32767;
endcode
varvalue r 1

$overflow on
code auto:134 and[Word] 1[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:135 and[Word] 1[Byte], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 0

code auto:136 and[Word] 1[Byte], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:137 and[compile-time] 1[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 32768;
endcode
varvalue r 0

$overflow on
code auto:138 and[Word] 1[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:139 and[Word] 1[Byte], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:140 and[Word] 1[Byte], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 1

code auto:141 and[compile-time] 1[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 65535;
endcode
varvalue r 1

$overflow on
code auto:142 and[Word] 127[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:143 and[Word] 127[Byte], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 0

code auto:144 and[Word] 127[Byte], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:145 and[compile-time] 127[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 0;
endcode
varvalue r 0

$overflow on
code auto:146 and[Word] 127[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:147 and[Word] 127[Byte], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 127

code auto:148 and[Word] 127[Byte], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 127

code auto:149 and[compile-time] 127[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 255;
endcode
varvalue r 127

$overflow on
code auto:150 and[Word] 127[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:151 and[Word] 127[Byte], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 127

code auto:152 and[Word] 127[Byte], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 127

code auto:153 and[compile-time] 127[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 32767;
endcode
varvalue r 127

$overflow on
code auto:154 and[Word] 127[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:155 and[Word] 127[Byte], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 0

code auto:156 and[Word] 127[Byte], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:157 and[compile-time] 127[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 32768;
endcode
varvalue r 0

$overflow on
code auto:158 and[Word] 127[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:159 and[Word] 127[Byte], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 127

code auto:160 and[Word] 127[Byte], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 127

code auto:161 and[compile-time] 127[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 65535;
endcode
varvalue r 127

$overflow on
code auto:162 and[Word] 128[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:163 and[Word] 128[Byte], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 0

code auto:164 and[Word] 128[Byte], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:165 and[compile-time] 128[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 0;
endcode
varvalue r 0

$overflow on
code auto:166 and[Word] 128[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:167 and[Word] 128[Byte], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 128

code auto:168 and[Word] 128[Byte], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 128

code auto:169 and[compile-time] 128[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 255;
endcode
varvalue r 128

$overflow on
code auto:170 and[Word] 128[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:171 and[Word] 128[Byte], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 128

code auto:172 and[Word] 128[Byte], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 128

code auto:173 and[compile-time] 128[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 32767;
endcode
varvalue r 128

$overflow on
code auto:174 and[Word] 128[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:175 and[Word] 128[Byte], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 0

code auto:176 and[Word] 128[Byte], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:177 and[compile-time] 128[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 32768;
endcode
varvalue r 0

$overflow on
code auto:178 and[Word] 128[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:179 and[Word] 128[Byte], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 128

code auto:180 and[Word] 128[Byte], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 128

code auto:181 and[compile-time] 128[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 65535;
endcode
varvalue r 128

$overflow on
code auto:182 and[Word] 255[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:183 and[Word] 255[Byte], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:184 and[Word] 255[Byte], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:185 and[compile-time] 255[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:186 and[Word] 255[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:187 and[Word] 255[Byte], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:188 and[Word] 255[Byte], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:189 and[compile-time] 255[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 255;
endcode
varvalue r 255

$overflow on
code auto:190 and[Word] 255[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:191 and[Word] 255[Byte], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:192 and[Word] 255[Byte], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 255

code auto:193 and[compile-time] 255[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32767;
endcode
varvalue r 255

$overflow on
code auto:194 and[Word] 255[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:195 and[Word] 255[Byte], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:196 and[Word] 255[Byte], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:197 and[compile-time] 255[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32768;
endcode
varvalue r 0

$overflow on
code auto:198 and[Word] 255[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:199 and[Word] 255[Byte], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:200 and[Word] 255[Byte], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 255

code auto:201 and[compile-time] 255[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 65535;
endcode
varvalue r 255

$overflow on
code auto:202 and[Word] 0[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:203 and[Word] 0[Word], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:204 and[Word] 0[Word], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:205 and[compile-time] 0[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:206 and[Word] 0[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:207 and[Word] 0[Word], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:208 and[Word] 0[Word], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 0

code auto:209 and[compile-time] 0[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 1;
endcode
varvalue r 0

$overflow on
code auto:210 and[Word] 0[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:211 and[Word] 0[Word], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:212 and[Word] 0[Word], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 0

code auto:213 and[compile-time] 0[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 127;
endcode
varvalue r 0

$overflow on
code auto:214 and[Word] 0[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:215 and[Word] 0[Word], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:216 and[Word] 0[Word], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 0

code auto:217 and[compile-time] 0[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 128;
endcode
varvalue r 0

$overflow on
code auto:218 and[Word] 0[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:219 and[Word] 0[Word], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:220 and[Word] 0[Word], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:221 and[compile-time] 0[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:222 and[Word] 255[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:223 and[Word] 255[Word], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:224 and[Word] 255[Word], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:225 and[compile-time] 255[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:226 and[Word] 255[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:227 and[Word] 255[Word], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 1

code auto:228 and[Word] 255[Word], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:229 and[compile-time] 255[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 1;
endcode
varvalue r 1

$overflow on
code auto:230 and[Word] 255[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:231 and[Word] 255[Word], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 127

code auto:232 and[Word] 255[Word], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 127

code auto:233 and[compile-time] 255[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 127;
endcode
varvalue r 127

$overflow on
code auto:234 and[Word] 255[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:235 and[Word] 255[Word], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 128

code auto:236 and[Word] 255[Word], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 128

code auto:237 and[compile-time] 255[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 128;
endcode
varvalue r 128

$overflow on
code auto:238 and[Word] 255[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:239 and[Word] 255[Word], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:240 and[Word] 255[Word], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:241 and[compile-time] 255[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 255;
endcode
varvalue r 255

$overflow on
code auto:242 and[Word] 32767[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:243 and[Word] 32767[Word], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 0

code auto:244 and[Word] 32767[Word], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:245 and[compile-time] 32767[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 0;
endcode
varvalue r 0

$overflow on
code auto:246 and[Word] 32767[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:247 and[Word] 32767[Word], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 1

code auto:248 and[Word] 32767[Word], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:249 and[compile-time] 32767[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 1;
endcode
varvalue r 1

$overflow on
code auto:250 and[Word] 32767[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:251 and[Word] 32767[Word], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 127

code auto:252 and[Word] 32767[Word], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 127

code auto:253 and[compile-time] 32767[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 127;
endcode
varvalue r 127

$overflow on
code auto:254 and[Word] 32767[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:255 and[Word] 32767[Word], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 128

code auto:256 and[Word] 32767[Word], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 128

code auto:257 and[compile-time] 32767[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 128;
endcode
varvalue r 128

$overflow on
code auto:258 and[Word] 32767[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:259 and[Word] 32767[Word], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 255

code auto:260 and[Word] 32767[Word], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:261 and[compile-time] 32767[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 255;
endcode
varvalue r 255

$overflow on
code auto:262 and[Word] 32768[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:263 and[Word] 32768[Word], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:264 and[Word] 32768[Word], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:265 and[compile-time] 32768[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 0;
endcode
varvalue r 0

$overflow on
code auto:266 and[Word] 32768[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:267 and[Word] 32768[Word], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:268 and[Word] 32768[Word], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 0

code auto:269 and[compile-time] 32768[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 1;
endcode
varvalue r 0

$overflow on
code auto:270 and[Word] 32768[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:271 and[Word] 32768[Word], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:272 and[Word] 32768[Word], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 0

code auto:273 and[compile-time] 32768[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 127;
endcode
varvalue r 0

$overflow on
code auto:274 and[Word] 32768[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:275 and[Word] 32768[Word], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:276 and[Word] 32768[Word], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 0

code auto:277 and[compile-time] 32768[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 128;
endcode
varvalue r 0

$overflow on
code auto:278 and[Word] 32768[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:279 and[Word] 32768[Word], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:280 and[Word] 32768[Word], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:281 and[compile-time] 32768[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 255;
endcode
varvalue r 0

$overflow on
code auto:282 and[Word] 65535[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:283 and[Word] 65535[Word], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 0

code auto:284 and[Word] 65535[Word], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:285 and[compile-time] 65535[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 0;
endcode
varvalue r 0

$overflow on
code auto:286 and[Word] 65535[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:287 and[Word] 65535[Word], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 1

code auto:288 and[Word] 65535[Word], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:289 and[compile-time] 65535[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 1;
endcode
varvalue r 1

$overflow on
code auto:290 and[Word] 65535[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:291 and[Word] 65535[Word], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 127

code auto:292 and[Word] 65535[Word], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 127

code auto:293 and[compile-time] 65535[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 127;
endcode
varvalue r 127

$overflow on
code auto:294 and[Word] 65535[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:295 and[Word] 65535[Word], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 128

code auto:296 and[Word] 65535[Word], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 128

code auto:297 and[compile-time] 65535[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 128;
endcode
varvalue r 128

$overflow on
code auto:298 and[Word] 65535[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:299 and[Word] 65535[Word], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 255

code auto:300 and[Word] 65535[Word], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:301 and[compile-time] 65535[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 255;
endcode
varvalue r 255

$overflow on
code auto:302 and[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:303 and[Word] 0[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:304 and[Word] 0[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:305 and[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:306 and[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:307 and[Word] 0[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:308 and[Word] 0[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:309 and[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:310 and[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:311 and[Word] 0[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:312 and[Word] 0[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 0

code auto:313 and[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32767;
endcode
varvalue r 0

$overflow on
code auto:314 and[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:315 and[Word] 0[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:316 and[Word] 0[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:317 and[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32768;
endcode
varvalue r 0

$overflow on
code auto:318 and[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:319 and[Word] 0[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:320 and[Word] 0[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 0

code auto:321 and[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 65535;
endcode
varvalue r 0

$overflow on
code auto:322 and[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:323 and[Word] 255[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:324 and[Word] 255[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:325 and[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:326 and[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:327 and[Word] 255[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:328 and[Word] 255[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:329 and[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 255;
endcode
varvalue r 255

$overflow on
code auto:330 and[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:331 and[Word] 255[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:332 and[Word] 255[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 255

code auto:333 and[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32767;
endcode
varvalue r 255

$overflow on
code auto:334 and[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:335 and[Word] 255[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:336 and[Word] 255[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:337 and[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32768;
endcode
varvalue r 0

$overflow on
code auto:338 and[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:339 and[Word] 255[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:340 and[Word] 255[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 255

code auto:341 and[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 65535;
endcode
varvalue r 255

$overflow on
code auto:342 and[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:343 and[Word] 32767[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 0

code auto:344 and[Word] 32767[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:345 and[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 0;
endcode
varvalue r 0

$overflow on
code auto:346 and[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:347 and[Word] 32767[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 255

code auto:348 and[Word] 32767[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:349 and[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 255;
endcode
varvalue r 255

$overflow on
code auto:350 and[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:351 and[Word] 32767[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 32767

code auto:352 and[Word] 32767[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 32767

code auto:353 and[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 32767;
endcode
varvalue r 32767

$overflow on
code auto:354 and[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:355 and[Word] 32767[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 0

code auto:356 and[Word] 32767[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:357 and[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 32768;
endcode
varvalue r 0

$overflow on
code auto:358 and[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:359 and[Word] 32767[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 32767

code auto:360 and[Word] 32767[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 32767

code auto:361 and[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 65535;
endcode
varvalue r 32767

$overflow on
code auto:362 and[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:363 and[Word] 32768[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:364 and[Word] 32768[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:365 and[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 0;
endcode
varvalue r 0

$overflow on
code auto:366 and[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:367 and[Word] 32768[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:368 and[Word] 32768[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:369 and[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 255;
endcode
varvalue r 0

$overflow on
code auto:370 and[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:371 and[Word] 32768[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:372 and[Word] 32768[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 0

code auto:373 and[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 32767;
endcode
varvalue r 0

$overflow on
code auto:374 and[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:375 and[Word] 32768[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 32768

code auto:376 and[Word] 32768[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 32768

code auto:377 and[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 32768;
endcode
varvalue r 32768

$overflow on
code auto:378 and[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:379 and[Word] 32768[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 32768

code auto:380 and[Word] 32768[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 32768

code auto:381 and[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 65535;
endcode
varvalue r 32768

$overflow on
code auto:382 and[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:383 and[Word] 65535[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 0

code auto:384 and[Word] 65535[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:385 and[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 0;
endcode
varvalue r 0

$overflow on
code auto:386 and[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:387 and[Word] 65535[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 255

code auto:388 and[Word] 65535[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:389 and[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 255;
endcode
varvalue r 255

$overflow on
code auto:390 and[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:391 and[Word] 65535[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 32767

code auto:392 and[Word] 65535[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 32767

code auto:393 and[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 32767;
endcode
varvalue r 32767

$overflow on
code auto:394 and[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:395 and[Word] 65535[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 32768

code auto:396 and[Word] 65535[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 32768

code auto:397 and[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 32768;
endcode
varvalue r 32768

$overflow on
code auto:398 and[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 65535

code auto:399 and[Word] 65535[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 65535

code auto:400 and[Word] 65535[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 65535

code auto:401 and[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 65535;
endcode
varvalue r 65535

$overflow on
code auto:402 and[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:403 and[Byte] 0[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:404 and[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:405 and[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:406 and[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:407 and[Byte] 0[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:408 and[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 0

code auto:409 and[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 1;
endcode
varvalue r 0

$overflow on
code auto:410 and[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:411 and[Byte] 0[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:412 and[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 0

code auto:413 and[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 127;
endcode
varvalue r 0

$overflow on
code auto:414 and[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:415 and[Byte] 0[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:416 and[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:417 and[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 128;
endcode
varvalue r 0

$overflow on
code auto:418 and[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:419 and[Byte] 0[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:420 and[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 0

code auto:421 and[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:422 and[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:423 and[Byte] 1[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 0

code auto:424 and[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:425 and[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 0;
endcode
varvalue r 0

$overflow on
code auto:426 and[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:427 and[Byte] 1[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:428 and[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:429 and[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 1;
endcode
varvalue r 1

$overflow on
code auto:430 and[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:431 and[Byte] 1[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:432 and[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 1

code auto:433 and[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 127;
endcode
varvalue r 1

$overflow on
code auto:434 and[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:435 and[Byte] 1[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 0

code auto:436 and[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:437 and[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 128;
endcode
varvalue r 0

$overflow on
code auto:438 and[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:439 and[Byte] 1[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 1 and b;
endcode
varvalue r 1

code auto:440 and[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 1

code auto:441 and[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 and 255;
endcode
varvalue r 1

$overflow on
code auto:442 and[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:443 and[Byte] 127[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 0

code auto:444 and[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:445 and[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 0;
endcode
varvalue r 0

$overflow on
code auto:446 and[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:447 and[Byte] 127[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 1

code auto:448 and[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:449 and[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 1;
endcode
varvalue r 1

$overflow on
code auto:450 and[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:451 and[Byte] 127[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 127

code auto:452 and[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 127

code auto:453 and[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 127;
endcode
varvalue r 127

$overflow on
code auto:454 and[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:455 and[Byte] 127[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 0

code auto:456 and[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 0

code auto:457 and[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 128;
endcode
varvalue r 0

$overflow on
code auto:458 and[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:459 and[Byte] 127[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 127 and b;
endcode
varvalue r 127

code auto:460 and[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 127

code auto:461 and[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 and 255;
endcode
varvalue r 127

$overflow on
code auto:462 and[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:463 and[Byte] 128[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:464 and[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:465 and[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 0;
endcode
varvalue r 0

$overflow on
code auto:466 and[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:467 and[Byte] 128[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:468 and[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 0

code auto:469 and[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 1;
endcode
varvalue r 0

$overflow on
code auto:470 and[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:471 and[Byte] 128[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 0

code auto:472 and[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 0

code auto:473 and[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 127;
endcode
varvalue r 0

$overflow on
code auto:474 and[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:475 and[Byte] 128[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 128

code auto:476 and[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 128

code auto:477 and[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 128;
endcode
varvalue r 128

$overflow on
code auto:478 and[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:479 and[Byte] 128[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 128 and b;
endcode
varvalue r 128

code auto:480 and[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 128

code auto:481 and[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 and 255;
endcode
varvalue r 128

$overflow on
code auto:482 and[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:483 and[Byte] 255[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 0

code auto:484 and[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:485 and[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:486 and[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 1

code auto:487 and[Byte] 255[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 1

code auto:488 and[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 1;
endcode
varvalue r 1

code auto:489 and[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 1;
endcode
varvalue r 1

$overflow on
code auto:490 and[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 127

code auto:491 and[Byte] 255[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 127

code auto:492 and[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 127;
endcode
varvalue r 127

code auto:493 and[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 127;
endcode
varvalue r 127

$overflow on
code auto:494 and[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 128

code auto:495 and[Byte] 255[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 128

code auto:496 and[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 128;
endcode
varvalue r 128

code auto:497 and[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 128;
endcode
varvalue r 128

$overflow on
code auto:498 and[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:499 and[Byte] 255[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 255

code auto:500 and[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 255

code auto:501 and[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 255;
endcode
varvalue r 255

$overflow off
code auto:502 and[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:503 and[Byte] 0[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 0 and b;
endcode
runtime noerror

code auto:504 and[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a and 0;
endcode
runtime noerror

code auto:505 and[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 and 0;
endcode
runtime noerror

$overflow on
code auto:506 and[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:507 and[Byte] 0[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:508 and[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:509 and[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 0;
endcode
varvalue r 0

$overflow off
code auto:510 and[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:511 and[Byte] 0[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 0 and b;
endcode
runtime noerror

code auto:512 and[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a and 1;
endcode
runtime noerror

code auto:513 and[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 and 1;
endcode
runtime noerror

$overflow on
code auto:514 and[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:515 and[Byte] 0[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:516 and[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 0

code auto:517 and[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 1;
endcode
varvalue r 0

$overflow off
code auto:518 and[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:519 and[Byte] 0[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 0 and b;
endcode
runtime noerror

code auto:520 and[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a and 127;
endcode
runtime noerror

code auto:521 and[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 and 127;
endcode
runtime noerror

$overflow on
code auto:522 and[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:523 and[Byte] 0[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:524 and[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 0

code auto:525 and[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 127;
endcode
varvalue r 0

$overflow off
code auto:526 and[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:527 and[Byte] 0[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 0 and b;
endcode
runtime noerror

code auto:528 and[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a and 128;
endcode
runtime noerror

code auto:529 and[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 and 128;
endcode
runtime noerror

$overflow on
code auto:530 and[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:531 and[Byte] 0[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:532 and[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 0

code auto:533 and[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 128;
endcode
varvalue r 0

$overflow off
code auto:534 and[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:535 and[Byte] 0[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 0 and b;
endcode
runtime noerror

code auto:536 and[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a and 255;
endcode
runtime noerror

code auto:537 and[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 and 255;
endcode
runtime noerror

$overflow on
code auto:538 and[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:539 and[Byte] 0[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:540 and[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:541 and[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 255;
endcode
varvalue r 0

$overflow off
code auto:542 and[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:543 and[Byte] 1[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 1 and b;
endcode
runtime noerror

code auto:544 and[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a and 0;
endcode
runtime noerror

code auto:545 and[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 and 0;
endcode
runtime noerror

$overflow on
code auto:546 and[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:547 and[Byte] 1[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 0

code auto:548 and[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:549 and[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 0;
endcode
varvalue r 0

$overflow off
code auto:550 and[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:551 and[Byte] 1[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 1 and b;
endcode
runtime noerror

code auto:552 and[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a and 1;
endcode
runtime noerror

code auto:553 and[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 and 1;
endcode
runtime noerror

$overflow on
code auto:554 and[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:555 and[Byte] 1[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:556 and[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:557 and[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 1;
endcode
varvalue r 1

$overflow off
code auto:558 and[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:559 and[Byte] 1[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 1 and b;
endcode
runtime noerror

code auto:560 and[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a and 127;
endcode
runtime noerror

code auto:561 and[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 and 127;
endcode
runtime noerror

$overflow on
code auto:562 and[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:563 and[Byte] 1[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:564 and[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 1

code auto:565 and[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 127;
endcode
varvalue r 1

$overflow off
code auto:566 and[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:567 and[Byte] 1[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 1 and b;
endcode
runtime noerror

code auto:568 and[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a and 128;
endcode
runtime noerror

code auto:569 and[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 and 128;
endcode
runtime noerror

$overflow on
code auto:570 and[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:571 and[Byte] 1[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 0

code auto:572 and[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 0

code auto:573 and[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 128;
endcode
varvalue r 0

$overflow off
code auto:574 and[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:575 and[Byte] 1[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 1 and b;
endcode
runtime noerror

code auto:576 and[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a and 255;
endcode
runtime noerror

code auto:577 and[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 and 255;
endcode
runtime noerror

$overflow on
code auto:578 and[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:579 and[Byte] 1[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 1 and b;
endcode
varvalue r 1

code auto:580 and[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 1

code auto:581 and[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 and 255;
endcode
varvalue r 1

$overflow off
code auto:582 and[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:583 and[Byte] 127[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 127 and b;
endcode
runtime noerror

code auto:584 and[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a and 0;
endcode
runtime noerror

code auto:585 and[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 and 0;
endcode
runtime noerror

$overflow on
code auto:586 and[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:587 and[Byte] 127[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 0

code auto:588 and[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:589 and[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 0;
endcode
varvalue r 0

$overflow off
code auto:590 and[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:591 and[Byte] 127[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 127 and b;
endcode
runtime noerror

code auto:592 and[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a and 1;
endcode
runtime noerror

code auto:593 and[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 and 1;
endcode
runtime noerror

$overflow on
code auto:594 and[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:595 and[Byte] 127[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 1

code auto:596 and[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:597 and[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 1;
endcode
varvalue r 1

$overflow off
code auto:598 and[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:599 and[Byte] 127[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 127 and b;
endcode
runtime noerror

code auto:600 and[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a and 127;
endcode
runtime noerror

code auto:601 and[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 and 127;
endcode
runtime noerror

$overflow on
code auto:602 and[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:603 and[Byte] 127[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 127

code auto:604 and[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 127

code auto:605 and[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 127;
endcode
varvalue r 127

$overflow off
code auto:606 and[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:607 and[Byte] 127[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 127 and b;
endcode
runtime noerror

code auto:608 and[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a and 128;
endcode
runtime noerror

code auto:609 and[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 and 128;
endcode
runtime noerror

$overflow on
code auto:610 and[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:611 and[Byte] 127[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 0

code auto:612 and[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 0

code auto:613 and[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 128;
endcode
varvalue r 0

$overflow off
code auto:614 and[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:615 and[Byte] 127[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 127 and b;
endcode
runtime noerror

code auto:616 and[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a and 255;
endcode
runtime noerror

code auto:617 and[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 and 255;
endcode
runtime noerror

$overflow on
code auto:618 and[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:619 and[Byte] 127[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 127 and b;
endcode
varvalue r 127

code auto:620 and[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 127

code auto:621 and[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 and 255;
endcode
varvalue r 127

$overflow off
code auto:622 and[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:623 and[Byte] 128[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 128 and b;
endcode
runtime noerror

code auto:624 and[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a and 0;
endcode
runtime noerror

code auto:625 and[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 and 0;
endcode
runtime noerror

$overflow on
code auto:626 and[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:627 and[Byte] 128[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 0

code auto:628 and[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:629 and[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 0;
endcode
varvalue r 0

$overflow off
code auto:630 and[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:631 and[Byte] 128[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 128 and b;
endcode
runtime noerror

code auto:632 and[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a and 1;
endcode
runtime noerror

code auto:633 and[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 and 1;
endcode
runtime noerror

$overflow on
code auto:634 and[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:635 and[Byte] 128[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 0

code auto:636 and[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 0

code auto:637 and[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 1;
endcode
varvalue r 0

$overflow off
code auto:638 and[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:639 and[Byte] 128[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 128 and b;
endcode
runtime noerror

code auto:640 and[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a and 127;
endcode
runtime noerror

code auto:641 and[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 and 127;
endcode
runtime noerror

$overflow on
code auto:642 and[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:643 and[Byte] 128[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 0

code auto:644 and[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 0

code auto:645 and[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 127;
endcode
varvalue r 0

$overflow off
code auto:646 and[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:647 and[Byte] 128[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 128 and b;
endcode
runtime noerror

code auto:648 and[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a and 128;
endcode
runtime noerror

code auto:649 and[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 and 128;
endcode
runtime noerror

$overflow on
code auto:650 and[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:651 and[Byte] 128[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 128

code auto:652 and[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 128

code auto:653 and[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 128;
endcode
varvalue r 128

$overflow off
code auto:654 and[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:655 and[Byte] 128[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 128 and b;
endcode
runtime noerror

code auto:656 and[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a and 255;
endcode
runtime noerror

code auto:657 and[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 and 255;
endcode
runtime noerror

$overflow on
code auto:658 and[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:659 and[Byte] 128[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 128 and b;
endcode
varvalue r 128

code auto:660 and[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 128

code auto:661 and[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 and 255;
endcode
varvalue r 128

$overflow off
code auto:662 and[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:663 and[Byte] 255[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 255 and b;
endcode
runtime noerror

code auto:664 and[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a and 0;
endcode
runtime noerror

code auto:665 and[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 and 0;
endcode
runtime noerror

$overflow on
code auto:666 and[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:667 and[Byte] 255[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:668 and[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:669 and[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 0;
endcode
varvalue r 0

$overflow off
code auto:670 and[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:671 and[Byte] 255[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 255 and b;
endcode
runtime noerror

code auto:672 and[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a and 1;
endcode
runtime noerror

code auto:673 and[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 and 1;
endcode
runtime noerror

$overflow on
code auto:674 and[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a and b;
endcode
varvalue r 1

code auto:675 and[Byte] 255[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 1

code auto:676 and[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 1;
endcode
varvalue r 1

code auto:677 and[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 1;
endcode
varvalue r 1

$overflow off
code auto:678 and[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:679 and[Byte] 255[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 255 and b;
endcode
runtime noerror

code auto:680 and[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a and 127;
endcode
runtime noerror

code auto:681 and[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 and 127;
endcode
runtime noerror

$overflow on
code auto:682 and[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a and b;
endcode
varvalue r 127

code auto:683 and[Byte] 255[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 127

code auto:684 and[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 127;
endcode
varvalue r 127

code auto:685 and[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 127;
endcode
varvalue r 127

$overflow off
code auto:686 and[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:687 and[Byte] 255[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 255 and b;
endcode
runtime noerror

code auto:688 and[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a and 128;
endcode
runtime noerror

code auto:689 and[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 and 128;
endcode
runtime noerror

$overflow on
code auto:690 and[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a and b;
endcode
varvalue r 128

code auto:691 and[Byte] 255[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 128

code auto:692 and[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 128;
endcode
varvalue r 128

code auto:693 and[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 128;
endcode
varvalue r 128

$overflow off
code auto:694 and[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
runtime noerror

code auto:695 and[Byte] 255[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 255 and b;
endcode
runtime noerror

code auto:696 and[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a and 255;
endcode
runtime noerror

code auto:697 and[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 and 255;
endcode
runtime noerror

$overflow on
code auto:698 and[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:699 and[Byte] 255[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:700 and[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:701 and[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 255;
endcode
varvalue r 255

$overflow off
code auto:702 and[Word] 0[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:703 and[Word] 0[Word], 0[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 0;
  var  r: Byte;
  r := 0 and b;
endcode
runtime noerror

code auto:704 and[Word] 0[Word], 0[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 0;
  var  r: Byte;
  r := a and 0;
endcode
runtime noerror

code auto:705 and[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 and 0;
endcode
runtime noerror

$overflow on
code auto:706 and[Word] 0[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:707 and[Word] 0[Word], 0[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:708 and[Word] 0[Word], 0[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:709 and[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 0;
endcode
varvalue r 0

$overflow off
code auto:710 and[Word] 0[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:711 and[Word] 0[Word], 255[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 255;
  var  r: Byte;
  r := 0 and b;
endcode
runtime noerror

code auto:712 and[Word] 0[Word], 255[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 0;
  var  r: Byte;
  r := a and 255;
endcode
runtime noerror

code auto:713 and[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 and 255;
endcode
runtime noerror

$overflow on
code auto:714 and[Word] 0[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:715 and[Word] 0[Word], 255[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:716 and[Word] 0[Word], 255[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 0

code auto:717 and[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 255;
endcode
varvalue r 0

$overflow off
code auto:718 and[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:719 and[Word] 0[Word], 32767[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32767;
  var  r: Byte;
  r := 0 and b;
endcode
runtime noerror

code auto:720 and[Word] 0[Word], 32767[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 0;
  var  r: Byte;
  r := a and 32767;
endcode
runtime noerror

code auto:721 and[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 and 32767;
endcode
runtime noerror

$overflow on
code auto:722 and[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:723 and[Word] 0[Word], 32767[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:724 and[Word] 0[Word], 32767[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Byte;
  r := a and 32767;
endcode
varvalue r 0

code auto:725 and[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 32767;
endcode
varvalue r 0

$overflow off
code auto:726 and[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:727 and[Word] 0[Word], 32768[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32768;
  var  r: Byte;
  r := 0 and b;
endcode
runtime noerror

code auto:728 and[Word] 0[Word], 32768[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 0;
  var  r: Byte;
  r := a and 32768;
endcode
runtime noerror

code auto:729 and[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 and 32768;
endcode
runtime noerror

$overflow on
code auto:730 and[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:731 and[Word] 0[Word], 32768[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:732 and[Word] 0[Word], 32768[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Byte;
  r := a and 32768;
endcode
varvalue r 0

code auto:733 and[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 32768;
endcode
varvalue r 0

$overflow off
code auto:734 and[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:735 and[Word] 0[Word], 65535[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 65535;
  var  r: Byte;
  r := 0 and b;
endcode
runtime noerror

code auto:736 and[Word] 0[Word], 65535[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 0;
  var  r: Byte;
  r := a and 65535;
endcode
runtime noerror

code auto:737 and[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 and 65535;
endcode
runtime noerror

$overflow on
code auto:738 and[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:739 and[Word] 0[Word], 65535[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Byte;
  r := 0 and b;
endcode
varvalue r 0

code auto:740 and[Word] 0[Word], 65535[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Byte;
  r := a and 65535;
endcode
varvalue r 0

code auto:741 and[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 and 65535;
endcode
varvalue r 0

$overflow off
code auto:742 and[Word] 255[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:743 and[Word] 255[Word], 0[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 0;
  var  r: Byte;
  r := 255 and b;
endcode
runtime noerror

code auto:744 and[Word] 255[Word], 0[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 255;
  var  r: Byte;
  r := a and 0;
endcode
runtime noerror

code auto:745 and[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 and 0;
endcode
runtime noerror

$overflow on
code auto:746 and[Word] 255[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:747 and[Word] 255[Word], 0[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 0

code auto:748 and[Word] 255[Word], 0[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:749 and[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 0;
endcode
varvalue r 0

$overflow off
code auto:750 and[Word] 255[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:751 and[Word] 255[Word], 255[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 255;
  var  r: Byte;
  r := 255 and b;
endcode
runtime noerror

code auto:752 and[Word] 255[Word], 255[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 255;
  var  r: Byte;
  r := a and 255;
endcode
runtime noerror

code auto:753 and[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 and 255;
endcode
runtime noerror

$overflow on
code auto:754 and[Word] 255[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:755 and[Word] 255[Word], 255[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 255

code auto:756 and[Word] 255[Word], 255[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 255

code auto:757 and[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 255;
endcode
varvalue r 255

$overflow off
code auto:758 and[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:759 and[Word] 255[Word], 32767[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32767;
  var  r: Byte;
  r := 255 and b;
endcode
runtime noerror

code auto:760 and[Word] 255[Word], 32767[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 255;
  var  r: Byte;
  r := a and 32767;
endcode
runtime noerror

code auto:761 and[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 and 32767;
endcode
runtime noerror

$overflow on
code auto:762 and[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:763 and[Word] 255[Word], 32767[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 255

code auto:764 and[Word] 255[Word], 32767[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Byte;
  r := a and 32767;
endcode
varvalue r 255

code auto:765 and[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 32767;
endcode
varvalue r 255

$overflow off
code auto:766 and[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:767 and[Word] 255[Word], 32768[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32768;
  var  r: Byte;
  r := 255 and b;
endcode
runtime noerror

code auto:768 and[Word] 255[Word], 32768[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 255;
  var  r: Byte;
  r := a and 32768;
endcode
runtime noerror

code auto:769 and[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 and 32768;
endcode
runtime noerror

$overflow on
code auto:770 and[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:771 and[Word] 255[Word], 32768[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 0

code auto:772 and[Word] 255[Word], 32768[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Byte;
  r := a and 32768;
endcode
varvalue r 0

code auto:773 and[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 32768;
endcode
varvalue r 0

$overflow off
code auto:774 and[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:775 and[Word] 255[Word], 65535[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 65535;
  var  r: Byte;
  r := 255 and b;
endcode
runtime noerror

code auto:776 and[Word] 255[Word], 65535[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 255;
  var  r: Byte;
  r := a and 65535;
endcode
runtime noerror

code auto:777 and[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 and 65535;
endcode
runtime noerror

$overflow on
code auto:778 and[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:779 and[Word] 255[Word], 65535[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Byte;
  r := 255 and b;
endcode
varvalue r 255

code auto:780 and[Word] 255[Word], 65535[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Byte;
  r := a and 65535;
endcode
varvalue r 255

code auto:781 and[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 and 65535;
endcode
varvalue r 255

$overflow off
code auto:782 and[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:783 and[Word] 32767[Word], 0[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 0;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime noerror

code auto:784 and[Word] 32767[Word], 0[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 0;
endcode
runtime noerror

code auto:785 and[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 and 0;
endcode
runtime noerror

$overflow on
code auto:786 and[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:787 and[Word] 32767[Word], 0[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Byte;
  r := 32767 and b;
endcode
varvalue r 0

code auto:788 and[Word] 32767[Word], 0[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:789 and[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 and 0;
endcode
varvalue r 0

$overflow off
code auto:790 and[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:791 and[Word] 32767[Word], 255[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 255;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime noerror

code auto:792 and[Word] 32767[Word], 255[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 255;
endcode
runtime noerror

code auto:793 and[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 and 255;
endcode
runtime noerror

$overflow on
code auto:794 and[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:795 and[Word] 32767[Word], 255[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Byte;
  r := 32767 and b;
endcode
varvalue r 255

code auto:796 and[Word] 32767[Word], 255[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 255

code auto:797 and[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 and 255;
endcode
varvalue r 255

$overflow off
code auto:798 and[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:799 and[Word] 32767[Word], 32767[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32767;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime noerror

code auto:800 and[Word] 32767[Word], 32767[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 32767;
endcode
runtime noerror

code auto:801 and[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 and 32767;
endcode
compile error

$overflow on
code auto:802 and[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:803 and[Word] 32767[Word], 32767[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime overflow

code auto:804 and[Word] 32767[Word], 32767[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 32767;
endcode
runtime overflow

code auto:805 and[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 and 32767;
endcode
compile error

$overflow off
code auto:806 and[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:807 and[Word] 32767[Word], 32768[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32768;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime noerror

code auto:808 and[Word] 32767[Word], 32768[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 32768;
endcode
runtime noerror

code auto:809 and[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 and 32768;
endcode
runtime noerror

$overflow on
code auto:810 and[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:811 and[Word] 32767[Word], 32768[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Byte;
  r := 32767 and b;
endcode
varvalue r 0

code auto:812 and[Word] 32767[Word], 32768[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 32768;
endcode
varvalue r 0

code auto:813 and[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 and 32768;
endcode
varvalue r 0

$overflow off
code auto:814 and[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:815 and[Word] 32767[Word], 65535[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 65535;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime noerror

code auto:816 and[Word] 32767[Word], 65535[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 65535;
endcode
runtime noerror

code auto:817 and[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 and 65535;
endcode
compile error

$overflow on
code auto:818 and[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:819 and[Word] 32767[Word], 65535[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Byte;
  r := 32767 and b;
endcode
runtime overflow

code auto:820 and[Word] 32767[Word], 65535[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Byte;
  r := a and 65535;
endcode
runtime overflow

code auto:821 and[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 and 65535;
endcode
compile error

$overflow off
code auto:822 and[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:823 and[Word] 32768[Word], 0[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 0;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime noerror

code auto:824 and[Word] 32768[Word], 0[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 0;
endcode
runtime noerror

code auto:825 and[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 and 0;
endcode
runtime noerror

$overflow on
code auto:826 and[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:827 and[Word] 32768[Word], 0[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Byte;
  r := 32768 and b;
endcode
varvalue r 0

code auto:828 and[Word] 32768[Word], 0[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:829 and[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 and 0;
endcode
varvalue r 0

$overflow off
code auto:830 and[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:831 and[Word] 32768[Word], 255[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 255;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime noerror

code auto:832 and[Word] 32768[Word], 255[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 255;
endcode
runtime noerror

code auto:833 and[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 and 255;
endcode
runtime noerror

$overflow on
code auto:834 and[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:835 and[Word] 32768[Word], 255[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Byte;
  r := 32768 and b;
endcode
varvalue r 0

code auto:836 and[Word] 32768[Word], 255[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 0

code auto:837 and[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 and 255;
endcode
varvalue r 0

$overflow off
code auto:838 and[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:839 and[Word] 32768[Word], 32767[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32767;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime noerror

code auto:840 and[Word] 32768[Word], 32767[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 32767;
endcode
runtime noerror

code auto:841 and[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 and 32767;
endcode
runtime noerror

$overflow on
code auto:842 and[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:843 and[Word] 32768[Word], 32767[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Byte;
  r := 32768 and b;
endcode
varvalue r 0

code auto:844 and[Word] 32768[Word], 32767[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 32767;
endcode
varvalue r 0

code auto:845 and[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 and 32767;
endcode
varvalue r 0

$overflow off
code auto:846 and[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:847 and[Word] 32768[Word], 32768[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32768;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime noerror

code auto:848 and[Word] 32768[Word], 32768[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 32768;
endcode
runtime noerror

code auto:849 and[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 and 32768;
endcode
compile error

$overflow on
code auto:850 and[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:851 and[Word] 32768[Word], 32768[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime overflow

code auto:852 and[Word] 32768[Word], 32768[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 32768;
endcode
runtime overflow

code auto:853 and[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 and 32768;
endcode
compile error

$overflow off
code auto:854 and[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:855 and[Word] 32768[Word], 65535[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 65535;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime noerror

code auto:856 and[Word] 32768[Word], 65535[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 65535;
endcode
runtime noerror

code auto:857 and[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 and 65535;
endcode
compile error

$overflow on
code auto:858 and[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:859 and[Word] 32768[Word], 65535[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Byte;
  r := 32768 and b;
endcode
runtime overflow

code auto:860 and[Word] 32768[Word], 65535[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Byte;
  r := a and 65535;
endcode
runtime overflow

code auto:861 and[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 and 65535;
endcode
compile error

$overflow off
code auto:862 and[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:863 and[Word] 65535[Word], 0[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 0;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime noerror

code auto:864 and[Word] 65535[Word], 0[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 0;
endcode
runtime noerror

code auto:865 and[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 and 0;
endcode
runtime noerror

$overflow on
code auto:866 and[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 0

code auto:867 and[Word] 65535[Word], 0[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Byte;
  r := 65535 and b;
endcode
varvalue r 0

code auto:868 and[Word] 65535[Word], 0[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 0;
endcode
varvalue r 0

code auto:869 and[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 and 0;
endcode
varvalue r 0

$overflow off
code auto:870 and[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:871 and[Word] 65535[Word], 255[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 255;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime noerror

code auto:872 and[Word] 65535[Word], 255[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 255;
endcode
runtime noerror

code auto:873 and[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 and 255;
endcode
runtime noerror

$overflow on
code auto:874 and[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a and b;
endcode
varvalue r 255

code auto:875 and[Word] 65535[Word], 255[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Byte;
  r := 65535 and b;
endcode
varvalue r 255

code auto:876 and[Word] 65535[Word], 255[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 255;
endcode
varvalue r 255

code auto:877 and[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 and 255;
endcode
varvalue r 255

$overflow off
code auto:878 and[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:879 and[Word] 65535[Word], 32767[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32767;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime noerror

code auto:880 and[Word] 65535[Word], 32767[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 32767;
endcode
runtime noerror

code auto:881 and[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 and 32767;
endcode
compile error

$overflow on
code auto:882 and[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:883 and[Word] 65535[Word], 32767[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime overflow

code auto:884 and[Word] 65535[Word], 32767[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 32767;
endcode
runtime overflow

code auto:885 and[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 and 32767;
endcode
compile error

$overflow off
code auto:886 and[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:887 and[Word] 65535[Word], 32768[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 32768;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime noerror

code auto:888 and[Word] 65535[Word], 32768[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 32768;
endcode
runtime noerror

code auto:889 and[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 and 32768;
endcode
compile error

$overflow on
code auto:890 and[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:891 and[Word] 65535[Word], 32768[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime overflow

code auto:892 and[Word] 65535[Word], 32768[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 32768;
endcode
runtime overflow

code auto:893 and[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 and 32768;
endcode
compile error

$overflow off
code auto:894 and[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime noerror

code auto:895 and[Word] 65535[Word], 65535[Word] -> [Byte] Left immediate $overflow off
  var  b: Word = 65535;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime noerror

code auto:896 and[Word] 65535[Word], 65535[Word] -> [Byte] Right immediate $overflow off
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 65535;
endcode
runtime noerror

code auto:897 and[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 and 65535;
endcode
compile error

$overflow on
code auto:898 and[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a and b;
endcode
runtime overflow

code auto:899 and[Word] 65535[Word], 65535[Word] -> [Byte] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Byte;
  r := 65535 and b;
endcode
runtime overflow

code auto:900 and[Word] 65535[Word], 65535[Word] -> [Byte] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Byte;
  r := a and 65535;
endcode
runtime overflow

code auto:901 and[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 and 65535;
endcode
compile error

$overflow on
code auto:902 and[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:903 and[Word] 0[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:904 and[Word] 0[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:905 and[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 0;
endcode
varvalue r 0

$overflow on
code auto:906 and[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:907 and[Word] 0[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:908 and[Word] 0[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:909 and[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 255;
endcode
varvalue r 0

$overflow on
code auto:910 and[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:911 and[Word] 0[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:912 and[Word] 0[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 0

code auto:913 and[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32767;
endcode
varvalue r 0

$overflow on
code auto:914 and[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:915 and[Word] 0[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:916 and[Word] 0[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:917 and[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 32768;
endcode
varvalue r 0

$overflow on
code auto:918 and[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:919 and[Word] 0[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 0 and b;
endcode
varvalue r 0

code auto:920 and[Word] 0[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 0;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 0

code auto:921 and[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 and 65535;
endcode
varvalue r 0

$overflow on
code auto:922 and[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:923 and[Word] 255[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:924 and[Word] 255[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:925 and[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 0;
endcode
varvalue r 0

$overflow on
code auto:926 and[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:927 and[Word] 255[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:928 and[Word] 255[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:929 and[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 255;
endcode
varvalue r 255

$overflow on
code auto:930 and[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:931 and[Word] 255[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:932 and[Word] 255[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 255

code auto:933 and[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32767;
endcode
varvalue r 255

$overflow on
code auto:934 and[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:935 and[Word] 255[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 0

code auto:936 and[Word] 255[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:937 and[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 32768;
endcode
varvalue r 0

$overflow on
code auto:938 and[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:939 and[Word] 255[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 255 and b;
endcode
varvalue r 255

code auto:940 and[Word] 255[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 255;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 255

code auto:941 and[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 and 65535;
endcode
varvalue r 255

$overflow on
code auto:942 and[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:943 and[Word] 32767[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 0

code auto:944 and[Word] 32767[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:945 and[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 0;
endcode
varvalue r 0

$overflow on
code auto:946 and[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:947 and[Word] 32767[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 255

code auto:948 and[Word] 32767[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:949 and[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 255;
endcode
varvalue r 255

$overflow on
code auto:950 and[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:951 and[Word] 32767[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 32767

code auto:952 and[Word] 32767[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 32767

code auto:953 and[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 32767;
endcode
varvalue r 32767

$overflow on
code auto:954 and[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:955 and[Word] 32767[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 0

code auto:956 and[Word] 32767[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 0

code auto:957 and[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 32768;
endcode
varvalue r 0

$overflow on
code auto:958 and[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:959 and[Word] 32767[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 32767 and b;
endcode
varvalue r 32767

code auto:960 and[Word] 32767[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32767;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 32767

code auto:961 and[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 and 65535;
endcode
varvalue r 32767

$overflow on
code auto:962 and[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:963 and[Word] 32768[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:964 and[Word] 32768[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:965 and[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 0;
endcode
varvalue r 0

$overflow on
code auto:966 and[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:967 and[Word] 32768[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:968 and[Word] 32768[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 0

code auto:969 and[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 255;
endcode
varvalue r 0

$overflow on
code auto:970 and[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:971 and[Word] 32768[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 0

code auto:972 and[Word] 32768[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 0

code auto:973 and[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 32767;
endcode
varvalue r 0

$overflow on
code auto:974 and[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:975 and[Word] 32768[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 32768

code auto:976 and[Word] 32768[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 32768

code auto:977 and[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 32768;
endcode
varvalue r 32768

$overflow on
code auto:978 and[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:979 and[Word] 32768[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 32768 and b;
endcode
varvalue r 32768

code auto:980 and[Word] 32768[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 32768;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 32768

code auto:981 and[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 and 65535;
endcode
varvalue r 32768

$overflow on
code auto:982 and[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a and b;
endcode
varvalue r 0

code auto:983 and[Word] 65535[Word], 0[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 0;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 0

code auto:984 and[Word] 65535[Word], 0[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 0;
endcode
varvalue r 0

code auto:985 and[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 0;
endcode
varvalue r 0

$overflow on
code auto:986 and[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a and b;
endcode
varvalue r 255

code auto:987 and[Word] 65535[Word], 255[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 255;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 255

code auto:988 and[Word] 65535[Word], 255[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 255;
endcode
varvalue r 255

code auto:989 and[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 255;
endcode
varvalue r 255

$overflow on
code auto:990 and[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32767

code auto:991 and[Word] 65535[Word], 32767[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32767;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 32767

code auto:992 and[Word] 65535[Word], 32767[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 32767;
endcode
varvalue r 32767

code auto:993 and[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 32767;
endcode
varvalue r 32767

$overflow on
code auto:994 and[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a and b;
endcode
varvalue r 32768

code auto:995 and[Word] 65535[Word], 32768[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 32768;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 32768

code auto:996 and[Word] 65535[Word], 32768[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 32768;
endcode
varvalue r 32768

code auto:997 and[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 32768;
endcode
varvalue r 32768

$overflow on
code auto:998 and[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a and b;
endcode
varvalue r 65535

code auto:999 and[Word] 65535[Word], 65535[Word] -> [Word] Left immediate $overflow on
  var  b: Word = 65535;
  var  r: Word;
  r := 65535 and b;
endcode
varvalue r 65535

code auto:1000 and[Word] 65535[Word], 65535[Word] -> [Word] Right immediate $overflow on
  var  a: Word = 65535;
  var  r: Word;
  r := a and 65535;
endcode
varvalue r 65535

code auto:1001 and[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 and 65535;
endcode
varvalue r 65535

$overflow on
code auto:1002 and[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a and b;
endcode
varvalue r False

code auto:1003 and[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := False and b;
endcode
varvalue r False

code auto:1004 and[Boolean] 0[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a and False;
endcode
varvalue r False

code auto:1005 and[compile-time] 0[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False and False;
endcode
varvalue r False

$overflow on
code auto:1006 and[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a and b;
endcode
varvalue r False

code auto:1007 and[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := False and b;
endcode
varvalue r False

code auto:1008 and[Boolean] 0[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = False;
  var  r: Boolean;
  r := a and True;
endcode
varvalue r False

code auto:1009 and[compile-time] 0[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := False and True;
endcode
varvalue r False

$overflow on
code auto:1010 and[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Boolean;
  r := a and b;
endcode
varvalue r False

code auto:1011 and[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = False;
  var  r: Boolean;
  r := True and b;
endcode
varvalue r False

code auto:1012 and[Boolean] 255[Boolean], 0[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a and False;
endcode
varvalue r False

code auto:1013 and[compile-time] 255[Boolean], 0[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True and False;
endcode
varvalue r False

$overflow on
code auto:1014 and[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Var $overflow on
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Boolean;
  r := a and b;
endcode
varvalue r True

code auto:1015 and[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Left immediate $overflow on
  var  b: Boolean = True;
  var  r: Boolean;
  r := True and b;
endcode
varvalue r True

code auto:1016 and[Boolean] 255[Boolean], 255[Boolean] -> [Boolean] Right immediate $overflow on
  var  a: Boolean = True;
  var  r: Boolean;
  r := a and True;
endcode
varvalue r True

code auto:1017 and[compile-time] 255[Boolean], 255[Boolean] -> [Boolean] Both immediate $overflow on
  var  r: Boolean;
  r := True and True;
endcode
varvalue r True

