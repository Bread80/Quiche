;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

code auto:2 if not-equal[Int8] -128[Int8], -128[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3 if not-equal[Int8] -128[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4 if not-equal[Int8] -128[Int8], -128[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:5 if not-equal[compile-time] -128[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:6 if not-equal[Int8] -128[Int8], -128[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7 if not-equal[Int8] -128[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:8 if not-equal[Int8] -128[Int8], -128[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:9 if not-equal[compile-time] -128[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:10 if not-equal[Int8] -128[Int8], -127[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:11 if not-equal[Int8] -128[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:12 if not-equal[Int8] -128[Int8], -127[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:13 if not-equal[compile-time] -128[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:14 if not-equal[Int8] -128[Int8], -127[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:15 if not-equal[Int8] -128[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:16 if not-equal[Int8] -128[Int8], -127[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:17 if not-equal[compile-time] -128[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:18 if not-equal[Int8] -128[Int8], -1[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:19 if not-equal[Int8] -128[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:20 if not-equal[Int8] -128[Int8], -1[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:21 if not-equal[compile-time] -128[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:22 if not-equal[Int8] -128[Int8], -1[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:23 if not-equal[Int8] -128[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:24 if not-equal[Int8] -128[Int8], -1[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:25 if not-equal[compile-time] -128[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:26 if not-equal[Int8] -128[Int8], 0[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:27 if not-equal[Int8] -128[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:28 if not-equal[Int8] -128[Int8], 0[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:29 if not-equal[compile-time] -128[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:30 if not-equal[Int8] -128[Int8], 0[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:31 if not-equal[Int8] -128[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:32 if not-equal[Int8] -128[Int8], 0[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:33 if not-equal[compile-time] -128[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:34 if not-equal[Int8] -128[Int8], 1[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:35 if not-equal[Int8] -128[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:36 if not-equal[Int8] -128[Int8], 1[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:37 if not-equal[compile-time] -128[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:38 if not-equal[Int8] -128[Int8], 1[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:39 if not-equal[Int8] -128[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:40 if not-equal[Int8] -128[Int8], 1[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:41 if not-equal[compile-time] -128[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:42 if not-equal[Int8] -128[Int8], 127[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:43 if not-equal[Int8] -128[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:44 if not-equal[Int8] -128[Int8], 127[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:45 if not-equal[compile-time] -128[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:46 if not-equal[Int8] -128[Int8], 127[Int8] Var
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:47 if not-equal[Int8] -128[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:48 if not-equal[Int8] -128[Int8], 127[Int8] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:49 if not-equal[compile-time] -128[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:50 if not-equal[Int8] -127[Int8], -128[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:51 if not-equal[Int8] -127[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:52 if not-equal[Int8] -127[Int8], -128[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:53 if not-equal[compile-time] -127[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:54 if not-equal[Int8] -127[Int8], -128[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:55 if not-equal[Int8] -127[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:56 if not-equal[Int8] -127[Int8], -128[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:57 if not-equal[compile-time] -127[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:58 if not-equal[Int8] -127[Int8], -127[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:59 if not-equal[Int8] -127[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:60 if not-equal[Int8] -127[Int8], -127[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 0

code auto:61 if not-equal[compile-time] -127[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -127 then
    r := 1;
endcode
varvalue r 0

code auto:62 if not-equal[Int8] -127[Int8], -127[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:63 if not-equal[Int8] -127[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:64 if not-equal[Int8] -127[Int8], -127[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:65 if not-equal[compile-time] -127[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:66 if not-equal[Int8] -127[Int8], -1[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:67 if not-equal[Int8] -127[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:68 if not-equal[Int8] -127[Int8], -1[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:69 if not-equal[compile-time] -127[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:70 if not-equal[Int8] -127[Int8], -1[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:71 if not-equal[Int8] -127[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:72 if not-equal[Int8] -127[Int8], -1[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:73 if not-equal[compile-time] -127[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:74 if not-equal[Int8] -127[Int8], 0[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:75 if not-equal[Int8] -127[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:76 if not-equal[Int8] -127[Int8], 0[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:77 if not-equal[compile-time] -127[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:78 if not-equal[Int8] -127[Int8], 0[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:79 if not-equal[Int8] -127[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:80 if not-equal[Int8] -127[Int8], 0[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:81 if not-equal[compile-time] -127[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:82 if not-equal[Int8] -127[Int8], 1[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:83 if not-equal[Int8] -127[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:84 if not-equal[Int8] -127[Int8], 1[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:85 if not-equal[compile-time] -127[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:86 if not-equal[Int8] -127[Int8], 1[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:87 if not-equal[Int8] -127[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:88 if not-equal[Int8] -127[Int8], 1[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:89 if not-equal[compile-time] -127[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:90 if not-equal[Int8] -127[Int8], 127[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:91 if not-equal[Int8] -127[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:92 if not-equal[Int8] -127[Int8], 127[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:93 if not-equal[compile-time] -127[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:94 if not-equal[Int8] -127[Int8], 127[Int8] Var
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:95 if not-equal[Int8] -127[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:96 if not-equal[Int8] -127[Int8], 127[Int8] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:97 if not-equal[compile-time] -127[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:98 if not-equal[Int8] -1[Int8], -128[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:99 if not-equal[Int8] -1[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:100 if not-equal[Int8] -1[Int8], -128[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:101 if not-equal[compile-time] -1[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:102 if not-equal[Int8] -1[Int8], -128[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:103 if not-equal[Int8] -1[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:104 if not-equal[Int8] -1[Int8], -128[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:105 if not-equal[compile-time] -1[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:106 if not-equal[Int8] -1[Int8], -127[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:107 if not-equal[Int8] -1[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:108 if not-equal[Int8] -1[Int8], -127[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:109 if not-equal[compile-time] -1[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:110 if not-equal[Int8] -1[Int8], -127[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:111 if not-equal[Int8] -1[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:112 if not-equal[Int8] -1[Int8], -127[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:113 if not-equal[compile-time] -1[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:114 if not-equal[Int8] -1[Int8], -1[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:115 if not-equal[Int8] -1[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:116 if not-equal[Int8] -1[Int8], -1[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:117 if not-equal[compile-time] -1[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:118 if not-equal[Int8] -1[Int8], -1[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:119 if not-equal[Int8] -1[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:120 if not-equal[Int8] -1[Int8], -1[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:121 if not-equal[compile-time] -1[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:122 if not-equal[Int8] -1[Int8], 0[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:123 if not-equal[Int8] -1[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:124 if not-equal[Int8] -1[Int8], 0[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:125 if not-equal[compile-time] -1[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:126 if not-equal[Int8] -1[Int8], 0[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:127 if not-equal[Int8] -1[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:128 if not-equal[Int8] -1[Int8], 0[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:129 if not-equal[compile-time] -1[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:130 if not-equal[Int8] -1[Int8], 1[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:131 if not-equal[Int8] -1[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:132 if not-equal[Int8] -1[Int8], 1[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:133 if not-equal[compile-time] -1[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:134 if not-equal[Int8] -1[Int8], 1[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:135 if not-equal[Int8] -1[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:136 if not-equal[Int8] -1[Int8], 1[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:137 if not-equal[compile-time] -1[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:138 if not-equal[Int8] -1[Int8], 127[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:139 if not-equal[Int8] -1[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:140 if not-equal[Int8] -1[Int8], 127[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:141 if not-equal[compile-time] -1[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:142 if not-equal[Int8] -1[Int8], 127[Int8] Var
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:143 if not-equal[Int8] -1[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:144 if not-equal[Int8] -1[Int8], 127[Int8] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:145 if not-equal[compile-time] -1[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:146 if not-equal[Int8] 0[Int8], -128[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:147 if not-equal[Int8] 0[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:148 if not-equal[Int8] 0[Int8], -128[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:149 if not-equal[compile-time] 0[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:150 if not-equal[Int8] 0[Int8], -128[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:151 if not-equal[Int8] 0[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:152 if not-equal[Int8] 0[Int8], -128[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:153 if not-equal[compile-time] 0[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:154 if not-equal[Int8] 0[Int8], -127[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:155 if not-equal[Int8] 0[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:156 if not-equal[Int8] 0[Int8], -127[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:157 if not-equal[compile-time] 0[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:158 if not-equal[Int8] 0[Int8], -127[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:159 if not-equal[Int8] 0[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:160 if not-equal[Int8] 0[Int8], -127[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:161 if not-equal[compile-time] 0[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:162 if not-equal[Int8] 0[Int8], -1[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:163 if not-equal[Int8] 0[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:164 if not-equal[Int8] 0[Int8], -1[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:165 if not-equal[compile-time] 0[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:166 if not-equal[Int8] 0[Int8], -1[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:167 if not-equal[Int8] 0[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:168 if not-equal[Int8] 0[Int8], -1[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:169 if not-equal[compile-time] 0[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:170 if not-equal[Int8] 0[Int8], 0[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:171 if not-equal[Int8] 0[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:172 if not-equal[Int8] 0[Int8], 0[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:173 if not-equal[compile-time] 0[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:174 if not-equal[Int8] 0[Int8], 0[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:175 if not-equal[Int8] 0[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:176 if not-equal[Int8] 0[Int8], 0[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:177 if not-equal[compile-time] 0[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:178 if not-equal[Int8] 0[Int8], 1[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:179 if not-equal[Int8] 0[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:180 if not-equal[Int8] 0[Int8], 1[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:181 if not-equal[compile-time] 0[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:182 if not-equal[Int8] 0[Int8], 1[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:183 if not-equal[Int8] 0[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:184 if not-equal[Int8] 0[Int8], 1[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:185 if not-equal[compile-time] 0[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:186 if not-equal[Int8] 0[Int8], 127[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:187 if not-equal[Int8] 0[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:188 if not-equal[Int8] 0[Int8], 127[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:189 if not-equal[compile-time] 0[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:190 if not-equal[Int8] 0[Int8], 127[Int8] Var
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:191 if not-equal[Int8] 0[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:192 if not-equal[Int8] 0[Int8], 127[Int8] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:193 if not-equal[compile-time] 0[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:194 if not-equal[Int8] 1[Int8], -128[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:195 if not-equal[Int8] 1[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:196 if not-equal[Int8] 1[Int8], -128[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:197 if not-equal[compile-time] 1[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:198 if not-equal[Int8] 1[Int8], -128[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:199 if not-equal[Int8] 1[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:200 if not-equal[Int8] 1[Int8], -128[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:201 if not-equal[compile-time] 1[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:202 if not-equal[Int8] 1[Int8], -127[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:203 if not-equal[Int8] 1[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:204 if not-equal[Int8] 1[Int8], -127[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:205 if not-equal[compile-time] 1[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:206 if not-equal[Int8] 1[Int8], -127[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:207 if not-equal[Int8] 1[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:208 if not-equal[Int8] 1[Int8], -127[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:209 if not-equal[compile-time] 1[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:210 if not-equal[Int8] 1[Int8], -1[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:211 if not-equal[Int8] 1[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:212 if not-equal[Int8] 1[Int8], -1[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:213 if not-equal[compile-time] 1[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:214 if not-equal[Int8] 1[Int8], -1[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:215 if not-equal[Int8] 1[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:216 if not-equal[Int8] 1[Int8], -1[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:217 if not-equal[compile-time] 1[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:218 if not-equal[Int8] 1[Int8], 0[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:219 if not-equal[Int8] 1[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:220 if not-equal[Int8] 1[Int8], 0[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:221 if not-equal[compile-time] 1[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:222 if not-equal[Int8] 1[Int8], 0[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:223 if not-equal[Int8] 1[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:224 if not-equal[Int8] 1[Int8], 0[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:225 if not-equal[compile-time] 1[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:226 if not-equal[Int8] 1[Int8], 1[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:227 if not-equal[Int8] 1[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:228 if not-equal[Int8] 1[Int8], 1[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:229 if not-equal[compile-time] 1[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:230 if not-equal[Int8] 1[Int8], 1[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:231 if not-equal[Int8] 1[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:232 if not-equal[Int8] 1[Int8], 1[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:233 if not-equal[compile-time] 1[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:234 if not-equal[Int8] 1[Int8], 127[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:235 if not-equal[Int8] 1[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:236 if not-equal[Int8] 1[Int8], 127[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:237 if not-equal[compile-time] 1[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:238 if not-equal[Int8] 1[Int8], 127[Int8] Var
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:239 if not-equal[Int8] 1[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:240 if not-equal[Int8] 1[Int8], 127[Int8] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:241 if not-equal[compile-time] 1[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:242 if not-equal[Int8] 127[Int8], -128[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:243 if not-equal[Int8] 127[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:244 if not-equal[Int8] 127[Int8], -128[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:245 if not-equal[compile-time] 127[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:246 if not-equal[Int8] 127[Int8], -128[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:247 if not-equal[Int8] 127[Int8], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:248 if not-equal[Int8] 127[Int8], -128[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:249 if not-equal[compile-time] 127[Int8], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:250 if not-equal[Int8] 127[Int8], -127[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:251 if not-equal[Int8] 127[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:252 if not-equal[Int8] 127[Int8], -127[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:253 if not-equal[compile-time] 127[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:254 if not-equal[Int8] 127[Int8], -127[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:255 if not-equal[Int8] 127[Int8], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:256 if not-equal[Int8] 127[Int8], -127[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:257 if not-equal[compile-time] 127[Int8], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:258 if not-equal[Int8] 127[Int8], -1[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:259 if not-equal[Int8] 127[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:260 if not-equal[Int8] 127[Int8], -1[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:261 if not-equal[compile-time] 127[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:262 if not-equal[Int8] 127[Int8], -1[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:263 if not-equal[Int8] 127[Int8], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:264 if not-equal[Int8] 127[Int8], -1[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:265 if not-equal[compile-time] 127[Int8], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:266 if not-equal[Int8] 127[Int8], 0[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:267 if not-equal[Int8] 127[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:268 if not-equal[Int8] 127[Int8], 0[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:269 if not-equal[compile-time] 127[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:270 if not-equal[Int8] 127[Int8], 0[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:271 if not-equal[Int8] 127[Int8], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:272 if not-equal[Int8] 127[Int8], 0[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:273 if not-equal[compile-time] 127[Int8], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:274 if not-equal[Int8] 127[Int8], 1[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:275 if not-equal[Int8] 127[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:276 if not-equal[Int8] 127[Int8], 1[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:277 if not-equal[compile-time] 127[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:278 if not-equal[Int8] 127[Int8], 1[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:279 if not-equal[Int8] 127[Int8], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:280 if not-equal[Int8] 127[Int8], 1[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:281 if not-equal[compile-time] 127[Int8], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:282 if not-equal[Int8] 127[Int8], 127[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:283 if not-equal[Int8] 127[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:284 if not-equal[Int8] 127[Int8], 127[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:285 if not-equal[compile-time] 127[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:286 if not-equal[Int8] 127[Int8], 127[Int8] Var
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:287 if not-equal[Int8] 127[Int8], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:288 if not-equal[Int8] 127[Int8], 127[Int8] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:289 if not-equal[compile-time] 127[Int8], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:290 if not-equal[Integer] -128[Int8], -32768[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:291 if not-equal[Integer] -128[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:292 if not-equal[Integer] -128[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:293 if not-equal[compile-time] -128[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:294 if not-equal[Integer] -128[Int8], -32768[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:295 if not-equal[Integer] -128[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:296 if not-equal[Integer] -128[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:297 if not-equal[compile-time] -128[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:298 if not-equal[Integer] -128[Int8], -32767[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:299 if not-equal[Integer] -128[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:300 if not-equal[Integer] -128[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:301 if not-equal[compile-time] -128[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:302 if not-equal[Integer] -128[Int8], -32767[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:303 if not-equal[Integer] -128[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:304 if not-equal[Integer] -128[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:305 if not-equal[compile-time] -128[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:306 if not-equal[Integer] -128[Int8], -129[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:307 if not-equal[Integer] -128[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:308 if not-equal[Integer] -128[Int8], -129[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:309 if not-equal[compile-time] -128[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:310 if not-equal[Integer] -128[Int8], -129[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:311 if not-equal[Integer] -128[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:312 if not-equal[Integer] -128[Int8], -129[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:313 if not-equal[compile-time] -128[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:314 if not-equal[Integer] -128[Int8], -128[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:315 if not-equal[Integer] -128[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:316 if not-equal[Integer] -128[Int8], -128[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:317 if not-equal[compile-time] -128[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:318 if not-equal[Integer] -128[Int8], -128[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:319 if not-equal[Integer] -128[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:320 if not-equal[Integer] -128[Int8], -128[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:321 if not-equal[compile-time] -128[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:322 if not-equal[Integer] -128[Int8], -1[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:323 if not-equal[Integer] -128[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:324 if not-equal[Integer] -128[Int8], -1[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:325 if not-equal[compile-time] -128[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:326 if not-equal[Integer] -128[Int8], -1[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:327 if not-equal[Integer] -128[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:328 if not-equal[Integer] -128[Int8], -1[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:329 if not-equal[compile-time] -128[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:330 if not-equal[Integer] -128[Int8], 0[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:331 if not-equal[Integer] -128[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:332 if not-equal[Integer] -128[Int8], 0[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:333 if not-equal[compile-time] -128[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:334 if not-equal[Integer] -128[Int8], 0[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:335 if not-equal[Integer] -128[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:336 if not-equal[Integer] -128[Int8], 0[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:337 if not-equal[compile-time] -128[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:338 if not-equal[Integer] -128[Int8], 1[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:339 if not-equal[Integer] -128[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:340 if not-equal[Integer] -128[Int8], 1[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:341 if not-equal[compile-time] -128[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:342 if not-equal[Integer] -128[Int8], 1[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:343 if not-equal[Integer] -128[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:344 if not-equal[Integer] -128[Int8], 1[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:345 if not-equal[compile-time] -128[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:346 if not-equal[Integer] -128[Int8], 127[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:347 if not-equal[Integer] -128[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:348 if not-equal[Integer] -128[Int8], 127[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:349 if not-equal[compile-time] -128[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:350 if not-equal[Integer] -128[Int8], 127[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:351 if not-equal[Integer] -128[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:352 if not-equal[Integer] -128[Int8], 127[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:353 if not-equal[compile-time] -128[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:354 if not-equal[Integer] -128[Int8], 128[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:355 if not-equal[Integer] -128[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:356 if not-equal[Integer] -128[Int8], 128[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:357 if not-equal[compile-time] -128[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:358 if not-equal[Integer] -128[Int8], 128[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:359 if not-equal[Integer] -128[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:360 if not-equal[Integer] -128[Int8], 128[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:361 if not-equal[compile-time] -128[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:362 if not-equal[Integer] -128[Int8], 32767[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:363 if not-equal[Integer] -128[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:364 if not-equal[Integer] -128[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:365 if not-equal[compile-time] -128[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:366 if not-equal[Integer] -128[Int8], 32767[Integer] Var
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:367 if not-equal[Integer] -128[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:368 if not-equal[Integer] -128[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:369 if not-equal[compile-time] -128[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:370 if not-equal[Integer] -127[Int8], -32768[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:371 if not-equal[Integer] -127[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:372 if not-equal[Integer] -127[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:373 if not-equal[compile-time] -127[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:374 if not-equal[Integer] -127[Int8], -32768[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:375 if not-equal[Integer] -127[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:376 if not-equal[Integer] -127[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:377 if not-equal[compile-time] -127[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:378 if not-equal[Integer] -127[Int8], -32767[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:379 if not-equal[Integer] -127[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:380 if not-equal[Integer] -127[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:381 if not-equal[compile-time] -127[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:382 if not-equal[Integer] -127[Int8], -32767[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:383 if not-equal[Integer] -127[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:384 if not-equal[Integer] -127[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:385 if not-equal[compile-time] -127[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:386 if not-equal[Integer] -127[Int8], -129[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:387 if not-equal[Integer] -127[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:388 if not-equal[Integer] -127[Int8], -129[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:389 if not-equal[compile-time] -127[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:390 if not-equal[Integer] -127[Int8], -129[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:391 if not-equal[Integer] -127[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:392 if not-equal[Integer] -127[Int8], -129[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:393 if not-equal[compile-time] -127[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:394 if not-equal[Integer] -127[Int8], -128[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:395 if not-equal[Integer] -127[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:396 if not-equal[Integer] -127[Int8], -128[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:397 if not-equal[compile-time] -127[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:398 if not-equal[Integer] -127[Int8], -128[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:399 if not-equal[Integer] -127[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:400 if not-equal[Integer] -127[Int8], -128[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:401 if not-equal[compile-time] -127[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:402 if not-equal[Integer] -127[Int8], -1[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:403 if not-equal[Integer] -127[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:404 if not-equal[Integer] -127[Int8], -1[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:405 if not-equal[compile-time] -127[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:406 if not-equal[Integer] -127[Int8], -1[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:407 if not-equal[Integer] -127[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:408 if not-equal[Integer] -127[Int8], -1[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:409 if not-equal[compile-time] -127[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:410 if not-equal[Integer] -127[Int8], 0[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:411 if not-equal[Integer] -127[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:412 if not-equal[Integer] -127[Int8], 0[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:413 if not-equal[compile-time] -127[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:414 if not-equal[Integer] -127[Int8], 0[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:415 if not-equal[Integer] -127[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:416 if not-equal[Integer] -127[Int8], 0[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:417 if not-equal[compile-time] -127[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:418 if not-equal[Integer] -127[Int8], 1[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:419 if not-equal[Integer] -127[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:420 if not-equal[Integer] -127[Int8], 1[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:421 if not-equal[compile-time] -127[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:422 if not-equal[Integer] -127[Int8], 1[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:423 if not-equal[Integer] -127[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:424 if not-equal[Integer] -127[Int8], 1[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:425 if not-equal[compile-time] -127[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:426 if not-equal[Integer] -127[Int8], 127[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:427 if not-equal[Integer] -127[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:428 if not-equal[Integer] -127[Int8], 127[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:429 if not-equal[compile-time] -127[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:430 if not-equal[Integer] -127[Int8], 127[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:431 if not-equal[Integer] -127[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:432 if not-equal[Integer] -127[Int8], 127[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:433 if not-equal[compile-time] -127[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:434 if not-equal[Integer] -127[Int8], 128[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:435 if not-equal[Integer] -127[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:436 if not-equal[Integer] -127[Int8], 128[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:437 if not-equal[compile-time] -127[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:438 if not-equal[Integer] -127[Int8], 128[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:439 if not-equal[Integer] -127[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:440 if not-equal[Integer] -127[Int8], 128[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:441 if not-equal[compile-time] -127[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:442 if not-equal[Integer] -127[Int8], 32767[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:443 if not-equal[Integer] -127[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:444 if not-equal[Integer] -127[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:445 if not-equal[compile-time] -127[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:446 if not-equal[Integer] -127[Int8], 32767[Integer] Var
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:447 if not-equal[Integer] -127[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:448 if not-equal[Integer] -127[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:449 if not-equal[compile-time] -127[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:450 if not-equal[Integer] -1[Int8], -32768[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:451 if not-equal[Integer] -1[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:452 if not-equal[Integer] -1[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:453 if not-equal[compile-time] -1[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:454 if not-equal[Integer] -1[Int8], -32768[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:455 if not-equal[Integer] -1[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:456 if not-equal[Integer] -1[Int8], -32768[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:457 if not-equal[compile-time] -1[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:458 if not-equal[Integer] -1[Int8], -32767[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:459 if not-equal[Integer] -1[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:460 if not-equal[Integer] -1[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:461 if not-equal[compile-time] -1[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:462 if not-equal[Integer] -1[Int8], -32767[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:463 if not-equal[Integer] -1[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:464 if not-equal[Integer] -1[Int8], -32767[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:465 if not-equal[compile-time] -1[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:466 if not-equal[Integer] -1[Int8], -129[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:467 if not-equal[Integer] -1[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:468 if not-equal[Integer] -1[Int8], -129[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:469 if not-equal[compile-time] -1[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:470 if not-equal[Integer] -1[Int8], -129[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:471 if not-equal[Integer] -1[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:472 if not-equal[Integer] -1[Int8], -129[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:473 if not-equal[compile-time] -1[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:474 if not-equal[Integer] -1[Int8], -128[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:475 if not-equal[Integer] -1[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:476 if not-equal[Integer] -1[Int8], -128[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:477 if not-equal[compile-time] -1[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:478 if not-equal[Integer] -1[Int8], -128[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:479 if not-equal[Integer] -1[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:480 if not-equal[Integer] -1[Int8], -128[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:481 if not-equal[compile-time] -1[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:482 if not-equal[Integer] -1[Int8], -1[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:483 if not-equal[Integer] -1[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:484 if not-equal[Integer] -1[Int8], -1[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:485 if not-equal[compile-time] -1[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:486 if not-equal[Integer] -1[Int8], -1[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:487 if not-equal[Integer] -1[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:488 if not-equal[Integer] -1[Int8], -1[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:489 if not-equal[compile-time] -1[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:490 if not-equal[Integer] -1[Int8], 0[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:491 if not-equal[Integer] -1[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:492 if not-equal[Integer] -1[Int8], 0[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:493 if not-equal[compile-time] -1[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:494 if not-equal[Integer] -1[Int8], 0[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:495 if not-equal[Integer] -1[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:496 if not-equal[Integer] -1[Int8], 0[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:497 if not-equal[compile-time] -1[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:498 if not-equal[Integer] -1[Int8], 1[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:499 if not-equal[Integer] -1[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:500 if not-equal[Integer] -1[Int8], 1[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:501 if not-equal[compile-time] -1[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:502 if not-equal[Integer] -1[Int8], 1[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:503 if not-equal[Integer] -1[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:504 if not-equal[Integer] -1[Int8], 1[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:505 if not-equal[compile-time] -1[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:506 if not-equal[Integer] -1[Int8], 127[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:507 if not-equal[Integer] -1[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:508 if not-equal[Integer] -1[Int8], 127[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:509 if not-equal[compile-time] -1[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:510 if not-equal[Integer] -1[Int8], 127[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:511 if not-equal[Integer] -1[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:512 if not-equal[Integer] -1[Int8], 127[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:513 if not-equal[compile-time] -1[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:514 if not-equal[Integer] -1[Int8], 128[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:515 if not-equal[Integer] -1[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:516 if not-equal[Integer] -1[Int8], 128[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:517 if not-equal[compile-time] -1[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:518 if not-equal[Integer] -1[Int8], 128[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:519 if not-equal[Integer] -1[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:520 if not-equal[Integer] -1[Int8], 128[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:521 if not-equal[compile-time] -1[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:522 if not-equal[Integer] -1[Int8], 32767[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:523 if not-equal[Integer] -1[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:524 if not-equal[Integer] -1[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:525 if not-equal[compile-time] -1[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:526 if not-equal[Integer] -1[Int8], 32767[Integer] Var
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:527 if not-equal[Integer] -1[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:528 if not-equal[Integer] -1[Int8], 32767[Integer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:529 if not-equal[compile-time] -1[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:530 if not-equal[Integer] 0[Int8], -32768[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:531 if not-equal[Integer] 0[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:532 if not-equal[Integer] 0[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:533 if not-equal[compile-time] 0[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:534 if not-equal[Integer] 0[Int8], -32768[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:535 if not-equal[Integer] 0[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:536 if not-equal[Integer] 0[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:537 if not-equal[compile-time] 0[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:538 if not-equal[Integer] 0[Int8], -32767[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:539 if not-equal[Integer] 0[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:540 if not-equal[Integer] 0[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:541 if not-equal[compile-time] 0[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:542 if not-equal[Integer] 0[Int8], -32767[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:543 if not-equal[Integer] 0[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:544 if not-equal[Integer] 0[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:545 if not-equal[compile-time] 0[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:546 if not-equal[Integer] 0[Int8], -129[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:547 if not-equal[Integer] 0[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:548 if not-equal[Integer] 0[Int8], -129[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:549 if not-equal[compile-time] 0[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:550 if not-equal[Integer] 0[Int8], -129[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:551 if not-equal[Integer] 0[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:552 if not-equal[Integer] 0[Int8], -129[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:553 if not-equal[compile-time] 0[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:554 if not-equal[Integer] 0[Int8], -128[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:555 if not-equal[Integer] 0[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:556 if not-equal[Integer] 0[Int8], -128[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:557 if not-equal[compile-time] 0[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:558 if not-equal[Integer] 0[Int8], -128[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:559 if not-equal[Integer] 0[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:560 if not-equal[Integer] 0[Int8], -128[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:561 if not-equal[compile-time] 0[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:562 if not-equal[Integer] 0[Int8], -1[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:563 if not-equal[Integer] 0[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:564 if not-equal[Integer] 0[Int8], -1[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:565 if not-equal[compile-time] 0[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:566 if not-equal[Integer] 0[Int8], -1[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:567 if not-equal[Integer] 0[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:568 if not-equal[Integer] 0[Int8], -1[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:569 if not-equal[compile-time] 0[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:570 if not-equal[Integer] 0[Int8], 0[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:571 if not-equal[Integer] 0[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:572 if not-equal[Integer] 0[Int8], 0[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:573 if not-equal[compile-time] 0[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:574 if not-equal[Integer] 0[Int8], 0[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:575 if not-equal[Integer] 0[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:576 if not-equal[Integer] 0[Int8], 0[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:577 if not-equal[compile-time] 0[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:578 if not-equal[Integer] 0[Int8], 1[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:579 if not-equal[Integer] 0[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:580 if not-equal[Integer] 0[Int8], 1[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:581 if not-equal[compile-time] 0[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:582 if not-equal[Integer] 0[Int8], 1[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:583 if not-equal[Integer] 0[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:584 if not-equal[Integer] 0[Int8], 1[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:585 if not-equal[compile-time] 0[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:586 if not-equal[Integer] 0[Int8], 127[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:587 if not-equal[Integer] 0[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:588 if not-equal[Integer] 0[Int8], 127[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:589 if not-equal[compile-time] 0[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:590 if not-equal[Integer] 0[Int8], 127[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:591 if not-equal[Integer] 0[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:592 if not-equal[Integer] 0[Int8], 127[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:593 if not-equal[compile-time] 0[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:594 if not-equal[Integer] 0[Int8], 128[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:595 if not-equal[Integer] 0[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:596 if not-equal[Integer] 0[Int8], 128[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:597 if not-equal[compile-time] 0[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:598 if not-equal[Integer] 0[Int8], 128[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:599 if not-equal[Integer] 0[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:600 if not-equal[Integer] 0[Int8], 128[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:601 if not-equal[compile-time] 0[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:602 if not-equal[Integer] 0[Int8], 32767[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:603 if not-equal[Integer] 0[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:604 if not-equal[Integer] 0[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:605 if not-equal[compile-time] 0[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:606 if not-equal[Integer] 0[Int8], 32767[Integer] Var
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:607 if not-equal[Integer] 0[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:608 if not-equal[Integer] 0[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:609 if not-equal[compile-time] 0[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:610 if not-equal[Integer] 1[Int8], -32768[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:611 if not-equal[Integer] 1[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:612 if not-equal[Integer] 1[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:613 if not-equal[compile-time] 1[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:614 if not-equal[Integer] 1[Int8], -32768[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:615 if not-equal[Integer] 1[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:616 if not-equal[Integer] 1[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:617 if not-equal[compile-time] 1[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:618 if not-equal[Integer] 1[Int8], -32767[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:619 if not-equal[Integer] 1[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:620 if not-equal[Integer] 1[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:621 if not-equal[compile-time] 1[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:622 if not-equal[Integer] 1[Int8], -32767[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:623 if not-equal[Integer] 1[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:624 if not-equal[Integer] 1[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:625 if not-equal[compile-time] 1[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:626 if not-equal[Integer] 1[Int8], -129[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:627 if not-equal[Integer] 1[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:628 if not-equal[Integer] 1[Int8], -129[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:629 if not-equal[compile-time] 1[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:630 if not-equal[Integer] 1[Int8], -129[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:631 if not-equal[Integer] 1[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:632 if not-equal[Integer] 1[Int8], -129[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:633 if not-equal[compile-time] 1[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:634 if not-equal[Integer] 1[Int8], -128[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:635 if not-equal[Integer] 1[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:636 if not-equal[Integer] 1[Int8], -128[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:637 if not-equal[compile-time] 1[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:638 if not-equal[Integer] 1[Int8], -128[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:639 if not-equal[Integer] 1[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:640 if not-equal[Integer] 1[Int8], -128[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:641 if not-equal[compile-time] 1[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:642 if not-equal[Integer] 1[Int8], -1[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:643 if not-equal[Integer] 1[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:644 if not-equal[Integer] 1[Int8], -1[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:645 if not-equal[compile-time] 1[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:646 if not-equal[Integer] 1[Int8], -1[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:647 if not-equal[Integer] 1[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:648 if not-equal[Integer] 1[Int8], -1[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:649 if not-equal[compile-time] 1[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:650 if not-equal[Integer] 1[Int8], 0[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:651 if not-equal[Integer] 1[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:652 if not-equal[Integer] 1[Int8], 0[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:653 if not-equal[compile-time] 1[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:654 if not-equal[Integer] 1[Int8], 0[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:655 if not-equal[Integer] 1[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:656 if not-equal[Integer] 1[Int8], 0[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:657 if not-equal[compile-time] 1[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:658 if not-equal[Integer] 1[Int8], 1[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:659 if not-equal[Integer] 1[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:660 if not-equal[Integer] 1[Int8], 1[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:661 if not-equal[compile-time] 1[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:662 if not-equal[Integer] 1[Int8], 1[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:663 if not-equal[Integer] 1[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:664 if not-equal[Integer] 1[Int8], 1[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:665 if not-equal[compile-time] 1[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:666 if not-equal[Integer] 1[Int8], 127[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:667 if not-equal[Integer] 1[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:668 if not-equal[Integer] 1[Int8], 127[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:669 if not-equal[compile-time] 1[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:670 if not-equal[Integer] 1[Int8], 127[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:671 if not-equal[Integer] 1[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:672 if not-equal[Integer] 1[Int8], 127[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:673 if not-equal[compile-time] 1[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:674 if not-equal[Integer] 1[Int8], 128[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:675 if not-equal[Integer] 1[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:676 if not-equal[Integer] 1[Int8], 128[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:677 if not-equal[compile-time] 1[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:678 if not-equal[Integer] 1[Int8], 128[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:679 if not-equal[Integer] 1[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:680 if not-equal[Integer] 1[Int8], 128[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:681 if not-equal[compile-time] 1[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:682 if not-equal[Integer] 1[Int8], 32767[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:683 if not-equal[Integer] 1[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:684 if not-equal[Integer] 1[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:685 if not-equal[compile-time] 1[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:686 if not-equal[Integer] 1[Int8], 32767[Integer] Var
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:687 if not-equal[Integer] 1[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:688 if not-equal[Integer] 1[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:689 if not-equal[compile-time] 1[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:690 if not-equal[Integer] 127[Int8], -32768[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:691 if not-equal[Integer] 127[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:692 if not-equal[Integer] 127[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:693 if not-equal[compile-time] 127[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:694 if not-equal[Integer] 127[Int8], -32768[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:695 if not-equal[Integer] 127[Int8], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:696 if not-equal[Integer] 127[Int8], -32768[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:697 if not-equal[compile-time] 127[Int8], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:698 if not-equal[Integer] 127[Int8], -32767[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:699 if not-equal[Integer] 127[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:700 if not-equal[Integer] 127[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:701 if not-equal[compile-time] 127[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:702 if not-equal[Integer] 127[Int8], -32767[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:703 if not-equal[Integer] 127[Int8], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:704 if not-equal[Integer] 127[Int8], -32767[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:705 if not-equal[compile-time] 127[Int8], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:706 if not-equal[Integer] 127[Int8], -129[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:707 if not-equal[Integer] 127[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:708 if not-equal[Integer] 127[Int8], -129[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:709 if not-equal[compile-time] 127[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:710 if not-equal[Integer] 127[Int8], -129[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:711 if not-equal[Integer] 127[Int8], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:712 if not-equal[Integer] 127[Int8], -129[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:713 if not-equal[compile-time] 127[Int8], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:714 if not-equal[Integer] 127[Int8], -128[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:715 if not-equal[Integer] 127[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:716 if not-equal[Integer] 127[Int8], -128[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:717 if not-equal[compile-time] 127[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:718 if not-equal[Integer] 127[Int8], -128[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:719 if not-equal[Integer] 127[Int8], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:720 if not-equal[Integer] 127[Int8], -128[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:721 if not-equal[compile-time] 127[Int8], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:722 if not-equal[Integer] 127[Int8], -1[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:723 if not-equal[Integer] 127[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:724 if not-equal[Integer] 127[Int8], -1[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:725 if not-equal[compile-time] 127[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:726 if not-equal[Integer] 127[Int8], -1[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:727 if not-equal[Integer] 127[Int8], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:728 if not-equal[Integer] 127[Int8], -1[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:729 if not-equal[compile-time] 127[Int8], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:730 if not-equal[Integer] 127[Int8], 0[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:731 if not-equal[Integer] 127[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:732 if not-equal[Integer] 127[Int8], 0[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:733 if not-equal[compile-time] 127[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:734 if not-equal[Integer] 127[Int8], 0[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:735 if not-equal[Integer] 127[Int8], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:736 if not-equal[Integer] 127[Int8], 0[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:737 if not-equal[compile-time] 127[Int8], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:738 if not-equal[Integer] 127[Int8], 1[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:739 if not-equal[Integer] 127[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:740 if not-equal[Integer] 127[Int8], 1[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:741 if not-equal[compile-time] 127[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:742 if not-equal[Integer] 127[Int8], 1[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:743 if not-equal[Integer] 127[Int8], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:744 if not-equal[Integer] 127[Int8], 1[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:745 if not-equal[compile-time] 127[Int8], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:746 if not-equal[Integer] 127[Int8], 127[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:747 if not-equal[Integer] 127[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:748 if not-equal[Integer] 127[Int8], 127[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:749 if not-equal[compile-time] 127[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:750 if not-equal[Integer] 127[Int8], 127[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:751 if not-equal[Integer] 127[Int8], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:752 if not-equal[Integer] 127[Int8], 127[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:753 if not-equal[compile-time] 127[Int8], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:754 if not-equal[Integer] 127[Int8], 128[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:755 if not-equal[Integer] 127[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:756 if not-equal[Integer] 127[Int8], 128[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:757 if not-equal[compile-time] 127[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:758 if not-equal[Integer] 127[Int8], 128[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:759 if not-equal[Integer] 127[Int8], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:760 if not-equal[Integer] 127[Int8], 128[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:761 if not-equal[compile-time] 127[Int8], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:762 if not-equal[Integer] 127[Int8], 32767[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:763 if not-equal[Integer] 127[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:764 if not-equal[Integer] 127[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:765 if not-equal[compile-time] 127[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:766 if not-equal[Integer] 127[Int8], 32767[Integer] Var
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:767 if not-equal[Integer] 127[Int8], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:768 if not-equal[Integer] 127[Int8], 32767[Integer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:769 if not-equal[compile-time] 127[Int8], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:770 if not-equal[Integer] -128[Int8], 0[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:771 if not-equal[Integer] -128[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:772 if not-equal[Integer] -128[Int8], 0[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:773 if not-equal[compile-time] -128[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:774 if not-equal[Integer] -128[Int8], 0[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:775 if not-equal[Integer] -128[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:776 if not-equal[Integer] -128[Int8], 0[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:777 if not-equal[compile-time] -128[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:778 if not-equal[Integer] -128[Int8], 1[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:779 if not-equal[Integer] -128[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:780 if not-equal[Integer] -128[Int8], 1[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:781 if not-equal[compile-time] -128[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:782 if not-equal[Integer] -128[Int8], 1[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:783 if not-equal[Integer] -128[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:784 if not-equal[Integer] -128[Int8], 1[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:785 if not-equal[compile-time] -128[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:786 if not-equal[Integer] -128[Int8], 127[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:787 if not-equal[Integer] -128[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:788 if not-equal[Integer] -128[Int8], 127[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:789 if not-equal[compile-time] -128[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:790 if not-equal[Integer] -128[Int8], 127[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:791 if not-equal[Integer] -128[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:792 if not-equal[Integer] -128[Int8], 127[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:793 if not-equal[compile-time] -128[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:794 if not-equal[Integer] -128[Int8], 128[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:795 if not-equal[Integer] -128[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:796 if not-equal[Integer] -128[Int8], 128[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:797 if not-equal[compile-time] -128[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:798 if not-equal[Integer] -128[Int8], 128[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:799 if not-equal[Integer] -128[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:800 if not-equal[Integer] -128[Int8], 128[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:801 if not-equal[compile-time] -128[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:802 if not-equal[Integer] -128[Int8], 255[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:803 if not-equal[Integer] -128[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:804 if not-equal[Integer] -128[Int8], 255[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:805 if not-equal[compile-time] -128[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:806 if not-equal[Integer] -128[Int8], 255[Byte] Var
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:807 if not-equal[Integer] -128[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:808 if not-equal[Integer] -128[Int8], 255[Byte] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:809 if not-equal[compile-time] -128[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:810 if not-equal[Integer] -127[Int8], 0[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:811 if not-equal[Integer] -127[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:812 if not-equal[Integer] -127[Int8], 0[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:813 if not-equal[compile-time] -127[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:814 if not-equal[Integer] -127[Int8], 0[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:815 if not-equal[Integer] -127[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:816 if not-equal[Integer] -127[Int8], 0[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:817 if not-equal[compile-time] -127[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:818 if not-equal[Integer] -127[Int8], 1[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:819 if not-equal[Integer] -127[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:820 if not-equal[Integer] -127[Int8], 1[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:821 if not-equal[compile-time] -127[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:822 if not-equal[Integer] -127[Int8], 1[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:823 if not-equal[Integer] -127[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:824 if not-equal[Integer] -127[Int8], 1[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:825 if not-equal[compile-time] -127[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:826 if not-equal[Integer] -127[Int8], 127[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:827 if not-equal[Integer] -127[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:828 if not-equal[Integer] -127[Int8], 127[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:829 if not-equal[compile-time] -127[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:830 if not-equal[Integer] -127[Int8], 127[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:831 if not-equal[Integer] -127[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:832 if not-equal[Integer] -127[Int8], 127[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:833 if not-equal[compile-time] -127[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:834 if not-equal[Integer] -127[Int8], 128[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:835 if not-equal[Integer] -127[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:836 if not-equal[Integer] -127[Int8], 128[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:837 if not-equal[compile-time] -127[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:838 if not-equal[Integer] -127[Int8], 128[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:839 if not-equal[Integer] -127[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:840 if not-equal[Integer] -127[Int8], 128[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:841 if not-equal[compile-time] -127[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:842 if not-equal[Integer] -127[Int8], 255[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:843 if not-equal[Integer] -127[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:844 if not-equal[Integer] -127[Int8], 255[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:845 if not-equal[compile-time] -127[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:846 if not-equal[Integer] -127[Int8], 255[Byte] Var
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:847 if not-equal[Integer] -127[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:848 if not-equal[Integer] -127[Int8], 255[Byte] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:849 if not-equal[compile-time] -127[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:850 if not-equal[Integer] -1[Int8], 0[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:851 if not-equal[Integer] -1[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:852 if not-equal[Integer] -1[Int8], 0[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:853 if not-equal[compile-time] -1[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:854 if not-equal[Integer] -1[Int8], 0[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:855 if not-equal[Integer] -1[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:856 if not-equal[Integer] -1[Int8], 0[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:857 if not-equal[compile-time] -1[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:858 if not-equal[Integer] -1[Int8], 1[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:859 if not-equal[Integer] -1[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:860 if not-equal[Integer] -1[Int8], 1[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:861 if not-equal[compile-time] -1[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:862 if not-equal[Integer] -1[Int8], 1[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:863 if not-equal[Integer] -1[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:864 if not-equal[Integer] -1[Int8], 1[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:865 if not-equal[compile-time] -1[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:866 if not-equal[Integer] -1[Int8], 127[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:867 if not-equal[Integer] -1[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:868 if not-equal[Integer] -1[Int8], 127[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:869 if not-equal[compile-time] -1[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:870 if not-equal[Integer] -1[Int8], 127[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:871 if not-equal[Integer] -1[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:872 if not-equal[Integer] -1[Int8], 127[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:873 if not-equal[compile-time] -1[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:874 if not-equal[Integer] -1[Int8], 128[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:875 if not-equal[Integer] -1[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:876 if not-equal[Integer] -1[Int8], 128[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:877 if not-equal[compile-time] -1[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:878 if not-equal[Integer] -1[Int8], 128[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:879 if not-equal[Integer] -1[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:880 if not-equal[Integer] -1[Int8], 128[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:881 if not-equal[compile-time] -1[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:882 if not-equal[Integer] -1[Int8], 255[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:883 if not-equal[Integer] -1[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:884 if not-equal[Integer] -1[Int8], 255[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:885 if not-equal[compile-time] -1[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:886 if not-equal[Integer] -1[Int8], 255[Byte] Var
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:887 if not-equal[Integer] -1[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:888 if not-equal[Integer] -1[Int8], 255[Byte] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:889 if not-equal[compile-time] -1[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:890 if not-equal[Integer] 0[Int8], 0[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:891 if not-equal[Integer] 0[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:892 if not-equal[Integer] 0[Int8], 0[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:893 if not-equal[compile-time] 0[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:894 if not-equal[Integer] 0[Int8], 0[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:895 if not-equal[Integer] 0[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:896 if not-equal[Integer] 0[Int8], 0[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:897 if not-equal[compile-time] 0[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:898 if not-equal[Integer] 0[Int8], 1[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:899 if not-equal[Integer] 0[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:900 if not-equal[Integer] 0[Int8], 1[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:901 if not-equal[compile-time] 0[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:902 if not-equal[Integer] 0[Int8], 1[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:903 if not-equal[Integer] 0[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:904 if not-equal[Integer] 0[Int8], 1[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:905 if not-equal[compile-time] 0[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:906 if not-equal[Integer] 0[Int8], 127[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:907 if not-equal[Integer] 0[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:908 if not-equal[Integer] 0[Int8], 127[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:909 if not-equal[compile-time] 0[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:910 if not-equal[Integer] 0[Int8], 127[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:911 if not-equal[Integer] 0[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:912 if not-equal[Integer] 0[Int8], 127[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:913 if not-equal[compile-time] 0[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:914 if not-equal[Integer] 0[Int8], 128[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:915 if not-equal[Integer] 0[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:916 if not-equal[Integer] 0[Int8], 128[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:917 if not-equal[compile-time] 0[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:918 if not-equal[Integer] 0[Int8], 128[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:919 if not-equal[Integer] 0[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:920 if not-equal[Integer] 0[Int8], 128[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:921 if not-equal[compile-time] 0[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:922 if not-equal[Integer] 0[Int8], 255[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:923 if not-equal[Integer] 0[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:924 if not-equal[Integer] 0[Int8], 255[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:925 if not-equal[compile-time] 0[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:926 if not-equal[Integer] 0[Int8], 255[Byte] Var
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:927 if not-equal[Integer] 0[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:928 if not-equal[Integer] 0[Int8], 255[Byte] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:929 if not-equal[compile-time] 0[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:930 if not-equal[Integer] 1[Int8], 0[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:931 if not-equal[Integer] 1[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:932 if not-equal[Integer] 1[Int8], 0[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:933 if not-equal[compile-time] 1[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:934 if not-equal[Integer] 1[Int8], 0[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:935 if not-equal[Integer] 1[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:936 if not-equal[Integer] 1[Int8], 0[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:937 if not-equal[compile-time] 1[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:938 if not-equal[Integer] 1[Int8], 1[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:939 if not-equal[Integer] 1[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:940 if not-equal[Integer] 1[Int8], 1[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:941 if not-equal[compile-time] 1[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:942 if not-equal[Integer] 1[Int8], 1[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:943 if not-equal[Integer] 1[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:944 if not-equal[Integer] 1[Int8], 1[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:945 if not-equal[compile-time] 1[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:946 if not-equal[Integer] 1[Int8], 127[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:947 if not-equal[Integer] 1[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:948 if not-equal[Integer] 1[Int8], 127[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:949 if not-equal[compile-time] 1[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:950 if not-equal[Integer] 1[Int8], 127[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:951 if not-equal[Integer] 1[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:952 if not-equal[Integer] 1[Int8], 127[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:953 if not-equal[compile-time] 1[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:954 if not-equal[Integer] 1[Int8], 128[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:955 if not-equal[Integer] 1[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:956 if not-equal[Integer] 1[Int8], 128[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:957 if not-equal[compile-time] 1[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:958 if not-equal[Integer] 1[Int8], 128[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:959 if not-equal[Integer] 1[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:960 if not-equal[Integer] 1[Int8], 128[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:961 if not-equal[compile-time] 1[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:962 if not-equal[Integer] 1[Int8], 255[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:963 if not-equal[Integer] 1[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:964 if not-equal[Integer] 1[Int8], 255[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:965 if not-equal[compile-time] 1[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:966 if not-equal[Integer] 1[Int8], 255[Byte] Var
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:967 if not-equal[Integer] 1[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:968 if not-equal[Integer] 1[Int8], 255[Byte] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:969 if not-equal[compile-time] 1[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:970 if not-equal[Integer] 127[Int8], 0[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:971 if not-equal[Integer] 127[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:972 if not-equal[Integer] 127[Int8], 0[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:973 if not-equal[compile-time] 127[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:974 if not-equal[Integer] 127[Int8], 0[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:975 if not-equal[Integer] 127[Int8], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:976 if not-equal[Integer] 127[Int8], 0[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:977 if not-equal[compile-time] 127[Int8], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:978 if not-equal[Integer] 127[Int8], 1[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:979 if not-equal[Integer] 127[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:980 if not-equal[Integer] 127[Int8], 1[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:981 if not-equal[compile-time] 127[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:982 if not-equal[Integer] 127[Int8], 1[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:983 if not-equal[Integer] 127[Int8], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:984 if not-equal[Integer] 127[Int8], 1[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:985 if not-equal[compile-time] 127[Int8], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:986 if not-equal[Integer] 127[Int8], 127[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:987 if not-equal[Integer] 127[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:988 if not-equal[Integer] 127[Int8], 127[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:989 if not-equal[compile-time] 127[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:990 if not-equal[Integer] 127[Int8], 127[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:991 if not-equal[Integer] 127[Int8], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:992 if not-equal[Integer] 127[Int8], 127[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:993 if not-equal[compile-time] 127[Int8], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:994 if not-equal[Integer] 127[Int8], 128[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:995 if not-equal[Integer] 127[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:996 if not-equal[Integer] 127[Int8], 128[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:997 if not-equal[compile-time] 127[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:998 if not-equal[Integer] 127[Int8], 128[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:999 if not-equal[Integer] 127[Int8], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1000 if not-equal[Integer] 127[Int8], 128[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1001 if not-equal[compile-time] 127[Int8], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1002 if not-equal[Integer] 127[Int8], 255[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1003 if not-equal[Integer] 127[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1004 if not-equal[Integer] 127[Int8], 255[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1005 if not-equal[compile-time] 127[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1006 if not-equal[Integer] 127[Int8], 255[Byte] Var
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1007 if not-equal[Integer] 127[Int8], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1008 if not-equal[Integer] 127[Int8], 255[Byte] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1009 if not-equal[compile-time] 127[Int8], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1010 if not-equal[Integer] -128[Int8], 0[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1011 if not-equal[Integer] -128[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1012 if not-equal[Integer] -128[Int8], 0[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1013 if not-equal[compile-time] -128[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1014 if not-equal[Integer] -128[Int8], 0[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1015 if not-equal[Integer] -128[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1016 if not-equal[Integer] -128[Int8], 0[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1017 if not-equal[compile-time] -128[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1018 if not-equal[Integer] -128[Int8], 255[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1019 if not-equal[Integer] -128[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1020 if not-equal[Integer] -128[Int8], 255[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1021 if not-equal[compile-time] -128[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1022 if not-equal[Integer] -128[Int8], 255[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1023 if not-equal[Integer] -128[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1024 if not-equal[Integer] -128[Int8], 255[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1025 if not-equal[compile-time] -128[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1026 if not-equal[Integer] -128[Int8], 32767[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1027 if not-equal[Integer] -128[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1028 if not-equal[Integer] -128[Int8], 32767[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1029 if not-equal[compile-time] -128[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1030 if not-equal[Integer] -128[Int8], 32767[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1031 if not-equal[Integer] -128[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1032 if not-equal[Integer] -128[Int8], 32767[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1033 if not-equal[compile-time] -128[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1034 if not-equal[Integer] -128[Int8], 32768[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1035 if not-equal[Integer] -128[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1036 if not-equal[Integer] -128[Int8], 32768[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1037 if not-equal[compile-time] -128[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1038 if not-equal[Integer] -128[Int8], 32768[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1039 if not-equal[Integer] -128[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1040 if not-equal[Integer] -128[Int8], 32768[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1041 if not-equal[compile-time] -128[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1042 if not-equal[Integer] -128[Int8], 65535[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1043 if not-equal[Integer] -128[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1044 if not-equal[Integer] -128[Int8], 65535[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1045 if not-equal[compile-time] -128[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1046 if not-equal[Integer] -128[Int8], 65535[Word] Var
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1047 if not-equal[Integer] -128[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1048 if not-equal[Integer] -128[Int8], 65535[Word] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1049 if not-equal[compile-time] -128[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1050 if not-equal[Integer] -127[Int8], 0[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1051 if not-equal[Integer] -127[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1052 if not-equal[Integer] -127[Int8], 0[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1053 if not-equal[compile-time] -127[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1054 if not-equal[Integer] -127[Int8], 0[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1055 if not-equal[Integer] -127[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1056 if not-equal[Integer] -127[Int8], 0[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1057 if not-equal[compile-time] -127[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1058 if not-equal[Integer] -127[Int8], 255[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1059 if not-equal[Integer] -127[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1060 if not-equal[Integer] -127[Int8], 255[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1061 if not-equal[compile-time] -127[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1062 if not-equal[Integer] -127[Int8], 255[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1063 if not-equal[Integer] -127[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1064 if not-equal[Integer] -127[Int8], 255[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1065 if not-equal[compile-time] -127[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1066 if not-equal[Integer] -127[Int8], 32767[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1067 if not-equal[Integer] -127[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1068 if not-equal[Integer] -127[Int8], 32767[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1069 if not-equal[compile-time] -127[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1070 if not-equal[Integer] -127[Int8], 32767[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1071 if not-equal[Integer] -127[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1072 if not-equal[Integer] -127[Int8], 32767[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1073 if not-equal[compile-time] -127[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1074 if not-equal[Integer] -127[Int8], 32768[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1075 if not-equal[Integer] -127[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1076 if not-equal[Integer] -127[Int8], 32768[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1077 if not-equal[compile-time] -127[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1078 if not-equal[Integer] -127[Int8], 32768[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1079 if not-equal[Integer] -127[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1080 if not-equal[Integer] -127[Int8], 32768[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1081 if not-equal[compile-time] -127[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1082 if not-equal[Integer] -127[Int8], 65535[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1083 if not-equal[Integer] -127[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1084 if not-equal[Integer] -127[Int8], 65535[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1085 if not-equal[compile-time] -127[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1086 if not-equal[Integer] -127[Int8], 65535[Word] Var
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1087 if not-equal[Integer] -127[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1088 if not-equal[Integer] -127[Int8], 65535[Word] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1089 if not-equal[compile-time] -127[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1090 if not-equal[Integer] -1[Int8], 0[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1091 if not-equal[Integer] -1[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1092 if not-equal[Integer] -1[Int8], 0[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1093 if not-equal[compile-time] -1[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1094 if not-equal[Integer] -1[Int8], 0[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1095 if not-equal[Integer] -1[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1096 if not-equal[Integer] -1[Int8], 0[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1097 if not-equal[compile-time] -1[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1098 if not-equal[Integer] -1[Int8], 255[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1099 if not-equal[Integer] -1[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1100 if not-equal[Integer] -1[Int8], 255[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1101 if not-equal[compile-time] -1[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1102 if not-equal[Integer] -1[Int8], 255[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1103 if not-equal[Integer] -1[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1104 if not-equal[Integer] -1[Int8], 255[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1105 if not-equal[compile-time] -1[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1106 if not-equal[Integer] -1[Int8], 32767[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1107 if not-equal[Integer] -1[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1108 if not-equal[Integer] -1[Int8], 32767[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1109 if not-equal[compile-time] -1[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1110 if not-equal[Integer] -1[Int8], 32767[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1111 if not-equal[Integer] -1[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1112 if not-equal[Integer] -1[Int8], 32767[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1113 if not-equal[compile-time] -1[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1114 if not-equal[Integer] -1[Int8], 32768[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1115 if not-equal[Integer] -1[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1116 if not-equal[Integer] -1[Int8], 32768[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1117 if not-equal[compile-time] -1[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1118 if not-equal[Integer] -1[Int8], 32768[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1119 if not-equal[Integer] -1[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1120 if not-equal[Integer] -1[Int8], 32768[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1121 if not-equal[compile-time] -1[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1122 if not-equal[Integer] -1[Int8], 65535[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1123 if not-equal[Integer] -1[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1124 if not-equal[Integer] -1[Int8], 65535[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1125 if not-equal[compile-time] -1[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1126 if not-equal[Integer] -1[Int8], 65535[Word] Var
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1127 if not-equal[Integer] -1[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1128 if not-equal[Integer] -1[Int8], 65535[Word] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1129 if not-equal[compile-time] -1[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1130 if not-equal[Integer] 0[Int8], 0[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1131 if not-equal[Integer] 0[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1132 if not-equal[Integer] 0[Int8], 0[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1133 if not-equal[compile-time] 0[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1134 if not-equal[Integer] 0[Int8], 0[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1135 if not-equal[Integer] 0[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1136 if not-equal[Integer] 0[Int8], 0[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1137 if not-equal[compile-time] 0[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1138 if not-equal[Integer] 0[Int8], 255[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1139 if not-equal[Integer] 0[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1140 if not-equal[Integer] 0[Int8], 255[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1141 if not-equal[compile-time] 0[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1142 if not-equal[Integer] 0[Int8], 255[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1143 if not-equal[Integer] 0[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1144 if not-equal[Integer] 0[Int8], 255[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1145 if not-equal[compile-time] 0[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1146 if not-equal[Integer] 0[Int8], 32767[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1147 if not-equal[Integer] 0[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1148 if not-equal[Integer] 0[Int8], 32767[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1149 if not-equal[compile-time] 0[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1150 if not-equal[Integer] 0[Int8], 32767[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1151 if not-equal[Integer] 0[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1152 if not-equal[Integer] 0[Int8], 32767[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1153 if not-equal[compile-time] 0[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1154 if not-equal[Integer] 0[Int8], 32768[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1155 if not-equal[Integer] 0[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1156 if not-equal[Integer] 0[Int8], 32768[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1157 if not-equal[compile-time] 0[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1158 if not-equal[Integer] 0[Int8], 32768[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1159 if not-equal[Integer] 0[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1160 if not-equal[Integer] 0[Int8], 32768[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1161 if not-equal[compile-time] 0[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1162 if not-equal[Integer] 0[Int8], 65535[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1163 if not-equal[Integer] 0[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1164 if not-equal[Integer] 0[Int8], 65535[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1165 if not-equal[compile-time] 0[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1166 if not-equal[Integer] 0[Int8], 65535[Word] Var
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1167 if not-equal[Integer] 0[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1168 if not-equal[Integer] 0[Int8], 65535[Word] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1169 if not-equal[compile-time] 0[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1170 if not-equal[Integer] 1[Int8], 0[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1171 if not-equal[Integer] 1[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1172 if not-equal[Integer] 1[Int8], 0[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1173 if not-equal[compile-time] 1[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1174 if not-equal[Integer] 1[Int8], 0[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1175 if not-equal[Integer] 1[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1176 if not-equal[Integer] 1[Int8], 0[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1177 if not-equal[compile-time] 1[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1178 if not-equal[Integer] 1[Int8], 255[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1179 if not-equal[Integer] 1[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1180 if not-equal[Integer] 1[Int8], 255[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1181 if not-equal[compile-time] 1[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1182 if not-equal[Integer] 1[Int8], 255[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1183 if not-equal[Integer] 1[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1184 if not-equal[Integer] 1[Int8], 255[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1185 if not-equal[compile-time] 1[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1186 if not-equal[Integer] 1[Int8], 32767[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1187 if not-equal[Integer] 1[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1188 if not-equal[Integer] 1[Int8], 32767[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1189 if not-equal[compile-time] 1[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1190 if not-equal[Integer] 1[Int8], 32767[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1191 if not-equal[Integer] 1[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1192 if not-equal[Integer] 1[Int8], 32767[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1193 if not-equal[compile-time] 1[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1194 if not-equal[Integer] 1[Int8], 32768[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1195 if not-equal[Integer] 1[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1196 if not-equal[Integer] 1[Int8], 32768[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1197 if not-equal[compile-time] 1[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1198 if not-equal[Integer] 1[Int8], 32768[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1199 if not-equal[Integer] 1[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1200 if not-equal[Integer] 1[Int8], 32768[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1201 if not-equal[compile-time] 1[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1202 if not-equal[Integer] 1[Int8], 65535[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1203 if not-equal[Integer] 1[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1204 if not-equal[Integer] 1[Int8], 65535[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1205 if not-equal[compile-time] 1[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1206 if not-equal[Integer] 1[Int8], 65535[Word] Var
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1207 if not-equal[Integer] 1[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1208 if not-equal[Integer] 1[Int8], 65535[Word] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1209 if not-equal[compile-time] 1[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1210 if not-equal[Integer] 127[Int8], 0[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1211 if not-equal[Integer] 127[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1212 if not-equal[Integer] 127[Int8], 0[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1213 if not-equal[compile-time] 127[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1214 if not-equal[Integer] 127[Int8], 0[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1215 if not-equal[Integer] 127[Int8], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1216 if not-equal[Integer] 127[Int8], 0[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1217 if not-equal[compile-time] 127[Int8], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1218 if not-equal[Integer] 127[Int8], 255[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1219 if not-equal[Integer] 127[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1220 if not-equal[Integer] 127[Int8], 255[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1221 if not-equal[compile-time] 127[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1222 if not-equal[Integer] 127[Int8], 255[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1223 if not-equal[Integer] 127[Int8], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1224 if not-equal[Integer] 127[Int8], 255[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1225 if not-equal[compile-time] 127[Int8], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1226 if not-equal[Integer] 127[Int8], 32767[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1227 if not-equal[Integer] 127[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1228 if not-equal[Integer] 127[Int8], 32767[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1229 if not-equal[compile-time] 127[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1230 if not-equal[Integer] 127[Int8], 32767[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1231 if not-equal[Integer] 127[Int8], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1232 if not-equal[Integer] 127[Int8], 32767[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1233 if not-equal[compile-time] 127[Int8], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1234 if not-equal[Integer] 127[Int8], 32768[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1235 if not-equal[Integer] 127[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1236 if not-equal[Integer] 127[Int8], 32768[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1237 if not-equal[compile-time] 127[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1238 if not-equal[Integer] 127[Int8], 32768[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1239 if not-equal[Integer] 127[Int8], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1240 if not-equal[Integer] 127[Int8], 32768[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1241 if not-equal[compile-time] 127[Int8], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1242 if not-equal[Integer] 127[Int8], 65535[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1243 if not-equal[Integer] 127[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1244 if not-equal[Integer] 127[Int8], 65535[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1245 if not-equal[compile-time] 127[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1246 if not-equal[Integer] 127[Int8], 65535[Word] Var
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1247 if not-equal[Integer] 127[Int8], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1248 if not-equal[Integer] 127[Int8], 65535[Word] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1249 if not-equal[compile-time] 127[Int8], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1250 if not-equal[Pointer] -128[Int8], 0[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1251 if not-equal[Pointer] -128[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1252 if not-equal[Pointer] -128[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1253 if not-equal[compile-time] -128[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1254 if not-equal[Pointer] -128[Int8], 0[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1255 if not-equal[Pointer] -128[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1256 if not-equal[Pointer] -128[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1257 if not-equal[compile-time] -128[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1258 if not-equal[Pointer] -128[Int8], 255[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1259 if not-equal[Pointer] -128[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1260 if not-equal[Pointer] -128[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1261 if not-equal[compile-time] -128[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1262 if not-equal[Pointer] -128[Int8], 255[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1263 if not-equal[Pointer] -128[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1264 if not-equal[Pointer] -128[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1265 if not-equal[compile-time] -128[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1266 if not-equal[Pointer] -128[Int8], 32767[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1267 if not-equal[Pointer] -128[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1268 if not-equal[Pointer] -128[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1269 if not-equal[compile-time] -128[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1270 if not-equal[Pointer] -128[Int8], 32767[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1271 if not-equal[Pointer] -128[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1272 if not-equal[Pointer] -128[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1273 if not-equal[compile-time] -128[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1274 if not-equal[Pointer] -128[Int8], 32768[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1275 if not-equal[Pointer] -128[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1276 if not-equal[Pointer] -128[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1277 if not-equal[compile-time] -128[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1278 if not-equal[Pointer] -128[Int8], 32768[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1279 if not-equal[Pointer] -128[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1280 if not-equal[Pointer] -128[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1281 if not-equal[compile-time] -128[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1282 if not-equal[Pointer] -128[Int8], 65535[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1283 if not-equal[Pointer] -128[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1284 if not-equal[Pointer] -128[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1285 if not-equal[compile-time] -128[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1286 if not-equal[Pointer] -128[Int8], 65535[Pointer] Var
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1287 if not-equal[Pointer] -128[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1288 if not-equal[Pointer] -128[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1289 if not-equal[compile-time] -128[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1290 if not-equal[Pointer] -127[Int8], 0[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1291 if not-equal[Pointer] -127[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1292 if not-equal[Pointer] -127[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1293 if not-equal[compile-time] -127[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1294 if not-equal[Pointer] -127[Int8], 0[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1295 if not-equal[Pointer] -127[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1296 if not-equal[Pointer] -127[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1297 if not-equal[compile-time] -127[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1298 if not-equal[Pointer] -127[Int8], 255[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1299 if not-equal[Pointer] -127[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1300 if not-equal[Pointer] -127[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1301 if not-equal[compile-time] -127[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1302 if not-equal[Pointer] -127[Int8], 255[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1303 if not-equal[Pointer] -127[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1304 if not-equal[Pointer] -127[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1305 if not-equal[compile-time] -127[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1306 if not-equal[Pointer] -127[Int8], 32767[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1307 if not-equal[Pointer] -127[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1308 if not-equal[Pointer] -127[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1309 if not-equal[compile-time] -127[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1310 if not-equal[Pointer] -127[Int8], 32767[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1311 if not-equal[Pointer] -127[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1312 if not-equal[Pointer] -127[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1313 if not-equal[compile-time] -127[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1314 if not-equal[Pointer] -127[Int8], 32768[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1315 if not-equal[Pointer] -127[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1316 if not-equal[Pointer] -127[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1317 if not-equal[compile-time] -127[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1318 if not-equal[Pointer] -127[Int8], 32768[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1319 if not-equal[Pointer] -127[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1320 if not-equal[Pointer] -127[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1321 if not-equal[compile-time] -127[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1322 if not-equal[Pointer] -127[Int8], 65535[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1323 if not-equal[Pointer] -127[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1324 if not-equal[Pointer] -127[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1325 if not-equal[compile-time] -127[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1326 if not-equal[Pointer] -127[Int8], 65535[Pointer] Var
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1327 if not-equal[Pointer] -127[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1328 if not-equal[Pointer] -127[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1329 if not-equal[compile-time] -127[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1330 if not-equal[Pointer] -1[Int8], 0[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1331 if not-equal[Pointer] -1[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1332 if not-equal[Pointer] -1[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1333 if not-equal[compile-time] -1[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1334 if not-equal[Pointer] -1[Int8], 0[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1335 if not-equal[Pointer] -1[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1336 if not-equal[Pointer] -1[Int8], 0[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1337 if not-equal[compile-time] -1[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1338 if not-equal[Pointer] -1[Int8], 255[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1339 if not-equal[Pointer] -1[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1340 if not-equal[Pointer] -1[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1341 if not-equal[compile-time] -1[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1342 if not-equal[Pointer] -1[Int8], 255[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1343 if not-equal[Pointer] -1[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1344 if not-equal[Pointer] -1[Int8], 255[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1345 if not-equal[compile-time] -1[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1346 if not-equal[Pointer] -1[Int8], 32767[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1347 if not-equal[Pointer] -1[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1348 if not-equal[Pointer] -1[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1349 if not-equal[compile-time] -1[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1350 if not-equal[Pointer] -1[Int8], 32767[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1351 if not-equal[Pointer] -1[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1352 if not-equal[Pointer] -1[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1353 if not-equal[compile-time] -1[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1354 if not-equal[Pointer] -1[Int8], 32768[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1355 if not-equal[Pointer] -1[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1356 if not-equal[Pointer] -1[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1357 if not-equal[compile-time] -1[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1358 if not-equal[Pointer] -1[Int8], 32768[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1359 if not-equal[Pointer] -1[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1360 if not-equal[Pointer] -1[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1361 if not-equal[compile-time] -1[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1362 if not-equal[Pointer] -1[Int8], 65535[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1363 if not-equal[Pointer] -1[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1364 if not-equal[Pointer] -1[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1365 if not-equal[compile-time] -1[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1366 if not-equal[Pointer] -1[Int8], 65535[Pointer] Var
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1367 if not-equal[Pointer] -1[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1368 if not-equal[Pointer] -1[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1369 if not-equal[compile-time] -1[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1370 if not-equal[Pointer] 0[Int8], 0[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1371 if not-equal[Pointer] 0[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1372 if not-equal[Pointer] 0[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1373 if not-equal[compile-time] 0[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1374 if not-equal[Pointer] 0[Int8], 0[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1375 if not-equal[Pointer] 0[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1376 if not-equal[Pointer] 0[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1377 if not-equal[compile-time] 0[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1378 if not-equal[Pointer] 0[Int8], 255[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1379 if not-equal[Pointer] 0[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1380 if not-equal[Pointer] 0[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1381 if not-equal[compile-time] 0[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1382 if not-equal[Pointer] 0[Int8], 255[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1383 if not-equal[Pointer] 0[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1384 if not-equal[Pointer] 0[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1385 if not-equal[compile-time] 0[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1386 if not-equal[Pointer] 0[Int8], 32767[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1387 if not-equal[Pointer] 0[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1388 if not-equal[Pointer] 0[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1389 if not-equal[compile-time] 0[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1390 if not-equal[Pointer] 0[Int8], 32767[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1391 if not-equal[Pointer] 0[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1392 if not-equal[Pointer] 0[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1393 if not-equal[compile-time] 0[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1394 if not-equal[Pointer] 0[Int8], 32768[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1395 if not-equal[Pointer] 0[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1396 if not-equal[Pointer] 0[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1397 if not-equal[compile-time] 0[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1398 if not-equal[Pointer] 0[Int8], 32768[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1399 if not-equal[Pointer] 0[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1400 if not-equal[Pointer] 0[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1401 if not-equal[compile-time] 0[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1402 if not-equal[Pointer] 0[Int8], 65535[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1403 if not-equal[Pointer] 0[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1404 if not-equal[Pointer] 0[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1405 if not-equal[compile-time] 0[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1406 if not-equal[Pointer] 0[Int8], 65535[Pointer] Var
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1407 if not-equal[Pointer] 0[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1408 if not-equal[Pointer] 0[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1409 if not-equal[compile-time] 0[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1410 if not-equal[Pointer] 1[Int8], 0[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1411 if not-equal[Pointer] 1[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1412 if not-equal[Pointer] 1[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1413 if not-equal[compile-time] 1[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1414 if not-equal[Pointer] 1[Int8], 0[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1415 if not-equal[Pointer] 1[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1416 if not-equal[Pointer] 1[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1417 if not-equal[compile-time] 1[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1418 if not-equal[Pointer] 1[Int8], 255[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1419 if not-equal[Pointer] 1[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1420 if not-equal[Pointer] 1[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1421 if not-equal[compile-time] 1[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1422 if not-equal[Pointer] 1[Int8], 255[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1423 if not-equal[Pointer] 1[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1424 if not-equal[Pointer] 1[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1425 if not-equal[compile-time] 1[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1426 if not-equal[Pointer] 1[Int8], 32767[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1427 if not-equal[Pointer] 1[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1428 if not-equal[Pointer] 1[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1429 if not-equal[compile-time] 1[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1430 if not-equal[Pointer] 1[Int8], 32767[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1431 if not-equal[Pointer] 1[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1432 if not-equal[Pointer] 1[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1433 if not-equal[compile-time] 1[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1434 if not-equal[Pointer] 1[Int8], 32768[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1435 if not-equal[Pointer] 1[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1436 if not-equal[Pointer] 1[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1437 if not-equal[compile-time] 1[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1438 if not-equal[Pointer] 1[Int8], 32768[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1439 if not-equal[Pointer] 1[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1440 if not-equal[Pointer] 1[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1441 if not-equal[compile-time] 1[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1442 if not-equal[Pointer] 1[Int8], 65535[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1443 if not-equal[Pointer] 1[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1444 if not-equal[Pointer] 1[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1445 if not-equal[compile-time] 1[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1446 if not-equal[Pointer] 1[Int8], 65535[Pointer] Var
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1447 if not-equal[Pointer] 1[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1448 if not-equal[Pointer] 1[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1449 if not-equal[compile-time] 1[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1450 if not-equal[Pointer] 127[Int8], 0[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1451 if not-equal[Pointer] 127[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1452 if not-equal[Pointer] 127[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1453 if not-equal[compile-time] 127[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1454 if not-equal[Pointer] 127[Int8], 0[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1455 if not-equal[Pointer] 127[Int8], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1456 if not-equal[Pointer] 127[Int8], 0[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1457 if not-equal[compile-time] 127[Int8], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1458 if not-equal[Pointer] 127[Int8], 255[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1459 if not-equal[Pointer] 127[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1460 if not-equal[Pointer] 127[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1461 if not-equal[compile-time] 127[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:1462 if not-equal[Pointer] 127[Int8], 255[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1463 if not-equal[Pointer] 127[Int8], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1464 if not-equal[Pointer] 127[Int8], 255[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1465 if not-equal[compile-time] 127[Int8], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1466 if not-equal[Pointer] 127[Int8], 32767[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1467 if not-equal[Pointer] 127[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1468 if not-equal[Pointer] 127[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1469 if not-equal[compile-time] 127[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:1470 if not-equal[Pointer] 127[Int8], 32767[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1471 if not-equal[Pointer] 127[Int8], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1472 if not-equal[Pointer] 127[Int8], 32767[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1473 if not-equal[compile-time] 127[Int8], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1474 if not-equal[Pointer] 127[Int8], 32768[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1475 if not-equal[Pointer] 127[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1476 if not-equal[Pointer] 127[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1477 if not-equal[compile-time] 127[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:1478 if not-equal[Pointer] 127[Int8], 32768[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1479 if not-equal[Pointer] 127[Int8], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1480 if not-equal[Pointer] 127[Int8], 32768[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1481 if not-equal[compile-time] 127[Int8], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1482 if not-equal[Pointer] 127[Int8], 65535[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1483 if not-equal[Pointer] 127[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1484 if not-equal[Pointer] 127[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1485 if not-equal[compile-time] 127[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:1486 if not-equal[Pointer] 127[Int8], 65535[Pointer] Var
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1487 if not-equal[Pointer] 127[Int8], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1488 if not-equal[Pointer] 127[Int8], 65535[Pointer] Right immediate
  var  a: Int8 = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1489 if not-equal[compile-time] 127[Int8], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1490 if not-equal[Integer] -32768[Integer], -128[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1491 if not-equal[Integer] -32768[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1492 if not-equal[Integer] -32768[Integer], -128[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1493 if not-equal[compile-time] -32768[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1494 if not-equal[Integer] -32768[Integer], -128[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1495 if not-equal[Integer] -32768[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1496 if not-equal[Integer] -32768[Integer], -128[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1497 if not-equal[compile-time] -32768[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1498 if not-equal[Integer] -32768[Integer], -127[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1499 if not-equal[Integer] -32768[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1500 if not-equal[Integer] -32768[Integer], -127[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1501 if not-equal[compile-time] -32768[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1502 if not-equal[Integer] -32768[Integer], -127[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1503 if not-equal[Integer] -32768[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1504 if not-equal[Integer] -32768[Integer], -127[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1505 if not-equal[compile-time] -32768[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1506 if not-equal[Integer] -32768[Integer], -1[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1507 if not-equal[Integer] -32768[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1508 if not-equal[Integer] -32768[Integer], -1[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1509 if not-equal[compile-time] -32768[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1510 if not-equal[Integer] -32768[Integer], -1[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1511 if not-equal[Integer] -32768[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1512 if not-equal[Integer] -32768[Integer], -1[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1513 if not-equal[compile-time] -32768[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1514 if not-equal[Integer] -32768[Integer], 0[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1515 if not-equal[Integer] -32768[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1516 if not-equal[Integer] -32768[Integer], 0[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1517 if not-equal[compile-time] -32768[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1518 if not-equal[Integer] -32768[Integer], 0[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1519 if not-equal[Integer] -32768[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1520 if not-equal[Integer] -32768[Integer], 0[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1521 if not-equal[compile-time] -32768[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1522 if not-equal[Integer] -32768[Integer], 1[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1523 if not-equal[Integer] -32768[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1524 if not-equal[Integer] -32768[Integer], 1[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1525 if not-equal[compile-time] -32768[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1526 if not-equal[Integer] -32768[Integer], 1[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1527 if not-equal[Integer] -32768[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1528 if not-equal[Integer] -32768[Integer], 1[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1529 if not-equal[compile-time] -32768[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1530 if not-equal[Integer] -32768[Integer], 127[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1531 if not-equal[Integer] -32768[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1532 if not-equal[Integer] -32768[Integer], 127[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1533 if not-equal[compile-time] -32768[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1534 if not-equal[Integer] -32768[Integer], 127[Int8] Var
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1535 if not-equal[Integer] -32768[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1536 if not-equal[Integer] -32768[Integer], 127[Int8] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1537 if not-equal[compile-time] -32768[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1538 if not-equal[Integer] -32767[Integer], -128[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1539 if not-equal[Integer] -32767[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1540 if not-equal[Integer] -32767[Integer], -128[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1541 if not-equal[compile-time] -32767[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1542 if not-equal[Integer] -32767[Integer], -128[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1543 if not-equal[Integer] -32767[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1544 if not-equal[Integer] -32767[Integer], -128[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1545 if not-equal[compile-time] -32767[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1546 if not-equal[Integer] -32767[Integer], -127[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1547 if not-equal[Integer] -32767[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1548 if not-equal[Integer] -32767[Integer], -127[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1549 if not-equal[compile-time] -32767[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1550 if not-equal[Integer] -32767[Integer], -127[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1551 if not-equal[Integer] -32767[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1552 if not-equal[Integer] -32767[Integer], -127[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1553 if not-equal[compile-time] -32767[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1554 if not-equal[Integer] -32767[Integer], -1[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1555 if not-equal[Integer] -32767[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1556 if not-equal[Integer] -32767[Integer], -1[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1557 if not-equal[compile-time] -32767[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1558 if not-equal[Integer] -32767[Integer], -1[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1559 if not-equal[Integer] -32767[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1560 if not-equal[Integer] -32767[Integer], -1[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1561 if not-equal[compile-time] -32767[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1562 if not-equal[Integer] -32767[Integer], 0[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1563 if not-equal[Integer] -32767[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1564 if not-equal[Integer] -32767[Integer], 0[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1565 if not-equal[compile-time] -32767[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1566 if not-equal[Integer] -32767[Integer], 0[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1567 if not-equal[Integer] -32767[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1568 if not-equal[Integer] -32767[Integer], 0[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1569 if not-equal[compile-time] -32767[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1570 if not-equal[Integer] -32767[Integer], 1[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1571 if not-equal[Integer] -32767[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1572 if not-equal[Integer] -32767[Integer], 1[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1573 if not-equal[compile-time] -32767[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1574 if not-equal[Integer] -32767[Integer], 1[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1575 if not-equal[Integer] -32767[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1576 if not-equal[Integer] -32767[Integer], 1[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1577 if not-equal[compile-time] -32767[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1578 if not-equal[Integer] -32767[Integer], 127[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1579 if not-equal[Integer] -32767[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1580 if not-equal[Integer] -32767[Integer], 127[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1581 if not-equal[compile-time] -32767[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1582 if not-equal[Integer] -32767[Integer], 127[Int8] Var
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1583 if not-equal[Integer] -32767[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1584 if not-equal[Integer] -32767[Integer], 127[Int8] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1585 if not-equal[compile-time] -32767[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1586 if not-equal[Integer] -129[Integer], -128[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1587 if not-equal[Integer] -129[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1588 if not-equal[Integer] -129[Integer], -128[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1589 if not-equal[compile-time] -129[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1590 if not-equal[Integer] -129[Integer], -128[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1591 if not-equal[Integer] -129[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1592 if not-equal[Integer] -129[Integer], -128[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1593 if not-equal[compile-time] -129[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1594 if not-equal[Integer] -129[Integer], -127[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1595 if not-equal[Integer] -129[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1596 if not-equal[Integer] -129[Integer], -127[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1597 if not-equal[compile-time] -129[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1598 if not-equal[Integer] -129[Integer], -127[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1599 if not-equal[Integer] -129[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1600 if not-equal[Integer] -129[Integer], -127[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1601 if not-equal[compile-time] -129[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1602 if not-equal[Integer] -129[Integer], -1[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1603 if not-equal[Integer] -129[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1604 if not-equal[Integer] -129[Integer], -1[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1605 if not-equal[compile-time] -129[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1606 if not-equal[Integer] -129[Integer], -1[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1607 if not-equal[Integer] -129[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1608 if not-equal[Integer] -129[Integer], -1[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1609 if not-equal[compile-time] -129[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1610 if not-equal[Integer] -129[Integer], 0[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1611 if not-equal[Integer] -129[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1612 if not-equal[Integer] -129[Integer], 0[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1613 if not-equal[compile-time] -129[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1614 if not-equal[Integer] -129[Integer], 0[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1615 if not-equal[Integer] -129[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1616 if not-equal[Integer] -129[Integer], 0[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1617 if not-equal[compile-time] -129[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1618 if not-equal[Integer] -129[Integer], 1[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1619 if not-equal[Integer] -129[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1620 if not-equal[Integer] -129[Integer], 1[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1621 if not-equal[compile-time] -129[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1622 if not-equal[Integer] -129[Integer], 1[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1623 if not-equal[Integer] -129[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1624 if not-equal[Integer] -129[Integer], 1[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1625 if not-equal[compile-time] -129[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1626 if not-equal[Integer] -129[Integer], 127[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1627 if not-equal[Integer] -129[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1628 if not-equal[Integer] -129[Integer], 127[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1629 if not-equal[compile-time] -129[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1630 if not-equal[Integer] -129[Integer], 127[Int8] Var
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1631 if not-equal[Integer] -129[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1632 if not-equal[Integer] -129[Integer], 127[Int8] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1633 if not-equal[compile-time] -129[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1634 if not-equal[Integer] -128[Integer], -128[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1635 if not-equal[Integer] -128[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1636 if not-equal[Integer] -128[Integer], -128[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:1637 if not-equal[compile-time] -128[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:1638 if not-equal[Integer] -128[Integer], -128[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1639 if not-equal[Integer] -128[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1640 if not-equal[Integer] -128[Integer], -128[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1641 if not-equal[compile-time] -128[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1642 if not-equal[Integer] -128[Integer], -127[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1643 if not-equal[Integer] -128[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1644 if not-equal[Integer] -128[Integer], -127[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1645 if not-equal[compile-time] -128[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1646 if not-equal[Integer] -128[Integer], -127[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1647 if not-equal[Integer] -128[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1648 if not-equal[Integer] -128[Integer], -127[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1649 if not-equal[compile-time] -128[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1650 if not-equal[Integer] -128[Integer], -1[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1651 if not-equal[Integer] -128[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1652 if not-equal[Integer] -128[Integer], -1[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1653 if not-equal[compile-time] -128[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1654 if not-equal[Integer] -128[Integer], -1[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1655 if not-equal[Integer] -128[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1656 if not-equal[Integer] -128[Integer], -1[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1657 if not-equal[compile-time] -128[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1658 if not-equal[Integer] -128[Integer], 0[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1659 if not-equal[Integer] -128[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1660 if not-equal[Integer] -128[Integer], 0[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1661 if not-equal[compile-time] -128[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1662 if not-equal[Integer] -128[Integer], 0[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1663 if not-equal[Integer] -128[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1664 if not-equal[Integer] -128[Integer], 0[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1665 if not-equal[compile-time] -128[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1666 if not-equal[Integer] -128[Integer], 1[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1667 if not-equal[Integer] -128[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1668 if not-equal[Integer] -128[Integer], 1[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1669 if not-equal[compile-time] -128[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1670 if not-equal[Integer] -128[Integer], 1[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1671 if not-equal[Integer] -128[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1672 if not-equal[Integer] -128[Integer], 1[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1673 if not-equal[compile-time] -128[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1674 if not-equal[Integer] -128[Integer], 127[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1675 if not-equal[Integer] -128[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1676 if not-equal[Integer] -128[Integer], 127[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1677 if not-equal[compile-time] -128[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1678 if not-equal[Integer] -128[Integer], 127[Int8] Var
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1679 if not-equal[Integer] -128[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1680 if not-equal[Integer] -128[Integer], 127[Int8] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1681 if not-equal[compile-time] -128[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1682 if not-equal[Integer] -1[Integer], -128[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1683 if not-equal[Integer] -1[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1684 if not-equal[Integer] -1[Integer], -128[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1685 if not-equal[compile-time] -1[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1686 if not-equal[Integer] -1[Integer], -128[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1687 if not-equal[Integer] -1[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1688 if not-equal[Integer] -1[Integer], -128[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1689 if not-equal[compile-time] -1[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1690 if not-equal[Integer] -1[Integer], -127[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1691 if not-equal[Integer] -1[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1692 if not-equal[Integer] -1[Integer], -127[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1693 if not-equal[compile-time] -1[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1694 if not-equal[Integer] -1[Integer], -127[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1695 if not-equal[Integer] -1[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1696 if not-equal[Integer] -1[Integer], -127[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1697 if not-equal[compile-time] -1[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1698 if not-equal[Integer] -1[Integer], -1[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1699 if not-equal[Integer] -1[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1700 if not-equal[Integer] -1[Integer], -1[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:1701 if not-equal[compile-time] -1[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:1702 if not-equal[Integer] -1[Integer], -1[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1703 if not-equal[Integer] -1[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1704 if not-equal[Integer] -1[Integer], -1[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1705 if not-equal[compile-time] -1[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1706 if not-equal[Integer] -1[Integer], 0[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1707 if not-equal[Integer] -1[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1708 if not-equal[Integer] -1[Integer], 0[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1709 if not-equal[compile-time] -1[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1710 if not-equal[Integer] -1[Integer], 0[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1711 if not-equal[Integer] -1[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1712 if not-equal[Integer] -1[Integer], 0[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1713 if not-equal[compile-time] -1[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1714 if not-equal[Integer] -1[Integer], 1[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1715 if not-equal[Integer] -1[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1716 if not-equal[Integer] -1[Integer], 1[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1717 if not-equal[compile-time] -1[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1718 if not-equal[Integer] -1[Integer], 1[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1719 if not-equal[Integer] -1[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1720 if not-equal[Integer] -1[Integer], 1[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1721 if not-equal[compile-time] -1[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1722 if not-equal[Integer] -1[Integer], 127[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1723 if not-equal[Integer] -1[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1724 if not-equal[Integer] -1[Integer], 127[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1725 if not-equal[compile-time] -1[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1726 if not-equal[Integer] -1[Integer], 127[Int8] Var
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1727 if not-equal[Integer] -1[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1728 if not-equal[Integer] -1[Integer], 127[Int8] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1729 if not-equal[compile-time] -1[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1730 if not-equal[Integer] 0[Integer], -128[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1731 if not-equal[Integer] 0[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1732 if not-equal[Integer] 0[Integer], -128[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1733 if not-equal[compile-time] 0[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1734 if not-equal[Integer] 0[Integer], -128[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1735 if not-equal[Integer] 0[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1736 if not-equal[Integer] 0[Integer], -128[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1737 if not-equal[compile-time] 0[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1738 if not-equal[Integer] 0[Integer], -127[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1739 if not-equal[Integer] 0[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1740 if not-equal[Integer] 0[Integer], -127[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1741 if not-equal[compile-time] 0[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1742 if not-equal[Integer] 0[Integer], -127[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1743 if not-equal[Integer] 0[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1744 if not-equal[Integer] 0[Integer], -127[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1745 if not-equal[compile-time] 0[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1746 if not-equal[Integer] 0[Integer], -1[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1747 if not-equal[Integer] 0[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1748 if not-equal[Integer] 0[Integer], -1[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1749 if not-equal[compile-time] 0[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1750 if not-equal[Integer] 0[Integer], -1[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1751 if not-equal[Integer] 0[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1752 if not-equal[Integer] 0[Integer], -1[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1753 if not-equal[compile-time] 0[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1754 if not-equal[Integer] 0[Integer], 0[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1755 if not-equal[Integer] 0[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1756 if not-equal[Integer] 0[Integer], 0[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1757 if not-equal[compile-time] 0[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:1758 if not-equal[Integer] 0[Integer], 0[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1759 if not-equal[Integer] 0[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1760 if not-equal[Integer] 0[Integer], 0[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1761 if not-equal[compile-time] 0[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1762 if not-equal[Integer] 0[Integer], 1[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1763 if not-equal[Integer] 0[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1764 if not-equal[Integer] 0[Integer], 1[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1765 if not-equal[compile-time] 0[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1766 if not-equal[Integer] 0[Integer], 1[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1767 if not-equal[Integer] 0[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1768 if not-equal[Integer] 0[Integer], 1[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1769 if not-equal[compile-time] 0[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1770 if not-equal[Integer] 0[Integer], 127[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1771 if not-equal[Integer] 0[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1772 if not-equal[Integer] 0[Integer], 127[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1773 if not-equal[compile-time] 0[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1774 if not-equal[Integer] 0[Integer], 127[Int8] Var
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1775 if not-equal[Integer] 0[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1776 if not-equal[Integer] 0[Integer], 127[Int8] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1777 if not-equal[compile-time] 0[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1778 if not-equal[Integer] 1[Integer], -128[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1779 if not-equal[Integer] 1[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1780 if not-equal[Integer] 1[Integer], -128[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1781 if not-equal[compile-time] 1[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1782 if not-equal[Integer] 1[Integer], -128[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1783 if not-equal[Integer] 1[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1784 if not-equal[Integer] 1[Integer], -128[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1785 if not-equal[compile-time] 1[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1786 if not-equal[Integer] 1[Integer], -127[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1787 if not-equal[Integer] 1[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1788 if not-equal[Integer] 1[Integer], -127[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1789 if not-equal[compile-time] 1[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1790 if not-equal[Integer] 1[Integer], -127[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1791 if not-equal[Integer] 1[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1792 if not-equal[Integer] 1[Integer], -127[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1793 if not-equal[compile-time] 1[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1794 if not-equal[Integer] 1[Integer], -1[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1795 if not-equal[Integer] 1[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1796 if not-equal[Integer] 1[Integer], -1[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1797 if not-equal[compile-time] 1[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1798 if not-equal[Integer] 1[Integer], -1[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1799 if not-equal[Integer] 1[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1800 if not-equal[Integer] 1[Integer], -1[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1801 if not-equal[compile-time] 1[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1802 if not-equal[Integer] 1[Integer], 0[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1803 if not-equal[Integer] 1[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1804 if not-equal[Integer] 1[Integer], 0[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1805 if not-equal[compile-time] 1[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1806 if not-equal[Integer] 1[Integer], 0[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1807 if not-equal[Integer] 1[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1808 if not-equal[Integer] 1[Integer], 0[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1809 if not-equal[compile-time] 1[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1810 if not-equal[Integer] 1[Integer], 1[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1811 if not-equal[Integer] 1[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1812 if not-equal[Integer] 1[Integer], 1[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:1813 if not-equal[compile-time] 1[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:1814 if not-equal[Integer] 1[Integer], 1[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1815 if not-equal[Integer] 1[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1816 if not-equal[Integer] 1[Integer], 1[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1817 if not-equal[compile-time] 1[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1818 if not-equal[Integer] 1[Integer], 127[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1819 if not-equal[Integer] 1[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1820 if not-equal[Integer] 1[Integer], 127[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1821 if not-equal[compile-time] 1[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1822 if not-equal[Integer] 1[Integer], 127[Int8] Var
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1823 if not-equal[Integer] 1[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1824 if not-equal[Integer] 1[Integer], 127[Int8] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1825 if not-equal[compile-time] 1[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1826 if not-equal[Integer] 127[Integer], -128[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1827 if not-equal[Integer] 127[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1828 if not-equal[Integer] 127[Integer], -128[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1829 if not-equal[compile-time] 127[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1830 if not-equal[Integer] 127[Integer], -128[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1831 if not-equal[Integer] 127[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1832 if not-equal[Integer] 127[Integer], -128[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1833 if not-equal[compile-time] 127[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1834 if not-equal[Integer] 127[Integer], -127[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1835 if not-equal[Integer] 127[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1836 if not-equal[Integer] 127[Integer], -127[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1837 if not-equal[compile-time] 127[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1838 if not-equal[Integer] 127[Integer], -127[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1839 if not-equal[Integer] 127[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1840 if not-equal[Integer] 127[Integer], -127[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1841 if not-equal[compile-time] 127[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1842 if not-equal[Integer] 127[Integer], -1[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1843 if not-equal[Integer] 127[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1844 if not-equal[Integer] 127[Integer], -1[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1845 if not-equal[compile-time] 127[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1846 if not-equal[Integer] 127[Integer], -1[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1847 if not-equal[Integer] 127[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1848 if not-equal[Integer] 127[Integer], -1[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1849 if not-equal[compile-time] 127[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1850 if not-equal[Integer] 127[Integer], 0[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1851 if not-equal[Integer] 127[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1852 if not-equal[Integer] 127[Integer], 0[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1853 if not-equal[compile-time] 127[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1854 if not-equal[Integer] 127[Integer], 0[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1855 if not-equal[Integer] 127[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1856 if not-equal[Integer] 127[Integer], 0[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1857 if not-equal[compile-time] 127[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1858 if not-equal[Integer] 127[Integer], 1[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1859 if not-equal[Integer] 127[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1860 if not-equal[Integer] 127[Integer], 1[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1861 if not-equal[compile-time] 127[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1862 if not-equal[Integer] 127[Integer], 1[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1863 if not-equal[Integer] 127[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1864 if not-equal[Integer] 127[Integer], 1[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1865 if not-equal[compile-time] 127[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1866 if not-equal[Integer] 127[Integer], 127[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1867 if not-equal[Integer] 127[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1868 if not-equal[Integer] 127[Integer], 127[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:1869 if not-equal[compile-time] 127[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:1870 if not-equal[Integer] 127[Integer], 127[Int8] Var
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1871 if not-equal[Integer] 127[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1872 if not-equal[Integer] 127[Integer], 127[Int8] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1873 if not-equal[compile-time] 127[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1874 if not-equal[Integer] 128[Integer], -128[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1875 if not-equal[Integer] 128[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1876 if not-equal[Integer] 128[Integer], -128[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1877 if not-equal[compile-time] 128[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1878 if not-equal[Integer] 128[Integer], -128[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1879 if not-equal[Integer] 128[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1880 if not-equal[Integer] 128[Integer], -128[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1881 if not-equal[compile-time] 128[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1882 if not-equal[Integer] 128[Integer], -127[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1883 if not-equal[Integer] 128[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1884 if not-equal[Integer] 128[Integer], -127[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1885 if not-equal[compile-time] 128[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1886 if not-equal[Integer] 128[Integer], -127[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1887 if not-equal[Integer] 128[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1888 if not-equal[Integer] 128[Integer], -127[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1889 if not-equal[compile-time] 128[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1890 if not-equal[Integer] 128[Integer], -1[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1891 if not-equal[Integer] 128[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1892 if not-equal[Integer] 128[Integer], -1[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1893 if not-equal[compile-time] 128[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1894 if not-equal[Integer] 128[Integer], -1[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1895 if not-equal[Integer] 128[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1896 if not-equal[Integer] 128[Integer], -1[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1897 if not-equal[compile-time] 128[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1898 if not-equal[Integer] 128[Integer], 0[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1899 if not-equal[Integer] 128[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1900 if not-equal[Integer] 128[Integer], 0[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1901 if not-equal[compile-time] 128[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1902 if not-equal[Integer] 128[Integer], 0[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1903 if not-equal[Integer] 128[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1904 if not-equal[Integer] 128[Integer], 0[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1905 if not-equal[compile-time] 128[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1906 if not-equal[Integer] 128[Integer], 1[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1907 if not-equal[Integer] 128[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1908 if not-equal[Integer] 128[Integer], 1[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1909 if not-equal[compile-time] 128[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1910 if not-equal[Integer] 128[Integer], 1[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1911 if not-equal[Integer] 128[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1912 if not-equal[Integer] 128[Integer], 1[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1913 if not-equal[compile-time] 128[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1914 if not-equal[Integer] 128[Integer], 127[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1915 if not-equal[Integer] 128[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1916 if not-equal[Integer] 128[Integer], 127[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1917 if not-equal[compile-time] 128[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1918 if not-equal[Integer] 128[Integer], 127[Int8] Var
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1919 if not-equal[Integer] 128[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1920 if not-equal[Integer] 128[Integer], 127[Int8] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1921 if not-equal[compile-time] 128[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1922 if not-equal[Integer] 32767[Integer], -128[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1923 if not-equal[Integer] 32767[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1924 if not-equal[Integer] 32767[Integer], -128[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1925 if not-equal[compile-time] 32767[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1926 if not-equal[Integer] 32767[Integer], -128[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1927 if not-equal[Integer] 32767[Integer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1928 if not-equal[Integer] 32767[Integer], -128[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1929 if not-equal[compile-time] 32767[Integer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1930 if not-equal[Integer] 32767[Integer], -127[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1931 if not-equal[Integer] 32767[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1932 if not-equal[Integer] 32767[Integer], -127[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1933 if not-equal[compile-time] 32767[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:1934 if not-equal[Integer] 32767[Integer], -127[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1935 if not-equal[Integer] 32767[Integer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1936 if not-equal[Integer] 32767[Integer], -127[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1937 if not-equal[compile-time] 32767[Integer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1938 if not-equal[Integer] 32767[Integer], -1[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1939 if not-equal[Integer] 32767[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1940 if not-equal[Integer] 32767[Integer], -1[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1941 if not-equal[compile-time] 32767[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:1942 if not-equal[Integer] 32767[Integer], -1[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1943 if not-equal[Integer] 32767[Integer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1944 if not-equal[Integer] 32767[Integer], -1[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1945 if not-equal[compile-time] 32767[Integer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1946 if not-equal[Integer] 32767[Integer], 0[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1947 if not-equal[Integer] 32767[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1948 if not-equal[Integer] 32767[Integer], 0[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1949 if not-equal[compile-time] 32767[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:1950 if not-equal[Integer] 32767[Integer], 0[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1951 if not-equal[Integer] 32767[Integer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1952 if not-equal[Integer] 32767[Integer], 0[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1953 if not-equal[compile-time] 32767[Integer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1954 if not-equal[Integer] 32767[Integer], 1[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1955 if not-equal[Integer] 32767[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1956 if not-equal[Integer] 32767[Integer], 1[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1957 if not-equal[compile-time] 32767[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:1958 if not-equal[Integer] 32767[Integer], 1[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1959 if not-equal[Integer] 32767[Integer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1960 if not-equal[Integer] 32767[Integer], 1[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1961 if not-equal[compile-time] 32767[Integer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1962 if not-equal[Integer] 32767[Integer], 127[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1963 if not-equal[Integer] 32767[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1964 if not-equal[Integer] 32767[Integer], 127[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1965 if not-equal[compile-time] 32767[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:1966 if not-equal[Integer] 32767[Integer], 127[Int8] Var
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1967 if not-equal[Integer] 32767[Integer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1968 if not-equal[Integer] 32767[Integer], 127[Int8] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1969 if not-equal[compile-time] 32767[Integer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1970 if not-equal[Integer] -32768[Integer], -32768[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:1971 if not-equal[Integer] -32768[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 0

code auto:1972 if not-equal[Integer] -32768[Integer], -32768[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 0

code auto:1973 if not-equal[compile-time] -32768[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -32768 then
    r := 1;
endcode
varvalue r 0

code auto:1974 if not-equal[Integer] -32768[Integer], -32768[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1975 if not-equal[Integer] -32768[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1976 if not-equal[Integer] -32768[Integer], -32768[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1977 if not-equal[compile-time] -32768[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:1978 if not-equal[Integer] -32768[Integer], -32767[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1979 if not-equal[Integer] -32768[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1980 if not-equal[Integer] -32768[Integer], -32767[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:1981 if not-equal[compile-time] -32768[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:1982 if not-equal[Integer] -32768[Integer], -32767[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1983 if not-equal[Integer] -32768[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1984 if not-equal[Integer] -32768[Integer], -32767[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1985 if not-equal[compile-time] -32768[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1986 if not-equal[Integer] -32768[Integer], -129[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1987 if not-equal[Integer] -32768[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1988 if not-equal[Integer] -32768[Integer], -129[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:1989 if not-equal[compile-time] -32768[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:1990 if not-equal[Integer] -32768[Integer], -129[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1991 if not-equal[Integer] -32768[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1992 if not-equal[Integer] -32768[Integer], -129[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1993 if not-equal[compile-time] -32768[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1994 if not-equal[Integer] -32768[Integer], -128[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:1995 if not-equal[Integer] -32768[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:1996 if not-equal[Integer] -32768[Integer], -128[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1997 if not-equal[compile-time] -32768[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:1998 if not-equal[Integer] -32768[Integer], -128[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:1999 if not-equal[Integer] -32768[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2000 if not-equal[Integer] -32768[Integer], -128[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2001 if not-equal[compile-time] -32768[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2002 if not-equal[Integer] -32768[Integer], -1[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2003 if not-equal[Integer] -32768[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2004 if not-equal[Integer] -32768[Integer], -1[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2005 if not-equal[compile-time] -32768[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2006 if not-equal[Integer] -32768[Integer], -1[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2007 if not-equal[Integer] -32768[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2008 if not-equal[Integer] -32768[Integer], -1[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2009 if not-equal[compile-time] -32768[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2010 if not-equal[Integer] -32768[Integer], 0[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2011 if not-equal[Integer] -32768[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2012 if not-equal[Integer] -32768[Integer], 0[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2013 if not-equal[compile-time] -32768[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2014 if not-equal[Integer] -32768[Integer], 0[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2015 if not-equal[Integer] -32768[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2016 if not-equal[Integer] -32768[Integer], 0[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2017 if not-equal[compile-time] -32768[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2018 if not-equal[Integer] -32768[Integer], 1[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2019 if not-equal[Integer] -32768[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2020 if not-equal[Integer] -32768[Integer], 1[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2021 if not-equal[compile-time] -32768[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2022 if not-equal[Integer] -32768[Integer], 1[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2023 if not-equal[Integer] -32768[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2024 if not-equal[Integer] -32768[Integer], 1[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2025 if not-equal[compile-time] -32768[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2026 if not-equal[Integer] -32768[Integer], 127[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2027 if not-equal[Integer] -32768[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2028 if not-equal[Integer] -32768[Integer], 127[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2029 if not-equal[compile-time] -32768[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2030 if not-equal[Integer] -32768[Integer], 127[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2031 if not-equal[Integer] -32768[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2032 if not-equal[Integer] -32768[Integer], 127[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2033 if not-equal[compile-time] -32768[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2034 if not-equal[Integer] -32768[Integer], 128[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2035 if not-equal[Integer] -32768[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2036 if not-equal[Integer] -32768[Integer], 128[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2037 if not-equal[compile-time] -32768[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2038 if not-equal[Integer] -32768[Integer], 128[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2039 if not-equal[Integer] -32768[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2040 if not-equal[Integer] -32768[Integer], 128[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2041 if not-equal[compile-time] -32768[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2042 if not-equal[Integer] -32768[Integer], 32767[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2043 if not-equal[Integer] -32768[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2044 if not-equal[Integer] -32768[Integer], 32767[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2045 if not-equal[compile-time] -32768[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2046 if not-equal[Integer] -32768[Integer], 32767[Integer] Var
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2047 if not-equal[Integer] -32768[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2048 if not-equal[Integer] -32768[Integer], 32767[Integer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2049 if not-equal[compile-time] -32768[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2050 if not-equal[Integer] -32767[Integer], -32768[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2051 if not-equal[Integer] -32767[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2052 if not-equal[Integer] -32767[Integer], -32768[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2053 if not-equal[compile-time] -32767[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2054 if not-equal[Integer] -32767[Integer], -32768[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2055 if not-equal[Integer] -32767[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2056 if not-equal[Integer] -32767[Integer], -32768[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2057 if not-equal[compile-time] -32767[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2058 if not-equal[Integer] -32767[Integer], -32767[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2059 if not-equal[Integer] -32767[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2060 if not-equal[Integer] -32767[Integer], -32767[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 0

code auto:2061 if not-equal[compile-time] -32767[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -32767 then
    r := 1;
endcode
varvalue r 0

code auto:2062 if not-equal[Integer] -32767[Integer], -32767[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2063 if not-equal[Integer] -32767[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2064 if not-equal[Integer] -32767[Integer], -32767[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2065 if not-equal[compile-time] -32767[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2066 if not-equal[Integer] -32767[Integer], -129[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2067 if not-equal[Integer] -32767[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2068 if not-equal[Integer] -32767[Integer], -129[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2069 if not-equal[compile-time] -32767[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2070 if not-equal[Integer] -32767[Integer], -129[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2071 if not-equal[Integer] -32767[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2072 if not-equal[Integer] -32767[Integer], -129[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2073 if not-equal[compile-time] -32767[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2074 if not-equal[Integer] -32767[Integer], -128[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2075 if not-equal[Integer] -32767[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2076 if not-equal[Integer] -32767[Integer], -128[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2077 if not-equal[compile-time] -32767[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2078 if not-equal[Integer] -32767[Integer], -128[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2079 if not-equal[Integer] -32767[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2080 if not-equal[Integer] -32767[Integer], -128[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2081 if not-equal[compile-time] -32767[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2082 if not-equal[Integer] -32767[Integer], -1[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2083 if not-equal[Integer] -32767[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2084 if not-equal[Integer] -32767[Integer], -1[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2085 if not-equal[compile-time] -32767[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2086 if not-equal[Integer] -32767[Integer], -1[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2087 if not-equal[Integer] -32767[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2088 if not-equal[Integer] -32767[Integer], -1[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2089 if not-equal[compile-time] -32767[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2090 if not-equal[Integer] -32767[Integer], 0[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2091 if not-equal[Integer] -32767[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2092 if not-equal[Integer] -32767[Integer], 0[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2093 if not-equal[compile-time] -32767[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2094 if not-equal[Integer] -32767[Integer], 0[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2095 if not-equal[Integer] -32767[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2096 if not-equal[Integer] -32767[Integer], 0[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2097 if not-equal[compile-time] -32767[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2098 if not-equal[Integer] -32767[Integer], 1[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2099 if not-equal[Integer] -32767[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2100 if not-equal[Integer] -32767[Integer], 1[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2101 if not-equal[compile-time] -32767[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2102 if not-equal[Integer] -32767[Integer], 1[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2103 if not-equal[Integer] -32767[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2104 if not-equal[Integer] -32767[Integer], 1[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2105 if not-equal[compile-time] -32767[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2106 if not-equal[Integer] -32767[Integer], 127[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2107 if not-equal[Integer] -32767[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2108 if not-equal[Integer] -32767[Integer], 127[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2109 if not-equal[compile-time] -32767[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2110 if not-equal[Integer] -32767[Integer], 127[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2111 if not-equal[Integer] -32767[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2112 if not-equal[Integer] -32767[Integer], 127[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2113 if not-equal[compile-time] -32767[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2114 if not-equal[Integer] -32767[Integer], 128[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2115 if not-equal[Integer] -32767[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2116 if not-equal[Integer] -32767[Integer], 128[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2117 if not-equal[compile-time] -32767[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2118 if not-equal[Integer] -32767[Integer], 128[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2119 if not-equal[Integer] -32767[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2120 if not-equal[Integer] -32767[Integer], 128[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2121 if not-equal[compile-time] -32767[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2122 if not-equal[Integer] -32767[Integer], 32767[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2123 if not-equal[Integer] -32767[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2124 if not-equal[Integer] -32767[Integer], 32767[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2125 if not-equal[compile-time] -32767[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2126 if not-equal[Integer] -32767[Integer], 32767[Integer] Var
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2127 if not-equal[Integer] -32767[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2128 if not-equal[Integer] -32767[Integer], 32767[Integer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2129 if not-equal[compile-time] -32767[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2130 if not-equal[Integer] -129[Integer], -32768[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2131 if not-equal[Integer] -129[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2132 if not-equal[Integer] -129[Integer], -32768[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2133 if not-equal[compile-time] -129[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2134 if not-equal[Integer] -129[Integer], -32768[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2135 if not-equal[Integer] -129[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2136 if not-equal[Integer] -129[Integer], -32768[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2137 if not-equal[compile-time] -129[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2138 if not-equal[Integer] -129[Integer], -32767[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2139 if not-equal[Integer] -129[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2140 if not-equal[Integer] -129[Integer], -32767[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2141 if not-equal[compile-time] -129[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2142 if not-equal[Integer] -129[Integer], -32767[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2143 if not-equal[Integer] -129[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2144 if not-equal[Integer] -129[Integer], -32767[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2145 if not-equal[compile-time] -129[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2146 if not-equal[Integer] -129[Integer], -129[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2147 if not-equal[Integer] -129[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2148 if not-equal[Integer] -129[Integer], -129[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 0

code auto:2149 if not-equal[compile-time] -129[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -129 then
    r := 1;
endcode
varvalue r 0

code auto:2150 if not-equal[Integer] -129[Integer], -129[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2151 if not-equal[Integer] -129[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2152 if not-equal[Integer] -129[Integer], -129[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2153 if not-equal[compile-time] -129[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2154 if not-equal[Integer] -129[Integer], -128[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2155 if not-equal[Integer] -129[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2156 if not-equal[Integer] -129[Integer], -128[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2157 if not-equal[compile-time] -129[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2158 if not-equal[Integer] -129[Integer], -128[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2159 if not-equal[Integer] -129[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2160 if not-equal[Integer] -129[Integer], -128[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2161 if not-equal[compile-time] -129[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2162 if not-equal[Integer] -129[Integer], -1[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2163 if not-equal[Integer] -129[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2164 if not-equal[Integer] -129[Integer], -1[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2165 if not-equal[compile-time] -129[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2166 if not-equal[Integer] -129[Integer], -1[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2167 if not-equal[Integer] -129[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2168 if not-equal[Integer] -129[Integer], -1[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2169 if not-equal[compile-time] -129[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2170 if not-equal[Integer] -129[Integer], 0[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2171 if not-equal[Integer] -129[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2172 if not-equal[Integer] -129[Integer], 0[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2173 if not-equal[compile-time] -129[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2174 if not-equal[Integer] -129[Integer], 0[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2175 if not-equal[Integer] -129[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2176 if not-equal[Integer] -129[Integer], 0[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2177 if not-equal[compile-time] -129[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2178 if not-equal[Integer] -129[Integer], 1[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2179 if not-equal[Integer] -129[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2180 if not-equal[Integer] -129[Integer], 1[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2181 if not-equal[compile-time] -129[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2182 if not-equal[Integer] -129[Integer], 1[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2183 if not-equal[Integer] -129[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2184 if not-equal[Integer] -129[Integer], 1[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2185 if not-equal[compile-time] -129[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2186 if not-equal[Integer] -129[Integer], 127[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2187 if not-equal[Integer] -129[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2188 if not-equal[Integer] -129[Integer], 127[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2189 if not-equal[compile-time] -129[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2190 if not-equal[Integer] -129[Integer], 127[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2191 if not-equal[Integer] -129[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2192 if not-equal[Integer] -129[Integer], 127[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2193 if not-equal[compile-time] -129[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2194 if not-equal[Integer] -129[Integer], 128[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2195 if not-equal[Integer] -129[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2196 if not-equal[Integer] -129[Integer], 128[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2197 if not-equal[compile-time] -129[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2198 if not-equal[Integer] -129[Integer], 128[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2199 if not-equal[Integer] -129[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2200 if not-equal[Integer] -129[Integer], 128[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2201 if not-equal[compile-time] -129[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2202 if not-equal[Integer] -129[Integer], 32767[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2203 if not-equal[Integer] -129[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2204 if not-equal[Integer] -129[Integer], 32767[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2205 if not-equal[compile-time] -129[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2206 if not-equal[Integer] -129[Integer], 32767[Integer] Var
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2207 if not-equal[Integer] -129[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2208 if not-equal[Integer] -129[Integer], 32767[Integer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2209 if not-equal[compile-time] -129[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2210 if not-equal[Integer] -128[Integer], -32768[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2211 if not-equal[Integer] -128[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2212 if not-equal[Integer] -128[Integer], -32768[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2213 if not-equal[compile-time] -128[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2214 if not-equal[Integer] -128[Integer], -32768[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2215 if not-equal[Integer] -128[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2216 if not-equal[Integer] -128[Integer], -32768[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2217 if not-equal[compile-time] -128[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2218 if not-equal[Integer] -128[Integer], -32767[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2219 if not-equal[Integer] -128[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2220 if not-equal[Integer] -128[Integer], -32767[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2221 if not-equal[compile-time] -128[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2222 if not-equal[Integer] -128[Integer], -32767[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2223 if not-equal[Integer] -128[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2224 if not-equal[Integer] -128[Integer], -32767[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2225 if not-equal[compile-time] -128[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2226 if not-equal[Integer] -128[Integer], -129[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2227 if not-equal[Integer] -128[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2228 if not-equal[Integer] -128[Integer], -129[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2229 if not-equal[compile-time] -128[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2230 if not-equal[Integer] -128[Integer], -129[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2231 if not-equal[Integer] -128[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2232 if not-equal[Integer] -128[Integer], -129[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2233 if not-equal[compile-time] -128[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2234 if not-equal[Integer] -128[Integer], -128[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2235 if not-equal[Integer] -128[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2236 if not-equal[Integer] -128[Integer], -128[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:2237 if not-equal[compile-time] -128[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1;
endcode
varvalue r 0

code auto:2238 if not-equal[Integer] -128[Integer], -128[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2239 if not-equal[Integer] -128[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2240 if not-equal[Integer] -128[Integer], -128[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2241 if not-equal[compile-time] -128[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2242 if not-equal[Integer] -128[Integer], -1[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2243 if not-equal[Integer] -128[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2244 if not-equal[Integer] -128[Integer], -1[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2245 if not-equal[compile-time] -128[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2246 if not-equal[Integer] -128[Integer], -1[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2247 if not-equal[Integer] -128[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2248 if not-equal[Integer] -128[Integer], -1[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2249 if not-equal[compile-time] -128[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2250 if not-equal[Integer] -128[Integer], 0[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2251 if not-equal[Integer] -128[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2252 if not-equal[Integer] -128[Integer], 0[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2253 if not-equal[compile-time] -128[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2254 if not-equal[Integer] -128[Integer], 0[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2255 if not-equal[Integer] -128[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2256 if not-equal[Integer] -128[Integer], 0[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2257 if not-equal[compile-time] -128[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2258 if not-equal[Integer] -128[Integer], 1[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2259 if not-equal[Integer] -128[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2260 if not-equal[Integer] -128[Integer], 1[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2261 if not-equal[compile-time] -128[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2262 if not-equal[Integer] -128[Integer], 1[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2263 if not-equal[Integer] -128[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2264 if not-equal[Integer] -128[Integer], 1[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2265 if not-equal[compile-time] -128[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2266 if not-equal[Integer] -128[Integer], 127[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2267 if not-equal[Integer] -128[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2268 if not-equal[Integer] -128[Integer], 127[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2269 if not-equal[compile-time] -128[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2270 if not-equal[Integer] -128[Integer], 127[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2271 if not-equal[Integer] -128[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2272 if not-equal[Integer] -128[Integer], 127[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2273 if not-equal[compile-time] -128[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2274 if not-equal[Integer] -128[Integer], 128[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2275 if not-equal[Integer] -128[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2276 if not-equal[Integer] -128[Integer], 128[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2277 if not-equal[compile-time] -128[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2278 if not-equal[Integer] -128[Integer], 128[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2279 if not-equal[Integer] -128[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2280 if not-equal[Integer] -128[Integer], 128[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2281 if not-equal[compile-time] -128[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2282 if not-equal[Integer] -128[Integer], 32767[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2283 if not-equal[Integer] -128[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2284 if not-equal[Integer] -128[Integer], 32767[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2285 if not-equal[compile-time] -128[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2286 if not-equal[Integer] -128[Integer], 32767[Integer] Var
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2287 if not-equal[Integer] -128[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2288 if not-equal[Integer] -128[Integer], 32767[Integer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2289 if not-equal[compile-time] -128[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2290 if not-equal[Integer] -1[Integer], -32768[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2291 if not-equal[Integer] -1[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2292 if not-equal[Integer] -1[Integer], -32768[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2293 if not-equal[compile-time] -1[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2294 if not-equal[Integer] -1[Integer], -32768[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2295 if not-equal[Integer] -1[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2296 if not-equal[Integer] -1[Integer], -32768[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2297 if not-equal[compile-time] -1[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2298 if not-equal[Integer] -1[Integer], -32767[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2299 if not-equal[Integer] -1[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2300 if not-equal[Integer] -1[Integer], -32767[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2301 if not-equal[compile-time] -1[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2302 if not-equal[Integer] -1[Integer], -32767[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2303 if not-equal[Integer] -1[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2304 if not-equal[Integer] -1[Integer], -32767[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2305 if not-equal[compile-time] -1[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2306 if not-equal[Integer] -1[Integer], -129[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2307 if not-equal[Integer] -1[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2308 if not-equal[Integer] -1[Integer], -129[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2309 if not-equal[compile-time] -1[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2310 if not-equal[Integer] -1[Integer], -129[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2311 if not-equal[Integer] -1[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2312 if not-equal[Integer] -1[Integer], -129[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2313 if not-equal[compile-time] -1[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2314 if not-equal[Integer] -1[Integer], -128[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2315 if not-equal[Integer] -1[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2316 if not-equal[Integer] -1[Integer], -128[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2317 if not-equal[compile-time] -1[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2318 if not-equal[Integer] -1[Integer], -128[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2319 if not-equal[Integer] -1[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2320 if not-equal[Integer] -1[Integer], -128[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2321 if not-equal[compile-time] -1[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2322 if not-equal[Integer] -1[Integer], -1[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2323 if not-equal[Integer] -1[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2324 if not-equal[Integer] -1[Integer], -1[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:2325 if not-equal[compile-time] -1[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1;
endcode
varvalue r 0

code auto:2326 if not-equal[Integer] -1[Integer], -1[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2327 if not-equal[Integer] -1[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2328 if not-equal[Integer] -1[Integer], -1[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2329 if not-equal[compile-time] -1[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2330 if not-equal[Integer] -1[Integer], 0[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2331 if not-equal[Integer] -1[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2332 if not-equal[Integer] -1[Integer], 0[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2333 if not-equal[compile-time] -1[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2334 if not-equal[Integer] -1[Integer], 0[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2335 if not-equal[Integer] -1[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2336 if not-equal[Integer] -1[Integer], 0[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2337 if not-equal[compile-time] -1[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2338 if not-equal[Integer] -1[Integer], 1[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2339 if not-equal[Integer] -1[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2340 if not-equal[Integer] -1[Integer], 1[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2341 if not-equal[compile-time] -1[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2342 if not-equal[Integer] -1[Integer], 1[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2343 if not-equal[Integer] -1[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2344 if not-equal[Integer] -1[Integer], 1[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2345 if not-equal[compile-time] -1[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2346 if not-equal[Integer] -1[Integer], 127[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2347 if not-equal[Integer] -1[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2348 if not-equal[Integer] -1[Integer], 127[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2349 if not-equal[compile-time] -1[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2350 if not-equal[Integer] -1[Integer], 127[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2351 if not-equal[Integer] -1[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2352 if not-equal[Integer] -1[Integer], 127[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2353 if not-equal[compile-time] -1[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2354 if not-equal[Integer] -1[Integer], 128[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2355 if not-equal[Integer] -1[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2356 if not-equal[Integer] -1[Integer], 128[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2357 if not-equal[compile-time] -1[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2358 if not-equal[Integer] -1[Integer], 128[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2359 if not-equal[Integer] -1[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2360 if not-equal[Integer] -1[Integer], 128[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2361 if not-equal[compile-time] -1[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2362 if not-equal[Integer] -1[Integer], 32767[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2363 if not-equal[Integer] -1[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2364 if not-equal[Integer] -1[Integer], 32767[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2365 if not-equal[compile-time] -1[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2366 if not-equal[Integer] -1[Integer], 32767[Integer] Var
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2367 if not-equal[Integer] -1[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2368 if not-equal[Integer] -1[Integer], 32767[Integer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2369 if not-equal[compile-time] -1[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2370 if not-equal[Integer] 0[Integer], -32768[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2371 if not-equal[Integer] 0[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2372 if not-equal[Integer] 0[Integer], -32768[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2373 if not-equal[compile-time] 0[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2374 if not-equal[Integer] 0[Integer], -32768[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2375 if not-equal[Integer] 0[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2376 if not-equal[Integer] 0[Integer], -32768[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2377 if not-equal[compile-time] 0[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2378 if not-equal[Integer] 0[Integer], -32767[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2379 if not-equal[Integer] 0[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2380 if not-equal[Integer] 0[Integer], -32767[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2381 if not-equal[compile-time] 0[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2382 if not-equal[Integer] 0[Integer], -32767[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2383 if not-equal[Integer] 0[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2384 if not-equal[Integer] 0[Integer], -32767[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2385 if not-equal[compile-time] 0[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2386 if not-equal[Integer] 0[Integer], -129[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2387 if not-equal[Integer] 0[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2388 if not-equal[Integer] 0[Integer], -129[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2389 if not-equal[compile-time] 0[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2390 if not-equal[Integer] 0[Integer], -129[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2391 if not-equal[Integer] 0[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2392 if not-equal[Integer] 0[Integer], -129[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2393 if not-equal[compile-time] 0[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2394 if not-equal[Integer] 0[Integer], -128[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2395 if not-equal[Integer] 0[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2396 if not-equal[Integer] 0[Integer], -128[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2397 if not-equal[compile-time] 0[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2398 if not-equal[Integer] 0[Integer], -128[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2399 if not-equal[Integer] 0[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2400 if not-equal[Integer] 0[Integer], -128[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2401 if not-equal[compile-time] 0[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2402 if not-equal[Integer] 0[Integer], -1[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2403 if not-equal[Integer] 0[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2404 if not-equal[Integer] 0[Integer], -1[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2405 if not-equal[compile-time] 0[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2406 if not-equal[Integer] 0[Integer], -1[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2407 if not-equal[Integer] 0[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2408 if not-equal[Integer] 0[Integer], -1[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2409 if not-equal[compile-time] 0[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2410 if not-equal[Integer] 0[Integer], 0[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2411 if not-equal[Integer] 0[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2412 if not-equal[Integer] 0[Integer], 0[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:2413 if not-equal[compile-time] 0[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:2414 if not-equal[Integer] 0[Integer], 0[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2415 if not-equal[Integer] 0[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2416 if not-equal[Integer] 0[Integer], 0[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2417 if not-equal[compile-time] 0[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2418 if not-equal[Integer] 0[Integer], 1[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2419 if not-equal[Integer] 0[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2420 if not-equal[Integer] 0[Integer], 1[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2421 if not-equal[compile-time] 0[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2422 if not-equal[Integer] 0[Integer], 1[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2423 if not-equal[Integer] 0[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2424 if not-equal[Integer] 0[Integer], 1[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2425 if not-equal[compile-time] 0[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2426 if not-equal[Integer] 0[Integer], 127[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2427 if not-equal[Integer] 0[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2428 if not-equal[Integer] 0[Integer], 127[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2429 if not-equal[compile-time] 0[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2430 if not-equal[Integer] 0[Integer], 127[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2431 if not-equal[Integer] 0[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2432 if not-equal[Integer] 0[Integer], 127[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2433 if not-equal[compile-time] 0[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2434 if not-equal[Integer] 0[Integer], 128[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2435 if not-equal[Integer] 0[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2436 if not-equal[Integer] 0[Integer], 128[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2437 if not-equal[compile-time] 0[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2438 if not-equal[Integer] 0[Integer], 128[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2439 if not-equal[Integer] 0[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2440 if not-equal[Integer] 0[Integer], 128[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2441 if not-equal[compile-time] 0[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2442 if not-equal[Integer] 0[Integer], 32767[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2443 if not-equal[Integer] 0[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2444 if not-equal[Integer] 0[Integer], 32767[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2445 if not-equal[compile-time] 0[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2446 if not-equal[Integer] 0[Integer], 32767[Integer] Var
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2447 if not-equal[Integer] 0[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2448 if not-equal[Integer] 0[Integer], 32767[Integer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2449 if not-equal[compile-time] 0[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2450 if not-equal[Integer] 1[Integer], -32768[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2451 if not-equal[Integer] 1[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2452 if not-equal[Integer] 1[Integer], -32768[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2453 if not-equal[compile-time] 1[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2454 if not-equal[Integer] 1[Integer], -32768[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2455 if not-equal[Integer] 1[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2456 if not-equal[Integer] 1[Integer], -32768[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2457 if not-equal[compile-time] 1[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2458 if not-equal[Integer] 1[Integer], -32767[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2459 if not-equal[Integer] 1[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2460 if not-equal[Integer] 1[Integer], -32767[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2461 if not-equal[compile-time] 1[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2462 if not-equal[Integer] 1[Integer], -32767[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2463 if not-equal[Integer] 1[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2464 if not-equal[Integer] 1[Integer], -32767[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2465 if not-equal[compile-time] 1[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2466 if not-equal[Integer] 1[Integer], -129[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2467 if not-equal[Integer] 1[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2468 if not-equal[Integer] 1[Integer], -129[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2469 if not-equal[compile-time] 1[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2470 if not-equal[Integer] 1[Integer], -129[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2471 if not-equal[Integer] 1[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2472 if not-equal[Integer] 1[Integer], -129[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2473 if not-equal[compile-time] 1[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2474 if not-equal[Integer] 1[Integer], -128[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2475 if not-equal[Integer] 1[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2476 if not-equal[Integer] 1[Integer], -128[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2477 if not-equal[compile-time] 1[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2478 if not-equal[Integer] 1[Integer], -128[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2479 if not-equal[Integer] 1[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2480 if not-equal[Integer] 1[Integer], -128[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2481 if not-equal[compile-time] 1[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2482 if not-equal[Integer] 1[Integer], -1[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2483 if not-equal[Integer] 1[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2484 if not-equal[Integer] 1[Integer], -1[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2485 if not-equal[compile-time] 1[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2486 if not-equal[Integer] 1[Integer], -1[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2487 if not-equal[Integer] 1[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2488 if not-equal[Integer] 1[Integer], -1[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2489 if not-equal[compile-time] 1[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2490 if not-equal[Integer] 1[Integer], 0[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2491 if not-equal[Integer] 1[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2492 if not-equal[Integer] 1[Integer], 0[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2493 if not-equal[compile-time] 1[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2494 if not-equal[Integer] 1[Integer], 0[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2495 if not-equal[Integer] 1[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2496 if not-equal[Integer] 1[Integer], 0[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2497 if not-equal[compile-time] 1[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2498 if not-equal[Integer] 1[Integer], 1[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2499 if not-equal[Integer] 1[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2500 if not-equal[Integer] 1[Integer], 1[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:2501 if not-equal[compile-time] 1[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:2502 if not-equal[Integer] 1[Integer], 1[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2503 if not-equal[Integer] 1[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2504 if not-equal[Integer] 1[Integer], 1[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2505 if not-equal[compile-time] 1[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2506 if not-equal[Integer] 1[Integer], 127[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2507 if not-equal[Integer] 1[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2508 if not-equal[Integer] 1[Integer], 127[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2509 if not-equal[compile-time] 1[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2510 if not-equal[Integer] 1[Integer], 127[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2511 if not-equal[Integer] 1[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2512 if not-equal[Integer] 1[Integer], 127[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2513 if not-equal[compile-time] 1[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2514 if not-equal[Integer] 1[Integer], 128[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2515 if not-equal[Integer] 1[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2516 if not-equal[Integer] 1[Integer], 128[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2517 if not-equal[compile-time] 1[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2518 if not-equal[Integer] 1[Integer], 128[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2519 if not-equal[Integer] 1[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2520 if not-equal[Integer] 1[Integer], 128[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2521 if not-equal[compile-time] 1[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2522 if not-equal[Integer] 1[Integer], 32767[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2523 if not-equal[Integer] 1[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2524 if not-equal[Integer] 1[Integer], 32767[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2525 if not-equal[compile-time] 1[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2526 if not-equal[Integer] 1[Integer], 32767[Integer] Var
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2527 if not-equal[Integer] 1[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2528 if not-equal[Integer] 1[Integer], 32767[Integer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2529 if not-equal[compile-time] 1[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2530 if not-equal[Integer] 127[Integer], -32768[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2531 if not-equal[Integer] 127[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2532 if not-equal[Integer] 127[Integer], -32768[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2533 if not-equal[compile-time] 127[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2534 if not-equal[Integer] 127[Integer], -32768[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2535 if not-equal[Integer] 127[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2536 if not-equal[Integer] 127[Integer], -32768[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2537 if not-equal[compile-time] 127[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2538 if not-equal[Integer] 127[Integer], -32767[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2539 if not-equal[Integer] 127[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2540 if not-equal[Integer] 127[Integer], -32767[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2541 if not-equal[compile-time] 127[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2542 if not-equal[Integer] 127[Integer], -32767[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2543 if not-equal[Integer] 127[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2544 if not-equal[Integer] 127[Integer], -32767[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2545 if not-equal[compile-time] 127[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2546 if not-equal[Integer] 127[Integer], -129[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2547 if not-equal[Integer] 127[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2548 if not-equal[Integer] 127[Integer], -129[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2549 if not-equal[compile-time] 127[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2550 if not-equal[Integer] 127[Integer], -129[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2551 if not-equal[Integer] 127[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2552 if not-equal[Integer] 127[Integer], -129[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2553 if not-equal[compile-time] 127[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2554 if not-equal[Integer] 127[Integer], -128[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2555 if not-equal[Integer] 127[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2556 if not-equal[Integer] 127[Integer], -128[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2557 if not-equal[compile-time] 127[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2558 if not-equal[Integer] 127[Integer], -128[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2559 if not-equal[Integer] 127[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2560 if not-equal[Integer] 127[Integer], -128[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2561 if not-equal[compile-time] 127[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2562 if not-equal[Integer] 127[Integer], -1[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2563 if not-equal[Integer] 127[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2564 if not-equal[Integer] 127[Integer], -1[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2565 if not-equal[compile-time] 127[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2566 if not-equal[Integer] 127[Integer], -1[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2567 if not-equal[Integer] 127[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2568 if not-equal[Integer] 127[Integer], -1[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2569 if not-equal[compile-time] 127[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2570 if not-equal[Integer] 127[Integer], 0[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2571 if not-equal[Integer] 127[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2572 if not-equal[Integer] 127[Integer], 0[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2573 if not-equal[compile-time] 127[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2574 if not-equal[Integer] 127[Integer], 0[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2575 if not-equal[Integer] 127[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2576 if not-equal[Integer] 127[Integer], 0[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2577 if not-equal[compile-time] 127[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2578 if not-equal[Integer] 127[Integer], 1[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2579 if not-equal[Integer] 127[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2580 if not-equal[Integer] 127[Integer], 1[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2581 if not-equal[compile-time] 127[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2582 if not-equal[Integer] 127[Integer], 1[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2583 if not-equal[Integer] 127[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2584 if not-equal[Integer] 127[Integer], 1[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2585 if not-equal[compile-time] 127[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2586 if not-equal[Integer] 127[Integer], 127[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2587 if not-equal[Integer] 127[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2588 if not-equal[Integer] 127[Integer], 127[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:2589 if not-equal[compile-time] 127[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:2590 if not-equal[Integer] 127[Integer], 127[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2591 if not-equal[Integer] 127[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2592 if not-equal[Integer] 127[Integer], 127[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2593 if not-equal[compile-time] 127[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2594 if not-equal[Integer] 127[Integer], 128[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2595 if not-equal[Integer] 127[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2596 if not-equal[Integer] 127[Integer], 128[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2597 if not-equal[compile-time] 127[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2598 if not-equal[Integer] 127[Integer], 128[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2599 if not-equal[Integer] 127[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2600 if not-equal[Integer] 127[Integer], 128[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2601 if not-equal[compile-time] 127[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2602 if not-equal[Integer] 127[Integer], 32767[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2603 if not-equal[Integer] 127[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2604 if not-equal[Integer] 127[Integer], 32767[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2605 if not-equal[compile-time] 127[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2606 if not-equal[Integer] 127[Integer], 32767[Integer] Var
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2607 if not-equal[Integer] 127[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2608 if not-equal[Integer] 127[Integer], 32767[Integer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2609 if not-equal[compile-time] 127[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2610 if not-equal[Integer] 128[Integer], -32768[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2611 if not-equal[Integer] 128[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2612 if not-equal[Integer] 128[Integer], -32768[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2613 if not-equal[compile-time] 128[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2614 if not-equal[Integer] 128[Integer], -32768[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2615 if not-equal[Integer] 128[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2616 if not-equal[Integer] 128[Integer], -32768[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2617 if not-equal[compile-time] 128[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2618 if not-equal[Integer] 128[Integer], -32767[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2619 if not-equal[Integer] 128[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2620 if not-equal[Integer] 128[Integer], -32767[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2621 if not-equal[compile-time] 128[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2622 if not-equal[Integer] 128[Integer], -32767[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2623 if not-equal[Integer] 128[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2624 if not-equal[Integer] 128[Integer], -32767[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2625 if not-equal[compile-time] 128[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2626 if not-equal[Integer] 128[Integer], -129[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2627 if not-equal[Integer] 128[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2628 if not-equal[Integer] 128[Integer], -129[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2629 if not-equal[compile-time] 128[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2630 if not-equal[Integer] 128[Integer], -129[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2631 if not-equal[Integer] 128[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2632 if not-equal[Integer] 128[Integer], -129[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2633 if not-equal[compile-time] 128[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2634 if not-equal[Integer] 128[Integer], -128[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2635 if not-equal[Integer] 128[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2636 if not-equal[Integer] 128[Integer], -128[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2637 if not-equal[compile-time] 128[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2638 if not-equal[Integer] 128[Integer], -128[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2639 if not-equal[Integer] 128[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2640 if not-equal[Integer] 128[Integer], -128[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2641 if not-equal[compile-time] 128[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2642 if not-equal[Integer] 128[Integer], -1[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2643 if not-equal[Integer] 128[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2644 if not-equal[Integer] 128[Integer], -1[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2645 if not-equal[compile-time] 128[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2646 if not-equal[Integer] 128[Integer], -1[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2647 if not-equal[Integer] 128[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2648 if not-equal[Integer] 128[Integer], -1[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2649 if not-equal[compile-time] 128[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2650 if not-equal[Integer] 128[Integer], 0[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2651 if not-equal[Integer] 128[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2652 if not-equal[Integer] 128[Integer], 0[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2653 if not-equal[compile-time] 128[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2654 if not-equal[Integer] 128[Integer], 0[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2655 if not-equal[Integer] 128[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2656 if not-equal[Integer] 128[Integer], 0[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2657 if not-equal[compile-time] 128[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2658 if not-equal[Integer] 128[Integer], 1[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2659 if not-equal[Integer] 128[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2660 if not-equal[Integer] 128[Integer], 1[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2661 if not-equal[compile-time] 128[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2662 if not-equal[Integer] 128[Integer], 1[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2663 if not-equal[Integer] 128[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2664 if not-equal[Integer] 128[Integer], 1[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2665 if not-equal[compile-time] 128[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2666 if not-equal[Integer] 128[Integer], 127[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2667 if not-equal[Integer] 128[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2668 if not-equal[Integer] 128[Integer], 127[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2669 if not-equal[compile-time] 128[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2670 if not-equal[Integer] 128[Integer], 127[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2671 if not-equal[Integer] 128[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2672 if not-equal[Integer] 128[Integer], 127[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2673 if not-equal[compile-time] 128[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2674 if not-equal[Integer] 128[Integer], 128[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2675 if not-equal[Integer] 128[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2676 if not-equal[Integer] 128[Integer], 128[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:2677 if not-equal[compile-time] 128[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:2678 if not-equal[Integer] 128[Integer], 128[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2679 if not-equal[Integer] 128[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2680 if not-equal[Integer] 128[Integer], 128[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2681 if not-equal[compile-time] 128[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2682 if not-equal[Integer] 128[Integer], 32767[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2683 if not-equal[Integer] 128[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2684 if not-equal[Integer] 128[Integer], 32767[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2685 if not-equal[compile-time] 128[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:2686 if not-equal[Integer] 128[Integer], 32767[Integer] Var
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2687 if not-equal[Integer] 128[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2688 if not-equal[Integer] 128[Integer], 32767[Integer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2689 if not-equal[compile-time] 128[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2690 if not-equal[Integer] 32767[Integer], -32768[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2691 if not-equal[Integer] 32767[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2692 if not-equal[Integer] 32767[Integer], -32768[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2693 if not-equal[compile-time] 32767[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:2694 if not-equal[Integer] 32767[Integer], -32768[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2695 if not-equal[Integer] 32767[Integer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2696 if not-equal[Integer] 32767[Integer], -32768[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2697 if not-equal[compile-time] 32767[Integer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2698 if not-equal[Integer] 32767[Integer], -32767[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2699 if not-equal[Integer] 32767[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2700 if not-equal[Integer] 32767[Integer], -32767[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2701 if not-equal[compile-time] 32767[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:2702 if not-equal[Integer] 32767[Integer], -32767[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2703 if not-equal[Integer] 32767[Integer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2704 if not-equal[Integer] 32767[Integer], -32767[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2705 if not-equal[compile-time] 32767[Integer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2706 if not-equal[Integer] 32767[Integer], -129[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2707 if not-equal[Integer] 32767[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2708 if not-equal[Integer] 32767[Integer], -129[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2709 if not-equal[compile-time] 32767[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:2710 if not-equal[Integer] 32767[Integer], -129[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2711 if not-equal[Integer] 32767[Integer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2712 if not-equal[Integer] 32767[Integer], -129[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2713 if not-equal[compile-time] 32767[Integer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2714 if not-equal[Integer] 32767[Integer], -128[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2715 if not-equal[Integer] 32767[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2716 if not-equal[Integer] 32767[Integer], -128[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2717 if not-equal[compile-time] 32767[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:2718 if not-equal[Integer] 32767[Integer], -128[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2719 if not-equal[Integer] 32767[Integer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2720 if not-equal[Integer] 32767[Integer], -128[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2721 if not-equal[compile-time] 32767[Integer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2722 if not-equal[Integer] 32767[Integer], -1[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2723 if not-equal[Integer] 32767[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2724 if not-equal[Integer] 32767[Integer], -1[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2725 if not-equal[compile-time] 32767[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:2726 if not-equal[Integer] 32767[Integer], -1[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2727 if not-equal[Integer] 32767[Integer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2728 if not-equal[Integer] 32767[Integer], -1[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2729 if not-equal[compile-time] 32767[Integer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2730 if not-equal[Integer] 32767[Integer], 0[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2731 if not-equal[Integer] 32767[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2732 if not-equal[Integer] 32767[Integer], 0[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2733 if not-equal[compile-time] 32767[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2734 if not-equal[Integer] 32767[Integer], 0[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2735 if not-equal[Integer] 32767[Integer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2736 if not-equal[Integer] 32767[Integer], 0[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2737 if not-equal[compile-time] 32767[Integer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2738 if not-equal[Integer] 32767[Integer], 1[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2739 if not-equal[Integer] 32767[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2740 if not-equal[Integer] 32767[Integer], 1[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2741 if not-equal[compile-time] 32767[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2742 if not-equal[Integer] 32767[Integer], 1[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2743 if not-equal[Integer] 32767[Integer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2744 if not-equal[Integer] 32767[Integer], 1[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2745 if not-equal[compile-time] 32767[Integer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2746 if not-equal[Integer] 32767[Integer], 127[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2747 if not-equal[Integer] 32767[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2748 if not-equal[Integer] 32767[Integer], 127[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2749 if not-equal[compile-time] 32767[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2750 if not-equal[Integer] 32767[Integer], 127[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2751 if not-equal[Integer] 32767[Integer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2752 if not-equal[Integer] 32767[Integer], 127[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2753 if not-equal[compile-time] 32767[Integer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2754 if not-equal[Integer] 32767[Integer], 128[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2755 if not-equal[Integer] 32767[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2756 if not-equal[Integer] 32767[Integer], 128[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2757 if not-equal[compile-time] 32767[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2758 if not-equal[Integer] 32767[Integer], 128[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2759 if not-equal[Integer] 32767[Integer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2760 if not-equal[Integer] 32767[Integer], 128[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2761 if not-equal[compile-time] 32767[Integer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2762 if not-equal[Integer] 32767[Integer], 32767[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2763 if not-equal[Integer] 32767[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2764 if not-equal[Integer] 32767[Integer], 32767[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:2765 if not-equal[compile-time] 32767[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:2766 if not-equal[Integer] 32767[Integer], 32767[Integer] Var
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2767 if not-equal[Integer] 32767[Integer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2768 if not-equal[Integer] 32767[Integer], 32767[Integer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2769 if not-equal[compile-time] 32767[Integer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2770 if not-equal[Integer] -32768[Integer], 0[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2771 if not-equal[Integer] -32768[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2772 if not-equal[Integer] -32768[Integer], 0[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2773 if not-equal[compile-time] -32768[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2774 if not-equal[Integer] -32768[Integer], 0[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2775 if not-equal[Integer] -32768[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2776 if not-equal[Integer] -32768[Integer], 0[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2777 if not-equal[compile-time] -32768[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2778 if not-equal[Integer] -32768[Integer], 1[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2779 if not-equal[Integer] -32768[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2780 if not-equal[Integer] -32768[Integer], 1[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2781 if not-equal[compile-time] -32768[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2782 if not-equal[Integer] -32768[Integer], 1[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2783 if not-equal[Integer] -32768[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2784 if not-equal[Integer] -32768[Integer], 1[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2785 if not-equal[compile-time] -32768[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2786 if not-equal[Integer] -32768[Integer], 127[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2787 if not-equal[Integer] -32768[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2788 if not-equal[Integer] -32768[Integer], 127[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2789 if not-equal[compile-time] -32768[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2790 if not-equal[Integer] -32768[Integer], 127[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2791 if not-equal[Integer] -32768[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2792 if not-equal[Integer] -32768[Integer], 127[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2793 if not-equal[compile-time] -32768[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2794 if not-equal[Integer] -32768[Integer], 128[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2795 if not-equal[Integer] -32768[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2796 if not-equal[Integer] -32768[Integer], 128[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2797 if not-equal[compile-time] -32768[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2798 if not-equal[Integer] -32768[Integer], 128[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2799 if not-equal[Integer] -32768[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2800 if not-equal[Integer] -32768[Integer], 128[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2801 if not-equal[compile-time] -32768[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2802 if not-equal[Integer] -32768[Integer], 255[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2803 if not-equal[Integer] -32768[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2804 if not-equal[Integer] -32768[Integer], 255[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2805 if not-equal[compile-time] -32768[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2806 if not-equal[Integer] -32768[Integer], 255[Byte] Var
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2807 if not-equal[Integer] -32768[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2808 if not-equal[Integer] -32768[Integer], 255[Byte] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2809 if not-equal[compile-time] -32768[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2810 if not-equal[Integer] -32767[Integer], 0[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2811 if not-equal[Integer] -32767[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2812 if not-equal[Integer] -32767[Integer], 0[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2813 if not-equal[compile-time] -32767[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2814 if not-equal[Integer] -32767[Integer], 0[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2815 if not-equal[Integer] -32767[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2816 if not-equal[Integer] -32767[Integer], 0[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2817 if not-equal[compile-time] -32767[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2818 if not-equal[Integer] -32767[Integer], 1[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2819 if not-equal[Integer] -32767[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2820 if not-equal[Integer] -32767[Integer], 1[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2821 if not-equal[compile-time] -32767[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2822 if not-equal[Integer] -32767[Integer], 1[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2823 if not-equal[Integer] -32767[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2824 if not-equal[Integer] -32767[Integer], 1[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2825 if not-equal[compile-time] -32767[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2826 if not-equal[Integer] -32767[Integer], 127[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2827 if not-equal[Integer] -32767[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2828 if not-equal[Integer] -32767[Integer], 127[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2829 if not-equal[compile-time] -32767[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2830 if not-equal[Integer] -32767[Integer], 127[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2831 if not-equal[Integer] -32767[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2832 if not-equal[Integer] -32767[Integer], 127[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2833 if not-equal[compile-time] -32767[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2834 if not-equal[Integer] -32767[Integer], 128[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2835 if not-equal[Integer] -32767[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2836 if not-equal[Integer] -32767[Integer], 128[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2837 if not-equal[compile-time] -32767[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2838 if not-equal[Integer] -32767[Integer], 128[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2839 if not-equal[Integer] -32767[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2840 if not-equal[Integer] -32767[Integer], 128[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2841 if not-equal[compile-time] -32767[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2842 if not-equal[Integer] -32767[Integer], 255[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2843 if not-equal[Integer] -32767[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2844 if not-equal[Integer] -32767[Integer], 255[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2845 if not-equal[compile-time] -32767[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2846 if not-equal[Integer] -32767[Integer], 255[Byte] Var
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2847 if not-equal[Integer] -32767[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2848 if not-equal[Integer] -32767[Integer], 255[Byte] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2849 if not-equal[compile-time] -32767[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2850 if not-equal[Integer] -129[Integer], 0[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2851 if not-equal[Integer] -129[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2852 if not-equal[Integer] -129[Integer], 0[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2853 if not-equal[compile-time] -129[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2854 if not-equal[Integer] -129[Integer], 0[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2855 if not-equal[Integer] -129[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2856 if not-equal[Integer] -129[Integer], 0[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2857 if not-equal[compile-time] -129[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2858 if not-equal[Integer] -129[Integer], 1[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2859 if not-equal[Integer] -129[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2860 if not-equal[Integer] -129[Integer], 1[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2861 if not-equal[compile-time] -129[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2862 if not-equal[Integer] -129[Integer], 1[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2863 if not-equal[Integer] -129[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2864 if not-equal[Integer] -129[Integer], 1[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2865 if not-equal[compile-time] -129[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2866 if not-equal[Integer] -129[Integer], 127[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2867 if not-equal[Integer] -129[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2868 if not-equal[Integer] -129[Integer], 127[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2869 if not-equal[compile-time] -129[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2870 if not-equal[Integer] -129[Integer], 127[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2871 if not-equal[Integer] -129[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2872 if not-equal[Integer] -129[Integer], 127[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2873 if not-equal[compile-time] -129[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2874 if not-equal[Integer] -129[Integer], 128[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2875 if not-equal[Integer] -129[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2876 if not-equal[Integer] -129[Integer], 128[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2877 if not-equal[compile-time] -129[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2878 if not-equal[Integer] -129[Integer], 128[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2879 if not-equal[Integer] -129[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2880 if not-equal[Integer] -129[Integer], 128[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2881 if not-equal[compile-time] -129[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2882 if not-equal[Integer] -129[Integer], 255[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2883 if not-equal[Integer] -129[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2884 if not-equal[Integer] -129[Integer], 255[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2885 if not-equal[compile-time] -129[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2886 if not-equal[Integer] -129[Integer], 255[Byte] Var
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2887 if not-equal[Integer] -129[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2888 if not-equal[Integer] -129[Integer], 255[Byte] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2889 if not-equal[compile-time] -129[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2890 if not-equal[Integer] -128[Integer], 0[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2891 if not-equal[Integer] -128[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2892 if not-equal[Integer] -128[Integer], 0[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2893 if not-equal[compile-time] -128[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2894 if not-equal[Integer] -128[Integer], 0[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2895 if not-equal[Integer] -128[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2896 if not-equal[Integer] -128[Integer], 0[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2897 if not-equal[compile-time] -128[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2898 if not-equal[Integer] -128[Integer], 1[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2899 if not-equal[Integer] -128[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2900 if not-equal[Integer] -128[Integer], 1[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2901 if not-equal[compile-time] -128[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2902 if not-equal[Integer] -128[Integer], 1[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2903 if not-equal[Integer] -128[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2904 if not-equal[Integer] -128[Integer], 1[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2905 if not-equal[compile-time] -128[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2906 if not-equal[Integer] -128[Integer], 127[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2907 if not-equal[Integer] -128[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2908 if not-equal[Integer] -128[Integer], 127[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2909 if not-equal[compile-time] -128[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2910 if not-equal[Integer] -128[Integer], 127[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2911 if not-equal[Integer] -128[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2912 if not-equal[Integer] -128[Integer], 127[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2913 if not-equal[compile-time] -128[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2914 if not-equal[Integer] -128[Integer], 128[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2915 if not-equal[Integer] -128[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2916 if not-equal[Integer] -128[Integer], 128[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2917 if not-equal[compile-time] -128[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2918 if not-equal[Integer] -128[Integer], 128[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2919 if not-equal[Integer] -128[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2920 if not-equal[Integer] -128[Integer], 128[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2921 if not-equal[compile-time] -128[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2922 if not-equal[Integer] -128[Integer], 255[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2923 if not-equal[Integer] -128[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2924 if not-equal[Integer] -128[Integer], 255[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2925 if not-equal[compile-time] -128[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2926 if not-equal[Integer] -128[Integer], 255[Byte] Var
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2927 if not-equal[Integer] -128[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2928 if not-equal[Integer] -128[Integer], 255[Byte] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2929 if not-equal[compile-time] -128[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2930 if not-equal[Integer] -1[Integer], 0[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2931 if not-equal[Integer] -1[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2932 if not-equal[Integer] -1[Integer], 0[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2933 if not-equal[compile-time] -1[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:2934 if not-equal[Integer] -1[Integer], 0[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2935 if not-equal[Integer] -1[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2936 if not-equal[Integer] -1[Integer], 0[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2937 if not-equal[compile-time] -1[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2938 if not-equal[Integer] -1[Integer], 1[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2939 if not-equal[Integer] -1[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2940 if not-equal[Integer] -1[Integer], 1[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2941 if not-equal[compile-time] -1[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2942 if not-equal[Integer] -1[Integer], 1[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2943 if not-equal[Integer] -1[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2944 if not-equal[Integer] -1[Integer], 1[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2945 if not-equal[compile-time] -1[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2946 if not-equal[Integer] -1[Integer], 127[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2947 if not-equal[Integer] -1[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2948 if not-equal[Integer] -1[Integer], 127[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2949 if not-equal[compile-time] -1[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2950 if not-equal[Integer] -1[Integer], 127[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2951 if not-equal[Integer] -1[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2952 if not-equal[Integer] -1[Integer], 127[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2953 if not-equal[compile-time] -1[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2954 if not-equal[Integer] -1[Integer], 128[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2955 if not-equal[Integer] -1[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2956 if not-equal[Integer] -1[Integer], 128[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2957 if not-equal[compile-time] -1[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2958 if not-equal[Integer] -1[Integer], 128[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2959 if not-equal[Integer] -1[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2960 if not-equal[Integer] -1[Integer], 128[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2961 if not-equal[compile-time] -1[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2962 if not-equal[Integer] -1[Integer], 255[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2963 if not-equal[Integer] -1[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2964 if not-equal[Integer] -1[Integer], 255[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2965 if not-equal[compile-time] -1[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:2966 if not-equal[Integer] -1[Integer], 255[Byte] Var
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2967 if not-equal[Integer] -1[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2968 if not-equal[Integer] -1[Integer], 255[Byte] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2969 if not-equal[compile-time] -1[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2970 if not-equal[Integer] 0[Integer], 0[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:2971 if not-equal[Integer] 0[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:2972 if not-equal[Integer] 0[Integer], 0[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:2973 if not-equal[compile-time] 0[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:2974 if not-equal[Integer] 0[Integer], 0[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2975 if not-equal[Integer] 0[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2976 if not-equal[Integer] 0[Integer], 0[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2977 if not-equal[compile-time] 0[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:2978 if not-equal[Integer] 0[Integer], 1[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2979 if not-equal[Integer] 0[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2980 if not-equal[Integer] 0[Integer], 1[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2981 if not-equal[compile-time] 0[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:2982 if not-equal[Integer] 0[Integer], 1[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2983 if not-equal[Integer] 0[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2984 if not-equal[Integer] 0[Integer], 1[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2985 if not-equal[compile-time] 0[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2986 if not-equal[Integer] 0[Integer], 127[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2987 if not-equal[Integer] 0[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2988 if not-equal[Integer] 0[Integer], 127[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2989 if not-equal[compile-time] 0[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:2990 if not-equal[Integer] 0[Integer], 127[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2991 if not-equal[Integer] 0[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2992 if not-equal[Integer] 0[Integer], 127[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2993 if not-equal[compile-time] 0[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2994 if not-equal[Integer] 0[Integer], 128[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:2995 if not-equal[Integer] 0[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:2996 if not-equal[Integer] 0[Integer], 128[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2997 if not-equal[compile-time] 0[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:2998 if not-equal[Integer] 0[Integer], 128[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:2999 if not-equal[Integer] 0[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3000 if not-equal[Integer] 0[Integer], 128[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3001 if not-equal[compile-time] 0[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3002 if not-equal[Integer] 0[Integer], 255[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3003 if not-equal[Integer] 0[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3004 if not-equal[Integer] 0[Integer], 255[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3005 if not-equal[compile-time] 0[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3006 if not-equal[Integer] 0[Integer], 255[Byte] Var
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3007 if not-equal[Integer] 0[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3008 if not-equal[Integer] 0[Integer], 255[Byte] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3009 if not-equal[compile-time] 0[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3010 if not-equal[Integer] 1[Integer], 0[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3011 if not-equal[Integer] 1[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3012 if not-equal[Integer] 1[Integer], 0[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3013 if not-equal[compile-time] 1[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3014 if not-equal[Integer] 1[Integer], 0[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3015 if not-equal[Integer] 1[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3016 if not-equal[Integer] 1[Integer], 0[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3017 if not-equal[compile-time] 1[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3018 if not-equal[Integer] 1[Integer], 1[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3019 if not-equal[Integer] 1[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3020 if not-equal[Integer] 1[Integer], 1[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:3021 if not-equal[compile-time] 1[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:3022 if not-equal[Integer] 1[Integer], 1[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3023 if not-equal[Integer] 1[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3024 if not-equal[Integer] 1[Integer], 1[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3025 if not-equal[compile-time] 1[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3026 if not-equal[Integer] 1[Integer], 127[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3027 if not-equal[Integer] 1[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3028 if not-equal[Integer] 1[Integer], 127[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3029 if not-equal[compile-time] 1[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3030 if not-equal[Integer] 1[Integer], 127[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3031 if not-equal[Integer] 1[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3032 if not-equal[Integer] 1[Integer], 127[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3033 if not-equal[compile-time] 1[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3034 if not-equal[Integer] 1[Integer], 128[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3035 if not-equal[Integer] 1[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3036 if not-equal[Integer] 1[Integer], 128[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3037 if not-equal[compile-time] 1[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3038 if not-equal[Integer] 1[Integer], 128[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3039 if not-equal[Integer] 1[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3040 if not-equal[Integer] 1[Integer], 128[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3041 if not-equal[compile-time] 1[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3042 if not-equal[Integer] 1[Integer], 255[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3043 if not-equal[Integer] 1[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3044 if not-equal[Integer] 1[Integer], 255[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3045 if not-equal[compile-time] 1[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3046 if not-equal[Integer] 1[Integer], 255[Byte] Var
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3047 if not-equal[Integer] 1[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3048 if not-equal[Integer] 1[Integer], 255[Byte] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3049 if not-equal[compile-time] 1[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3050 if not-equal[Integer] 127[Integer], 0[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3051 if not-equal[Integer] 127[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3052 if not-equal[Integer] 127[Integer], 0[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3053 if not-equal[compile-time] 127[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3054 if not-equal[Integer] 127[Integer], 0[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3055 if not-equal[Integer] 127[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3056 if not-equal[Integer] 127[Integer], 0[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3057 if not-equal[compile-time] 127[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3058 if not-equal[Integer] 127[Integer], 1[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3059 if not-equal[Integer] 127[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3060 if not-equal[Integer] 127[Integer], 1[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3061 if not-equal[compile-time] 127[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3062 if not-equal[Integer] 127[Integer], 1[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3063 if not-equal[Integer] 127[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3064 if not-equal[Integer] 127[Integer], 1[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3065 if not-equal[compile-time] 127[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3066 if not-equal[Integer] 127[Integer], 127[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3067 if not-equal[Integer] 127[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3068 if not-equal[Integer] 127[Integer], 127[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:3069 if not-equal[compile-time] 127[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:3070 if not-equal[Integer] 127[Integer], 127[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3071 if not-equal[Integer] 127[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3072 if not-equal[Integer] 127[Integer], 127[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3073 if not-equal[compile-time] 127[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3074 if not-equal[Integer] 127[Integer], 128[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3075 if not-equal[Integer] 127[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3076 if not-equal[Integer] 127[Integer], 128[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3077 if not-equal[compile-time] 127[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3078 if not-equal[Integer] 127[Integer], 128[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3079 if not-equal[Integer] 127[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3080 if not-equal[Integer] 127[Integer], 128[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3081 if not-equal[compile-time] 127[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3082 if not-equal[Integer] 127[Integer], 255[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3083 if not-equal[Integer] 127[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3084 if not-equal[Integer] 127[Integer], 255[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3085 if not-equal[compile-time] 127[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3086 if not-equal[Integer] 127[Integer], 255[Byte] Var
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3087 if not-equal[Integer] 127[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3088 if not-equal[Integer] 127[Integer], 255[Byte] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3089 if not-equal[compile-time] 127[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3090 if not-equal[Integer] 128[Integer], 0[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3091 if not-equal[Integer] 128[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3092 if not-equal[Integer] 128[Integer], 0[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3093 if not-equal[compile-time] 128[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3094 if not-equal[Integer] 128[Integer], 0[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3095 if not-equal[Integer] 128[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3096 if not-equal[Integer] 128[Integer], 0[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3097 if not-equal[compile-time] 128[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3098 if not-equal[Integer] 128[Integer], 1[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3099 if not-equal[Integer] 128[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3100 if not-equal[Integer] 128[Integer], 1[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3101 if not-equal[compile-time] 128[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3102 if not-equal[Integer] 128[Integer], 1[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3103 if not-equal[Integer] 128[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3104 if not-equal[Integer] 128[Integer], 1[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3105 if not-equal[compile-time] 128[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3106 if not-equal[Integer] 128[Integer], 127[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3107 if not-equal[Integer] 128[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3108 if not-equal[Integer] 128[Integer], 127[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3109 if not-equal[compile-time] 128[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3110 if not-equal[Integer] 128[Integer], 127[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3111 if not-equal[Integer] 128[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3112 if not-equal[Integer] 128[Integer], 127[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3113 if not-equal[compile-time] 128[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3114 if not-equal[Integer] 128[Integer], 128[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3115 if not-equal[Integer] 128[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3116 if not-equal[Integer] 128[Integer], 128[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:3117 if not-equal[compile-time] 128[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:3118 if not-equal[Integer] 128[Integer], 128[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3119 if not-equal[Integer] 128[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3120 if not-equal[Integer] 128[Integer], 128[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3121 if not-equal[compile-time] 128[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3122 if not-equal[Integer] 128[Integer], 255[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3123 if not-equal[Integer] 128[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3124 if not-equal[Integer] 128[Integer], 255[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3125 if not-equal[compile-time] 128[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3126 if not-equal[Integer] 128[Integer], 255[Byte] Var
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3127 if not-equal[Integer] 128[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3128 if not-equal[Integer] 128[Integer], 255[Byte] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3129 if not-equal[compile-time] 128[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3130 if not-equal[Integer] 32767[Integer], 0[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3131 if not-equal[Integer] 32767[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3132 if not-equal[Integer] 32767[Integer], 0[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3133 if not-equal[compile-time] 32767[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3134 if not-equal[Integer] 32767[Integer], 0[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3135 if not-equal[Integer] 32767[Integer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3136 if not-equal[Integer] 32767[Integer], 0[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3137 if not-equal[compile-time] 32767[Integer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3138 if not-equal[Integer] 32767[Integer], 1[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3139 if not-equal[Integer] 32767[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3140 if not-equal[Integer] 32767[Integer], 1[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3141 if not-equal[compile-time] 32767[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:3142 if not-equal[Integer] 32767[Integer], 1[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3143 if not-equal[Integer] 32767[Integer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3144 if not-equal[Integer] 32767[Integer], 1[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3145 if not-equal[compile-time] 32767[Integer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3146 if not-equal[Integer] 32767[Integer], 127[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3147 if not-equal[Integer] 32767[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3148 if not-equal[Integer] 32767[Integer], 127[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3149 if not-equal[compile-time] 32767[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:3150 if not-equal[Integer] 32767[Integer], 127[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3151 if not-equal[Integer] 32767[Integer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3152 if not-equal[Integer] 32767[Integer], 127[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3153 if not-equal[compile-time] 32767[Integer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3154 if not-equal[Integer] 32767[Integer], 128[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3155 if not-equal[Integer] 32767[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3156 if not-equal[Integer] 32767[Integer], 128[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3157 if not-equal[compile-time] 32767[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:3158 if not-equal[Integer] 32767[Integer], 128[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3159 if not-equal[Integer] 32767[Integer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3160 if not-equal[Integer] 32767[Integer], 128[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3161 if not-equal[compile-time] 32767[Integer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3162 if not-equal[Integer] 32767[Integer], 255[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3163 if not-equal[Integer] 32767[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3164 if not-equal[Integer] 32767[Integer], 255[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3165 if not-equal[compile-time] 32767[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3166 if not-equal[Integer] 32767[Integer], 255[Byte] Var
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3167 if not-equal[Integer] 32767[Integer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3168 if not-equal[Integer] 32767[Integer], 255[Byte] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3169 if not-equal[compile-time] 32767[Integer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3170 if not-equal[Integer] -32768[Integer], 0[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3171 if not-equal[Integer] -32768[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3172 if not-equal[Integer] -32768[Integer], 0[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3173 if not-equal[compile-time] -32768[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3174 if not-equal[Integer] -32768[Integer], 0[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3175 if not-equal[Integer] -32768[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3176 if not-equal[Integer] -32768[Integer], 0[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3177 if not-equal[compile-time] -32768[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3178 if not-equal[Integer] -32768[Integer], 255[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3179 if not-equal[Integer] -32768[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3180 if not-equal[Integer] -32768[Integer], 255[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3181 if not-equal[compile-time] -32768[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3182 if not-equal[Integer] -32768[Integer], 255[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3183 if not-equal[Integer] -32768[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3184 if not-equal[Integer] -32768[Integer], 255[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3185 if not-equal[compile-time] -32768[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3186 if not-equal[Integer] -32768[Integer], 32767[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3187 if not-equal[Integer] -32768[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3188 if not-equal[Integer] -32768[Integer], 32767[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3189 if not-equal[compile-time] -32768[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3190 if not-equal[Integer] -32768[Integer], 32767[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3191 if not-equal[Integer] -32768[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3192 if not-equal[Integer] -32768[Integer], 32767[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3193 if not-equal[compile-time] -32768[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3194 if not-equal[Integer] -32768[Integer], 32768[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3195 if not-equal[Integer] -32768[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3196 if not-equal[Integer] -32768[Integer], 32768[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3197 if not-equal[compile-time] -32768[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3198 if not-equal[Integer] -32768[Integer], 32768[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3199 if not-equal[Integer] -32768[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3200 if not-equal[Integer] -32768[Integer], 32768[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3201 if not-equal[compile-time] -32768[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3202 if not-equal[Integer] -32768[Integer], 65535[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3203 if not-equal[Integer] -32768[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3204 if not-equal[Integer] -32768[Integer], 65535[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3205 if not-equal[compile-time] -32768[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3206 if not-equal[Integer] -32768[Integer], 65535[Word] Var
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3207 if not-equal[Integer] -32768[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3208 if not-equal[Integer] -32768[Integer], 65535[Word] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3209 if not-equal[compile-time] -32768[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3210 if not-equal[Integer] -32767[Integer], 0[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3211 if not-equal[Integer] -32767[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3212 if not-equal[Integer] -32767[Integer], 0[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3213 if not-equal[compile-time] -32767[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3214 if not-equal[Integer] -32767[Integer], 0[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3215 if not-equal[Integer] -32767[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3216 if not-equal[Integer] -32767[Integer], 0[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3217 if not-equal[compile-time] -32767[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3218 if not-equal[Integer] -32767[Integer], 255[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3219 if not-equal[Integer] -32767[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3220 if not-equal[Integer] -32767[Integer], 255[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3221 if not-equal[compile-time] -32767[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3222 if not-equal[Integer] -32767[Integer], 255[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3223 if not-equal[Integer] -32767[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3224 if not-equal[Integer] -32767[Integer], 255[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3225 if not-equal[compile-time] -32767[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3226 if not-equal[Integer] -32767[Integer], 32767[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3227 if not-equal[Integer] -32767[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3228 if not-equal[Integer] -32767[Integer], 32767[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3229 if not-equal[compile-time] -32767[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3230 if not-equal[Integer] -32767[Integer], 32767[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3231 if not-equal[Integer] -32767[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3232 if not-equal[Integer] -32767[Integer], 32767[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3233 if not-equal[compile-time] -32767[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3234 if not-equal[Integer] -32767[Integer], 32768[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3235 if not-equal[Integer] -32767[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3236 if not-equal[Integer] -32767[Integer], 32768[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3237 if not-equal[compile-time] -32767[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3238 if not-equal[Integer] -32767[Integer], 32768[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3239 if not-equal[Integer] -32767[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3240 if not-equal[Integer] -32767[Integer], 32768[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3241 if not-equal[compile-time] -32767[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3242 if not-equal[Integer] -32767[Integer], 65535[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3243 if not-equal[Integer] -32767[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3244 if not-equal[Integer] -32767[Integer], 65535[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3245 if not-equal[compile-time] -32767[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3246 if not-equal[Integer] -32767[Integer], 65535[Word] Var
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3247 if not-equal[Integer] -32767[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3248 if not-equal[Integer] -32767[Integer], 65535[Word] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3249 if not-equal[compile-time] -32767[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3250 if not-equal[Integer] -129[Integer], 0[Word] Var
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3251 if not-equal[Integer] -129[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3252 if not-equal[Integer] -129[Integer], 0[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3253 if not-equal[compile-time] -129[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3254 if not-equal[Integer] -129[Integer], 0[Word] Var
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3255 if not-equal[Integer] -129[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3256 if not-equal[Integer] -129[Integer], 0[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3257 if not-equal[compile-time] -129[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3258 if not-equal[Integer] -129[Integer], 255[Word] Var
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3259 if not-equal[Integer] -129[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3260 if not-equal[Integer] -129[Integer], 255[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3261 if not-equal[compile-time] -129[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3262 if not-equal[Integer] -129[Integer], 255[Word] Var
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3263 if not-equal[Integer] -129[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3264 if not-equal[Integer] -129[Integer], 255[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3265 if not-equal[compile-time] -129[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3266 if not-equal[Integer] -129[Integer], 32767[Word] Var
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3267 if not-equal[Integer] -129[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3268 if not-equal[Integer] -129[Integer], 32767[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3269 if not-equal[compile-time] -129[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3270 if not-equal[Integer] -129[Integer], 32767[Word] Var
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3271 if not-equal[Integer] -129[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3272 if not-equal[Integer] -129[Integer], 32767[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3273 if not-equal[compile-time] -129[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3274 if not-equal[Integer] -129[Integer], 32768[Word] Var
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3275 if not-equal[Integer] -129[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3276 if not-equal[Integer] -129[Integer], 32768[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3277 if not-equal[compile-time] -129[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3278 if not-equal[Integer] -129[Integer], 32768[Word] Var
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3279 if not-equal[Integer] -129[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3280 if not-equal[Integer] -129[Integer], 32768[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3281 if not-equal[compile-time] -129[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3282 if not-equal[Integer] -129[Integer], 65535[Word] Var
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3283 if not-equal[Integer] -129[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3284 if not-equal[Integer] -129[Integer], 65535[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3285 if not-equal[compile-time] -129[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3286 if not-equal[Integer] -129[Integer], 65535[Word] Var
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3287 if not-equal[Integer] -129[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3288 if not-equal[Integer] -129[Integer], 65535[Word] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3289 if not-equal[compile-time] -129[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -129 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3290 if not-equal[Integer] -128[Integer], 0[Word] Var
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3291 if not-equal[Integer] -128[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3292 if not-equal[Integer] -128[Integer], 0[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3293 if not-equal[compile-time] -128[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3294 if not-equal[Integer] -128[Integer], 0[Word] Var
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3295 if not-equal[Integer] -128[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3296 if not-equal[Integer] -128[Integer], 0[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3297 if not-equal[compile-time] -128[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3298 if not-equal[Integer] -128[Integer], 255[Word] Var
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3299 if not-equal[Integer] -128[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3300 if not-equal[Integer] -128[Integer], 255[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3301 if not-equal[compile-time] -128[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3302 if not-equal[Integer] -128[Integer], 255[Word] Var
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3303 if not-equal[Integer] -128[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3304 if not-equal[Integer] -128[Integer], 255[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3305 if not-equal[compile-time] -128[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3306 if not-equal[Integer] -128[Integer], 32767[Word] Var
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3307 if not-equal[Integer] -128[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3308 if not-equal[Integer] -128[Integer], 32767[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3309 if not-equal[compile-time] -128[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3310 if not-equal[Integer] -128[Integer], 32767[Word] Var
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3311 if not-equal[Integer] -128[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3312 if not-equal[Integer] -128[Integer], 32767[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3313 if not-equal[compile-time] -128[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3314 if not-equal[Integer] -128[Integer], 32768[Word] Var
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3315 if not-equal[Integer] -128[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3316 if not-equal[Integer] -128[Integer], 32768[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3317 if not-equal[compile-time] -128[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3318 if not-equal[Integer] -128[Integer], 32768[Word] Var
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3319 if not-equal[Integer] -128[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3320 if not-equal[Integer] -128[Integer], 32768[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3321 if not-equal[compile-time] -128[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3322 if not-equal[Integer] -128[Integer], 65535[Word] Var
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3323 if not-equal[Integer] -128[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3324 if not-equal[Integer] -128[Integer], 65535[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3325 if not-equal[compile-time] -128[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3326 if not-equal[Integer] -128[Integer], 65535[Word] Var
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3327 if not-equal[Integer] -128[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3328 if not-equal[Integer] -128[Integer], 65535[Word] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3329 if not-equal[compile-time] -128[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3330 if not-equal[Integer] -1[Integer], 0[Word] Var
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3331 if not-equal[Integer] -1[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3332 if not-equal[Integer] -1[Integer], 0[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3333 if not-equal[compile-time] -1[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3334 if not-equal[Integer] -1[Integer], 0[Word] Var
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3335 if not-equal[Integer] -1[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3336 if not-equal[Integer] -1[Integer], 0[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3337 if not-equal[compile-time] -1[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3338 if not-equal[Integer] -1[Integer], 255[Word] Var
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3339 if not-equal[Integer] -1[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3340 if not-equal[Integer] -1[Integer], 255[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3341 if not-equal[compile-time] -1[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3342 if not-equal[Integer] -1[Integer], 255[Word] Var
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3343 if not-equal[Integer] -1[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3344 if not-equal[Integer] -1[Integer], 255[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3345 if not-equal[compile-time] -1[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3346 if not-equal[Integer] -1[Integer], 32767[Word] Var
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3347 if not-equal[Integer] -1[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3348 if not-equal[Integer] -1[Integer], 32767[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3349 if not-equal[compile-time] -1[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3350 if not-equal[Integer] -1[Integer], 32767[Word] Var
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3351 if not-equal[Integer] -1[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3352 if not-equal[Integer] -1[Integer], 32767[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3353 if not-equal[compile-time] -1[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3354 if not-equal[Integer] -1[Integer], 32768[Word] Var
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3355 if not-equal[Integer] -1[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3356 if not-equal[Integer] -1[Integer], 32768[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3357 if not-equal[compile-time] -1[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3358 if not-equal[Integer] -1[Integer], 32768[Word] Var
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3359 if not-equal[Integer] -1[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3360 if not-equal[Integer] -1[Integer], 32768[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3361 if not-equal[compile-time] -1[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3362 if not-equal[Integer] -1[Integer], 65535[Word] Var
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3363 if not-equal[Integer] -1[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3364 if not-equal[Integer] -1[Integer], 65535[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3365 if not-equal[compile-time] -1[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3366 if not-equal[Integer] -1[Integer], 65535[Word] Var
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3367 if not-equal[Integer] -1[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3368 if not-equal[Integer] -1[Integer], 65535[Word] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3369 if not-equal[compile-time] -1[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3370 if not-equal[Integer] 0[Integer], 0[Word] Var
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3371 if not-equal[Integer] 0[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3372 if not-equal[Integer] 0[Integer], 0[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3373 if not-equal[compile-time] 0[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3374 if not-equal[Integer] 0[Integer], 0[Word] Var
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3375 if not-equal[Integer] 0[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3376 if not-equal[Integer] 0[Integer], 0[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3377 if not-equal[compile-time] 0[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3378 if not-equal[Integer] 0[Integer], 255[Word] Var
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3379 if not-equal[Integer] 0[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3380 if not-equal[Integer] 0[Integer], 255[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3381 if not-equal[compile-time] 0[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3382 if not-equal[Integer] 0[Integer], 255[Word] Var
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3383 if not-equal[Integer] 0[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3384 if not-equal[Integer] 0[Integer], 255[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3385 if not-equal[compile-time] 0[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3386 if not-equal[Integer] 0[Integer], 32767[Word] Var
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3387 if not-equal[Integer] 0[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3388 if not-equal[Integer] 0[Integer], 32767[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3389 if not-equal[compile-time] 0[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3390 if not-equal[Integer] 0[Integer], 32767[Word] Var
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3391 if not-equal[Integer] 0[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3392 if not-equal[Integer] 0[Integer], 32767[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3393 if not-equal[compile-time] 0[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3394 if not-equal[Integer] 0[Integer], 32768[Word] Var
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3395 if not-equal[Integer] 0[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3396 if not-equal[Integer] 0[Integer], 32768[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3397 if not-equal[compile-time] 0[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3398 if not-equal[Integer] 0[Integer], 32768[Word] Var
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3399 if not-equal[Integer] 0[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3400 if not-equal[Integer] 0[Integer], 32768[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3401 if not-equal[compile-time] 0[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3402 if not-equal[Integer] 0[Integer], 65535[Word] Var
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3403 if not-equal[Integer] 0[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3404 if not-equal[Integer] 0[Integer], 65535[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3405 if not-equal[compile-time] 0[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3406 if not-equal[Integer] 0[Integer], 65535[Word] Var
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3407 if not-equal[Integer] 0[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3408 if not-equal[Integer] 0[Integer], 65535[Word] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3409 if not-equal[compile-time] 0[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3410 if not-equal[Integer] 1[Integer], 0[Word] Var
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3411 if not-equal[Integer] 1[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3412 if not-equal[Integer] 1[Integer], 0[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3413 if not-equal[compile-time] 1[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3414 if not-equal[Integer] 1[Integer], 0[Word] Var
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3415 if not-equal[Integer] 1[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3416 if not-equal[Integer] 1[Integer], 0[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3417 if not-equal[compile-time] 1[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3418 if not-equal[Integer] 1[Integer], 255[Word] Var
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3419 if not-equal[Integer] 1[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3420 if not-equal[Integer] 1[Integer], 255[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3421 if not-equal[compile-time] 1[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3422 if not-equal[Integer] 1[Integer], 255[Word] Var
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3423 if not-equal[Integer] 1[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3424 if not-equal[Integer] 1[Integer], 255[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3425 if not-equal[compile-time] 1[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3426 if not-equal[Integer] 1[Integer], 32767[Word] Var
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3427 if not-equal[Integer] 1[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3428 if not-equal[Integer] 1[Integer], 32767[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3429 if not-equal[compile-time] 1[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3430 if not-equal[Integer] 1[Integer], 32767[Word] Var
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3431 if not-equal[Integer] 1[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3432 if not-equal[Integer] 1[Integer], 32767[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3433 if not-equal[compile-time] 1[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3434 if not-equal[Integer] 1[Integer], 32768[Word] Var
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3435 if not-equal[Integer] 1[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3436 if not-equal[Integer] 1[Integer], 32768[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3437 if not-equal[compile-time] 1[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3438 if not-equal[Integer] 1[Integer], 32768[Word] Var
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3439 if not-equal[Integer] 1[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3440 if not-equal[Integer] 1[Integer], 32768[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3441 if not-equal[compile-time] 1[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3442 if not-equal[Integer] 1[Integer], 65535[Word] Var
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3443 if not-equal[Integer] 1[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3444 if not-equal[Integer] 1[Integer], 65535[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3445 if not-equal[compile-time] 1[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3446 if not-equal[Integer] 1[Integer], 65535[Word] Var
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3447 if not-equal[Integer] 1[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3448 if not-equal[Integer] 1[Integer], 65535[Word] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3449 if not-equal[compile-time] 1[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3450 if not-equal[Integer] 127[Integer], 0[Word] Var
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3451 if not-equal[Integer] 127[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3452 if not-equal[Integer] 127[Integer], 0[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3453 if not-equal[compile-time] 127[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3454 if not-equal[Integer] 127[Integer], 0[Word] Var
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3455 if not-equal[Integer] 127[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3456 if not-equal[Integer] 127[Integer], 0[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3457 if not-equal[compile-time] 127[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3458 if not-equal[Integer] 127[Integer], 255[Word] Var
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3459 if not-equal[Integer] 127[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3460 if not-equal[Integer] 127[Integer], 255[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3461 if not-equal[compile-time] 127[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3462 if not-equal[Integer] 127[Integer], 255[Word] Var
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3463 if not-equal[Integer] 127[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3464 if not-equal[Integer] 127[Integer], 255[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3465 if not-equal[compile-time] 127[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3466 if not-equal[Integer] 127[Integer], 32767[Word] Var
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3467 if not-equal[Integer] 127[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3468 if not-equal[Integer] 127[Integer], 32767[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3469 if not-equal[compile-time] 127[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3470 if not-equal[Integer] 127[Integer], 32767[Word] Var
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3471 if not-equal[Integer] 127[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3472 if not-equal[Integer] 127[Integer], 32767[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3473 if not-equal[compile-time] 127[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3474 if not-equal[Integer] 127[Integer], 32768[Word] Var
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3475 if not-equal[Integer] 127[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3476 if not-equal[Integer] 127[Integer], 32768[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3477 if not-equal[compile-time] 127[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3478 if not-equal[Integer] 127[Integer], 32768[Word] Var
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3479 if not-equal[Integer] 127[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3480 if not-equal[Integer] 127[Integer], 32768[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3481 if not-equal[compile-time] 127[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3482 if not-equal[Integer] 127[Integer], 65535[Word] Var
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3483 if not-equal[Integer] 127[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3484 if not-equal[Integer] 127[Integer], 65535[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3485 if not-equal[compile-time] 127[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3486 if not-equal[Integer] 127[Integer], 65535[Word] Var
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3487 if not-equal[Integer] 127[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3488 if not-equal[Integer] 127[Integer], 65535[Word] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3489 if not-equal[compile-time] 127[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3490 if not-equal[Integer] 128[Integer], 0[Word] Var
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3491 if not-equal[Integer] 128[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3492 if not-equal[Integer] 128[Integer], 0[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3493 if not-equal[compile-time] 128[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3494 if not-equal[Integer] 128[Integer], 0[Word] Var
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3495 if not-equal[Integer] 128[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3496 if not-equal[Integer] 128[Integer], 0[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3497 if not-equal[compile-time] 128[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3498 if not-equal[Integer] 128[Integer], 255[Word] Var
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3499 if not-equal[Integer] 128[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3500 if not-equal[Integer] 128[Integer], 255[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3501 if not-equal[compile-time] 128[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3502 if not-equal[Integer] 128[Integer], 255[Word] Var
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3503 if not-equal[Integer] 128[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3504 if not-equal[Integer] 128[Integer], 255[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3505 if not-equal[compile-time] 128[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3506 if not-equal[Integer] 128[Integer], 32767[Word] Var
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3507 if not-equal[Integer] 128[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3508 if not-equal[Integer] 128[Integer], 32767[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3509 if not-equal[compile-time] 128[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3510 if not-equal[Integer] 128[Integer], 32767[Word] Var
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3511 if not-equal[Integer] 128[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3512 if not-equal[Integer] 128[Integer], 32767[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3513 if not-equal[compile-time] 128[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3514 if not-equal[Integer] 128[Integer], 32768[Word] Var
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3515 if not-equal[Integer] 128[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3516 if not-equal[Integer] 128[Integer], 32768[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3517 if not-equal[compile-time] 128[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3518 if not-equal[Integer] 128[Integer], 32768[Word] Var
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3519 if not-equal[Integer] 128[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3520 if not-equal[Integer] 128[Integer], 32768[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3521 if not-equal[compile-time] 128[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3522 if not-equal[Integer] 128[Integer], 65535[Word] Var
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3523 if not-equal[Integer] 128[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3524 if not-equal[Integer] 128[Integer], 65535[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3525 if not-equal[compile-time] 128[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3526 if not-equal[Integer] 128[Integer], 65535[Word] Var
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3527 if not-equal[Integer] 128[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3528 if not-equal[Integer] 128[Integer], 65535[Word] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3529 if not-equal[compile-time] 128[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3530 if not-equal[Integer] 32767[Integer], 0[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3531 if not-equal[Integer] 32767[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3532 if not-equal[Integer] 32767[Integer], 0[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3533 if not-equal[compile-time] 32767[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3534 if not-equal[Integer] 32767[Integer], 0[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3535 if not-equal[Integer] 32767[Integer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3536 if not-equal[Integer] 32767[Integer], 0[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3537 if not-equal[compile-time] 32767[Integer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3538 if not-equal[Integer] 32767[Integer], 255[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3539 if not-equal[Integer] 32767[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3540 if not-equal[Integer] 32767[Integer], 255[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3541 if not-equal[compile-time] 32767[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3542 if not-equal[Integer] 32767[Integer], 255[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3543 if not-equal[Integer] 32767[Integer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3544 if not-equal[Integer] 32767[Integer], 255[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3545 if not-equal[compile-time] 32767[Integer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3546 if not-equal[Integer] 32767[Integer], 32767[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3547 if not-equal[Integer] 32767[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3548 if not-equal[Integer] 32767[Integer], 32767[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:3549 if not-equal[compile-time] 32767[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:3550 if not-equal[Integer] 32767[Integer], 32767[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3551 if not-equal[Integer] 32767[Integer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3552 if not-equal[Integer] 32767[Integer], 32767[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3553 if not-equal[compile-time] 32767[Integer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3554 if not-equal[Integer] 32767[Integer], 32768[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3555 if not-equal[Integer] 32767[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3556 if not-equal[Integer] 32767[Integer], 32768[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3557 if not-equal[compile-time] 32767[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3558 if not-equal[Integer] 32767[Integer], 32768[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3559 if not-equal[Integer] 32767[Integer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3560 if not-equal[Integer] 32767[Integer], 32768[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3561 if not-equal[compile-time] 32767[Integer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3562 if not-equal[Integer] 32767[Integer], 65535[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3563 if not-equal[Integer] 32767[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3564 if not-equal[Integer] 32767[Integer], 65535[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3565 if not-equal[compile-time] 32767[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3566 if not-equal[Integer] 32767[Integer], 65535[Word] Var
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3567 if not-equal[Integer] 32767[Integer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3568 if not-equal[Integer] 32767[Integer], 65535[Word] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3569 if not-equal[compile-time] 32767[Integer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3570 if not-equal[Pointer] -32768[Integer], 0[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3571 if not-equal[Pointer] -32768[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3572 if not-equal[Pointer] -32768[Integer], 0[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3573 if not-equal[compile-time] -32768[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3574 if not-equal[Pointer] -32768[Integer], 0[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3575 if not-equal[Pointer] -32768[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3576 if not-equal[Pointer] -32768[Integer], 0[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3577 if not-equal[compile-time] -32768[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3578 if not-equal[Pointer] -32768[Integer], 255[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3579 if not-equal[Pointer] -32768[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3580 if not-equal[Pointer] -32768[Integer], 255[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3581 if not-equal[compile-time] -32768[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3582 if not-equal[Pointer] -32768[Integer], 255[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3583 if not-equal[Pointer] -32768[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3584 if not-equal[Pointer] -32768[Integer], 255[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3585 if not-equal[compile-time] -32768[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3586 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3587 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3588 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3589 if not-equal[compile-time] -32768[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3590 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3591 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3592 if not-equal[Pointer] -32768[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3593 if not-equal[compile-time] -32768[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3594 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3595 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3596 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3597 if not-equal[compile-time] -32768[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3598 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3599 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3600 if not-equal[Pointer] -32768[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3601 if not-equal[compile-time] -32768[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3602 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3603 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3604 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3605 if not-equal[compile-time] -32768[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3606 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Var
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3607 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3608 if not-equal[Pointer] -32768[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3609 if not-equal[compile-time] -32768[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3610 if not-equal[Pointer] -32767[Integer], 0[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3611 if not-equal[Pointer] -32767[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3612 if not-equal[Pointer] -32767[Integer], 0[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3613 if not-equal[compile-time] -32767[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3614 if not-equal[Pointer] -32767[Integer], 0[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3615 if not-equal[Pointer] -32767[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3616 if not-equal[Pointer] -32767[Integer], 0[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3617 if not-equal[compile-time] -32767[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3618 if not-equal[Pointer] -32767[Integer], 255[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3619 if not-equal[Pointer] -32767[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3620 if not-equal[Pointer] -32767[Integer], 255[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3621 if not-equal[compile-time] -32767[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3622 if not-equal[Pointer] -32767[Integer], 255[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3623 if not-equal[Pointer] -32767[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3624 if not-equal[Pointer] -32767[Integer], 255[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3625 if not-equal[compile-time] -32767[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3626 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3627 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3628 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3629 if not-equal[compile-time] -32767[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3630 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3631 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3632 if not-equal[Pointer] -32767[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3633 if not-equal[compile-time] -32767[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3634 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3635 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3636 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3637 if not-equal[compile-time] -32767[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3638 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3639 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3640 if not-equal[Pointer] -32767[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3641 if not-equal[compile-time] -32767[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3642 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3643 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3644 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3645 if not-equal[compile-time] -32767[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3646 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Var
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3647 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3648 if not-equal[Pointer] -32767[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3649 if not-equal[compile-time] -32767[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3650 if not-equal[Pointer] -129[Integer], 0[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3651 if not-equal[Pointer] -129[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3652 if not-equal[Pointer] -129[Integer], 0[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3653 if not-equal[compile-time] -129[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3654 if not-equal[Pointer] -129[Integer], 0[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3655 if not-equal[Pointer] -129[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3656 if not-equal[Pointer] -129[Integer], 0[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3657 if not-equal[compile-time] -129[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3658 if not-equal[Pointer] -129[Integer], 255[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3659 if not-equal[Pointer] -129[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3660 if not-equal[Pointer] -129[Integer], 255[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3661 if not-equal[compile-time] -129[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3662 if not-equal[Pointer] -129[Integer], 255[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3663 if not-equal[Pointer] -129[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3664 if not-equal[Pointer] -129[Integer], 255[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3665 if not-equal[compile-time] -129[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3666 if not-equal[Pointer] -129[Integer], 32767[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3667 if not-equal[Pointer] -129[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3668 if not-equal[Pointer] -129[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3669 if not-equal[compile-time] -129[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3670 if not-equal[Pointer] -129[Integer], 32767[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3671 if not-equal[Pointer] -129[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3672 if not-equal[Pointer] -129[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3673 if not-equal[compile-time] -129[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3674 if not-equal[Pointer] -129[Integer], 32768[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3675 if not-equal[Pointer] -129[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3676 if not-equal[Pointer] -129[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3677 if not-equal[compile-time] -129[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3678 if not-equal[Pointer] -129[Integer], 32768[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3679 if not-equal[Pointer] -129[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3680 if not-equal[Pointer] -129[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3681 if not-equal[compile-time] -129[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3682 if not-equal[Pointer] -129[Integer], 65535[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3683 if not-equal[Pointer] -129[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3684 if not-equal[Pointer] -129[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3685 if not-equal[compile-time] -129[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3686 if not-equal[Pointer] -129[Integer], 65535[Pointer] Var
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3687 if not-equal[Pointer] -129[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -129 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3688 if not-equal[Pointer] -129[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -129;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3689 if not-equal[compile-time] -129[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -129 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3690 if not-equal[Pointer] -128[Integer], 0[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3691 if not-equal[Pointer] -128[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3692 if not-equal[Pointer] -128[Integer], 0[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3693 if not-equal[compile-time] -128[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3694 if not-equal[Pointer] -128[Integer], 0[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3695 if not-equal[Pointer] -128[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3696 if not-equal[Pointer] -128[Integer], 0[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3697 if not-equal[compile-time] -128[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3698 if not-equal[Pointer] -128[Integer], 255[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3699 if not-equal[Pointer] -128[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3700 if not-equal[Pointer] -128[Integer], 255[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3701 if not-equal[compile-time] -128[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3702 if not-equal[Pointer] -128[Integer], 255[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3703 if not-equal[Pointer] -128[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3704 if not-equal[Pointer] -128[Integer], 255[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3705 if not-equal[compile-time] -128[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3706 if not-equal[Pointer] -128[Integer], 32767[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3707 if not-equal[Pointer] -128[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3708 if not-equal[Pointer] -128[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3709 if not-equal[compile-time] -128[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3710 if not-equal[Pointer] -128[Integer], 32767[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3711 if not-equal[Pointer] -128[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3712 if not-equal[Pointer] -128[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3713 if not-equal[compile-time] -128[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3714 if not-equal[Pointer] -128[Integer], 32768[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3715 if not-equal[Pointer] -128[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3716 if not-equal[Pointer] -128[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3717 if not-equal[compile-time] -128[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3718 if not-equal[Pointer] -128[Integer], 32768[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3719 if not-equal[Pointer] -128[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3720 if not-equal[Pointer] -128[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3721 if not-equal[compile-time] -128[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3722 if not-equal[Pointer] -128[Integer], 65535[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3723 if not-equal[Pointer] -128[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3724 if not-equal[Pointer] -128[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3725 if not-equal[compile-time] -128[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3726 if not-equal[Pointer] -128[Integer], 65535[Pointer] Var
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3727 if not-equal[Pointer] -128[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3728 if not-equal[Pointer] -128[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3729 if not-equal[compile-time] -128[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3730 if not-equal[Pointer] -1[Integer], 0[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3731 if not-equal[Pointer] -1[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3732 if not-equal[Pointer] -1[Integer], 0[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3733 if not-equal[compile-time] -1[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3734 if not-equal[Pointer] -1[Integer], 0[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3735 if not-equal[Pointer] -1[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3736 if not-equal[Pointer] -1[Integer], 0[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3737 if not-equal[compile-time] -1[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3738 if not-equal[Pointer] -1[Integer], 255[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3739 if not-equal[Pointer] -1[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3740 if not-equal[Pointer] -1[Integer], 255[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3741 if not-equal[compile-time] -1[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3742 if not-equal[Pointer] -1[Integer], 255[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3743 if not-equal[Pointer] -1[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3744 if not-equal[Pointer] -1[Integer], 255[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3745 if not-equal[compile-time] -1[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3746 if not-equal[Pointer] -1[Integer], 32767[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3747 if not-equal[Pointer] -1[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3748 if not-equal[Pointer] -1[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3749 if not-equal[compile-time] -1[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3750 if not-equal[Pointer] -1[Integer], 32767[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3751 if not-equal[Pointer] -1[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3752 if not-equal[Pointer] -1[Integer], 32767[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3753 if not-equal[compile-time] -1[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3754 if not-equal[Pointer] -1[Integer], 32768[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3755 if not-equal[Pointer] -1[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3756 if not-equal[Pointer] -1[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3757 if not-equal[compile-time] -1[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3758 if not-equal[Pointer] -1[Integer], 32768[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3759 if not-equal[Pointer] -1[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3760 if not-equal[Pointer] -1[Integer], 32768[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3761 if not-equal[compile-time] -1[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3762 if not-equal[Pointer] -1[Integer], 65535[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3763 if not-equal[Pointer] -1[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3764 if not-equal[Pointer] -1[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3765 if not-equal[compile-time] -1[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3766 if not-equal[Pointer] -1[Integer], 65535[Pointer] Var
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3767 if not-equal[Pointer] -1[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if -1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3768 if not-equal[Pointer] -1[Integer], 65535[Pointer] Right immediate
  var  a: Integer = -1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3769 if not-equal[compile-time] -1[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if -1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3770 if not-equal[Pointer] 0[Integer], 0[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3771 if not-equal[Pointer] 0[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3772 if not-equal[Pointer] 0[Integer], 0[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3773 if not-equal[compile-time] 0[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3774 if not-equal[Pointer] 0[Integer], 0[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3775 if not-equal[Pointer] 0[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3776 if not-equal[Pointer] 0[Integer], 0[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3777 if not-equal[compile-time] 0[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3778 if not-equal[Pointer] 0[Integer], 255[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3779 if not-equal[Pointer] 0[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3780 if not-equal[Pointer] 0[Integer], 255[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3781 if not-equal[compile-time] 0[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3782 if not-equal[Pointer] 0[Integer], 255[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3783 if not-equal[Pointer] 0[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3784 if not-equal[Pointer] 0[Integer], 255[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3785 if not-equal[compile-time] 0[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3786 if not-equal[Pointer] 0[Integer], 32767[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3787 if not-equal[Pointer] 0[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3788 if not-equal[Pointer] 0[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3789 if not-equal[compile-time] 0[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3790 if not-equal[Pointer] 0[Integer], 32767[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3791 if not-equal[Pointer] 0[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3792 if not-equal[Pointer] 0[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3793 if not-equal[compile-time] 0[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3794 if not-equal[Pointer] 0[Integer], 32768[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3795 if not-equal[Pointer] 0[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3796 if not-equal[Pointer] 0[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3797 if not-equal[compile-time] 0[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3798 if not-equal[Pointer] 0[Integer], 32768[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3799 if not-equal[Pointer] 0[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3800 if not-equal[Pointer] 0[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3801 if not-equal[compile-time] 0[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3802 if not-equal[Pointer] 0[Integer], 65535[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3803 if not-equal[Pointer] 0[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3804 if not-equal[Pointer] 0[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3805 if not-equal[compile-time] 0[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3806 if not-equal[Pointer] 0[Integer], 65535[Pointer] Var
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3807 if not-equal[Pointer] 0[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3808 if not-equal[Pointer] 0[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3809 if not-equal[compile-time] 0[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3810 if not-equal[Pointer] 1[Integer], 0[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3811 if not-equal[Pointer] 1[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3812 if not-equal[Pointer] 1[Integer], 0[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3813 if not-equal[compile-time] 1[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3814 if not-equal[Pointer] 1[Integer], 0[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3815 if not-equal[Pointer] 1[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3816 if not-equal[Pointer] 1[Integer], 0[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3817 if not-equal[compile-time] 1[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3818 if not-equal[Pointer] 1[Integer], 255[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3819 if not-equal[Pointer] 1[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3820 if not-equal[Pointer] 1[Integer], 255[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3821 if not-equal[compile-time] 1[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3822 if not-equal[Pointer] 1[Integer], 255[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3823 if not-equal[Pointer] 1[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3824 if not-equal[Pointer] 1[Integer], 255[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3825 if not-equal[compile-time] 1[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3826 if not-equal[Pointer] 1[Integer], 32767[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3827 if not-equal[Pointer] 1[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3828 if not-equal[Pointer] 1[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3829 if not-equal[compile-time] 1[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3830 if not-equal[Pointer] 1[Integer], 32767[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3831 if not-equal[Pointer] 1[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3832 if not-equal[Pointer] 1[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3833 if not-equal[compile-time] 1[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3834 if not-equal[Pointer] 1[Integer], 32768[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3835 if not-equal[Pointer] 1[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3836 if not-equal[Pointer] 1[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3837 if not-equal[compile-time] 1[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3838 if not-equal[Pointer] 1[Integer], 32768[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3839 if not-equal[Pointer] 1[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3840 if not-equal[Pointer] 1[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3841 if not-equal[compile-time] 1[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3842 if not-equal[Pointer] 1[Integer], 65535[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3843 if not-equal[Pointer] 1[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3844 if not-equal[Pointer] 1[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3845 if not-equal[compile-time] 1[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3846 if not-equal[Pointer] 1[Integer], 65535[Pointer] Var
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3847 if not-equal[Pointer] 1[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3848 if not-equal[Pointer] 1[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3849 if not-equal[compile-time] 1[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3850 if not-equal[Pointer] 127[Integer], 0[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3851 if not-equal[Pointer] 127[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3852 if not-equal[Pointer] 127[Integer], 0[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3853 if not-equal[compile-time] 127[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3854 if not-equal[Pointer] 127[Integer], 0[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3855 if not-equal[Pointer] 127[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3856 if not-equal[Pointer] 127[Integer], 0[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3857 if not-equal[compile-time] 127[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3858 if not-equal[Pointer] 127[Integer], 255[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3859 if not-equal[Pointer] 127[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3860 if not-equal[Pointer] 127[Integer], 255[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3861 if not-equal[compile-time] 127[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3862 if not-equal[Pointer] 127[Integer], 255[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3863 if not-equal[Pointer] 127[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3864 if not-equal[Pointer] 127[Integer], 255[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3865 if not-equal[compile-time] 127[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3866 if not-equal[Pointer] 127[Integer], 32767[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3867 if not-equal[Pointer] 127[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3868 if not-equal[Pointer] 127[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3869 if not-equal[compile-time] 127[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3870 if not-equal[Pointer] 127[Integer], 32767[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3871 if not-equal[Pointer] 127[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3872 if not-equal[Pointer] 127[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3873 if not-equal[compile-time] 127[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3874 if not-equal[Pointer] 127[Integer], 32768[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3875 if not-equal[Pointer] 127[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3876 if not-equal[Pointer] 127[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3877 if not-equal[compile-time] 127[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3878 if not-equal[Pointer] 127[Integer], 32768[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3879 if not-equal[Pointer] 127[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3880 if not-equal[Pointer] 127[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3881 if not-equal[compile-time] 127[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3882 if not-equal[Pointer] 127[Integer], 65535[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3883 if not-equal[Pointer] 127[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3884 if not-equal[Pointer] 127[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3885 if not-equal[compile-time] 127[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3886 if not-equal[Pointer] 127[Integer], 65535[Pointer] Var
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3887 if not-equal[Pointer] 127[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3888 if not-equal[Pointer] 127[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3889 if not-equal[compile-time] 127[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3890 if not-equal[Pointer] 128[Integer], 0[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3891 if not-equal[Pointer] 128[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3892 if not-equal[Pointer] 128[Integer], 0[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3893 if not-equal[compile-time] 128[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3894 if not-equal[Pointer] 128[Integer], 0[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3895 if not-equal[Pointer] 128[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3896 if not-equal[Pointer] 128[Integer], 0[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3897 if not-equal[compile-time] 128[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3898 if not-equal[Pointer] 128[Integer], 255[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3899 if not-equal[Pointer] 128[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3900 if not-equal[Pointer] 128[Integer], 255[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3901 if not-equal[compile-time] 128[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3902 if not-equal[Pointer] 128[Integer], 255[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3903 if not-equal[Pointer] 128[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3904 if not-equal[Pointer] 128[Integer], 255[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3905 if not-equal[compile-time] 128[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3906 if not-equal[Pointer] 128[Integer], 32767[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3907 if not-equal[Pointer] 128[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3908 if not-equal[Pointer] 128[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3909 if not-equal[compile-time] 128[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:3910 if not-equal[Pointer] 128[Integer], 32767[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3911 if not-equal[Pointer] 128[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3912 if not-equal[Pointer] 128[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3913 if not-equal[compile-time] 128[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3914 if not-equal[Pointer] 128[Integer], 32768[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3915 if not-equal[Pointer] 128[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3916 if not-equal[Pointer] 128[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3917 if not-equal[compile-time] 128[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3918 if not-equal[Pointer] 128[Integer], 32768[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3919 if not-equal[Pointer] 128[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3920 if not-equal[Pointer] 128[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3921 if not-equal[compile-time] 128[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3922 if not-equal[Pointer] 128[Integer], 65535[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3923 if not-equal[Pointer] 128[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3924 if not-equal[Pointer] 128[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3925 if not-equal[compile-time] 128[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3926 if not-equal[Pointer] 128[Integer], 65535[Pointer] Var
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3927 if not-equal[Pointer] 128[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3928 if not-equal[Pointer] 128[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3929 if not-equal[compile-time] 128[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3930 if not-equal[Pointer] 32767[Integer], 0[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3931 if not-equal[Pointer] 32767[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3932 if not-equal[Pointer] 32767[Integer], 0[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3933 if not-equal[compile-time] 32767[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:3934 if not-equal[Pointer] 32767[Integer], 0[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3935 if not-equal[Pointer] 32767[Integer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3936 if not-equal[Pointer] 32767[Integer], 0[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3937 if not-equal[compile-time] 32767[Integer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3938 if not-equal[Pointer] 32767[Integer], 255[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3939 if not-equal[Pointer] 32767[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3940 if not-equal[Pointer] 32767[Integer], 255[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3941 if not-equal[compile-time] 32767[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:3942 if not-equal[Pointer] 32767[Integer], 255[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3943 if not-equal[Pointer] 32767[Integer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3944 if not-equal[Pointer] 32767[Integer], 255[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3945 if not-equal[compile-time] 32767[Integer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3946 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3947 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3948 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:3949 if not-equal[compile-time] 32767[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:3950 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3951 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3952 if not-equal[Pointer] 32767[Integer], 32767[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3953 if not-equal[compile-time] 32767[Integer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3954 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3955 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3956 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3957 if not-equal[compile-time] 32767[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:3958 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3959 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3960 if not-equal[Pointer] 32767[Integer], 32768[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3961 if not-equal[compile-time] 32767[Integer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3962 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3963 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3964 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3965 if not-equal[compile-time] 32767[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:3966 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Var
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3967 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3968 if not-equal[Pointer] 32767[Integer], 65535[Pointer] Right immediate
  var  a: Integer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3969 if not-equal[compile-time] 32767[Integer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3970 if not-equal[Integer] 0[Byte], -128[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3971 if not-equal[Integer] 0[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3972 if not-equal[Integer] 0[Byte], -128[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:3973 if not-equal[compile-time] 0[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:3974 if not-equal[Integer] 0[Byte], -128[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3975 if not-equal[Integer] 0[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3976 if not-equal[Integer] 0[Byte], -128[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3977 if not-equal[compile-time] 0[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3978 if not-equal[Integer] 0[Byte], -127[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3979 if not-equal[Integer] 0[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3980 if not-equal[Integer] 0[Byte], -127[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:3981 if not-equal[compile-time] 0[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:3982 if not-equal[Integer] 0[Byte], -127[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3983 if not-equal[Integer] 0[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3984 if not-equal[Integer] 0[Byte], -127[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3985 if not-equal[compile-time] 0[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3986 if not-equal[Integer] 0[Byte], -1[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:3987 if not-equal[Integer] 0[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:3988 if not-equal[Integer] 0[Byte], -1[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:3989 if not-equal[compile-time] 0[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:3990 if not-equal[Integer] 0[Byte], -1[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3991 if not-equal[Integer] 0[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3992 if not-equal[Integer] 0[Byte], -1[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3993 if not-equal[compile-time] 0[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:3994 if not-equal[Integer] 0[Byte], 0[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:3995 if not-equal[Integer] 0[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:3996 if not-equal[Integer] 0[Byte], 0[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3997 if not-equal[compile-time] 0[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:3998 if not-equal[Integer] 0[Byte], 0[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:3999 if not-equal[Integer] 0[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4000 if not-equal[Integer] 0[Byte], 0[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4001 if not-equal[compile-time] 0[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4002 if not-equal[Integer] 0[Byte], 1[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4003 if not-equal[Integer] 0[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4004 if not-equal[Integer] 0[Byte], 1[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4005 if not-equal[compile-time] 0[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4006 if not-equal[Integer] 0[Byte], 1[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4007 if not-equal[Integer] 0[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4008 if not-equal[Integer] 0[Byte], 1[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4009 if not-equal[compile-time] 0[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4010 if not-equal[Integer] 0[Byte], 127[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4011 if not-equal[Integer] 0[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4012 if not-equal[Integer] 0[Byte], 127[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4013 if not-equal[compile-time] 0[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4014 if not-equal[Integer] 0[Byte], 127[Int8] Var
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4015 if not-equal[Integer] 0[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4016 if not-equal[Integer] 0[Byte], 127[Int8] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4017 if not-equal[compile-time] 0[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4018 if not-equal[Integer] 1[Byte], -128[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4019 if not-equal[Integer] 1[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4020 if not-equal[Integer] 1[Byte], -128[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4021 if not-equal[compile-time] 1[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4022 if not-equal[Integer] 1[Byte], -128[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4023 if not-equal[Integer] 1[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4024 if not-equal[Integer] 1[Byte], -128[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4025 if not-equal[compile-time] 1[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4026 if not-equal[Integer] 1[Byte], -127[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4027 if not-equal[Integer] 1[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4028 if not-equal[Integer] 1[Byte], -127[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4029 if not-equal[compile-time] 1[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4030 if not-equal[Integer] 1[Byte], -127[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4031 if not-equal[Integer] 1[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4032 if not-equal[Integer] 1[Byte], -127[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4033 if not-equal[compile-time] 1[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4034 if not-equal[Integer] 1[Byte], -1[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4035 if not-equal[Integer] 1[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4036 if not-equal[Integer] 1[Byte], -1[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4037 if not-equal[compile-time] 1[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4038 if not-equal[Integer] 1[Byte], -1[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4039 if not-equal[Integer] 1[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4040 if not-equal[Integer] 1[Byte], -1[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4041 if not-equal[compile-time] 1[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4042 if not-equal[Integer] 1[Byte], 0[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4043 if not-equal[Integer] 1[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4044 if not-equal[Integer] 1[Byte], 0[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4045 if not-equal[compile-time] 1[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4046 if not-equal[Integer] 1[Byte], 0[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4047 if not-equal[Integer] 1[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4048 if not-equal[Integer] 1[Byte], 0[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4049 if not-equal[compile-time] 1[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4050 if not-equal[Integer] 1[Byte], 1[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4051 if not-equal[Integer] 1[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4052 if not-equal[Integer] 1[Byte], 1[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4053 if not-equal[compile-time] 1[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4054 if not-equal[Integer] 1[Byte], 1[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4055 if not-equal[Integer] 1[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4056 if not-equal[Integer] 1[Byte], 1[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4057 if not-equal[compile-time] 1[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4058 if not-equal[Integer] 1[Byte], 127[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4059 if not-equal[Integer] 1[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4060 if not-equal[Integer] 1[Byte], 127[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4061 if not-equal[compile-time] 1[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4062 if not-equal[Integer] 1[Byte], 127[Int8] Var
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4063 if not-equal[Integer] 1[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4064 if not-equal[Integer] 1[Byte], 127[Int8] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4065 if not-equal[compile-time] 1[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4066 if not-equal[Integer] 127[Byte], -128[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4067 if not-equal[Integer] 127[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4068 if not-equal[Integer] 127[Byte], -128[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4069 if not-equal[compile-time] 127[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4070 if not-equal[Integer] 127[Byte], -128[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4071 if not-equal[Integer] 127[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4072 if not-equal[Integer] 127[Byte], -128[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4073 if not-equal[compile-time] 127[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4074 if not-equal[Integer] 127[Byte], -127[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4075 if not-equal[Integer] 127[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4076 if not-equal[Integer] 127[Byte], -127[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4077 if not-equal[compile-time] 127[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4078 if not-equal[Integer] 127[Byte], -127[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4079 if not-equal[Integer] 127[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4080 if not-equal[Integer] 127[Byte], -127[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4081 if not-equal[compile-time] 127[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4082 if not-equal[Integer] 127[Byte], -1[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4083 if not-equal[Integer] 127[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4084 if not-equal[Integer] 127[Byte], -1[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4085 if not-equal[compile-time] 127[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4086 if not-equal[Integer] 127[Byte], -1[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4087 if not-equal[Integer] 127[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4088 if not-equal[Integer] 127[Byte], -1[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4089 if not-equal[compile-time] 127[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4090 if not-equal[Integer] 127[Byte], 0[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4091 if not-equal[Integer] 127[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4092 if not-equal[Integer] 127[Byte], 0[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4093 if not-equal[compile-time] 127[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4094 if not-equal[Integer] 127[Byte], 0[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4095 if not-equal[Integer] 127[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4096 if not-equal[Integer] 127[Byte], 0[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4097 if not-equal[compile-time] 127[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4098 if not-equal[Integer] 127[Byte], 1[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4099 if not-equal[Integer] 127[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4100 if not-equal[Integer] 127[Byte], 1[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4101 if not-equal[compile-time] 127[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4102 if not-equal[Integer] 127[Byte], 1[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4103 if not-equal[Integer] 127[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4104 if not-equal[Integer] 127[Byte], 1[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4105 if not-equal[compile-time] 127[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4106 if not-equal[Integer] 127[Byte], 127[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4107 if not-equal[Integer] 127[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4108 if not-equal[Integer] 127[Byte], 127[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4109 if not-equal[compile-time] 127[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4110 if not-equal[Integer] 127[Byte], 127[Int8] Var
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4111 if not-equal[Integer] 127[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4112 if not-equal[Integer] 127[Byte], 127[Int8] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4113 if not-equal[compile-time] 127[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4114 if not-equal[Integer] 128[Byte], -128[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4115 if not-equal[Integer] 128[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4116 if not-equal[Integer] 128[Byte], -128[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4117 if not-equal[compile-time] 128[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4118 if not-equal[Integer] 128[Byte], -128[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4119 if not-equal[Integer] 128[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4120 if not-equal[Integer] 128[Byte], -128[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4121 if not-equal[compile-time] 128[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4122 if not-equal[Integer] 128[Byte], -127[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4123 if not-equal[Integer] 128[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4124 if not-equal[Integer] 128[Byte], -127[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4125 if not-equal[compile-time] 128[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4126 if not-equal[Integer] 128[Byte], -127[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4127 if not-equal[Integer] 128[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4128 if not-equal[Integer] 128[Byte], -127[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4129 if not-equal[compile-time] 128[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4130 if not-equal[Integer] 128[Byte], -1[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4131 if not-equal[Integer] 128[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4132 if not-equal[Integer] 128[Byte], -1[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4133 if not-equal[compile-time] 128[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4134 if not-equal[Integer] 128[Byte], -1[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4135 if not-equal[Integer] 128[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4136 if not-equal[Integer] 128[Byte], -1[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4137 if not-equal[compile-time] 128[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4138 if not-equal[Integer] 128[Byte], 0[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4139 if not-equal[Integer] 128[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4140 if not-equal[Integer] 128[Byte], 0[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4141 if not-equal[compile-time] 128[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4142 if not-equal[Integer] 128[Byte], 0[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4143 if not-equal[Integer] 128[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4144 if not-equal[Integer] 128[Byte], 0[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4145 if not-equal[compile-time] 128[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4146 if not-equal[Integer] 128[Byte], 1[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4147 if not-equal[Integer] 128[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4148 if not-equal[Integer] 128[Byte], 1[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4149 if not-equal[compile-time] 128[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4150 if not-equal[Integer] 128[Byte], 1[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4151 if not-equal[Integer] 128[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4152 if not-equal[Integer] 128[Byte], 1[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4153 if not-equal[compile-time] 128[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4154 if not-equal[Integer] 128[Byte], 127[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4155 if not-equal[Integer] 128[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4156 if not-equal[Integer] 128[Byte], 127[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4157 if not-equal[compile-time] 128[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4158 if not-equal[Integer] 128[Byte], 127[Int8] Var
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4159 if not-equal[Integer] 128[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4160 if not-equal[Integer] 128[Byte], 127[Int8] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4161 if not-equal[compile-time] 128[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4162 if not-equal[Integer] 255[Byte], -128[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4163 if not-equal[Integer] 255[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4164 if not-equal[Integer] 255[Byte], -128[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4165 if not-equal[compile-time] 255[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4166 if not-equal[Integer] 255[Byte], -128[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4167 if not-equal[Integer] 255[Byte], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4168 if not-equal[Integer] 255[Byte], -128[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4169 if not-equal[compile-time] 255[Byte], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4170 if not-equal[Integer] 255[Byte], -127[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4171 if not-equal[Integer] 255[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4172 if not-equal[Integer] 255[Byte], -127[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4173 if not-equal[compile-time] 255[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:4174 if not-equal[Integer] 255[Byte], -127[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4175 if not-equal[Integer] 255[Byte], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4176 if not-equal[Integer] 255[Byte], -127[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4177 if not-equal[compile-time] 255[Byte], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4178 if not-equal[Integer] 255[Byte], -1[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4179 if not-equal[Integer] 255[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4180 if not-equal[Integer] 255[Byte], -1[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4181 if not-equal[compile-time] 255[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4182 if not-equal[Integer] 255[Byte], -1[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4183 if not-equal[Integer] 255[Byte], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4184 if not-equal[Integer] 255[Byte], -1[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4185 if not-equal[compile-time] 255[Byte], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4186 if not-equal[Integer] 255[Byte], 0[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4187 if not-equal[Integer] 255[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4188 if not-equal[Integer] 255[Byte], 0[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4189 if not-equal[compile-time] 255[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4190 if not-equal[Integer] 255[Byte], 0[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4191 if not-equal[Integer] 255[Byte], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4192 if not-equal[Integer] 255[Byte], 0[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4193 if not-equal[compile-time] 255[Byte], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4194 if not-equal[Integer] 255[Byte], 1[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4195 if not-equal[Integer] 255[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4196 if not-equal[Integer] 255[Byte], 1[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4197 if not-equal[compile-time] 255[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4198 if not-equal[Integer] 255[Byte], 1[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4199 if not-equal[Integer] 255[Byte], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4200 if not-equal[Integer] 255[Byte], 1[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4201 if not-equal[compile-time] 255[Byte], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4202 if not-equal[Integer] 255[Byte], 127[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4203 if not-equal[Integer] 255[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4204 if not-equal[Integer] 255[Byte], 127[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4205 if not-equal[compile-time] 255[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4206 if not-equal[Integer] 255[Byte], 127[Int8] Var
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4207 if not-equal[Integer] 255[Byte], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4208 if not-equal[Integer] 255[Byte], 127[Int8] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4209 if not-equal[compile-time] 255[Byte], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4210 if not-equal[Integer] 0[Byte], -32768[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4211 if not-equal[Integer] 0[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4212 if not-equal[Integer] 0[Byte], -32768[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4213 if not-equal[compile-time] 0[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4214 if not-equal[Integer] 0[Byte], -32768[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4215 if not-equal[Integer] 0[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4216 if not-equal[Integer] 0[Byte], -32768[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4217 if not-equal[compile-time] 0[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4218 if not-equal[Integer] 0[Byte], -32767[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4219 if not-equal[Integer] 0[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4220 if not-equal[Integer] 0[Byte], -32767[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4221 if not-equal[compile-time] 0[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4222 if not-equal[Integer] 0[Byte], -32767[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4223 if not-equal[Integer] 0[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4224 if not-equal[Integer] 0[Byte], -32767[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4225 if not-equal[compile-time] 0[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4226 if not-equal[Integer] 0[Byte], -129[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4227 if not-equal[Integer] 0[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4228 if not-equal[Integer] 0[Byte], -129[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4229 if not-equal[compile-time] 0[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4230 if not-equal[Integer] 0[Byte], -129[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4231 if not-equal[Integer] 0[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4232 if not-equal[Integer] 0[Byte], -129[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4233 if not-equal[compile-time] 0[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4234 if not-equal[Integer] 0[Byte], -128[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4235 if not-equal[Integer] 0[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4236 if not-equal[Integer] 0[Byte], -128[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4237 if not-equal[compile-time] 0[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4238 if not-equal[Integer] 0[Byte], -128[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4239 if not-equal[Integer] 0[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4240 if not-equal[Integer] 0[Byte], -128[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4241 if not-equal[compile-time] 0[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4242 if not-equal[Integer] 0[Byte], -1[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4243 if not-equal[Integer] 0[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4244 if not-equal[Integer] 0[Byte], -1[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4245 if not-equal[compile-time] 0[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4246 if not-equal[Integer] 0[Byte], -1[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4247 if not-equal[Integer] 0[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4248 if not-equal[Integer] 0[Byte], -1[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4249 if not-equal[compile-time] 0[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4250 if not-equal[Integer] 0[Byte], 0[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4251 if not-equal[Integer] 0[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4252 if not-equal[Integer] 0[Byte], 0[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4253 if not-equal[compile-time] 0[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4254 if not-equal[Integer] 0[Byte], 0[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4255 if not-equal[Integer] 0[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4256 if not-equal[Integer] 0[Byte], 0[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4257 if not-equal[compile-time] 0[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4258 if not-equal[Integer] 0[Byte], 1[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4259 if not-equal[Integer] 0[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4260 if not-equal[Integer] 0[Byte], 1[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4261 if not-equal[compile-time] 0[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4262 if not-equal[Integer] 0[Byte], 1[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4263 if not-equal[Integer] 0[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4264 if not-equal[Integer] 0[Byte], 1[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4265 if not-equal[compile-time] 0[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4266 if not-equal[Integer] 0[Byte], 127[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4267 if not-equal[Integer] 0[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4268 if not-equal[Integer] 0[Byte], 127[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4269 if not-equal[compile-time] 0[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4270 if not-equal[Integer] 0[Byte], 127[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4271 if not-equal[Integer] 0[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4272 if not-equal[Integer] 0[Byte], 127[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4273 if not-equal[compile-time] 0[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4274 if not-equal[Integer] 0[Byte], 128[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4275 if not-equal[Integer] 0[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4276 if not-equal[Integer] 0[Byte], 128[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4277 if not-equal[compile-time] 0[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4278 if not-equal[Integer] 0[Byte], 128[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4279 if not-equal[Integer] 0[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4280 if not-equal[Integer] 0[Byte], 128[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4281 if not-equal[compile-time] 0[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4282 if not-equal[Integer] 0[Byte], 32767[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4283 if not-equal[Integer] 0[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4284 if not-equal[Integer] 0[Byte], 32767[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4285 if not-equal[compile-time] 0[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4286 if not-equal[Integer] 0[Byte], 32767[Integer] Var
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4287 if not-equal[Integer] 0[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4288 if not-equal[Integer] 0[Byte], 32767[Integer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4289 if not-equal[compile-time] 0[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4290 if not-equal[Integer] 1[Byte], -32768[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4291 if not-equal[Integer] 1[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4292 if not-equal[Integer] 1[Byte], -32768[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4293 if not-equal[compile-time] 1[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4294 if not-equal[Integer] 1[Byte], -32768[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4295 if not-equal[Integer] 1[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4296 if not-equal[Integer] 1[Byte], -32768[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4297 if not-equal[compile-time] 1[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4298 if not-equal[Integer] 1[Byte], -32767[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4299 if not-equal[Integer] 1[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4300 if not-equal[Integer] 1[Byte], -32767[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4301 if not-equal[compile-time] 1[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4302 if not-equal[Integer] 1[Byte], -32767[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4303 if not-equal[Integer] 1[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4304 if not-equal[Integer] 1[Byte], -32767[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4305 if not-equal[compile-time] 1[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4306 if not-equal[Integer] 1[Byte], -129[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4307 if not-equal[Integer] 1[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4308 if not-equal[Integer] 1[Byte], -129[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4309 if not-equal[compile-time] 1[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4310 if not-equal[Integer] 1[Byte], -129[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4311 if not-equal[Integer] 1[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4312 if not-equal[Integer] 1[Byte], -129[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4313 if not-equal[compile-time] 1[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4314 if not-equal[Integer] 1[Byte], -128[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4315 if not-equal[Integer] 1[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4316 if not-equal[Integer] 1[Byte], -128[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4317 if not-equal[compile-time] 1[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4318 if not-equal[Integer] 1[Byte], -128[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4319 if not-equal[Integer] 1[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4320 if not-equal[Integer] 1[Byte], -128[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4321 if not-equal[compile-time] 1[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4322 if not-equal[Integer] 1[Byte], -1[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4323 if not-equal[Integer] 1[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4324 if not-equal[Integer] 1[Byte], -1[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4325 if not-equal[compile-time] 1[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4326 if not-equal[Integer] 1[Byte], -1[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4327 if not-equal[Integer] 1[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4328 if not-equal[Integer] 1[Byte], -1[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4329 if not-equal[compile-time] 1[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4330 if not-equal[Integer] 1[Byte], 0[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4331 if not-equal[Integer] 1[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4332 if not-equal[Integer] 1[Byte], 0[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4333 if not-equal[compile-time] 1[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4334 if not-equal[Integer] 1[Byte], 0[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4335 if not-equal[Integer] 1[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4336 if not-equal[Integer] 1[Byte], 0[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4337 if not-equal[compile-time] 1[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4338 if not-equal[Integer] 1[Byte], 1[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4339 if not-equal[Integer] 1[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4340 if not-equal[Integer] 1[Byte], 1[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4341 if not-equal[compile-time] 1[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4342 if not-equal[Integer] 1[Byte], 1[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4343 if not-equal[Integer] 1[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4344 if not-equal[Integer] 1[Byte], 1[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4345 if not-equal[compile-time] 1[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4346 if not-equal[Integer] 1[Byte], 127[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4347 if not-equal[Integer] 1[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4348 if not-equal[Integer] 1[Byte], 127[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4349 if not-equal[compile-time] 1[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4350 if not-equal[Integer] 1[Byte], 127[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4351 if not-equal[Integer] 1[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4352 if not-equal[Integer] 1[Byte], 127[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4353 if not-equal[compile-time] 1[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4354 if not-equal[Integer] 1[Byte], 128[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4355 if not-equal[Integer] 1[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4356 if not-equal[Integer] 1[Byte], 128[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4357 if not-equal[compile-time] 1[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4358 if not-equal[Integer] 1[Byte], 128[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4359 if not-equal[Integer] 1[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4360 if not-equal[Integer] 1[Byte], 128[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4361 if not-equal[compile-time] 1[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4362 if not-equal[Integer] 1[Byte], 32767[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4363 if not-equal[Integer] 1[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4364 if not-equal[Integer] 1[Byte], 32767[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4365 if not-equal[compile-time] 1[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4366 if not-equal[Integer] 1[Byte], 32767[Integer] Var
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4367 if not-equal[Integer] 1[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4368 if not-equal[Integer] 1[Byte], 32767[Integer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4369 if not-equal[compile-time] 1[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4370 if not-equal[Integer] 127[Byte], -32768[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4371 if not-equal[Integer] 127[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4372 if not-equal[Integer] 127[Byte], -32768[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4373 if not-equal[compile-time] 127[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4374 if not-equal[Integer] 127[Byte], -32768[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4375 if not-equal[Integer] 127[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4376 if not-equal[Integer] 127[Byte], -32768[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4377 if not-equal[compile-time] 127[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4378 if not-equal[Integer] 127[Byte], -32767[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4379 if not-equal[Integer] 127[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4380 if not-equal[Integer] 127[Byte], -32767[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4381 if not-equal[compile-time] 127[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4382 if not-equal[Integer] 127[Byte], -32767[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4383 if not-equal[Integer] 127[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4384 if not-equal[Integer] 127[Byte], -32767[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4385 if not-equal[compile-time] 127[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4386 if not-equal[Integer] 127[Byte], -129[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4387 if not-equal[Integer] 127[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4388 if not-equal[Integer] 127[Byte], -129[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4389 if not-equal[compile-time] 127[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4390 if not-equal[Integer] 127[Byte], -129[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4391 if not-equal[Integer] 127[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4392 if not-equal[Integer] 127[Byte], -129[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4393 if not-equal[compile-time] 127[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4394 if not-equal[Integer] 127[Byte], -128[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4395 if not-equal[Integer] 127[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4396 if not-equal[Integer] 127[Byte], -128[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4397 if not-equal[compile-time] 127[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4398 if not-equal[Integer] 127[Byte], -128[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4399 if not-equal[Integer] 127[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4400 if not-equal[Integer] 127[Byte], -128[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4401 if not-equal[compile-time] 127[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4402 if not-equal[Integer] 127[Byte], -1[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4403 if not-equal[Integer] 127[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4404 if not-equal[Integer] 127[Byte], -1[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4405 if not-equal[compile-time] 127[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4406 if not-equal[Integer] 127[Byte], -1[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4407 if not-equal[Integer] 127[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4408 if not-equal[Integer] 127[Byte], -1[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4409 if not-equal[compile-time] 127[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4410 if not-equal[Integer] 127[Byte], 0[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4411 if not-equal[Integer] 127[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4412 if not-equal[Integer] 127[Byte], 0[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4413 if not-equal[compile-time] 127[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4414 if not-equal[Integer] 127[Byte], 0[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4415 if not-equal[Integer] 127[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4416 if not-equal[Integer] 127[Byte], 0[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4417 if not-equal[compile-time] 127[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4418 if not-equal[Integer] 127[Byte], 1[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4419 if not-equal[Integer] 127[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4420 if not-equal[Integer] 127[Byte], 1[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4421 if not-equal[compile-time] 127[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4422 if not-equal[Integer] 127[Byte], 1[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4423 if not-equal[Integer] 127[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4424 if not-equal[Integer] 127[Byte], 1[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4425 if not-equal[compile-time] 127[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4426 if not-equal[Integer] 127[Byte], 127[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4427 if not-equal[Integer] 127[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4428 if not-equal[Integer] 127[Byte], 127[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4429 if not-equal[compile-time] 127[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4430 if not-equal[Integer] 127[Byte], 127[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4431 if not-equal[Integer] 127[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4432 if not-equal[Integer] 127[Byte], 127[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4433 if not-equal[compile-time] 127[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4434 if not-equal[Integer] 127[Byte], 128[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4435 if not-equal[Integer] 127[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4436 if not-equal[Integer] 127[Byte], 128[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4437 if not-equal[compile-time] 127[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4438 if not-equal[Integer] 127[Byte], 128[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4439 if not-equal[Integer] 127[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4440 if not-equal[Integer] 127[Byte], 128[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4441 if not-equal[compile-time] 127[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4442 if not-equal[Integer] 127[Byte], 32767[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4443 if not-equal[Integer] 127[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4444 if not-equal[Integer] 127[Byte], 32767[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4445 if not-equal[compile-time] 127[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4446 if not-equal[Integer] 127[Byte], 32767[Integer] Var
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4447 if not-equal[Integer] 127[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4448 if not-equal[Integer] 127[Byte], 32767[Integer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4449 if not-equal[compile-time] 127[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4450 if not-equal[Integer] 128[Byte], -32768[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4451 if not-equal[Integer] 128[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4452 if not-equal[Integer] 128[Byte], -32768[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4453 if not-equal[compile-time] 128[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4454 if not-equal[Integer] 128[Byte], -32768[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4455 if not-equal[Integer] 128[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4456 if not-equal[Integer] 128[Byte], -32768[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4457 if not-equal[compile-time] 128[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4458 if not-equal[Integer] 128[Byte], -32767[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4459 if not-equal[Integer] 128[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4460 if not-equal[Integer] 128[Byte], -32767[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4461 if not-equal[compile-time] 128[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4462 if not-equal[Integer] 128[Byte], -32767[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4463 if not-equal[Integer] 128[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4464 if not-equal[Integer] 128[Byte], -32767[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4465 if not-equal[compile-time] 128[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4466 if not-equal[Integer] 128[Byte], -129[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4467 if not-equal[Integer] 128[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4468 if not-equal[Integer] 128[Byte], -129[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4469 if not-equal[compile-time] 128[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4470 if not-equal[Integer] 128[Byte], -129[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4471 if not-equal[Integer] 128[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4472 if not-equal[Integer] 128[Byte], -129[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4473 if not-equal[compile-time] 128[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4474 if not-equal[Integer] 128[Byte], -128[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4475 if not-equal[Integer] 128[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4476 if not-equal[Integer] 128[Byte], -128[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4477 if not-equal[compile-time] 128[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4478 if not-equal[Integer] 128[Byte], -128[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4479 if not-equal[Integer] 128[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4480 if not-equal[Integer] 128[Byte], -128[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4481 if not-equal[compile-time] 128[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4482 if not-equal[Integer] 128[Byte], -1[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4483 if not-equal[Integer] 128[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4484 if not-equal[Integer] 128[Byte], -1[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4485 if not-equal[compile-time] 128[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4486 if not-equal[Integer] 128[Byte], -1[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4487 if not-equal[Integer] 128[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4488 if not-equal[Integer] 128[Byte], -1[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4489 if not-equal[compile-time] 128[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4490 if not-equal[Integer] 128[Byte], 0[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4491 if not-equal[Integer] 128[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4492 if not-equal[Integer] 128[Byte], 0[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4493 if not-equal[compile-time] 128[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4494 if not-equal[Integer] 128[Byte], 0[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4495 if not-equal[Integer] 128[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4496 if not-equal[Integer] 128[Byte], 0[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4497 if not-equal[compile-time] 128[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4498 if not-equal[Integer] 128[Byte], 1[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4499 if not-equal[Integer] 128[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4500 if not-equal[Integer] 128[Byte], 1[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4501 if not-equal[compile-time] 128[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4502 if not-equal[Integer] 128[Byte], 1[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4503 if not-equal[Integer] 128[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4504 if not-equal[Integer] 128[Byte], 1[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4505 if not-equal[compile-time] 128[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4506 if not-equal[Integer] 128[Byte], 127[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4507 if not-equal[Integer] 128[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4508 if not-equal[Integer] 128[Byte], 127[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4509 if not-equal[compile-time] 128[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4510 if not-equal[Integer] 128[Byte], 127[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4511 if not-equal[Integer] 128[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4512 if not-equal[Integer] 128[Byte], 127[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4513 if not-equal[compile-time] 128[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4514 if not-equal[Integer] 128[Byte], 128[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4515 if not-equal[Integer] 128[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4516 if not-equal[Integer] 128[Byte], 128[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:4517 if not-equal[compile-time] 128[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:4518 if not-equal[Integer] 128[Byte], 128[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4519 if not-equal[Integer] 128[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4520 if not-equal[Integer] 128[Byte], 128[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4521 if not-equal[compile-time] 128[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4522 if not-equal[Integer] 128[Byte], 32767[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4523 if not-equal[Integer] 128[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4524 if not-equal[Integer] 128[Byte], 32767[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4525 if not-equal[compile-time] 128[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4526 if not-equal[Integer] 128[Byte], 32767[Integer] Var
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4527 if not-equal[Integer] 128[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4528 if not-equal[Integer] 128[Byte], 32767[Integer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4529 if not-equal[compile-time] 128[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4530 if not-equal[Integer] 255[Byte], -32768[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4531 if not-equal[Integer] 255[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4532 if not-equal[Integer] 255[Byte], -32768[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4533 if not-equal[compile-time] 255[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:4534 if not-equal[Integer] 255[Byte], -32768[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4535 if not-equal[Integer] 255[Byte], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4536 if not-equal[Integer] 255[Byte], -32768[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4537 if not-equal[compile-time] 255[Byte], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4538 if not-equal[Integer] 255[Byte], -32767[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4539 if not-equal[Integer] 255[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4540 if not-equal[Integer] 255[Byte], -32767[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4541 if not-equal[compile-time] 255[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:4542 if not-equal[Integer] 255[Byte], -32767[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4543 if not-equal[Integer] 255[Byte], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4544 if not-equal[Integer] 255[Byte], -32767[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4545 if not-equal[compile-time] 255[Byte], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4546 if not-equal[Integer] 255[Byte], -129[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4547 if not-equal[Integer] 255[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4548 if not-equal[Integer] 255[Byte], -129[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4549 if not-equal[compile-time] 255[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:4550 if not-equal[Integer] 255[Byte], -129[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4551 if not-equal[Integer] 255[Byte], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4552 if not-equal[Integer] 255[Byte], -129[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4553 if not-equal[compile-time] 255[Byte], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4554 if not-equal[Integer] 255[Byte], -128[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4555 if not-equal[Integer] 255[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4556 if not-equal[Integer] 255[Byte], -128[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4557 if not-equal[compile-time] 255[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:4558 if not-equal[Integer] 255[Byte], -128[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4559 if not-equal[Integer] 255[Byte], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4560 if not-equal[Integer] 255[Byte], -128[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4561 if not-equal[compile-time] 255[Byte], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4562 if not-equal[Integer] 255[Byte], -1[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4563 if not-equal[Integer] 255[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4564 if not-equal[Integer] 255[Byte], -1[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4565 if not-equal[compile-time] 255[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:4566 if not-equal[Integer] 255[Byte], -1[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4567 if not-equal[Integer] 255[Byte], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4568 if not-equal[Integer] 255[Byte], -1[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4569 if not-equal[compile-time] 255[Byte], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4570 if not-equal[Integer] 255[Byte], 0[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4571 if not-equal[Integer] 255[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4572 if not-equal[Integer] 255[Byte], 0[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4573 if not-equal[compile-time] 255[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4574 if not-equal[Integer] 255[Byte], 0[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4575 if not-equal[Integer] 255[Byte], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4576 if not-equal[Integer] 255[Byte], 0[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4577 if not-equal[compile-time] 255[Byte], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4578 if not-equal[Integer] 255[Byte], 1[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4579 if not-equal[Integer] 255[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4580 if not-equal[Integer] 255[Byte], 1[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4581 if not-equal[compile-time] 255[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4582 if not-equal[Integer] 255[Byte], 1[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4583 if not-equal[Integer] 255[Byte], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4584 if not-equal[Integer] 255[Byte], 1[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4585 if not-equal[compile-time] 255[Byte], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4586 if not-equal[Integer] 255[Byte], 127[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4587 if not-equal[Integer] 255[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4588 if not-equal[Integer] 255[Byte], 127[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4589 if not-equal[compile-time] 255[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4590 if not-equal[Integer] 255[Byte], 127[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4591 if not-equal[Integer] 255[Byte], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4592 if not-equal[Integer] 255[Byte], 127[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4593 if not-equal[compile-time] 255[Byte], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4594 if not-equal[Integer] 255[Byte], 128[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4595 if not-equal[Integer] 255[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4596 if not-equal[Integer] 255[Byte], 128[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4597 if not-equal[compile-time] 255[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4598 if not-equal[Integer] 255[Byte], 128[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4599 if not-equal[Integer] 255[Byte], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4600 if not-equal[Integer] 255[Byte], 128[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4601 if not-equal[compile-time] 255[Byte], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4602 if not-equal[Integer] 255[Byte], 32767[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4603 if not-equal[Integer] 255[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4604 if not-equal[Integer] 255[Byte], 32767[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4605 if not-equal[compile-time] 255[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4606 if not-equal[Integer] 255[Byte], 32767[Integer] Var
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4607 if not-equal[Integer] 255[Byte], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4608 if not-equal[Integer] 255[Byte], 32767[Integer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4609 if not-equal[compile-time] 255[Byte], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4610 if not-equal[Byte] 0[Byte], 0[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4611 if not-equal[Byte] 0[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4612 if not-equal[Byte] 0[Byte], 0[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4613 if not-equal[compile-time] 0[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4614 if not-equal[Byte] 0[Byte], 0[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4615 if not-equal[Byte] 0[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4616 if not-equal[Byte] 0[Byte], 0[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4617 if not-equal[compile-time] 0[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4618 if not-equal[Byte] 0[Byte], 1[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4619 if not-equal[Byte] 0[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4620 if not-equal[Byte] 0[Byte], 1[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4621 if not-equal[compile-time] 0[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4622 if not-equal[Byte] 0[Byte], 1[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4623 if not-equal[Byte] 0[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4624 if not-equal[Byte] 0[Byte], 1[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4625 if not-equal[compile-time] 0[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4626 if not-equal[Byte] 0[Byte], 127[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4627 if not-equal[Byte] 0[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4628 if not-equal[Byte] 0[Byte], 127[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4629 if not-equal[compile-time] 0[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4630 if not-equal[Byte] 0[Byte], 127[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4631 if not-equal[Byte] 0[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4632 if not-equal[Byte] 0[Byte], 127[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4633 if not-equal[compile-time] 0[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4634 if not-equal[Byte] 0[Byte], 128[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4635 if not-equal[Byte] 0[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4636 if not-equal[Byte] 0[Byte], 128[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4637 if not-equal[compile-time] 0[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4638 if not-equal[Byte] 0[Byte], 128[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4639 if not-equal[Byte] 0[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4640 if not-equal[Byte] 0[Byte], 128[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4641 if not-equal[compile-time] 0[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4642 if not-equal[Byte] 0[Byte], 255[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4643 if not-equal[Byte] 0[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4644 if not-equal[Byte] 0[Byte], 255[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4645 if not-equal[compile-time] 0[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4646 if not-equal[Byte] 0[Byte], 255[Byte] Var
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4647 if not-equal[Byte] 0[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4648 if not-equal[Byte] 0[Byte], 255[Byte] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4649 if not-equal[compile-time] 0[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4650 if not-equal[Byte] 1[Byte], 0[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4651 if not-equal[Byte] 1[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4652 if not-equal[Byte] 1[Byte], 0[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4653 if not-equal[compile-time] 1[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4654 if not-equal[Byte] 1[Byte], 0[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4655 if not-equal[Byte] 1[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4656 if not-equal[Byte] 1[Byte], 0[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4657 if not-equal[compile-time] 1[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4658 if not-equal[Byte] 1[Byte], 1[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4659 if not-equal[Byte] 1[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4660 if not-equal[Byte] 1[Byte], 1[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4661 if not-equal[compile-time] 1[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1;
endcode
varvalue r 0

code auto:4662 if not-equal[Byte] 1[Byte], 1[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4663 if not-equal[Byte] 1[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4664 if not-equal[Byte] 1[Byte], 1[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4665 if not-equal[compile-time] 1[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4666 if not-equal[Byte] 1[Byte], 127[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4667 if not-equal[Byte] 1[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4668 if not-equal[Byte] 1[Byte], 127[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4669 if not-equal[compile-time] 1[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4670 if not-equal[Byte] 1[Byte], 127[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4671 if not-equal[Byte] 1[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4672 if not-equal[Byte] 1[Byte], 127[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4673 if not-equal[compile-time] 1[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4674 if not-equal[Byte] 1[Byte], 128[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4675 if not-equal[Byte] 1[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4676 if not-equal[Byte] 1[Byte], 128[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4677 if not-equal[compile-time] 1[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4678 if not-equal[Byte] 1[Byte], 128[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4679 if not-equal[Byte] 1[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4680 if not-equal[Byte] 1[Byte], 128[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4681 if not-equal[compile-time] 1[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4682 if not-equal[Byte] 1[Byte], 255[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4683 if not-equal[Byte] 1[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4684 if not-equal[Byte] 1[Byte], 255[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4685 if not-equal[compile-time] 1[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4686 if not-equal[Byte] 1[Byte], 255[Byte] Var
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4687 if not-equal[Byte] 1[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4688 if not-equal[Byte] 1[Byte], 255[Byte] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4689 if not-equal[compile-time] 1[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4690 if not-equal[Byte] 127[Byte], 0[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4691 if not-equal[Byte] 127[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4692 if not-equal[Byte] 127[Byte], 0[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4693 if not-equal[compile-time] 127[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4694 if not-equal[Byte] 127[Byte], 0[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4695 if not-equal[Byte] 127[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4696 if not-equal[Byte] 127[Byte], 0[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4697 if not-equal[compile-time] 127[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4698 if not-equal[Byte] 127[Byte], 1[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4699 if not-equal[Byte] 127[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4700 if not-equal[Byte] 127[Byte], 1[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4701 if not-equal[compile-time] 127[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4702 if not-equal[Byte] 127[Byte], 1[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4703 if not-equal[Byte] 127[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4704 if not-equal[Byte] 127[Byte], 1[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4705 if not-equal[compile-time] 127[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4706 if not-equal[Byte] 127[Byte], 127[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4707 if not-equal[Byte] 127[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4708 if not-equal[Byte] 127[Byte], 127[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4709 if not-equal[compile-time] 127[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1;
endcode
varvalue r 0

code auto:4710 if not-equal[Byte] 127[Byte], 127[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4711 if not-equal[Byte] 127[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4712 if not-equal[Byte] 127[Byte], 127[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4713 if not-equal[compile-time] 127[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4714 if not-equal[Byte] 127[Byte], 128[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4715 if not-equal[Byte] 127[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4716 if not-equal[Byte] 127[Byte], 128[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4717 if not-equal[compile-time] 127[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4718 if not-equal[Byte] 127[Byte], 128[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4719 if not-equal[Byte] 127[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4720 if not-equal[Byte] 127[Byte], 128[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4721 if not-equal[compile-time] 127[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4722 if not-equal[Byte] 127[Byte], 255[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4723 if not-equal[Byte] 127[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4724 if not-equal[Byte] 127[Byte], 255[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4725 if not-equal[compile-time] 127[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4726 if not-equal[Byte] 127[Byte], 255[Byte] Var
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4727 if not-equal[Byte] 127[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4728 if not-equal[Byte] 127[Byte], 255[Byte] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4729 if not-equal[compile-time] 127[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4730 if not-equal[Byte] 128[Byte], 0[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4731 if not-equal[Byte] 128[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4732 if not-equal[Byte] 128[Byte], 0[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4733 if not-equal[compile-time] 128[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4734 if not-equal[Byte] 128[Byte], 0[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4735 if not-equal[Byte] 128[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4736 if not-equal[Byte] 128[Byte], 0[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4737 if not-equal[compile-time] 128[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4738 if not-equal[Byte] 128[Byte], 1[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4739 if not-equal[Byte] 128[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4740 if not-equal[Byte] 128[Byte], 1[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4741 if not-equal[compile-time] 128[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4742 if not-equal[Byte] 128[Byte], 1[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4743 if not-equal[Byte] 128[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4744 if not-equal[Byte] 128[Byte], 1[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4745 if not-equal[compile-time] 128[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4746 if not-equal[Byte] 128[Byte], 127[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4747 if not-equal[Byte] 128[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4748 if not-equal[Byte] 128[Byte], 127[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4749 if not-equal[compile-time] 128[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4750 if not-equal[Byte] 128[Byte], 127[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4751 if not-equal[Byte] 128[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4752 if not-equal[Byte] 128[Byte], 127[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4753 if not-equal[compile-time] 128[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4754 if not-equal[Byte] 128[Byte], 128[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4755 if not-equal[Byte] 128[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4756 if not-equal[Byte] 128[Byte], 128[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:4757 if not-equal[compile-time] 128[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1;
endcode
varvalue r 0

code auto:4758 if not-equal[Byte] 128[Byte], 128[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4759 if not-equal[Byte] 128[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4760 if not-equal[Byte] 128[Byte], 128[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4761 if not-equal[compile-time] 128[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4762 if not-equal[Byte] 128[Byte], 255[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4763 if not-equal[Byte] 128[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4764 if not-equal[Byte] 128[Byte], 255[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4765 if not-equal[compile-time] 128[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4766 if not-equal[Byte] 128[Byte], 255[Byte] Var
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4767 if not-equal[Byte] 128[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4768 if not-equal[Byte] 128[Byte], 255[Byte] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4769 if not-equal[compile-time] 128[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4770 if not-equal[Byte] 255[Byte], 0[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4771 if not-equal[Byte] 255[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4772 if not-equal[Byte] 255[Byte], 0[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4773 if not-equal[compile-time] 255[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4774 if not-equal[Byte] 255[Byte], 0[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4775 if not-equal[Byte] 255[Byte], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4776 if not-equal[Byte] 255[Byte], 0[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4777 if not-equal[compile-time] 255[Byte], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4778 if not-equal[Byte] 255[Byte], 1[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4779 if not-equal[Byte] 255[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4780 if not-equal[Byte] 255[Byte], 1[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4781 if not-equal[compile-time] 255[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:4782 if not-equal[Byte] 255[Byte], 1[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4783 if not-equal[Byte] 255[Byte], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4784 if not-equal[Byte] 255[Byte], 1[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4785 if not-equal[compile-time] 255[Byte], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4786 if not-equal[Byte] 255[Byte], 127[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4787 if not-equal[Byte] 255[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4788 if not-equal[Byte] 255[Byte], 127[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4789 if not-equal[compile-time] 255[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:4790 if not-equal[Byte] 255[Byte], 127[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4791 if not-equal[Byte] 255[Byte], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4792 if not-equal[Byte] 255[Byte], 127[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4793 if not-equal[compile-time] 255[Byte], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4794 if not-equal[Byte] 255[Byte], 128[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4795 if not-equal[Byte] 255[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4796 if not-equal[Byte] 255[Byte], 128[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4797 if not-equal[compile-time] 255[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:4798 if not-equal[Byte] 255[Byte], 128[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4799 if not-equal[Byte] 255[Byte], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4800 if not-equal[Byte] 255[Byte], 128[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4801 if not-equal[compile-time] 255[Byte], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4802 if not-equal[Byte] 255[Byte], 255[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4803 if not-equal[Byte] 255[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4804 if not-equal[Byte] 255[Byte], 255[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:4805 if not-equal[compile-time] 255[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:4806 if not-equal[Byte] 255[Byte], 255[Byte] Var
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4807 if not-equal[Byte] 255[Byte], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4808 if not-equal[Byte] 255[Byte], 255[Byte] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4809 if not-equal[compile-time] 255[Byte], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4810 if not-equal[Word] 0[Byte], 0[Word] Var
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4811 if not-equal[Word] 0[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4812 if not-equal[Word] 0[Byte], 0[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4813 if not-equal[compile-time] 0[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:4814 if not-equal[Word] 0[Byte], 0[Word] Var
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4815 if not-equal[Word] 0[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4816 if not-equal[Word] 0[Byte], 0[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4817 if not-equal[compile-time] 0[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4818 if not-equal[Word] 0[Byte], 255[Word] Var
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4819 if not-equal[Word] 0[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4820 if not-equal[Word] 0[Byte], 255[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4821 if not-equal[compile-time] 0[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4822 if not-equal[Word] 0[Byte], 255[Word] Var
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4823 if not-equal[Word] 0[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4824 if not-equal[Word] 0[Byte], 255[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4825 if not-equal[compile-time] 0[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4826 if not-equal[Word] 0[Byte], 32767[Word] Var
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4827 if not-equal[Word] 0[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4828 if not-equal[Word] 0[Byte], 32767[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4829 if not-equal[compile-time] 0[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4830 if not-equal[Word] 0[Byte], 32767[Word] Var
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4831 if not-equal[Word] 0[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4832 if not-equal[Word] 0[Byte], 32767[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4833 if not-equal[compile-time] 0[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4834 if not-equal[Word] 0[Byte], 32768[Word] Var
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4835 if not-equal[Word] 0[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4836 if not-equal[Word] 0[Byte], 32768[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4837 if not-equal[compile-time] 0[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4838 if not-equal[Word] 0[Byte], 32768[Word] Var
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4839 if not-equal[Word] 0[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4840 if not-equal[Word] 0[Byte], 32768[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4841 if not-equal[compile-time] 0[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4842 if not-equal[Word] 0[Byte], 65535[Word] Var
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4843 if not-equal[Word] 0[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4844 if not-equal[Word] 0[Byte], 65535[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4845 if not-equal[compile-time] 0[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4846 if not-equal[Word] 0[Byte], 65535[Word] Var
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4847 if not-equal[Word] 0[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4848 if not-equal[Word] 0[Byte], 65535[Word] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4849 if not-equal[compile-time] 0[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4850 if not-equal[Word] 1[Byte], 0[Word] Var
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4851 if not-equal[Word] 1[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4852 if not-equal[Word] 1[Byte], 0[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4853 if not-equal[compile-time] 1[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4854 if not-equal[Word] 1[Byte], 0[Word] Var
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4855 if not-equal[Word] 1[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4856 if not-equal[Word] 1[Byte], 0[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4857 if not-equal[compile-time] 1[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4858 if not-equal[Word] 1[Byte], 255[Word] Var
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4859 if not-equal[Word] 1[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4860 if not-equal[Word] 1[Byte], 255[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4861 if not-equal[compile-time] 1[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4862 if not-equal[Word] 1[Byte], 255[Word] Var
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4863 if not-equal[Word] 1[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4864 if not-equal[Word] 1[Byte], 255[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4865 if not-equal[compile-time] 1[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4866 if not-equal[Word] 1[Byte], 32767[Word] Var
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4867 if not-equal[Word] 1[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4868 if not-equal[Word] 1[Byte], 32767[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4869 if not-equal[compile-time] 1[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4870 if not-equal[Word] 1[Byte], 32767[Word] Var
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4871 if not-equal[Word] 1[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4872 if not-equal[Word] 1[Byte], 32767[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4873 if not-equal[compile-time] 1[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4874 if not-equal[Word] 1[Byte], 32768[Word] Var
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4875 if not-equal[Word] 1[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4876 if not-equal[Word] 1[Byte], 32768[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4877 if not-equal[compile-time] 1[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4878 if not-equal[Word] 1[Byte], 32768[Word] Var
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4879 if not-equal[Word] 1[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4880 if not-equal[Word] 1[Byte], 32768[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4881 if not-equal[compile-time] 1[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4882 if not-equal[Word] 1[Byte], 65535[Word] Var
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4883 if not-equal[Word] 1[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4884 if not-equal[Word] 1[Byte], 65535[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4885 if not-equal[compile-time] 1[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4886 if not-equal[Word] 1[Byte], 65535[Word] Var
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4887 if not-equal[Word] 1[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4888 if not-equal[Word] 1[Byte], 65535[Word] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4889 if not-equal[compile-time] 1[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4890 if not-equal[Word] 127[Byte], 0[Word] Var
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4891 if not-equal[Word] 127[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4892 if not-equal[Word] 127[Byte], 0[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4893 if not-equal[compile-time] 127[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4894 if not-equal[Word] 127[Byte], 0[Word] Var
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4895 if not-equal[Word] 127[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4896 if not-equal[Word] 127[Byte], 0[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4897 if not-equal[compile-time] 127[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4898 if not-equal[Word] 127[Byte], 255[Word] Var
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4899 if not-equal[Word] 127[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4900 if not-equal[Word] 127[Byte], 255[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4901 if not-equal[compile-time] 127[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4902 if not-equal[Word] 127[Byte], 255[Word] Var
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4903 if not-equal[Word] 127[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4904 if not-equal[Word] 127[Byte], 255[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4905 if not-equal[compile-time] 127[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4906 if not-equal[Word] 127[Byte], 32767[Word] Var
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4907 if not-equal[Word] 127[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4908 if not-equal[Word] 127[Byte], 32767[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4909 if not-equal[compile-time] 127[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4910 if not-equal[Word] 127[Byte], 32767[Word] Var
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4911 if not-equal[Word] 127[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4912 if not-equal[Word] 127[Byte], 32767[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4913 if not-equal[compile-time] 127[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4914 if not-equal[Word] 127[Byte], 32768[Word] Var
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4915 if not-equal[Word] 127[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4916 if not-equal[Word] 127[Byte], 32768[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4917 if not-equal[compile-time] 127[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4918 if not-equal[Word] 127[Byte], 32768[Word] Var
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4919 if not-equal[Word] 127[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4920 if not-equal[Word] 127[Byte], 32768[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4921 if not-equal[compile-time] 127[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4922 if not-equal[Word] 127[Byte], 65535[Word] Var
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4923 if not-equal[Word] 127[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4924 if not-equal[Word] 127[Byte], 65535[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4925 if not-equal[compile-time] 127[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4926 if not-equal[Word] 127[Byte], 65535[Word] Var
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4927 if not-equal[Word] 127[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4928 if not-equal[Word] 127[Byte], 65535[Word] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4929 if not-equal[compile-time] 127[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4930 if not-equal[Word] 128[Byte], 0[Word] Var
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4931 if not-equal[Word] 128[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4932 if not-equal[Word] 128[Byte], 0[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4933 if not-equal[compile-time] 128[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4934 if not-equal[Word] 128[Byte], 0[Word] Var
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4935 if not-equal[Word] 128[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4936 if not-equal[Word] 128[Byte], 0[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4937 if not-equal[compile-time] 128[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4938 if not-equal[Word] 128[Byte], 255[Word] Var
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4939 if not-equal[Word] 128[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4940 if not-equal[Word] 128[Byte], 255[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4941 if not-equal[compile-time] 128[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:4942 if not-equal[Word] 128[Byte], 255[Word] Var
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4943 if not-equal[Word] 128[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4944 if not-equal[Word] 128[Byte], 255[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4945 if not-equal[compile-time] 128[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4946 if not-equal[Word] 128[Byte], 32767[Word] Var
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4947 if not-equal[Word] 128[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4948 if not-equal[Word] 128[Byte], 32767[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4949 if not-equal[compile-time] 128[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4950 if not-equal[Word] 128[Byte], 32767[Word] Var
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4951 if not-equal[Word] 128[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4952 if not-equal[Word] 128[Byte], 32767[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4953 if not-equal[compile-time] 128[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4954 if not-equal[Word] 128[Byte], 32768[Word] Var
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4955 if not-equal[Word] 128[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4956 if not-equal[Word] 128[Byte], 32768[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4957 if not-equal[compile-time] 128[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4958 if not-equal[Word] 128[Byte], 32768[Word] Var
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4959 if not-equal[Word] 128[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4960 if not-equal[Word] 128[Byte], 32768[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4961 if not-equal[compile-time] 128[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4962 if not-equal[Word] 128[Byte], 65535[Word] Var
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4963 if not-equal[Word] 128[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4964 if not-equal[Word] 128[Byte], 65535[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4965 if not-equal[compile-time] 128[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:4966 if not-equal[Word] 128[Byte], 65535[Word] Var
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4967 if not-equal[Word] 128[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4968 if not-equal[Word] 128[Byte], 65535[Word] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4969 if not-equal[compile-time] 128[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4970 if not-equal[Word] 255[Byte], 0[Word] Var
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4971 if not-equal[Word] 255[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4972 if not-equal[Word] 255[Byte], 0[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4973 if not-equal[compile-time] 255[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:4974 if not-equal[Word] 255[Byte], 0[Word] Var
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4975 if not-equal[Word] 255[Byte], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4976 if not-equal[Word] 255[Byte], 0[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4977 if not-equal[compile-time] 255[Byte], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4978 if not-equal[Word] 255[Byte], 255[Word] Var
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:4979 if not-equal[Word] 255[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:4980 if not-equal[Word] 255[Byte], 255[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:4981 if not-equal[compile-time] 255[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:4982 if not-equal[Word] 255[Byte], 255[Word] Var
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4983 if not-equal[Word] 255[Byte], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4984 if not-equal[Word] 255[Byte], 255[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4985 if not-equal[compile-time] 255[Byte], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:4986 if not-equal[Word] 255[Byte], 32767[Word] Var
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4987 if not-equal[Word] 255[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4988 if not-equal[Word] 255[Byte], 32767[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4989 if not-equal[compile-time] 255[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:4990 if not-equal[Word] 255[Byte], 32767[Word] Var
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4991 if not-equal[Word] 255[Byte], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4992 if not-equal[Word] 255[Byte], 32767[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4993 if not-equal[compile-time] 255[Byte], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4994 if not-equal[Word] 255[Byte], 32768[Word] Var
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:4995 if not-equal[Word] 255[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:4996 if not-equal[Word] 255[Byte], 32768[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4997 if not-equal[compile-time] 255[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:4998 if not-equal[Word] 255[Byte], 32768[Word] Var
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:4999 if not-equal[Word] 255[Byte], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5000 if not-equal[Word] 255[Byte], 32768[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5001 if not-equal[compile-time] 255[Byte], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5002 if not-equal[Word] 255[Byte], 65535[Word] Var
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5003 if not-equal[Word] 255[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5004 if not-equal[Word] 255[Byte], 65535[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5005 if not-equal[compile-time] 255[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5006 if not-equal[Word] 255[Byte], 65535[Word] Var
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5007 if not-equal[Word] 255[Byte], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5008 if not-equal[Word] 255[Byte], 65535[Word] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5009 if not-equal[compile-time] 255[Byte], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5010 if not-equal[Pointer] 0[Byte], 0[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5011 if not-equal[Pointer] 0[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5012 if not-equal[Pointer] 0[Byte], 0[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5013 if not-equal[compile-time] 0[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5014 if not-equal[Pointer] 0[Byte], 0[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5015 if not-equal[Pointer] 0[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5016 if not-equal[Pointer] 0[Byte], 0[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5017 if not-equal[compile-time] 0[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5018 if not-equal[Pointer] 0[Byte], 255[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5019 if not-equal[Pointer] 0[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5020 if not-equal[Pointer] 0[Byte], 255[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5021 if not-equal[compile-time] 0[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5022 if not-equal[Pointer] 0[Byte], 255[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5023 if not-equal[Pointer] 0[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5024 if not-equal[Pointer] 0[Byte], 255[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5025 if not-equal[compile-time] 0[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5026 if not-equal[Pointer] 0[Byte], 32767[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5027 if not-equal[Pointer] 0[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5028 if not-equal[Pointer] 0[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5029 if not-equal[compile-time] 0[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5030 if not-equal[Pointer] 0[Byte], 32767[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5031 if not-equal[Pointer] 0[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5032 if not-equal[Pointer] 0[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5033 if not-equal[compile-time] 0[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5034 if not-equal[Pointer] 0[Byte], 32768[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5035 if not-equal[Pointer] 0[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5036 if not-equal[Pointer] 0[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5037 if not-equal[compile-time] 0[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5038 if not-equal[Pointer] 0[Byte], 32768[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5039 if not-equal[Pointer] 0[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5040 if not-equal[Pointer] 0[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5041 if not-equal[compile-time] 0[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5042 if not-equal[Pointer] 0[Byte], 65535[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5043 if not-equal[Pointer] 0[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5044 if not-equal[Pointer] 0[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5045 if not-equal[compile-time] 0[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5046 if not-equal[Pointer] 0[Byte], 65535[Pointer] Var
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5047 if not-equal[Pointer] 0[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5048 if not-equal[Pointer] 0[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5049 if not-equal[compile-time] 0[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5050 if not-equal[Pointer] 1[Byte], 0[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5051 if not-equal[Pointer] 1[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5052 if not-equal[Pointer] 1[Byte], 0[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5053 if not-equal[compile-time] 1[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5054 if not-equal[Pointer] 1[Byte], 0[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5055 if not-equal[Pointer] 1[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5056 if not-equal[Pointer] 1[Byte], 0[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5057 if not-equal[compile-time] 1[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5058 if not-equal[Pointer] 1[Byte], 255[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5059 if not-equal[Pointer] 1[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5060 if not-equal[Pointer] 1[Byte], 255[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5061 if not-equal[compile-time] 1[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5062 if not-equal[Pointer] 1[Byte], 255[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5063 if not-equal[Pointer] 1[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5064 if not-equal[Pointer] 1[Byte], 255[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5065 if not-equal[compile-time] 1[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5066 if not-equal[Pointer] 1[Byte], 32767[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5067 if not-equal[Pointer] 1[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5068 if not-equal[Pointer] 1[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5069 if not-equal[compile-time] 1[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5070 if not-equal[Pointer] 1[Byte], 32767[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5071 if not-equal[Pointer] 1[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5072 if not-equal[Pointer] 1[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5073 if not-equal[compile-time] 1[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5074 if not-equal[Pointer] 1[Byte], 32768[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5075 if not-equal[Pointer] 1[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5076 if not-equal[Pointer] 1[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5077 if not-equal[compile-time] 1[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5078 if not-equal[Pointer] 1[Byte], 32768[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5079 if not-equal[Pointer] 1[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5080 if not-equal[Pointer] 1[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5081 if not-equal[compile-time] 1[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5082 if not-equal[Pointer] 1[Byte], 65535[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5083 if not-equal[Pointer] 1[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5084 if not-equal[Pointer] 1[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5085 if not-equal[compile-time] 1[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5086 if not-equal[Pointer] 1[Byte], 65535[Pointer] Var
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5087 if not-equal[Pointer] 1[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 1 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5088 if not-equal[Pointer] 1[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 1;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5089 if not-equal[compile-time] 1[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 1 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5090 if not-equal[Pointer] 127[Byte], 0[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5091 if not-equal[Pointer] 127[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5092 if not-equal[Pointer] 127[Byte], 0[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5093 if not-equal[compile-time] 127[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5094 if not-equal[Pointer] 127[Byte], 0[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5095 if not-equal[Pointer] 127[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5096 if not-equal[Pointer] 127[Byte], 0[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5097 if not-equal[compile-time] 127[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5098 if not-equal[Pointer] 127[Byte], 255[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5099 if not-equal[Pointer] 127[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5100 if not-equal[Pointer] 127[Byte], 255[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5101 if not-equal[compile-time] 127[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5102 if not-equal[Pointer] 127[Byte], 255[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5103 if not-equal[Pointer] 127[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5104 if not-equal[Pointer] 127[Byte], 255[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5105 if not-equal[compile-time] 127[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5106 if not-equal[Pointer] 127[Byte], 32767[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5107 if not-equal[Pointer] 127[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5108 if not-equal[Pointer] 127[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5109 if not-equal[compile-time] 127[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5110 if not-equal[Pointer] 127[Byte], 32767[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5111 if not-equal[Pointer] 127[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5112 if not-equal[Pointer] 127[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5113 if not-equal[compile-time] 127[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5114 if not-equal[Pointer] 127[Byte], 32768[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5115 if not-equal[Pointer] 127[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5116 if not-equal[Pointer] 127[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5117 if not-equal[compile-time] 127[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5118 if not-equal[Pointer] 127[Byte], 32768[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5119 if not-equal[Pointer] 127[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5120 if not-equal[Pointer] 127[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5121 if not-equal[compile-time] 127[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5122 if not-equal[Pointer] 127[Byte], 65535[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5123 if not-equal[Pointer] 127[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5124 if not-equal[Pointer] 127[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5125 if not-equal[compile-time] 127[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5126 if not-equal[Pointer] 127[Byte], 65535[Pointer] Var
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5127 if not-equal[Pointer] 127[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 127 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5128 if not-equal[Pointer] 127[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 127;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5129 if not-equal[compile-time] 127[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 127 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5130 if not-equal[Pointer] 128[Byte], 0[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5131 if not-equal[Pointer] 128[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5132 if not-equal[Pointer] 128[Byte], 0[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5133 if not-equal[compile-time] 128[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5134 if not-equal[Pointer] 128[Byte], 0[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5135 if not-equal[Pointer] 128[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5136 if not-equal[Pointer] 128[Byte], 0[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5137 if not-equal[compile-time] 128[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5138 if not-equal[Pointer] 128[Byte], 255[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5139 if not-equal[Pointer] 128[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5140 if not-equal[Pointer] 128[Byte], 255[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5141 if not-equal[compile-time] 128[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5142 if not-equal[Pointer] 128[Byte], 255[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5143 if not-equal[Pointer] 128[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5144 if not-equal[Pointer] 128[Byte], 255[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5145 if not-equal[compile-time] 128[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5146 if not-equal[Pointer] 128[Byte], 32767[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5147 if not-equal[Pointer] 128[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5148 if not-equal[Pointer] 128[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5149 if not-equal[compile-time] 128[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5150 if not-equal[Pointer] 128[Byte], 32767[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5151 if not-equal[Pointer] 128[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5152 if not-equal[Pointer] 128[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5153 if not-equal[compile-time] 128[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5154 if not-equal[Pointer] 128[Byte], 32768[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5155 if not-equal[Pointer] 128[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5156 if not-equal[Pointer] 128[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5157 if not-equal[compile-time] 128[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5158 if not-equal[Pointer] 128[Byte], 32768[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5159 if not-equal[Pointer] 128[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5160 if not-equal[Pointer] 128[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5161 if not-equal[compile-time] 128[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5162 if not-equal[Pointer] 128[Byte], 65535[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5163 if not-equal[Pointer] 128[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5164 if not-equal[Pointer] 128[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5165 if not-equal[compile-time] 128[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5166 if not-equal[Pointer] 128[Byte], 65535[Pointer] Var
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5167 if not-equal[Pointer] 128[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 128 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5168 if not-equal[Pointer] 128[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 128;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5169 if not-equal[compile-time] 128[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 128 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5170 if not-equal[Pointer] 255[Byte], 0[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5171 if not-equal[Pointer] 255[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5172 if not-equal[Pointer] 255[Byte], 0[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5173 if not-equal[compile-time] 255[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5174 if not-equal[Pointer] 255[Byte], 0[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5175 if not-equal[Pointer] 255[Byte], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5176 if not-equal[Pointer] 255[Byte], 0[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5177 if not-equal[compile-time] 255[Byte], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5178 if not-equal[Pointer] 255[Byte], 255[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5179 if not-equal[Pointer] 255[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5180 if not-equal[Pointer] 255[Byte], 255[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:5181 if not-equal[compile-time] 255[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:5182 if not-equal[Pointer] 255[Byte], 255[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5183 if not-equal[Pointer] 255[Byte], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5184 if not-equal[Pointer] 255[Byte], 255[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5185 if not-equal[compile-time] 255[Byte], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5186 if not-equal[Pointer] 255[Byte], 32767[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5187 if not-equal[Pointer] 255[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5188 if not-equal[Pointer] 255[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5189 if not-equal[compile-time] 255[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5190 if not-equal[Pointer] 255[Byte], 32767[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5191 if not-equal[Pointer] 255[Byte], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5192 if not-equal[Pointer] 255[Byte], 32767[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5193 if not-equal[compile-time] 255[Byte], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5194 if not-equal[Pointer] 255[Byte], 32768[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5195 if not-equal[Pointer] 255[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5196 if not-equal[Pointer] 255[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5197 if not-equal[compile-time] 255[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:5198 if not-equal[Pointer] 255[Byte], 32768[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5199 if not-equal[Pointer] 255[Byte], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5200 if not-equal[Pointer] 255[Byte], 32768[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5201 if not-equal[compile-time] 255[Byte], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5202 if not-equal[Pointer] 255[Byte], 65535[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5203 if not-equal[Pointer] 255[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5204 if not-equal[Pointer] 255[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5205 if not-equal[compile-time] 255[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:5206 if not-equal[Pointer] 255[Byte], 65535[Pointer] Var
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5207 if not-equal[Pointer] 255[Byte], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5208 if not-equal[Pointer] 255[Byte], 65535[Pointer] Right immediate
  var  a: Byte = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5209 if not-equal[compile-time] 255[Byte], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5210 if not-equal[Integer] 0[Word], -128[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5211 if not-equal[Integer] 0[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5212 if not-equal[Integer] 0[Word], -128[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5213 if not-equal[compile-time] 0[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5214 if not-equal[Integer] 0[Word], -128[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5215 if not-equal[Integer] 0[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5216 if not-equal[Integer] 0[Word], -128[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5217 if not-equal[compile-time] 0[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5218 if not-equal[Integer] 0[Word], -127[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5219 if not-equal[Integer] 0[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5220 if not-equal[Integer] 0[Word], -127[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5221 if not-equal[compile-time] 0[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5222 if not-equal[Integer] 0[Word], -127[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5223 if not-equal[Integer] 0[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5224 if not-equal[Integer] 0[Word], -127[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5225 if not-equal[compile-time] 0[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5226 if not-equal[Integer] 0[Word], -1[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5227 if not-equal[Integer] 0[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5228 if not-equal[Integer] 0[Word], -1[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5229 if not-equal[compile-time] 0[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5230 if not-equal[Integer] 0[Word], -1[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5231 if not-equal[Integer] 0[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5232 if not-equal[Integer] 0[Word], -1[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5233 if not-equal[compile-time] 0[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5234 if not-equal[Integer] 0[Word], 0[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5235 if not-equal[Integer] 0[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5236 if not-equal[Integer] 0[Word], 0[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5237 if not-equal[compile-time] 0[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5238 if not-equal[Integer] 0[Word], 0[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5239 if not-equal[Integer] 0[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5240 if not-equal[Integer] 0[Word], 0[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5241 if not-equal[compile-time] 0[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5242 if not-equal[Integer] 0[Word], 1[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5243 if not-equal[Integer] 0[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5244 if not-equal[Integer] 0[Word], 1[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5245 if not-equal[compile-time] 0[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5246 if not-equal[Integer] 0[Word], 1[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5247 if not-equal[Integer] 0[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5248 if not-equal[Integer] 0[Word], 1[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5249 if not-equal[compile-time] 0[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5250 if not-equal[Integer] 0[Word], 127[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5251 if not-equal[Integer] 0[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5252 if not-equal[Integer] 0[Word], 127[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5253 if not-equal[compile-time] 0[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5254 if not-equal[Integer] 0[Word], 127[Int8] Var
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5255 if not-equal[Integer] 0[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5256 if not-equal[Integer] 0[Word], 127[Int8] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5257 if not-equal[compile-time] 0[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5258 if not-equal[Integer] 255[Word], -128[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5259 if not-equal[Integer] 255[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5260 if not-equal[Integer] 255[Word], -128[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5261 if not-equal[compile-time] 255[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5262 if not-equal[Integer] 255[Word], -128[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5263 if not-equal[Integer] 255[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5264 if not-equal[Integer] 255[Word], -128[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5265 if not-equal[compile-time] 255[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5266 if not-equal[Integer] 255[Word], -127[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5267 if not-equal[Integer] 255[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5268 if not-equal[Integer] 255[Word], -127[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5269 if not-equal[compile-time] 255[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5270 if not-equal[Integer] 255[Word], -127[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5271 if not-equal[Integer] 255[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5272 if not-equal[Integer] 255[Word], -127[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5273 if not-equal[compile-time] 255[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5274 if not-equal[Integer] 255[Word], -1[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5275 if not-equal[Integer] 255[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5276 if not-equal[Integer] 255[Word], -1[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5277 if not-equal[compile-time] 255[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5278 if not-equal[Integer] 255[Word], -1[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5279 if not-equal[Integer] 255[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5280 if not-equal[Integer] 255[Word], -1[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5281 if not-equal[compile-time] 255[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5282 if not-equal[Integer] 255[Word], 0[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5283 if not-equal[Integer] 255[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5284 if not-equal[Integer] 255[Word], 0[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5285 if not-equal[compile-time] 255[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5286 if not-equal[Integer] 255[Word], 0[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5287 if not-equal[Integer] 255[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5288 if not-equal[Integer] 255[Word], 0[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5289 if not-equal[compile-time] 255[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5290 if not-equal[Integer] 255[Word], 1[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5291 if not-equal[Integer] 255[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5292 if not-equal[Integer] 255[Word], 1[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5293 if not-equal[compile-time] 255[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5294 if not-equal[Integer] 255[Word], 1[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5295 if not-equal[Integer] 255[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5296 if not-equal[Integer] 255[Word], 1[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5297 if not-equal[compile-time] 255[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5298 if not-equal[Integer] 255[Word], 127[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5299 if not-equal[Integer] 255[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5300 if not-equal[Integer] 255[Word], 127[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5301 if not-equal[compile-time] 255[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5302 if not-equal[Integer] 255[Word], 127[Int8] Var
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5303 if not-equal[Integer] 255[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5304 if not-equal[Integer] 255[Word], 127[Int8] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5305 if not-equal[compile-time] 255[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5306 if not-equal[Integer] 32767[Word], -128[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5307 if not-equal[Integer] 32767[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5308 if not-equal[Integer] 32767[Word], -128[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5309 if not-equal[compile-time] 32767[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5310 if not-equal[Integer] 32767[Word], -128[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5311 if not-equal[Integer] 32767[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5312 if not-equal[Integer] 32767[Word], -128[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5313 if not-equal[compile-time] 32767[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5314 if not-equal[Integer] 32767[Word], -127[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5315 if not-equal[Integer] 32767[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5316 if not-equal[Integer] 32767[Word], -127[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5317 if not-equal[compile-time] 32767[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5318 if not-equal[Integer] 32767[Word], -127[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5319 if not-equal[Integer] 32767[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5320 if not-equal[Integer] 32767[Word], -127[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5321 if not-equal[compile-time] 32767[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5322 if not-equal[Integer] 32767[Word], -1[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5323 if not-equal[Integer] 32767[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5324 if not-equal[Integer] 32767[Word], -1[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5325 if not-equal[compile-time] 32767[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5326 if not-equal[Integer] 32767[Word], -1[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5327 if not-equal[Integer] 32767[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5328 if not-equal[Integer] 32767[Word], -1[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5329 if not-equal[compile-time] 32767[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5330 if not-equal[Integer] 32767[Word], 0[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5331 if not-equal[Integer] 32767[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5332 if not-equal[Integer] 32767[Word], 0[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5333 if not-equal[compile-time] 32767[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5334 if not-equal[Integer] 32767[Word], 0[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5335 if not-equal[Integer] 32767[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5336 if not-equal[Integer] 32767[Word], 0[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5337 if not-equal[compile-time] 32767[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5338 if not-equal[Integer] 32767[Word], 1[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5339 if not-equal[Integer] 32767[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5340 if not-equal[Integer] 32767[Word], 1[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5341 if not-equal[compile-time] 32767[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5342 if not-equal[Integer] 32767[Word], 1[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5343 if not-equal[Integer] 32767[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5344 if not-equal[Integer] 32767[Word], 1[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5345 if not-equal[compile-time] 32767[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5346 if not-equal[Integer] 32767[Word], 127[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5347 if not-equal[Integer] 32767[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5348 if not-equal[Integer] 32767[Word], 127[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5349 if not-equal[compile-time] 32767[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5350 if not-equal[Integer] 32767[Word], 127[Int8] Var
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5351 if not-equal[Integer] 32767[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5352 if not-equal[Integer] 32767[Word], 127[Int8] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5353 if not-equal[compile-time] 32767[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5354 if not-equal[Integer] 32768[Word], -128[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5355 if not-equal[Integer] 32768[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5356 if not-equal[Integer] 32768[Word], -128[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5357 if not-equal[compile-time] 32768[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5358 if not-equal[Integer] 32768[Word], -128[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5359 if not-equal[Integer] 32768[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5360 if not-equal[Integer] 32768[Word], -128[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5361 if not-equal[compile-time] 32768[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5362 if not-equal[Integer] 32768[Word], -127[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5363 if not-equal[Integer] 32768[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5364 if not-equal[Integer] 32768[Word], -127[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5365 if not-equal[compile-time] 32768[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5366 if not-equal[Integer] 32768[Word], -127[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5367 if not-equal[Integer] 32768[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5368 if not-equal[Integer] 32768[Word], -127[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5369 if not-equal[compile-time] 32768[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5370 if not-equal[Integer] 32768[Word], -1[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5371 if not-equal[Integer] 32768[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5372 if not-equal[Integer] 32768[Word], -1[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5373 if not-equal[compile-time] 32768[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5374 if not-equal[Integer] 32768[Word], -1[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5375 if not-equal[Integer] 32768[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5376 if not-equal[Integer] 32768[Word], -1[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5377 if not-equal[compile-time] 32768[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5378 if not-equal[Integer] 32768[Word], 0[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5379 if not-equal[Integer] 32768[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5380 if not-equal[Integer] 32768[Word], 0[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5381 if not-equal[compile-time] 32768[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5382 if not-equal[Integer] 32768[Word], 0[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5383 if not-equal[Integer] 32768[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5384 if not-equal[Integer] 32768[Word], 0[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5385 if not-equal[compile-time] 32768[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5386 if not-equal[Integer] 32768[Word], 1[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5387 if not-equal[Integer] 32768[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5388 if not-equal[Integer] 32768[Word], 1[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5389 if not-equal[compile-time] 32768[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5390 if not-equal[Integer] 32768[Word], 1[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5391 if not-equal[Integer] 32768[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5392 if not-equal[Integer] 32768[Word], 1[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5393 if not-equal[compile-time] 32768[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5394 if not-equal[Integer] 32768[Word], 127[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5395 if not-equal[Integer] 32768[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5396 if not-equal[Integer] 32768[Word], 127[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5397 if not-equal[compile-time] 32768[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5398 if not-equal[Integer] 32768[Word], 127[Int8] Var
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5399 if not-equal[Integer] 32768[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5400 if not-equal[Integer] 32768[Word], 127[Int8] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5401 if not-equal[compile-time] 32768[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5402 if not-equal[Integer] 65535[Word], -128[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5403 if not-equal[Integer] 65535[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5404 if not-equal[Integer] 65535[Word], -128[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5405 if not-equal[compile-time] 65535[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5406 if not-equal[Integer] 65535[Word], -128[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5407 if not-equal[Integer] 65535[Word], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5408 if not-equal[Integer] 65535[Word], -128[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5409 if not-equal[compile-time] 65535[Word], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5410 if not-equal[Integer] 65535[Word], -127[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5411 if not-equal[Integer] 65535[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5412 if not-equal[Integer] 65535[Word], -127[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5413 if not-equal[compile-time] 65535[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:5414 if not-equal[Integer] 65535[Word], -127[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5415 if not-equal[Integer] 65535[Word], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5416 if not-equal[Integer] 65535[Word], -127[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5417 if not-equal[compile-time] 65535[Word], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5418 if not-equal[Integer] 65535[Word], -1[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5419 if not-equal[Integer] 65535[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5420 if not-equal[Integer] 65535[Word], -1[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5421 if not-equal[compile-time] 65535[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5422 if not-equal[Integer] 65535[Word], -1[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5423 if not-equal[Integer] 65535[Word], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5424 if not-equal[Integer] 65535[Word], -1[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5425 if not-equal[compile-time] 65535[Word], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5426 if not-equal[Integer] 65535[Word], 0[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5427 if not-equal[Integer] 65535[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5428 if not-equal[Integer] 65535[Word], 0[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5429 if not-equal[compile-time] 65535[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5430 if not-equal[Integer] 65535[Word], 0[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5431 if not-equal[Integer] 65535[Word], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5432 if not-equal[Integer] 65535[Word], 0[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5433 if not-equal[compile-time] 65535[Word], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5434 if not-equal[Integer] 65535[Word], 1[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5435 if not-equal[Integer] 65535[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5436 if not-equal[Integer] 65535[Word], 1[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5437 if not-equal[compile-time] 65535[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5438 if not-equal[Integer] 65535[Word], 1[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5439 if not-equal[Integer] 65535[Word], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5440 if not-equal[Integer] 65535[Word], 1[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5441 if not-equal[compile-time] 65535[Word], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5442 if not-equal[Integer] 65535[Word], 127[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5443 if not-equal[Integer] 65535[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5444 if not-equal[Integer] 65535[Word], 127[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5445 if not-equal[compile-time] 65535[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5446 if not-equal[Integer] 65535[Word], 127[Int8] Var
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5447 if not-equal[Integer] 65535[Word], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5448 if not-equal[Integer] 65535[Word], 127[Int8] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5449 if not-equal[compile-time] 65535[Word], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5450 if not-equal[Integer] 0[Word], -32768[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5451 if not-equal[Integer] 0[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5452 if not-equal[Integer] 0[Word], -32768[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5453 if not-equal[compile-time] 0[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5454 if not-equal[Integer] 0[Word], -32768[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5455 if not-equal[Integer] 0[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5456 if not-equal[Integer] 0[Word], -32768[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5457 if not-equal[compile-time] 0[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5458 if not-equal[Integer] 0[Word], -32767[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5459 if not-equal[Integer] 0[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5460 if not-equal[Integer] 0[Word], -32767[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5461 if not-equal[compile-time] 0[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5462 if not-equal[Integer] 0[Word], -32767[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5463 if not-equal[Integer] 0[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5464 if not-equal[Integer] 0[Word], -32767[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5465 if not-equal[compile-time] 0[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5466 if not-equal[Integer] 0[Word], -129[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5467 if not-equal[Integer] 0[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5468 if not-equal[Integer] 0[Word], -129[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5469 if not-equal[compile-time] 0[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5470 if not-equal[Integer] 0[Word], -129[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5471 if not-equal[Integer] 0[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5472 if not-equal[Integer] 0[Word], -129[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5473 if not-equal[compile-time] 0[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5474 if not-equal[Integer] 0[Word], -128[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5475 if not-equal[Integer] 0[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5476 if not-equal[Integer] 0[Word], -128[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5477 if not-equal[compile-time] 0[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5478 if not-equal[Integer] 0[Word], -128[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5479 if not-equal[Integer] 0[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5480 if not-equal[Integer] 0[Word], -128[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5481 if not-equal[compile-time] 0[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5482 if not-equal[Integer] 0[Word], -1[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5483 if not-equal[Integer] 0[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5484 if not-equal[Integer] 0[Word], -1[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5485 if not-equal[compile-time] 0[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5486 if not-equal[Integer] 0[Word], -1[Integer] Var
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5487 if not-equal[Integer] 0[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5488 if not-equal[Integer] 0[Word], -1[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5489 if not-equal[compile-time] 0[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5490 if not-equal[Integer] 0[Word], 0[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5491 if not-equal[Integer] 0[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5492 if not-equal[Integer] 0[Word], 0[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5493 if not-equal[compile-time] 0[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5494 if not-equal[Integer] 0[Word], 0[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5495 if not-equal[Integer] 0[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5496 if not-equal[Integer] 0[Word], 0[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5497 if not-equal[compile-time] 0[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5498 if not-equal[Integer] 0[Word], 1[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5499 if not-equal[Integer] 0[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5500 if not-equal[Integer] 0[Word], 1[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5501 if not-equal[compile-time] 0[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5502 if not-equal[Integer] 0[Word], 1[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5503 if not-equal[Integer] 0[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5504 if not-equal[Integer] 0[Word], 1[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5505 if not-equal[compile-time] 0[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5506 if not-equal[Integer] 0[Word], 127[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5507 if not-equal[Integer] 0[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5508 if not-equal[Integer] 0[Word], 127[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5509 if not-equal[compile-time] 0[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5510 if not-equal[Integer] 0[Word], 127[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5511 if not-equal[Integer] 0[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5512 if not-equal[Integer] 0[Word], 127[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5513 if not-equal[compile-time] 0[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5514 if not-equal[Integer] 0[Word], 128[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5515 if not-equal[Integer] 0[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5516 if not-equal[Integer] 0[Word], 128[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5517 if not-equal[compile-time] 0[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5518 if not-equal[Integer] 0[Word], 128[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5519 if not-equal[Integer] 0[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5520 if not-equal[Integer] 0[Word], 128[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5521 if not-equal[compile-time] 0[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5522 if not-equal[Integer] 0[Word], 32767[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5523 if not-equal[Integer] 0[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5524 if not-equal[Integer] 0[Word], 32767[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5525 if not-equal[compile-time] 0[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5526 if not-equal[Integer] 0[Word], 32767[Integer] Var
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5527 if not-equal[Integer] 0[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5528 if not-equal[Integer] 0[Word], 32767[Integer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5529 if not-equal[compile-time] 0[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5530 if not-equal[Integer] 255[Word], -32768[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5531 if not-equal[Integer] 255[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5532 if not-equal[Integer] 255[Word], -32768[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5533 if not-equal[compile-time] 255[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5534 if not-equal[Integer] 255[Word], -32768[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5535 if not-equal[Integer] 255[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5536 if not-equal[Integer] 255[Word], -32768[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5537 if not-equal[compile-time] 255[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5538 if not-equal[Integer] 255[Word], -32767[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5539 if not-equal[Integer] 255[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5540 if not-equal[Integer] 255[Word], -32767[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5541 if not-equal[compile-time] 255[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5542 if not-equal[Integer] 255[Word], -32767[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5543 if not-equal[Integer] 255[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5544 if not-equal[Integer] 255[Word], -32767[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5545 if not-equal[compile-time] 255[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5546 if not-equal[Integer] 255[Word], -129[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5547 if not-equal[Integer] 255[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5548 if not-equal[Integer] 255[Word], -129[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5549 if not-equal[compile-time] 255[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5550 if not-equal[Integer] 255[Word], -129[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5551 if not-equal[Integer] 255[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5552 if not-equal[Integer] 255[Word], -129[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5553 if not-equal[compile-time] 255[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5554 if not-equal[Integer] 255[Word], -128[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5555 if not-equal[Integer] 255[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5556 if not-equal[Integer] 255[Word], -128[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5557 if not-equal[compile-time] 255[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5558 if not-equal[Integer] 255[Word], -128[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5559 if not-equal[Integer] 255[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5560 if not-equal[Integer] 255[Word], -128[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5561 if not-equal[compile-time] 255[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5562 if not-equal[Integer] 255[Word], -1[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5563 if not-equal[Integer] 255[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5564 if not-equal[Integer] 255[Word], -1[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5565 if not-equal[compile-time] 255[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5566 if not-equal[Integer] 255[Word], -1[Integer] Var
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5567 if not-equal[Integer] 255[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5568 if not-equal[Integer] 255[Word], -1[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5569 if not-equal[compile-time] 255[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5570 if not-equal[Integer] 255[Word], 0[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5571 if not-equal[Integer] 255[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5572 if not-equal[Integer] 255[Word], 0[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5573 if not-equal[compile-time] 255[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5574 if not-equal[Integer] 255[Word], 0[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5575 if not-equal[Integer] 255[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5576 if not-equal[Integer] 255[Word], 0[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5577 if not-equal[compile-time] 255[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5578 if not-equal[Integer] 255[Word], 1[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5579 if not-equal[Integer] 255[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5580 if not-equal[Integer] 255[Word], 1[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5581 if not-equal[compile-time] 255[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5582 if not-equal[Integer] 255[Word], 1[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5583 if not-equal[Integer] 255[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5584 if not-equal[Integer] 255[Word], 1[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5585 if not-equal[compile-time] 255[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5586 if not-equal[Integer] 255[Word], 127[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5587 if not-equal[Integer] 255[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5588 if not-equal[Integer] 255[Word], 127[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5589 if not-equal[compile-time] 255[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5590 if not-equal[Integer] 255[Word], 127[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5591 if not-equal[Integer] 255[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5592 if not-equal[Integer] 255[Word], 127[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5593 if not-equal[compile-time] 255[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5594 if not-equal[Integer] 255[Word], 128[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5595 if not-equal[Integer] 255[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5596 if not-equal[Integer] 255[Word], 128[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5597 if not-equal[compile-time] 255[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5598 if not-equal[Integer] 255[Word], 128[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5599 if not-equal[Integer] 255[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5600 if not-equal[Integer] 255[Word], 128[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5601 if not-equal[compile-time] 255[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5602 if not-equal[Integer] 255[Word], 32767[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5603 if not-equal[Integer] 255[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5604 if not-equal[Integer] 255[Word], 32767[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5605 if not-equal[compile-time] 255[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5606 if not-equal[Integer] 255[Word], 32767[Integer] Var
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5607 if not-equal[Integer] 255[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5608 if not-equal[Integer] 255[Word], 32767[Integer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5609 if not-equal[compile-time] 255[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5610 if not-equal[Integer] 32767[Word], -32768[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5611 if not-equal[Integer] 32767[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5612 if not-equal[Integer] 32767[Word], -32768[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5613 if not-equal[compile-time] 32767[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5614 if not-equal[Integer] 32767[Word], -32768[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5615 if not-equal[Integer] 32767[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5616 if not-equal[Integer] 32767[Word], -32768[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5617 if not-equal[compile-time] 32767[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5618 if not-equal[Integer] 32767[Word], -32767[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5619 if not-equal[Integer] 32767[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5620 if not-equal[Integer] 32767[Word], -32767[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5621 if not-equal[compile-time] 32767[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5622 if not-equal[Integer] 32767[Word], -32767[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5623 if not-equal[Integer] 32767[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5624 if not-equal[Integer] 32767[Word], -32767[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5625 if not-equal[compile-time] 32767[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5626 if not-equal[Integer] 32767[Word], -129[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5627 if not-equal[Integer] 32767[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5628 if not-equal[Integer] 32767[Word], -129[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5629 if not-equal[compile-time] 32767[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5630 if not-equal[Integer] 32767[Word], -129[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5631 if not-equal[Integer] 32767[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5632 if not-equal[Integer] 32767[Word], -129[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5633 if not-equal[compile-time] 32767[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5634 if not-equal[Integer] 32767[Word], -128[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5635 if not-equal[Integer] 32767[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5636 if not-equal[Integer] 32767[Word], -128[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5637 if not-equal[compile-time] 32767[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5638 if not-equal[Integer] 32767[Word], -128[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5639 if not-equal[Integer] 32767[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5640 if not-equal[Integer] 32767[Word], -128[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5641 if not-equal[compile-time] 32767[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5642 if not-equal[Integer] 32767[Word], -1[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5643 if not-equal[Integer] 32767[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5644 if not-equal[Integer] 32767[Word], -1[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5645 if not-equal[compile-time] 32767[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5646 if not-equal[Integer] 32767[Word], -1[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5647 if not-equal[Integer] 32767[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5648 if not-equal[Integer] 32767[Word], -1[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5649 if not-equal[compile-time] 32767[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5650 if not-equal[Integer] 32767[Word], 0[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5651 if not-equal[Integer] 32767[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5652 if not-equal[Integer] 32767[Word], 0[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5653 if not-equal[compile-time] 32767[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5654 if not-equal[Integer] 32767[Word], 0[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5655 if not-equal[Integer] 32767[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5656 if not-equal[Integer] 32767[Word], 0[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5657 if not-equal[compile-time] 32767[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5658 if not-equal[Integer] 32767[Word], 1[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5659 if not-equal[Integer] 32767[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5660 if not-equal[Integer] 32767[Word], 1[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5661 if not-equal[compile-time] 32767[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5662 if not-equal[Integer] 32767[Word], 1[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5663 if not-equal[Integer] 32767[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5664 if not-equal[Integer] 32767[Word], 1[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5665 if not-equal[compile-time] 32767[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5666 if not-equal[Integer] 32767[Word], 127[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5667 if not-equal[Integer] 32767[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5668 if not-equal[Integer] 32767[Word], 127[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5669 if not-equal[compile-time] 32767[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5670 if not-equal[Integer] 32767[Word], 127[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5671 if not-equal[Integer] 32767[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5672 if not-equal[Integer] 32767[Word], 127[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5673 if not-equal[compile-time] 32767[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5674 if not-equal[Integer] 32767[Word], 128[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5675 if not-equal[Integer] 32767[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5676 if not-equal[Integer] 32767[Word], 128[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5677 if not-equal[compile-time] 32767[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5678 if not-equal[Integer] 32767[Word], 128[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5679 if not-equal[Integer] 32767[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5680 if not-equal[Integer] 32767[Word], 128[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5681 if not-equal[compile-time] 32767[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5682 if not-equal[Integer] 32767[Word], 32767[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5683 if not-equal[Integer] 32767[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5684 if not-equal[Integer] 32767[Word], 32767[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:5685 if not-equal[compile-time] 32767[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:5686 if not-equal[Integer] 32767[Word], 32767[Integer] Var
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5687 if not-equal[Integer] 32767[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5688 if not-equal[Integer] 32767[Word], 32767[Integer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5689 if not-equal[compile-time] 32767[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5690 if not-equal[Integer] 32768[Word], -32768[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5691 if not-equal[Integer] 32768[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5692 if not-equal[Integer] 32768[Word], -32768[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5693 if not-equal[compile-time] 32768[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5694 if not-equal[Integer] 32768[Word], -32768[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5695 if not-equal[Integer] 32768[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5696 if not-equal[Integer] 32768[Word], -32768[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5697 if not-equal[compile-time] 32768[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5698 if not-equal[Integer] 32768[Word], -32767[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5699 if not-equal[Integer] 32768[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5700 if not-equal[Integer] 32768[Word], -32767[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5701 if not-equal[compile-time] 32768[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5702 if not-equal[Integer] 32768[Word], -32767[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5703 if not-equal[Integer] 32768[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5704 if not-equal[Integer] 32768[Word], -32767[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5705 if not-equal[compile-time] 32768[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5706 if not-equal[Integer] 32768[Word], -129[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5707 if not-equal[Integer] 32768[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5708 if not-equal[Integer] 32768[Word], -129[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5709 if not-equal[compile-time] 32768[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5710 if not-equal[Integer] 32768[Word], -129[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5711 if not-equal[Integer] 32768[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5712 if not-equal[Integer] 32768[Word], -129[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5713 if not-equal[compile-time] 32768[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5714 if not-equal[Integer] 32768[Word], -128[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5715 if not-equal[Integer] 32768[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5716 if not-equal[Integer] 32768[Word], -128[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5717 if not-equal[compile-time] 32768[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5718 if not-equal[Integer] 32768[Word], -128[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5719 if not-equal[Integer] 32768[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5720 if not-equal[Integer] 32768[Word], -128[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5721 if not-equal[compile-time] 32768[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5722 if not-equal[Integer] 32768[Word], -1[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5723 if not-equal[Integer] 32768[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5724 if not-equal[Integer] 32768[Word], -1[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5725 if not-equal[compile-time] 32768[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5726 if not-equal[Integer] 32768[Word], -1[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5727 if not-equal[Integer] 32768[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5728 if not-equal[Integer] 32768[Word], -1[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5729 if not-equal[compile-time] 32768[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5730 if not-equal[Integer] 32768[Word], 0[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5731 if not-equal[Integer] 32768[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5732 if not-equal[Integer] 32768[Word], 0[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5733 if not-equal[compile-time] 32768[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5734 if not-equal[Integer] 32768[Word], 0[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5735 if not-equal[Integer] 32768[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5736 if not-equal[Integer] 32768[Word], 0[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5737 if not-equal[compile-time] 32768[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5738 if not-equal[Integer] 32768[Word], 1[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5739 if not-equal[Integer] 32768[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5740 if not-equal[Integer] 32768[Word], 1[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5741 if not-equal[compile-time] 32768[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5742 if not-equal[Integer] 32768[Word], 1[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5743 if not-equal[Integer] 32768[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5744 if not-equal[Integer] 32768[Word], 1[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5745 if not-equal[compile-time] 32768[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5746 if not-equal[Integer] 32768[Word], 127[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5747 if not-equal[Integer] 32768[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5748 if not-equal[Integer] 32768[Word], 127[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5749 if not-equal[compile-time] 32768[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5750 if not-equal[Integer] 32768[Word], 127[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5751 if not-equal[Integer] 32768[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5752 if not-equal[Integer] 32768[Word], 127[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5753 if not-equal[compile-time] 32768[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5754 if not-equal[Integer] 32768[Word], 128[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5755 if not-equal[Integer] 32768[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5756 if not-equal[Integer] 32768[Word], 128[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5757 if not-equal[compile-time] 32768[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5758 if not-equal[Integer] 32768[Word], 128[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5759 if not-equal[Integer] 32768[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5760 if not-equal[Integer] 32768[Word], 128[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5761 if not-equal[compile-time] 32768[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5762 if not-equal[Integer] 32768[Word], 32767[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5763 if not-equal[Integer] 32768[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5764 if not-equal[Integer] 32768[Word], 32767[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5765 if not-equal[compile-time] 32768[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5766 if not-equal[Integer] 32768[Word], 32767[Integer] Var
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5767 if not-equal[Integer] 32768[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5768 if not-equal[Integer] 32768[Word], 32767[Integer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5769 if not-equal[compile-time] 32768[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5770 if not-equal[Integer] 65535[Word], -32768[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5771 if not-equal[Integer] 65535[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5772 if not-equal[Integer] 65535[Word], -32768[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5773 if not-equal[compile-time] 65535[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:5774 if not-equal[Integer] 65535[Word], -32768[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5775 if not-equal[Integer] 65535[Word], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5776 if not-equal[Integer] 65535[Word], -32768[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5777 if not-equal[compile-time] 65535[Word], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5778 if not-equal[Integer] 65535[Word], -32767[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5779 if not-equal[Integer] 65535[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5780 if not-equal[Integer] 65535[Word], -32767[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5781 if not-equal[compile-time] 65535[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:5782 if not-equal[Integer] 65535[Word], -32767[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5783 if not-equal[Integer] 65535[Word], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5784 if not-equal[Integer] 65535[Word], -32767[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5785 if not-equal[compile-time] 65535[Word], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5786 if not-equal[Integer] 65535[Word], -129[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5787 if not-equal[Integer] 65535[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5788 if not-equal[Integer] 65535[Word], -129[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5789 if not-equal[compile-time] 65535[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:5790 if not-equal[Integer] 65535[Word], -129[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5791 if not-equal[Integer] 65535[Word], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5792 if not-equal[Integer] 65535[Word], -129[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5793 if not-equal[compile-time] 65535[Word], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5794 if not-equal[Integer] 65535[Word], -128[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5795 if not-equal[Integer] 65535[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5796 if not-equal[Integer] 65535[Word], -128[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5797 if not-equal[compile-time] 65535[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:5798 if not-equal[Integer] 65535[Word], -128[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5799 if not-equal[Integer] 65535[Word], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5800 if not-equal[Integer] 65535[Word], -128[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5801 if not-equal[compile-time] 65535[Word], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5802 if not-equal[Integer] 65535[Word], -1[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5803 if not-equal[Integer] 65535[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5804 if not-equal[Integer] 65535[Word], -1[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5805 if not-equal[compile-time] 65535[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:5806 if not-equal[Integer] 65535[Word], -1[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5807 if not-equal[Integer] 65535[Word], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5808 if not-equal[Integer] 65535[Word], -1[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5809 if not-equal[compile-time] 65535[Word], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5810 if not-equal[Integer] 65535[Word], 0[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5811 if not-equal[Integer] 65535[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5812 if not-equal[Integer] 65535[Word], 0[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5813 if not-equal[compile-time] 65535[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5814 if not-equal[Integer] 65535[Word], 0[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5815 if not-equal[Integer] 65535[Word], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5816 if not-equal[Integer] 65535[Word], 0[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5817 if not-equal[compile-time] 65535[Word], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5818 if not-equal[Integer] 65535[Word], 1[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5819 if not-equal[Integer] 65535[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5820 if not-equal[Integer] 65535[Word], 1[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5821 if not-equal[compile-time] 65535[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5822 if not-equal[Integer] 65535[Word], 1[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5823 if not-equal[Integer] 65535[Word], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5824 if not-equal[Integer] 65535[Word], 1[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5825 if not-equal[compile-time] 65535[Word], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5826 if not-equal[Integer] 65535[Word], 127[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5827 if not-equal[Integer] 65535[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5828 if not-equal[Integer] 65535[Word], 127[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5829 if not-equal[compile-time] 65535[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5830 if not-equal[Integer] 65535[Word], 127[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5831 if not-equal[Integer] 65535[Word], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5832 if not-equal[Integer] 65535[Word], 127[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5833 if not-equal[compile-time] 65535[Word], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5834 if not-equal[Integer] 65535[Word], 128[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5835 if not-equal[Integer] 65535[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5836 if not-equal[Integer] 65535[Word], 128[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5837 if not-equal[compile-time] 65535[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5838 if not-equal[Integer] 65535[Word], 128[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5839 if not-equal[Integer] 65535[Word], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5840 if not-equal[Integer] 65535[Word], 128[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5841 if not-equal[compile-time] 65535[Word], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5842 if not-equal[Integer] 65535[Word], 32767[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5843 if not-equal[Integer] 65535[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5844 if not-equal[Integer] 65535[Word], 32767[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5845 if not-equal[compile-time] 65535[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:5846 if not-equal[Integer] 65535[Word], 32767[Integer] Var
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5847 if not-equal[Integer] 65535[Word], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5848 if not-equal[Integer] 65535[Word], 32767[Integer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5849 if not-equal[compile-time] 65535[Word], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5850 if not-equal[Word] 0[Word], 0[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5851 if not-equal[Word] 0[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5852 if not-equal[Word] 0[Word], 0[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5853 if not-equal[compile-time] 0[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:5854 if not-equal[Word] 0[Word], 0[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5855 if not-equal[Word] 0[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5856 if not-equal[Word] 0[Word], 0[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5857 if not-equal[compile-time] 0[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5858 if not-equal[Word] 0[Word], 1[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5859 if not-equal[Word] 0[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5860 if not-equal[Word] 0[Word], 1[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5861 if not-equal[compile-time] 0[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5862 if not-equal[Word] 0[Word], 1[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5863 if not-equal[Word] 0[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5864 if not-equal[Word] 0[Word], 1[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5865 if not-equal[compile-time] 0[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5866 if not-equal[Word] 0[Word], 127[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5867 if not-equal[Word] 0[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5868 if not-equal[Word] 0[Word], 127[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5869 if not-equal[compile-time] 0[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5870 if not-equal[Word] 0[Word], 127[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5871 if not-equal[Word] 0[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5872 if not-equal[Word] 0[Word], 127[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5873 if not-equal[compile-time] 0[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5874 if not-equal[Word] 0[Word], 128[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5875 if not-equal[Word] 0[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5876 if not-equal[Word] 0[Word], 128[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5877 if not-equal[compile-time] 0[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5878 if not-equal[Word] 0[Word], 128[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5879 if not-equal[Word] 0[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5880 if not-equal[Word] 0[Word], 128[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5881 if not-equal[compile-time] 0[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5882 if not-equal[Word] 0[Word], 255[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5883 if not-equal[Word] 0[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5884 if not-equal[Word] 0[Word], 255[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5885 if not-equal[compile-time] 0[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5886 if not-equal[Word] 0[Word], 255[Byte] Var
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5887 if not-equal[Word] 0[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5888 if not-equal[Word] 0[Word], 255[Byte] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5889 if not-equal[compile-time] 0[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5890 if not-equal[Word] 255[Word], 0[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5891 if not-equal[Word] 255[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5892 if not-equal[Word] 255[Word], 0[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5893 if not-equal[compile-time] 255[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5894 if not-equal[Word] 255[Word], 0[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5895 if not-equal[Word] 255[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5896 if not-equal[Word] 255[Word], 0[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5897 if not-equal[compile-time] 255[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5898 if not-equal[Word] 255[Word], 1[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5899 if not-equal[Word] 255[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5900 if not-equal[Word] 255[Word], 1[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5901 if not-equal[compile-time] 255[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5902 if not-equal[Word] 255[Word], 1[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5903 if not-equal[Word] 255[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5904 if not-equal[Word] 255[Word], 1[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5905 if not-equal[compile-time] 255[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5906 if not-equal[Word] 255[Word], 127[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5907 if not-equal[Word] 255[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5908 if not-equal[Word] 255[Word], 127[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5909 if not-equal[compile-time] 255[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5910 if not-equal[Word] 255[Word], 127[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5911 if not-equal[Word] 255[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5912 if not-equal[Word] 255[Word], 127[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5913 if not-equal[compile-time] 255[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5914 if not-equal[Word] 255[Word], 128[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5915 if not-equal[Word] 255[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5916 if not-equal[Word] 255[Word], 128[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5917 if not-equal[compile-time] 255[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5918 if not-equal[Word] 255[Word], 128[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5919 if not-equal[Word] 255[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5920 if not-equal[Word] 255[Word], 128[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5921 if not-equal[compile-time] 255[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5922 if not-equal[Word] 255[Word], 255[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:5923 if not-equal[Word] 255[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:5924 if not-equal[Word] 255[Word], 255[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:5925 if not-equal[compile-time] 255[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:5926 if not-equal[Word] 255[Word], 255[Byte] Var
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5927 if not-equal[Word] 255[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5928 if not-equal[Word] 255[Word], 255[Byte] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5929 if not-equal[compile-time] 255[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:5930 if not-equal[Word] 32767[Word], 0[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5931 if not-equal[Word] 32767[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5932 if not-equal[Word] 32767[Word], 0[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5933 if not-equal[compile-time] 32767[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5934 if not-equal[Word] 32767[Word], 0[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5935 if not-equal[Word] 32767[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5936 if not-equal[Word] 32767[Word], 0[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5937 if not-equal[compile-time] 32767[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5938 if not-equal[Word] 32767[Word], 1[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5939 if not-equal[Word] 32767[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5940 if not-equal[Word] 32767[Word], 1[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5941 if not-equal[compile-time] 32767[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5942 if not-equal[Word] 32767[Word], 1[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5943 if not-equal[Word] 32767[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5944 if not-equal[Word] 32767[Word], 1[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5945 if not-equal[compile-time] 32767[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5946 if not-equal[Word] 32767[Word], 127[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5947 if not-equal[Word] 32767[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5948 if not-equal[Word] 32767[Word], 127[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5949 if not-equal[compile-time] 32767[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5950 if not-equal[Word] 32767[Word], 127[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5951 if not-equal[Word] 32767[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5952 if not-equal[Word] 32767[Word], 127[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5953 if not-equal[compile-time] 32767[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5954 if not-equal[Word] 32767[Word], 128[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5955 if not-equal[Word] 32767[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5956 if not-equal[Word] 32767[Word], 128[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5957 if not-equal[compile-time] 32767[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5958 if not-equal[Word] 32767[Word], 128[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5959 if not-equal[Word] 32767[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5960 if not-equal[Word] 32767[Word], 128[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5961 if not-equal[compile-time] 32767[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5962 if not-equal[Word] 32767[Word], 255[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5963 if not-equal[Word] 32767[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5964 if not-equal[Word] 32767[Word], 255[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5965 if not-equal[compile-time] 32767[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:5966 if not-equal[Word] 32767[Word], 255[Byte] Var
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5967 if not-equal[Word] 32767[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5968 if not-equal[Word] 32767[Word], 255[Byte] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5969 if not-equal[compile-time] 32767[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5970 if not-equal[Word] 32768[Word], 0[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5971 if not-equal[Word] 32768[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5972 if not-equal[Word] 32768[Word], 0[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5973 if not-equal[compile-time] 32768[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:5974 if not-equal[Word] 32768[Word], 0[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5975 if not-equal[Word] 32768[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5976 if not-equal[Word] 32768[Word], 0[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5977 if not-equal[compile-time] 32768[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5978 if not-equal[Word] 32768[Word], 1[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5979 if not-equal[Word] 32768[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5980 if not-equal[Word] 32768[Word], 1[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5981 if not-equal[compile-time] 32768[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:5982 if not-equal[Word] 32768[Word], 1[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5983 if not-equal[Word] 32768[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5984 if not-equal[Word] 32768[Word], 1[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5985 if not-equal[compile-time] 32768[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5986 if not-equal[Word] 32768[Word], 127[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5987 if not-equal[Word] 32768[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5988 if not-equal[Word] 32768[Word], 127[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5989 if not-equal[compile-time] 32768[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:5990 if not-equal[Word] 32768[Word], 127[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5991 if not-equal[Word] 32768[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5992 if not-equal[Word] 32768[Word], 127[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5993 if not-equal[compile-time] 32768[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5994 if not-equal[Word] 32768[Word], 128[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:5995 if not-equal[Word] 32768[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:5996 if not-equal[Word] 32768[Word], 128[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5997 if not-equal[compile-time] 32768[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:5998 if not-equal[Word] 32768[Word], 128[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:5999 if not-equal[Word] 32768[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6000 if not-equal[Word] 32768[Word], 128[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6001 if not-equal[compile-time] 32768[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6002 if not-equal[Word] 32768[Word], 255[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6003 if not-equal[Word] 32768[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6004 if not-equal[Word] 32768[Word], 255[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6005 if not-equal[compile-time] 32768[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6006 if not-equal[Word] 32768[Word], 255[Byte] Var
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6007 if not-equal[Word] 32768[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6008 if not-equal[Word] 32768[Word], 255[Byte] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6009 if not-equal[compile-time] 32768[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6010 if not-equal[Word] 65535[Word], 0[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6011 if not-equal[Word] 65535[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6012 if not-equal[Word] 65535[Word], 0[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6013 if not-equal[compile-time] 65535[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6014 if not-equal[Word] 65535[Word], 0[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6015 if not-equal[Word] 65535[Word], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6016 if not-equal[Word] 65535[Word], 0[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6017 if not-equal[compile-time] 65535[Word], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6018 if not-equal[Word] 65535[Word], 1[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6019 if not-equal[Word] 65535[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6020 if not-equal[Word] 65535[Word], 1[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6021 if not-equal[compile-time] 65535[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6022 if not-equal[Word] 65535[Word], 1[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6023 if not-equal[Word] 65535[Word], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6024 if not-equal[Word] 65535[Word], 1[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6025 if not-equal[compile-time] 65535[Word], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6026 if not-equal[Word] 65535[Word], 127[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6027 if not-equal[Word] 65535[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6028 if not-equal[Word] 65535[Word], 127[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6029 if not-equal[compile-time] 65535[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6030 if not-equal[Word] 65535[Word], 127[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6031 if not-equal[Word] 65535[Word], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6032 if not-equal[Word] 65535[Word], 127[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6033 if not-equal[compile-time] 65535[Word], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6034 if not-equal[Word] 65535[Word], 128[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6035 if not-equal[Word] 65535[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6036 if not-equal[Word] 65535[Word], 128[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6037 if not-equal[compile-time] 65535[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6038 if not-equal[Word] 65535[Word], 128[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6039 if not-equal[Word] 65535[Word], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6040 if not-equal[Word] 65535[Word], 128[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6041 if not-equal[compile-time] 65535[Word], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6042 if not-equal[Word] 65535[Word], 255[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6043 if not-equal[Word] 65535[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6044 if not-equal[Word] 65535[Word], 255[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6045 if not-equal[compile-time] 65535[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6046 if not-equal[Word] 65535[Word], 255[Byte] Var
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6047 if not-equal[Word] 65535[Word], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6048 if not-equal[Word] 65535[Word], 255[Byte] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6049 if not-equal[compile-time] 65535[Word], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6050 if not-equal[Word] 0[Word], 0[Word] Var
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6051 if not-equal[Word] 0[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6052 if not-equal[Word] 0[Word], 0[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6053 if not-equal[compile-time] 0[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6054 if not-equal[Word] 0[Word], 0[Word] Var
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6055 if not-equal[Word] 0[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6056 if not-equal[Word] 0[Word], 0[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6057 if not-equal[compile-time] 0[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6058 if not-equal[Word] 0[Word], 255[Word] Var
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6059 if not-equal[Word] 0[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6060 if not-equal[Word] 0[Word], 255[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6061 if not-equal[compile-time] 0[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6062 if not-equal[Word] 0[Word], 255[Word] Var
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6063 if not-equal[Word] 0[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6064 if not-equal[Word] 0[Word], 255[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6065 if not-equal[compile-time] 0[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6066 if not-equal[Word] 0[Word], 32767[Word] Var
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6067 if not-equal[Word] 0[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6068 if not-equal[Word] 0[Word], 32767[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6069 if not-equal[compile-time] 0[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6070 if not-equal[Word] 0[Word], 32767[Word] Var
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6071 if not-equal[Word] 0[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6072 if not-equal[Word] 0[Word], 32767[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6073 if not-equal[compile-time] 0[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6074 if not-equal[Word] 0[Word], 32768[Word] Var
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6075 if not-equal[Word] 0[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6076 if not-equal[Word] 0[Word], 32768[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6077 if not-equal[compile-time] 0[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6078 if not-equal[Word] 0[Word], 32768[Word] Var
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6079 if not-equal[Word] 0[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6080 if not-equal[Word] 0[Word], 32768[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6081 if not-equal[compile-time] 0[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6082 if not-equal[Word] 0[Word], 65535[Word] Var
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6083 if not-equal[Word] 0[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6084 if not-equal[Word] 0[Word], 65535[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6085 if not-equal[compile-time] 0[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6086 if not-equal[Word] 0[Word], 65535[Word] Var
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6087 if not-equal[Word] 0[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6088 if not-equal[Word] 0[Word], 65535[Word] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6089 if not-equal[compile-time] 0[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6090 if not-equal[Word] 255[Word], 0[Word] Var
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6091 if not-equal[Word] 255[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6092 if not-equal[Word] 255[Word], 0[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6093 if not-equal[compile-time] 255[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6094 if not-equal[Word] 255[Word], 0[Word] Var
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6095 if not-equal[Word] 255[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6096 if not-equal[Word] 255[Word], 0[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6097 if not-equal[compile-time] 255[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6098 if not-equal[Word] 255[Word], 255[Word] Var
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6099 if not-equal[Word] 255[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6100 if not-equal[Word] 255[Word], 255[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:6101 if not-equal[compile-time] 255[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:6102 if not-equal[Word] 255[Word], 255[Word] Var
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6103 if not-equal[Word] 255[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6104 if not-equal[Word] 255[Word], 255[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6105 if not-equal[compile-time] 255[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6106 if not-equal[Word] 255[Word], 32767[Word] Var
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6107 if not-equal[Word] 255[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6108 if not-equal[Word] 255[Word], 32767[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6109 if not-equal[compile-time] 255[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6110 if not-equal[Word] 255[Word], 32767[Word] Var
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6111 if not-equal[Word] 255[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6112 if not-equal[Word] 255[Word], 32767[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6113 if not-equal[compile-time] 255[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6114 if not-equal[Word] 255[Word], 32768[Word] Var
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6115 if not-equal[Word] 255[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6116 if not-equal[Word] 255[Word], 32768[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6117 if not-equal[compile-time] 255[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6118 if not-equal[Word] 255[Word], 32768[Word] Var
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6119 if not-equal[Word] 255[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6120 if not-equal[Word] 255[Word], 32768[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6121 if not-equal[compile-time] 255[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6122 if not-equal[Word] 255[Word], 65535[Word] Var
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6123 if not-equal[Word] 255[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6124 if not-equal[Word] 255[Word], 65535[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6125 if not-equal[compile-time] 255[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6126 if not-equal[Word] 255[Word], 65535[Word] Var
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6127 if not-equal[Word] 255[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6128 if not-equal[Word] 255[Word], 65535[Word] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6129 if not-equal[compile-time] 255[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6130 if not-equal[Word] 32767[Word], 0[Word] Var
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6131 if not-equal[Word] 32767[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6132 if not-equal[Word] 32767[Word], 0[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6133 if not-equal[compile-time] 32767[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6134 if not-equal[Word] 32767[Word], 0[Word] Var
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6135 if not-equal[Word] 32767[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6136 if not-equal[Word] 32767[Word], 0[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6137 if not-equal[compile-time] 32767[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6138 if not-equal[Word] 32767[Word], 255[Word] Var
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6139 if not-equal[Word] 32767[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6140 if not-equal[Word] 32767[Word], 255[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6141 if not-equal[compile-time] 32767[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6142 if not-equal[Word] 32767[Word], 255[Word] Var
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6143 if not-equal[Word] 32767[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6144 if not-equal[Word] 32767[Word], 255[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6145 if not-equal[compile-time] 32767[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6146 if not-equal[Word] 32767[Word], 32767[Word] Var
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6147 if not-equal[Word] 32767[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6148 if not-equal[Word] 32767[Word], 32767[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6149 if not-equal[compile-time] 32767[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6150 if not-equal[Word] 32767[Word], 32767[Word] Var
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6151 if not-equal[Word] 32767[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6152 if not-equal[Word] 32767[Word], 32767[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6153 if not-equal[compile-time] 32767[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6154 if not-equal[Word] 32767[Word], 32768[Word] Var
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6155 if not-equal[Word] 32767[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6156 if not-equal[Word] 32767[Word], 32768[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6157 if not-equal[compile-time] 32767[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6158 if not-equal[Word] 32767[Word], 32768[Word] Var
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6159 if not-equal[Word] 32767[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6160 if not-equal[Word] 32767[Word], 32768[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6161 if not-equal[compile-time] 32767[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6162 if not-equal[Word] 32767[Word], 65535[Word] Var
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6163 if not-equal[Word] 32767[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6164 if not-equal[Word] 32767[Word], 65535[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6165 if not-equal[compile-time] 32767[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6166 if not-equal[Word] 32767[Word], 65535[Word] Var
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6167 if not-equal[Word] 32767[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6168 if not-equal[Word] 32767[Word], 65535[Word] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6169 if not-equal[compile-time] 32767[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6170 if not-equal[Word] 32768[Word], 0[Word] Var
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6171 if not-equal[Word] 32768[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6172 if not-equal[Word] 32768[Word], 0[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6173 if not-equal[compile-time] 32768[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6174 if not-equal[Word] 32768[Word], 0[Word] Var
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6175 if not-equal[Word] 32768[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6176 if not-equal[Word] 32768[Word], 0[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6177 if not-equal[compile-time] 32768[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6178 if not-equal[Word] 32768[Word], 255[Word] Var
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6179 if not-equal[Word] 32768[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6180 if not-equal[Word] 32768[Word], 255[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6181 if not-equal[compile-time] 32768[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6182 if not-equal[Word] 32768[Word], 255[Word] Var
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6183 if not-equal[Word] 32768[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6184 if not-equal[Word] 32768[Word], 255[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6185 if not-equal[compile-time] 32768[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6186 if not-equal[Word] 32768[Word], 32767[Word] Var
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6187 if not-equal[Word] 32768[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6188 if not-equal[Word] 32768[Word], 32767[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6189 if not-equal[compile-time] 32768[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6190 if not-equal[Word] 32768[Word], 32767[Word] Var
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6191 if not-equal[Word] 32768[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6192 if not-equal[Word] 32768[Word], 32767[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6193 if not-equal[compile-time] 32768[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6194 if not-equal[Word] 32768[Word], 32768[Word] Var
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6195 if not-equal[Word] 32768[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6196 if not-equal[Word] 32768[Word], 32768[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:6197 if not-equal[compile-time] 32768[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:6198 if not-equal[Word] 32768[Word], 32768[Word] Var
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6199 if not-equal[Word] 32768[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6200 if not-equal[Word] 32768[Word], 32768[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6201 if not-equal[compile-time] 32768[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6202 if not-equal[Word] 32768[Word], 65535[Word] Var
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6203 if not-equal[Word] 32768[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6204 if not-equal[Word] 32768[Word], 65535[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6205 if not-equal[compile-time] 32768[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6206 if not-equal[Word] 32768[Word], 65535[Word] Var
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6207 if not-equal[Word] 32768[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6208 if not-equal[Word] 32768[Word], 65535[Word] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6209 if not-equal[compile-time] 32768[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6210 if not-equal[Word] 65535[Word], 0[Word] Var
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6211 if not-equal[Word] 65535[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6212 if not-equal[Word] 65535[Word], 0[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6213 if not-equal[compile-time] 65535[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6214 if not-equal[Word] 65535[Word], 0[Word] Var
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6215 if not-equal[Word] 65535[Word], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6216 if not-equal[Word] 65535[Word], 0[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6217 if not-equal[compile-time] 65535[Word], 0[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6218 if not-equal[Word] 65535[Word], 255[Word] Var
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6219 if not-equal[Word] 65535[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6220 if not-equal[Word] 65535[Word], 255[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6221 if not-equal[compile-time] 65535[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6222 if not-equal[Word] 65535[Word], 255[Word] Var
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6223 if not-equal[Word] 65535[Word], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6224 if not-equal[Word] 65535[Word], 255[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6225 if not-equal[compile-time] 65535[Word], 255[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6226 if not-equal[Word] 65535[Word], 32767[Word] Var
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6227 if not-equal[Word] 65535[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6228 if not-equal[Word] 65535[Word], 32767[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6229 if not-equal[compile-time] 65535[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6230 if not-equal[Word] 65535[Word], 32767[Word] Var
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6231 if not-equal[Word] 65535[Word], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6232 if not-equal[Word] 65535[Word], 32767[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6233 if not-equal[compile-time] 65535[Word], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6234 if not-equal[Word] 65535[Word], 32768[Word] Var
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6235 if not-equal[Word] 65535[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6236 if not-equal[Word] 65535[Word], 32768[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6237 if not-equal[compile-time] 65535[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6238 if not-equal[Word] 65535[Word], 32768[Word] Var
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6239 if not-equal[Word] 65535[Word], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6240 if not-equal[Word] 65535[Word], 32768[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6241 if not-equal[compile-time] 65535[Word], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6242 if not-equal[Word] 65535[Word], 65535[Word] Var
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6243 if not-equal[Word] 65535[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6244 if not-equal[Word] 65535[Word], 65535[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:6245 if not-equal[compile-time] 65535[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:6246 if not-equal[Word] 65535[Word], 65535[Word] Var
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6247 if not-equal[Word] 65535[Word], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6248 if not-equal[Word] 65535[Word], 65535[Word] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6249 if not-equal[compile-time] 65535[Word], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6250 if not-equal[Pointer] 0[Word], 0[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6251 if not-equal[Pointer] 0[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6252 if not-equal[Pointer] 0[Word], 0[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6253 if not-equal[compile-time] 0[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6254 if not-equal[Pointer] 0[Word], 0[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6255 if not-equal[Pointer] 0[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6256 if not-equal[Pointer] 0[Word], 0[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6257 if not-equal[compile-time] 0[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6258 if not-equal[Pointer] 0[Word], 255[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6259 if not-equal[Pointer] 0[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6260 if not-equal[Pointer] 0[Word], 255[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6261 if not-equal[compile-time] 0[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6262 if not-equal[Pointer] 0[Word], 255[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6263 if not-equal[Pointer] 0[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6264 if not-equal[Pointer] 0[Word], 255[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6265 if not-equal[compile-time] 0[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6266 if not-equal[Pointer] 0[Word], 32767[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6267 if not-equal[Pointer] 0[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6268 if not-equal[Pointer] 0[Word], 32767[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6269 if not-equal[compile-time] 0[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6270 if not-equal[Pointer] 0[Word], 32767[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6271 if not-equal[Pointer] 0[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6272 if not-equal[Pointer] 0[Word], 32767[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6273 if not-equal[compile-time] 0[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6274 if not-equal[Pointer] 0[Word], 32768[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6275 if not-equal[Pointer] 0[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6276 if not-equal[Pointer] 0[Word], 32768[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6277 if not-equal[compile-time] 0[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6278 if not-equal[Pointer] 0[Word], 32768[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6279 if not-equal[Pointer] 0[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6280 if not-equal[Pointer] 0[Word], 32768[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6281 if not-equal[compile-time] 0[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6282 if not-equal[Pointer] 0[Word], 65535[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6283 if not-equal[Pointer] 0[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6284 if not-equal[Pointer] 0[Word], 65535[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6285 if not-equal[compile-time] 0[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6286 if not-equal[Pointer] 0[Word], 65535[Pointer] Var
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6287 if not-equal[Pointer] 0[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6288 if not-equal[Pointer] 0[Word], 65535[Pointer] Right immediate
  var  a: Word = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6289 if not-equal[compile-time] 0[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6290 if not-equal[Pointer] 255[Word], 0[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6291 if not-equal[Pointer] 255[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6292 if not-equal[Pointer] 255[Word], 0[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6293 if not-equal[compile-time] 255[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6294 if not-equal[Pointer] 255[Word], 0[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6295 if not-equal[Pointer] 255[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6296 if not-equal[Pointer] 255[Word], 0[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6297 if not-equal[compile-time] 255[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6298 if not-equal[Pointer] 255[Word], 255[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6299 if not-equal[Pointer] 255[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6300 if not-equal[Pointer] 255[Word], 255[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:6301 if not-equal[compile-time] 255[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:6302 if not-equal[Pointer] 255[Word], 255[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6303 if not-equal[Pointer] 255[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6304 if not-equal[Pointer] 255[Word], 255[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6305 if not-equal[compile-time] 255[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6306 if not-equal[Pointer] 255[Word], 32767[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6307 if not-equal[Pointer] 255[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6308 if not-equal[Pointer] 255[Word], 32767[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6309 if not-equal[compile-time] 255[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6310 if not-equal[Pointer] 255[Word], 32767[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6311 if not-equal[Pointer] 255[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6312 if not-equal[Pointer] 255[Word], 32767[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6313 if not-equal[compile-time] 255[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6314 if not-equal[Pointer] 255[Word], 32768[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6315 if not-equal[Pointer] 255[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6316 if not-equal[Pointer] 255[Word], 32768[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6317 if not-equal[compile-time] 255[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6318 if not-equal[Pointer] 255[Word], 32768[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6319 if not-equal[Pointer] 255[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6320 if not-equal[Pointer] 255[Word], 32768[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6321 if not-equal[compile-time] 255[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6322 if not-equal[Pointer] 255[Word], 65535[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6323 if not-equal[Pointer] 255[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6324 if not-equal[Pointer] 255[Word], 65535[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6325 if not-equal[compile-time] 255[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6326 if not-equal[Pointer] 255[Word], 65535[Pointer] Var
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6327 if not-equal[Pointer] 255[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6328 if not-equal[Pointer] 255[Word], 65535[Pointer] Right immediate
  var  a: Word = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6329 if not-equal[compile-time] 255[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6330 if not-equal[Pointer] 32767[Word], 0[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6331 if not-equal[Pointer] 32767[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6332 if not-equal[Pointer] 32767[Word], 0[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6333 if not-equal[compile-time] 32767[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6334 if not-equal[Pointer] 32767[Word], 0[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6335 if not-equal[Pointer] 32767[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6336 if not-equal[Pointer] 32767[Word], 0[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6337 if not-equal[compile-time] 32767[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6338 if not-equal[Pointer] 32767[Word], 255[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6339 if not-equal[Pointer] 32767[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6340 if not-equal[Pointer] 32767[Word], 255[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6341 if not-equal[compile-time] 32767[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6342 if not-equal[Pointer] 32767[Word], 255[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6343 if not-equal[Pointer] 32767[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6344 if not-equal[Pointer] 32767[Word], 255[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6345 if not-equal[compile-time] 32767[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6346 if not-equal[Pointer] 32767[Word], 32767[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6347 if not-equal[Pointer] 32767[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6348 if not-equal[Pointer] 32767[Word], 32767[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6349 if not-equal[compile-time] 32767[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6350 if not-equal[Pointer] 32767[Word], 32767[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6351 if not-equal[Pointer] 32767[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6352 if not-equal[Pointer] 32767[Word], 32767[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6353 if not-equal[compile-time] 32767[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6354 if not-equal[Pointer] 32767[Word], 32768[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6355 if not-equal[Pointer] 32767[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6356 if not-equal[Pointer] 32767[Word], 32768[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6357 if not-equal[compile-time] 32767[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6358 if not-equal[Pointer] 32767[Word], 32768[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6359 if not-equal[Pointer] 32767[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6360 if not-equal[Pointer] 32767[Word], 32768[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6361 if not-equal[compile-time] 32767[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6362 if not-equal[Pointer] 32767[Word], 65535[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6363 if not-equal[Pointer] 32767[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6364 if not-equal[Pointer] 32767[Word], 65535[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6365 if not-equal[compile-time] 32767[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6366 if not-equal[Pointer] 32767[Word], 65535[Pointer] Var
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6367 if not-equal[Pointer] 32767[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6368 if not-equal[Pointer] 32767[Word], 65535[Pointer] Right immediate
  var  a: Word = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6369 if not-equal[compile-time] 32767[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6370 if not-equal[Pointer] 32768[Word], 0[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6371 if not-equal[Pointer] 32768[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6372 if not-equal[Pointer] 32768[Word], 0[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6373 if not-equal[compile-time] 32768[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6374 if not-equal[Pointer] 32768[Word], 0[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6375 if not-equal[Pointer] 32768[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6376 if not-equal[Pointer] 32768[Word], 0[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6377 if not-equal[compile-time] 32768[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6378 if not-equal[Pointer] 32768[Word], 255[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6379 if not-equal[Pointer] 32768[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6380 if not-equal[Pointer] 32768[Word], 255[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6381 if not-equal[compile-time] 32768[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6382 if not-equal[Pointer] 32768[Word], 255[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6383 if not-equal[Pointer] 32768[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6384 if not-equal[Pointer] 32768[Word], 255[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6385 if not-equal[compile-time] 32768[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6386 if not-equal[Pointer] 32768[Word], 32767[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6387 if not-equal[Pointer] 32768[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6388 if not-equal[Pointer] 32768[Word], 32767[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6389 if not-equal[compile-time] 32768[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6390 if not-equal[Pointer] 32768[Word], 32767[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6391 if not-equal[Pointer] 32768[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6392 if not-equal[Pointer] 32768[Word], 32767[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6393 if not-equal[compile-time] 32768[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6394 if not-equal[Pointer] 32768[Word], 32768[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6395 if not-equal[Pointer] 32768[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6396 if not-equal[Pointer] 32768[Word], 32768[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:6397 if not-equal[compile-time] 32768[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:6398 if not-equal[Pointer] 32768[Word], 32768[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6399 if not-equal[Pointer] 32768[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6400 if not-equal[Pointer] 32768[Word], 32768[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6401 if not-equal[compile-time] 32768[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6402 if not-equal[Pointer] 32768[Word], 65535[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6403 if not-equal[Pointer] 32768[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6404 if not-equal[Pointer] 32768[Word], 65535[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6405 if not-equal[compile-time] 32768[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:6406 if not-equal[Pointer] 32768[Word], 65535[Pointer] Var
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6407 if not-equal[Pointer] 32768[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6408 if not-equal[Pointer] 32768[Word], 65535[Pointer] Right immediate
  var  a: Word = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6409 if not-equal[compile-time] 32768[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6410 if not-equal[Pointer] 65535[Word], 0[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6411 if not-equal[Pointer] 65535[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6412 if not-equal[Pointer] 65535[Word], 0[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6413 if not-equal[compile-time] 65535[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6414 if not-equal[Pointer] 65535[Word], 0[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6415 if not-equal[Pointer] 65535[Word], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6416 if not-equal[Pointer] 65535[Word], 0[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6417 if not-equal[compile-time] 65535[Word], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6418 if not-equal[Pointer] 65535[Word], 255[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6419 if not-equal[Pointer] 65535[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6420 if not-equal[Pointer] 65535[Word], 255[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6421 if not-equal[compile-time] 65535[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:6422 if not-equal[Pointer] 65535[Word], 255[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6423 if not-equal[Pointer] 65535[Word], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6424 if not-equal[Pointer] 65535[Word], 255[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6425 if not-equal[compile-time] 65535[Word], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6426 if not-equal[Pointer] 65535[Word], 32767[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6427 if not-equal[Pointer] 65535[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6428 if not-equal[Pointer] 65535[Word], 32767[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6429 if not-equal[compile-time] 65535[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6430 if not-equal[Pointer] 65535[Word], 32767[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6431 if not-equal[Pointer] 65535[Word], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6432 if not-equal[Pointer] 65535[Word], 32767[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6433 if not-equal[compile-time] 65535[Word], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6434 if not-equal[Pointer] 65535[Word], 32768[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6435 if not-equal[Pointer] 65535[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6436 if not-equal[Pointer] 65535[Word], 32768[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6437 if not-equal[compile-time] 65535[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:6438 if not-equal[Pointer] 65535[Word], 32768[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6439 if not-equal[Pointer] 65535[Word], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6440 if not-equal[Pointer] 65535[Word], 32768[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6441 if not-equal[compile-time] 65535[Word], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6442 if not-equal[Pointer] 65535[Word], 65535[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6443 if not-equal[Pointer] 65535[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6444 if not-equal[Pointer] 65535[Word], 65535[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:6445 if not-equal[compile-time] 65535[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:6446 if not-equal[Pointer] 65535[Word], 65535[Pointer] Var
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6447 if not-equal[Pointer] 65535[Word], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6448 if not-equal[Pointer] 65535[Word], 65535[Pointer] Right immediate
  var  a: Word = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6449 if not-equal[compile-time] 65535[Word], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6450 if not-equal[Pointer] 0[Pointer], -128[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6451 if not-equal[Pointer] 0[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6452 if not-equal[Pointer] 0[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6453 if not-equal[compile-time] 0[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6454 if not-equal[Pointer] 0[Pointer], -128[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6455 if not-equal[Pointer] 0[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6456 if not-equal[Pointer] 0[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6457 if not-equal[compile-time] 0[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6458 if not-equal[Pointer] 0[Pointer], -127[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6459 if not-equal[Pointer] 0[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6460 if not-equal[Pointer] 0[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6461 if not-equal[compile-time] 0[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6462 if not-equal[Pointer] 0[Pointer], -127[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6463 if not-equal[Pointer] 0[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6464 if not-equal[Pointer] 0[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6465 if not-equal[compile-time] 0[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6466 if not-equal[Pointer] 0[Pointer], -1[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6467 if not-equal[Pointer] 0[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6468 if not-equal[Pointer] 0[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6469 if not-equal[compile-time] 0[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6470 if not-equal[Pointer] 0[Pointer], -1[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6471 if not-equal[Pointer] 0[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6472 if not-equal[Pointer] 0[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6473 if not-equal[compile-time] 0[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6474 if not-equal[Pointer] 0[Pointer], 0[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6475 if not-equal[Pointer] 0[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6476 if not-equal[Pointer] 0[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6477 if not-equal[compile-time] 0[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6478 if not-equal[Pointer] 0[Pointer], 0[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6479 if not-equal[Pointer] 0[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6480 if not-equal[Pointer] 0[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6481 if not-equal[compile-time] 0[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6482 if not-equal[Pointer] 0[Pointer], 1[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6483 if not-equal[Pointer] 0[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6484 if not-equal[Pointer] 0[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6485 if not-equal[compile-time] 0[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6486 if not-equal[Pointer] 0[Pointer], 1[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6487 if not-equal[Pointer] 0[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6488 if not-equal[Pointer] 0[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6489 if not-equal[compile-time] 0[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6490 if not-equal[Pointer] 0[Pointer], 127[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6491 if not-equal[Pointer] 0[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6492 if not-equal[Pointer] 0[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6493 if not-equal[compile-time] 0[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6494 if not-equal[Pointer] 0[Pointer], 127[Int8] Var
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6495 if not-equal[Pointer] 0[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6496 if not-equal[Pointer] 0[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6497 if not-equal[compile-time] 0[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6498 if not-equal[Pointer] 255[Pointer], -128[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6499 if not-equal[Pointer] 255[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6500 if not-equal[Pointer] 255[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6501 if not-equal[compile-time] 255[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6502 if not-equal[Pointer] 255[Pointer], -128[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6503 if not-equal[Pointer] 255[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6504 if not-equal[Pointer] 255[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6505 if not-equal[compile-time] 255[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6506 if not-equal[Pointer] 255[Pointer], -127[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6507 if not-equal[Pointer] 255[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6508 if not-equal[Pointer] 255[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6509 if not-equal[compile-time] 255[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6510 if not-equal[Pointer] 255[Pointer], -127[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6511 if not-equal[Pointer] 255[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6512 if not-equal[Pointer] 255[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6513 if not-equal[compile-time] 255[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6514 if not-equal[Pointer] 255[Pointer], -1[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6515 if not-equal[Pointer] 255[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6516 if not-equal[Pointer] 255[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6517 if not-equal[compile-time] 255[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6518 if not-equal[Pointer] 255[Pointer], -1[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6519 if not-equal[Pointer] 255[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6520 if not-equal[Pointer] 255[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6521 if not-equal[compile-time] 255[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6522 if not-equal[Pointer] 255[Pointer], 0[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6523 if not-equal[Pointer] 255[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6524 if not-equal[Pointer] 255[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6525 if not-equal[compile-time] 255[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6526 if not-equal[Pointer] 255[Pointer], 0[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6527 if not-equal[Pointer] 255[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6528 if not-equal[Pointer] 255[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6529 if not-equal[compile-time] 255[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6530 if not-equal[Pointer] 255[Pointer], 1[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6531 if not-equal[Pointer] 255[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6532 if not-equal[Pointer] 255[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6533 if not-equal[compile-time] 255[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6534 if not-equal[Pointer] 255[Pointer], 1[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6535 if not-equal[Pointer] 255[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6536 if not-equal[Pointer] 255[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6537 if not-equal[compile-time] 255[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6538 if not-equal[Pointer] 255[Pointer], 127[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6539 if not-equal[Pointer] 255[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6540 if not-equal[Pointer] 255[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6541 if not-equal[compile-time] 255[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6542 if not-equal[Pointer] 255[Pointer], 127[Int8] Var
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6543 if not-equal[Pointer] 255[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6544 if not-equal[Pointer] 255[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6545 if not-equal[compile-time] 255[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6546 if not-equal[Pointer] 32767[Pointer], -128[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6547 if not-equal[Pointer] 32767[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6548 if not-equal[Pointer] 32767[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6549 if not-equal[compile-time] 32767[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6550 if not-equal[Pointer] 32767[Pointer], -128[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6551 if not-equal[Pointer] 32767[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6552 if not-equal[Pointer] 32767[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6553 if not-equal[compile-time] 32767[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6554 if not-equal[Pointer] 32767[Pointer], -127[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6555 if not-equal[Pointer] 32767[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6556 if not-equal[Pointer] 32767[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6557 if not-equal[compile-time] 32767[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6558 if not-equal[Pointer] 32767[Pointer], -127[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6559 if not-equal[Pointer] 32767[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6560 if not-equal[Pointer] 32767[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6561 if not-equal[compile-time] 32767[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6562 if not-equal[Pointer] 32767[Pointer], -1[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6563 if not-equal[Pointer] 32767[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6564 if not-equal[Pointer] 32767[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6565 if not-equal[compile-time] 32767[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6566 if not-equal[Pointer] 32767[Pointer], -1[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6567 if not-equal[Pointer] 32767[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6568 if not-equal[Pointer] 32767[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6569 if not-equal[compile-time] 32767[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6570 if not-equal[Pointer] 32767[Pointer], 0[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6571 if not-equal[Pointer] 32767[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6572 if not-equal[Pointer] 32767[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6573 if not-equal[compile-time] 32767[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6574 if not-equal[Pointer] 32767[Pointer], 0[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6575 if not-equal[Pointer] 32767[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6576 if not-equal[Pointer] 32767[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6577 if not-equal[compile-time] 32767[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6578 if not-equal[Pointer] 32767[Pointer], 1[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6579 if not-equal[Pointer] 32767[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6580 if not-equal[Pointer] 32767[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6581 if not-equal[compile-time] 32767[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6582 if not-equal[Pointer] 32767[Pointer], 1[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6583 if not-equal[Pointer] 32767[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6584 if not-equal[Pointer] 32767[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6585 if not-equal[compile-time] 32767[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6586 if not-equal[Pointer] 32767[Pointer], 127[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6587 if not-equal[Pointer] 32767[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6588 if not-equal[Pointer] 32767[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6589 if not-equal[compile-time] 32767[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6590 if not-equal[Pointer] 32767[Pointer], 127[Int8] Var
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6591 if not-equal[Pointer] 32767[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6592 if not-equal[Pointer] 32767[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6593 if not-equal[compile-time] 32767[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6594 if not-equal[Pointer] 32768[Pointer], -128[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6595 if not-equal[Pointer] 32768[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6596 if not-equal[Pointer] 32768[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6597 if not-equal[compile-time] 32768[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6598 if not-equal[Pointer] 32768[Pointer], -128[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6599 if not-equal[Pointer] 32768[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6600 if not-equal[Pointer] 32768[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6601 if not-equal[compile-time] 32768[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6602 if not-equal[Pointer] 32768[Pointer], -127[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6603 if not-equal[Pointer] 32768[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6604 if not-equal[Pointer] 32768[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6605 if not-equal[compile-time] 32768[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6606 if not-equal[Pointer] 32768[Pointer], -127[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6607 if not-equal[Pointer] 32768[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6608 if not-equal[Pointer] 32768[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6609 if not-equal[compile-time] 32768[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6610 if not-equal[Pointer] 32768[Pointer], -1[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6611 if not-equal[Pointer] 32768[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6612 if not-equal[Pointer] 32768[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6613 if not-equal[compile-time] 32768[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6614 if not-equal[Pointer] 32768[Pointer], -1[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6615 if not-equal[Pointer] 32768[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6616 if not-equal[Pointer] 32768[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6617 if not-equal[compile-time] 32768[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6618 if not-equal[Pointer] 32768[Pointer], 0[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6619 if not-equal[Pointer] 32768[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6620 if not-equal[Pointer] 32768[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6621 if not-equal[compile-time] 32768[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6622 if not-equal[Pointer] 32768[Pointer], 0[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6623 if not-equal[Pointer] 32768[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6624 if not-equal[Pointer] 32768[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6625 if not-equal[compile-time] 32768[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6626 if not-equal[Pointer] 32768[Pointer], 1[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6627 if not-equal[Pointer] 32768[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6628 if not-equal[Pointer] 32768[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6629 if not-equal[compile-time] 32768[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6630 if not-equal[Pointer] 32768[Pointer], 1[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6631 if not-equal[Pointer] 32768[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6632 if not-equal[Pointer] 32768[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6633 if not-equal[compile-time] 32768[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6634 if not-equal[Pointer] 32768[Pointer], 127[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6635 if not-equal[Pointer] 32768[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6636 if not-equal[Pointer] 32768[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6637 if not-equal[compile-time] 32768[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6638 if not-equal[Pointer] 32768[Pointer], 127[Int8] Var
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6639 if not-equal[Pointer] 32768[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6640 if not-equal[Pointer] 32768[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6641 if not-equal[compile-time] 32768[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6642 if not-equal[Pointer] 65535[Pointer], -128[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6643 if not-equal[Pointer] 65535[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6644 if not-equal[Pointer] 65535[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6645 if not-equal[compile-time] 65535[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6646 if not-equal[Pointer] 65535[Pointer], -128[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6647 if not-equal[Pointer] 65535[Pointer], -128[Int8] Left immediate
  var  b: Int8 = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6648 if not-equal[Pointer] 65535[Pointer], -128[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6649 if not-equal[compile-time] 65535[Pointer], -128[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6650 if not-equal[Pointer] 65535[Pointer], -127[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6651 if not-equal[Pointer] 65535[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6652 if not-equal[Pointer] 65535[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6653 if not-equal[compile-time] 65535[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -127 then
    r := 1;
endcode
varvalue r 1

code auto:6654 if not-equal[Pointer] 65535[Pointer], -127[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6655 if not-equal[Pointer] 65535[Pointer], -127[Int8] Left immediate
  var  b: Int8 = -127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6656 if not-equal[Pointer] 65535[Pointer], -127[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6657 if not-equal[compile-time] 65535[Pointer], -127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6658 if not-equal[Pointer] 65535[Pointer], -1[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6659 if not-equal[Pointer] 65535[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6660 if not-equal[Pointer] 65535[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6661 if not-equal[compile-time] 65535[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6662 if not-equal[Pointer] 65535[Pointer], -1[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6663 if not-equal[Pointer] 65535[Pointer], -1[Int8] Left immediate
  var  b: Int8 = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6664 if not-equal[Pointer] 65535[Pointer], -1[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6665 if not-equal[compile-time] 65535[Pointer], -1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6666 if not-equal[Pointer] 65535[Pointer], 0[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6667 if not-equal[Pointer] 65535[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6668 if not-equal[Pointer] 65535[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6669 if not-equal[compile-time] 65535[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6670 if not-equal[Pointer] 65535[Pointer], 0[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6671 if not-equal[Pointer] 65535[Pointer], 0[Int8] Left immediate
  var  b: Int8 = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6672 if not-equal[Pointer] 65535[Pointer], 0[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6673 if not-equal[compile-time] 65535[Pointer], 0[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6674 if not-equal[Pointer] 65535[Pointer], 1[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6675 if not-equal[Pointer] 65535[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6676 if not-equal[Pointer] 65535[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6677 if not-equal[compile-time] 65535[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6678 if not-equal[Pointer] 65535[Pointer], 1[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6679 if not-equal[Pointer] 65535[Pointer], 1[Int8] Left immediate
  var  b: Int8 = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6680 if not-equal[Pointer] 65535[Pointer], 1[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6681 if not-equal[compile-time] 65535[Pointer], 1[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6682 if not-equal[Pointer] 65535[Pointer], 127[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6683 if not-equal[Pointer] 65535[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6684 if not-equal[Pointer] 65535[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6685 if not-equal[compile-time] 65535[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6686 if not-equal[Pointer] 65535[Pointer], 127[Int8] Var
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6687 if not-equal[Pointer] 65535[Pointer], 127[Int8] Left immediate
  var  b: Int8 = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6688 if not-equal[Pointer] 65535[Pointer], 127[Int8] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6689 if not-equal[compile-time] 65535[Pointer], 127[Int8] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6690 if not-equal[Pointer] 0[Pointer], -32768[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6691 if not-equal[Pointer] 0[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6692 if not-equal[Pointer] 0[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6693 if not-equal[compile-time] 0[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6694 if not-equal[Pointer] 0[Pointer], -32768[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6695 if not-equal[Pointer] 0[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6696 if not-equal[Pointer] 0[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6697 if not-equal[compile-time] 0[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6698 if not-equal[Pointer] 0[Pointer], -32767[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6699 if not-equal[Pointer] 0[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6700 if not-equal[Pointer] 0[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6701 if not-equal[compile-time] 0[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6702 if not-equal[Pointer] 0[Pointer], -32767[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6703 if not-equal[Pointer] 0[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6704 if not-equal[Pointer] 0[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6705 if not-equal[compile-time] 0[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6706 if not-equal[Pointer] 0[Pointer], -129[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6707 if not-equal[Pointer] 0[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6708 if not-equal[Pointer] 0[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6709 if not-equal[compile-time] 0[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6710 if not-equal[Pointer] 0[Pointer], -129[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6711 if not-equal[Pointer] 0[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6712 if not-equal[Pointer] 0[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6713 if not-equal[compile-time] 0[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6714 if not-equal[Pointer] 0[Pointer], -128[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6715 if not-equal[Pointer] 0[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6716 if not-equal[Pointer] 0[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6717 if not-equal[compile-time] 0[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6718 if not-equal[Pointer] 0[Pointer], -128[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6719 if not-equal[Pointer] 0[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6720 if not-equal[Pointer] 0[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6721 if not-equal[compile-time] 0[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6722 if not-equal[Pointer] 0[Pointer], -1[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6723 if not-equal[Pointer] 0[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6724 if not-equal[Pointer] 0[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6725 if not-equal[compile-time] 0[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6726 if not-equal[Pointer] 0[Pointer], -1[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6727 if not-equal[Pointer] 0[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6728 if not-equal[Pointer] 0[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6729 if not-equal[compile-time] 0[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6730 if not-equal[Pointer] 0[Pointer], 0[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6731 if not-equal[Pointer] 0[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6732 if not-equal[Pointer] 0[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6733 if not-equal[compile-time] 0[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:6734 if not-equal[Pointer] 0[Pointer], 0[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6735 if not-equal[Pointer] 0[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6736 if not-equal[Pointer] 0[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6737 if not-equal[compile-time] 0[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6738 if not-equal[Pointer] 0[Pointer], 1[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6739 if not-equal[Pointer] 0[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6740 if not-equal[Pointer] 0[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6741 if not-equal[compile-time] 0[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6742 if not-equal[Pointer] 0[Pointer], 1[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6743 if not-equal[Pointer] 0[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6744 if not-equal[Pointer] 0[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6745 if not-equal[compile-time] 0[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6746 if not-equal[Pointer] 0[Pointer], 127[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6747 if not-equal[Pointer] 0[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6748 if not-equal[Pointer] 0[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6749 if not-equal[compile-time] 0[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6750 if not-equal[Pointer] 0[Pointer], 127[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6751 if not-equal[Pointer] 0[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6752 if not-equal[Pointer] 0[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6753 if not-equal[compile-time] 0[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6754 if not-equal[Pointer] 0[Pointer], 128[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6755 if not-equal[Pointer] 0[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6756 if not-equal[Pointer] 0[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6757 if not-equal[compile-time] 0[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6758 if not-equal[Pointer] 0[Pointer], 128[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6759 if not-equal[Pointer] 0[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6760 if not-equal[Pointer] 0[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6761 if not-equal[compile-time] 0[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6762 if not-equal[Pointer] 0[Pointer], 32767[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6763 if not-equal[Pointer] 0[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6764 if not-equal[Pointer] 0[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6765 if not-equal[compile-time] 0[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6766 if not-equal[Pointer] 0[Pointer], 32767[Integer] Var
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6767 if not-equal[Pointer] 0[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6768 if not-equal[Pointer] 0[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6769 if not-equal[compile-time] 0[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6770 if not-equal[Pointer] 255[Pointer], -32768[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6771 if not-equal[Pointer] 255[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6772 if not-equal[Pointer] 255[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6773 if not-equal[compile-time] 255[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6774 if not-equal[Pointer] 255[Pointer], -32768[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6775 if not-equal[Pointer] 255[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6776 if not-equal[Pointer] 255[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6777 if not-equal[compile-time] 255[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6778 if not-equal[Pointer] 255[Pointer], -32767[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6779 if not-equal[Pointer] 255[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6780 if not-equal[Pointer] 255[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6781 if not-equal[compile-time] 255[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6782 if not-equal[Pointer] 255[Pointer], -32767[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6783 if not-equal[Pointer] 255[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6784 if not-equal[Pointer] 255[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6785 if not-equal[compile-time] 255[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6786 if not-equal[Pointer] 255[Pointer], -129[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6787 if not-equal[Pointer] 255[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6788 if not-equal[Pointer] 255[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6789 if not-equal[compile-time] 255[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6790 if not-equal[Pointer] 255[Pointer], -129[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6791 if not-equal[Pointer] 255[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6792 if not-equal[Pointer] 255[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6793 if not-equal[compile-time] 255[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6794 if not-equal[Pointer] 255[Pointer], -128[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6795 if not-equal[Pointer] 255[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6796 if not-equal[Pointer] 255[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6797 if not-equal[compile-time] 255[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6798 if not-equal[Pointer] 255[Pointer], -128[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6799 if not-equal[Pointer] 255[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6800 if not-equal[Pointer] 255[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6801 if not-equal[compile-time] 255[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6802 if not-equal[Pointer] 255[Pointer], -1[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6803 if not-equal[Pointer] 255[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6804 if not-equal[Pointer] 255[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6805 if not-equal[compile-time] 255[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6806 if not-equal[Pointer] 255[Pointer], -1[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6807 if not-equal[Pointer] 255[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6808 if not-equal[Pointer] 255[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6809 if not-equal[compile-time] 255[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6810 if not-equal[Pointer] 255[Pointer], 0[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6811 if not-equal[Pointer] 255[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6812 if not-equal[Pointer] 255[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6813 if not-equal[compile-time] 255[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6814 if not-equal[Pointer] 255[Pointer], 0[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6815 if not-equal[Pointer] 255[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6816 if not-equal[Pointer] 255[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6817 if not-equal[compile-time] 255[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6818 if not-equal[Pointer] 255[Pointer], 1[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6819 if not-equal[Pointer] 255[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6820 if not-equal[Pointer] 255[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6821 if not-equal[compile-time] 255[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6822 if not-equal[Pointer] 255[Pointer], 1[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6823 if not-equal[Pointer] 255[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6824 if not-equal[Pointer] 255[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6825 if not-equal[compile-time] 255[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6826 if not-equal[Pointer] 255[Pointer], 127[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6827 if not-equal[Pointer] 255[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6828 if not-equal[Pointer] 255[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6829 if not-equal[compile-time] 255[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6830 if not-equal[Pointer] 255[Pointer], 127[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6831 if not-equal[Pointer] 255[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6832 if not-equal[Pointer] 255[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6833 if not-equal[compile-time] 255[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6834 if not-equal[Pointer] 255[Pointer], 128[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6835 if not-equal[Pointer] 255[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6836 if not-equal[Pointer] 255[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6837 if not-equal[compile-time] 255[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6838 if not-equal[Pointer] 255[Pointer], 128[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6839 if not-equal[Pointer] 255[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6840 if not-equal[Pointer] 255[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6841 if not-equal[compile-time] 255[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6842 if not-equal[Pointer] 255[Pointer], 32767[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6843 if not-equal[Pointer] 255[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6844 if not-equal[Pointer] 255[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6845 if not-equal[compile-time] 255[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:6846 if not-equal[Pointer] 255[Pointer], 32767[Integer] Var
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6847 if not-equal[Pointer] 255[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6848 if not-equal[Pointer] 255[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6849 if not-equal[compile-time] 255[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6850 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6851 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6852 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6853 if not-equal[compile-time] 32767[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6854 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6855 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6856 if not-equal[Pointer] 32767[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6857 if not-equal[compile-time] 32767[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6858 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6859 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6860 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6861 if not-equal[compile-time] 32767[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6862 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6863 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6864 if not-equal[Pointer] 32767[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6865 if not-equal[compile-time] 32767[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6866 if not-equal[Pointer] 32767[Pointer], -129[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6867 if not-equal[Pointer] 32767[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6868 if not-equal[Pointer] 32767[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6869 if not-equal[compile-time] 32767[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6870 if not-equal[Pointer] 32767[Pointer], -129[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6871 if not-equal[Pointer] 32767[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6872 if not-equal[Pointer] 32767[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6873 if not-equal[compile-time] 32767[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6874 if not-equal[Pointer] 32767[Pointer], -128[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6875 if not-equal[Pointer] 32767[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6876 if not-equal[Pointer] 32767[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6877 if not-equal[compile-time] 32767[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6878 if not-equal[Pointer] 32767[Pointer], -128[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6879 if not-equal[Pointer] 32767[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6880 if not-equal[Pointer] 32767[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6881 if not-equal[compile-time] 32767[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6882 if not-equal[Pointer] 32767[Pointer], -1[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6883 if not-equal[Pointer] 32767[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6884 if not-equal[Pointer] 32767[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6885 if not-equal[compile-time] 32767[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6886 if not-equal[Pointer] 32767[Pointer], -1[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6887 if not-equal[Pointer] 32767[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6888 if not-equal[Pointer] 32767[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6889 if not-equal[compile-time] 32767[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6890 if not-equal[Pointer] 32767[Pointer], 0[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6891 if not-equal[Pointer] 32767[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6892 if not-equal[Pointer] 32767[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6893 if not-equal[compile-time] 32767[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6894 if not-equal[Pointer] 32767[Pointer], 0[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6895 if not-equal[Pointer] 32767[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6896 if not-equal[Pointer] 32767[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6897 if not-equal[compile-time] 32767[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6898 if not-equal[Pointer] 32767[Pointer], 1[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6899 if not-equal[Pointer] 32767[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6900 if not-equal[Pointer] 32767[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6901 if not-equal[compile-time] 32767[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6902 if not-equal[Pointer] 32767[Pointer], 1[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6903 if not-equal[Pointer] 32767[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6904 if not-equal[Pointer] 32767[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6905 if not-equal[compile-time] 32767[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6906 if not-equal[Pointer] 32767[Pointer], 127[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6907 if not-equal[Pointer] 32767[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6908 if not-equal[Pointer] 32767[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6909 if not-equal[compile-time] 32767[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6910 if not-equal[Pointer] 32767[Pointer], 127[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6911 if not-equal[Pointer] 32767[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6912 if not-equal[Pointer] 32767[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6913 if not-equal[compile-time] 32767[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6914 if not-equal[Pointer] 32767[Pointer], 128[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6915 if not-equal[Pointer] 32767[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6916 if not-equal[Pointer] 32767[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6917 if not-equal[compile-time] 32767[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6918 if not-equal[Pointer] 32767[Pointer], 128[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6919 if not-equal[Pointer] 32767[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6920 if not-equal[Pointer] 32767[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6921 if not-equal[compile-time] 32767[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6922 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:6923 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:6924 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6925 if not-equal[compile-time] 32767[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:6926 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Var
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6927 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6928 if not-equal[Pointer] 32767[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6929 if not-equal[compile-time] 32767[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:6930 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6931 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6932 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6933 if not-equal[compile-time] 32768[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:6934 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6935 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6936 if not-equal[Pointer] 32768[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6937 if not-equal[compile-time] 32768[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6938 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6939 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6940 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6941 if not-equal[compile-time] 32768[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:6942 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6943 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6944 if not-equal[Pointer] 32768[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6945 if not-equal[compile-time] 32768[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6946 if not-equal[Pointer] 32768[Pointer], -129[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6947 if not-equal[Pointer] 32768[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6948 if not-equal[Pointer] 32768[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6949 if not-equal[compile-time] 32768[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:6950 if not-equal[Pointer] 32768[Pointer], -129[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6951 if not-equal[Pointer] 32768[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6952 if not-equal[Pointer] 32768[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6953 if not-equal[compile-time] 32768[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6954 if not-equal[Pointer] 32768[Pointer], -128[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6955 if not-equal[Pointer] 32768[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6956 if not-equal[Pointer] 32768[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6957 if not-equal[compile-time] 32768[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:6958 if not-equal[Pointer] 32768[Pointer], -128[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6959 if not-equal[Pointer] 32768[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6960 if not-equal[Pointer] 32768[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6961 if not-equal[compile-time] 32768[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6962 if not-equal[Pointer] 32768[Pointer], -1[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6963 if not-equal[Pointer] 32768[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6964 if not-equal[Pointer] 32768[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6965 if not-equal[compile-time] 32768[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:6966 if not-equal[Pointer] 32768[Pointer], -1[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6967 if not-equal[Pointer] 32768[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6968 if not-equal[Pointer] 32768[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6969 if not-equal[compile-time] 32768[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6970 if not-equal[Pointer] 32768[Pointer], 0[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6971 if not-equal[Pointer] 32768[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6972 if not-equal[Pointer] 32768[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6973 if not-equal[compile-time] 32768[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:6974 if not-equal[Pointer] 32768[Pointer], 0[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6975 if not-equal[Pointer] 32768[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6976 if not-equal[Pointer] 32768[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6977 if not-equal[compile-time] 32768[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6978 if not-equal[Pointer] 32768[Pointer], 1[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6979 if not-equal[Pointer] 32768[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6980 if not-equal[Pointer] 32768[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6981 if not-equal[compile-time] 32768[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:6982 if not-equal[Pointer] 32768[Pointer], 1[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6983 if not-equal[Pointer] 32768[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6984 if not-equal[Pointer] 32768[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6985 if not-equal[compile-time] 32768[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6986 if not-equal[Pointer] 32768[Pointer], 127[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6987 if not-equal[Pointer] 32768[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6988 if not-equal[Pointer] 32768[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6989 if not-equal[compile-time] 32768[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:6990 if not-equal[Pointer] 32768[Pointer], 127[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6991 if not-equal[Pointer] 32768[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6992 if not-equal[Pointer] 32768[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6993 if not-equal[compile-time] 32768[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6994 if not-equal[Pointer] 32768[Pointer], 128[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:6995 if not-equal[Pointer] 32768[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:6996 if not-equal[Pointer] 32768[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6997 if not-equal[compile-time] 32768[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:6998 if not-equal[Pointer] 32768[Pointer], 128[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:6999 if not-equal[Pointer] 32768[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7000 if not-equal[Pointer] 32768[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7001 if not-equal[compile-time] 32768[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7002 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7003 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7004 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7005 if not-equal[compile-time] 32768[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7006 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Var
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7007 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7008 if not-equal[Pointer] 32768[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7009 if not-equal[compile-time] 32768[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7010 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7011 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7012 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:7013 if not-equal[compile-time] 65535[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32768 then
    r := 1;
endcode
varvalue r 1

code auto:7014 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7015 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Left immediate
  var  b: Integer = -32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7016 if not-equal[Pointer] 65535[Pointer], -32768[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7017 if not-equal[compile-time] 65535[Pointer], -32768[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7018 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7019 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7020 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:7021 if not-equal[compile-time] 65535[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32767 then
    r := 1;
endcode
varvalue r 1

code auto:7022 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7023 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Left immediate
  var  b: Integer = -32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7024 if not-equal[Pointer] 65535[Pointer], -32767[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7025 if not-equal[compile-time] 65535[Pointer], -32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7026 if not-equal[Pointer] 65535[Pointer], -129[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7027 if not-equal[Pointer] 65535[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7028 if not-equal[Pointer] 65535[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:7029 if not-equal[compile-time] 65535[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -129 then
    r := 1;
endcode
varvalue r 1

code auto:7030 if not-equal[Pointer] 65535[Pointer], -129[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7031 if not-equal[Pointer] 65535[Pointer], -129[Integer] Left immediate
  var  b: Integer = -129;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7032 if not-equal[Pointer] 65535[Pointer], -129[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7033 if not-equal[compile-time] 65535[Pointer], -129[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -129 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7034 if not-equal[Pointer] 65535[Pointer], -128[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7035 if not-equal[Pointer] 65535[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7036 if not-equal[Pointer] 65535[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:7037 if not-equal[compile-time] 65535[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1;
endcode
varvalue r 1

code auto:7038 if not-equal[Pointer] 65535[Pointer], -128[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7039 if not-equal[Pointer] 65535[Pointer], -128[Integer] Left immediate
  var  b: Integer = -128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7040 if not-equal[Pointer] 65535[Pointer], -128[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7041 if not-equal[compile-time] 65535[Pointer], -128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7042 if not-equal[Pointer] 65535[Pointer], -1[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7043 if not-equal[Pointer] 65535[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7044 if not-equal[Pointer] 65535[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:7045 if not-equal[compile-time] 65535[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1;
endcode
varvalue r 1

code auto:7046 if not-equal[Pointer] 65535[Pointer], -1[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7047 if not-equal[Pointer] 65535[Pointer], -1[Integer] Left immediate
  var  b: Integer = -1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7048 if not-equal[Pointer] 65535[Pointer], -1[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7049 if not-equal[compile-time] 65535[Pointer], -1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> -1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7050 if not-equal[Pointer] 65535[Pointer], 0[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7051 if not-equal[Pointer] 65535[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7052 if not-equal[Pointer] 65535[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7053 if not-equal[compile-time] 65535[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7054 if not-equal[Pointer] 65535[Pointer], 0[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7055 if not-equal[Pointer] 65535[Pointer], 0[Integer] Left immediate
  var  b: Integer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7056 if not-equal[Pointer] 65535[Pointer], 0[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7057 if not-equal[compile-time] 65535[Pointer], 0[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7058 if not-equal[Pointer] 65535[Pointer], 1[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7059 if not-equal[Pointer] 65535[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7060 if not-equal[Pointer] 65535[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7061 if not-equal[compile-time] 65535[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7062 if not-equal[Pointer] 65535[Pointer], 1[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7063 if not-equal[Pointer] 65535[Pointer], 1[Integer] Left immediate
  var  b: Integer = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7064 if not-equal[Pointer] 65535[Pointer], 1[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7065 if not-equal[compile-time] 65535[Pointer], 1[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7066 if not-equal[Pointer] 65535[Pointer], 127[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7067 if not-equal[Pointer] 65535[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7068 if not-equal[Pointer] 65535[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7069 if not-equal[compile-time] 65535[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7070 if not-equal[Pointer] 65535[Pointer], 127[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7071 if not-equal[Pointer] 65535[Pointer], 127[Integer] Left immediate
  var  b: Integer = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7072 if not-equal[Pointer] 65535[Pointer], 127[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7073 if not-equal[compile-time] 65535[Pointer], 127[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7074 if not-equal[Pointer] 65535[Pointer], 128[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7075 if not-equal[Pointer] 65535[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7076 if not-equal[Pointer] 65535[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7077 if not-equal[compile-time] 65535[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7078 if not-equal[Pointer] 65535[Pointer], 128[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7079 if not-equal[Pointer] 65535[Pointer], 128[Integer] Left immediate
  var  b: Integer = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7080 if not-equal[Pointer] 65535[Pointer], 128[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7081 if not-equal[compile-time] 65535[Pointer], 128[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7082 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7083 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7084 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7085 if not-equal[compile-time] 65535[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7086 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Var
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7087 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Left immediate
  var  b: Integer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7088 if not-equal[Pointer] 65535[Pointer], 32767[Integer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7089 if not-equal[compile-time] 65535[Pointer], 32767[Integer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7090 if not-equal[Pointer] 0[Pointer], 0[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7091 if not-equal[Pointer] 0[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7092 if not-equal[Pointer] 0[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7093 if not-equal[compile-time] 0[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7094 if not-equal[Pointer] 0[Pointer], 0[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7095 if not-equal[Pointer] 0[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7096 if not-equal[Pointer] 0[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7097 if not-equal[compile-time] 0[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7098 if not-equal[Pointer] 0[Pointer], 1[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7099 if not-equal[Pointer] 0[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7100 if not-equal[Pointer] 0[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7101 if not-equal[compile-time] 0[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7102 if not-equal[Pointer] 0[Pointer], 1[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7103 if not-equal[Pointer] 0[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7104 if not-equal[Pointer] 0[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7105 if not-equal[compile-time] 0[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7106 if not-equal[Pointer] 0[Pointer], 127[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7107 if not-equal[Pointer] 0[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7108 if not-equal[Pointer] 0[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7109 if not-equal[compile-time] 0[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7110 if not-equal[Pointer] 0[Pointer], 127[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7111 if not-equal[Pointer] 0[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7112 if not-equal[Pointer] 0[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7113 if not-equal[compile-time] 0[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7114 if not-equal[Pointer] 0[Pointer], 128[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7115 if not-equal[Pointer] 0[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7116 if not-equal[Pointer] 0[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7117 if not-equal[compile-time] 0[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7118 if not-equal[Pointer] 0[Pointer], 128[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7119 if not-equal[Pointer] 0[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7120 if not-equal[Pointer] 0[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7121 if not-equal[compile-time] 0[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7122 if not-equal[Pointer] 0[Pointer], 255[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7123 if not-equal[Pointer] 0[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7124 if not-equal[Pointer] 0[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7125 if not-equal[compile-time] 0[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7126 if not-equal[Pointer] 0[Pointer], 255[Byte] Var
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7127 if not-equal[Pointer] 0[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7128 if not-equal[Pointer] 0[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7129 if not-equal[compile-time] 0[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7130 if not-equal[Pointer] 255[Pointer], 0[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7131 if not-equal[Pointer] 255[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7132 if not-equal[Pointer] 255[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7133 if not-equal[compile-time] 255[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7134 if not-equal[Pointer] 255[Pointer], 0[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7135 if not-equal[Pointer] 255[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7136 if not-equal[Pointer] 255[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7137 if not-equal[compile-time] 255[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7138 if not-equal[Pointer] 255[Pointer], 1[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7139 if not-equal[Pointer] 255[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7140 if not-equal[Pointer] 255[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7141 if not-equal[compile-time] 255[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7142 if not-equal[Pointer] 255[Pointer], 1[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7143 if not-equal[Pointer] 255[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7144 if not-equal[Pointer] 255[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7145 if not-equal[compile-time] 255[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7146 if not-equal[Pointer] 255[Pointer], 127[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7147 if not-equal[Pointer] 255[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7148 if not-equal[Pointer] 255[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7149 if not-equal[compile-time] 255[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7150 if not-equal[Pointer] 255[Pointer], 127[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7151 if not-equal[Pointer] 255[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7152 if not-equal[Pointer] 255[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7153 if not-equal[compile-time] 255[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7154 if not-equal[Pointer] 255[Pointer], 128[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7155 if not-equal[Pointer] 255[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7156 if not-equal[Pointer] 255[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7157 if not-equal[compile-time] 255[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7158 if not-equal[Pointer] 255[Pointer], 128[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7159 if not-equal[Pointer] 255[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7160 if not-equal[Pointer] 255[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7161 if not-equal[compile-time] 255[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7162 if not-equal[Pointer] 255[Pointer], 255[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7163 if not-equal[Pointer] 255[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7164 if not-equal[Pointer] 255[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7165 if not-equal[compile-time] 255[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7166 if not-equal[Pointer] 255[Pointer], 255[Byte] Var
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7167 if not-equal[Pointer] 255[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7168 if not-equal[Pointer] 255[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7169 if not-equal[compile-time] 255[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7170 if not-equal[Pointer] 32767[Pointer], 0[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7171 if not-equal[Pointer] 32767[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7172 if not-equal[Pointer] 32767[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7173 if not-equal[compile-time] 32767[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7174 if not-equal[Pointer] 32767[Pointer], 0[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7175 if not-equal[Pointer] 32767[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7176 if not-equal[Pointer] 32767[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7177 if not-equal[compile-time] 32767[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7178 if not-equal[Pointer] 32767[Pointer], 1[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7179 if not-equal[Pointer] 32767[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7180 if not-equal[Pointer] 32767[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7181 if not-equal[compile-time] 32767[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7182 if not-equal[Pointer] 32767[Pointer], 1[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7183 if not-equal[Pointer] 32767[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7184 if not-equal[Pointer] 32767[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7185 if not-equal[compile-time] 32767[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7186 if not-equal[Pointer] 32767[Pointer], 127[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7187 if not-equal[Pointer] 32767[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7188 if not-equal[Pointer] 32767[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7189 if not-equal[compile-time] 32767[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7190 if not-equal[Pointer] 32767[Pointer], 127[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7191 if not-equal[Pointer] 32767[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7192 if not-equal[Pointer] 32767[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7193 if not-equal[compile-time] 32767[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7194 if not-equal[Pointer] 32767[Pointer], 128[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7195 if not-equal[Pointer] 32767[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7196 if not-equal[Pointer] 32767[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7197 if not-equal[compile-time] 32767[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7198 if not-equal[Pointer] 32767[Pointer], 128[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7199 if not-equal[Pointer] 32767[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7200 if not-equal[Pointer] 32767[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7201 if not-equal[compile-time] 32767[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7202 if not-equal[Pointer] 32767[Pointer], 255[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7203 if not-equal[Pointer] 32767[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7204 if not-equal[Pointer] 32767[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7205 if not-equal[compile-time] 32767[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7206 if not-equal[Pointer] 32767[Pointer], 255[Byte] Var
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7207 if not-equal[Pointer] 32767[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7208 if not-equal[Pointer] 32767[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7209 if not-equal[compile-time] 32767[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7210 if not-equal[Pointer] 32768[Pointer], 0[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7211 if not-equal[Pointer] 32768[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7212 if not-equal[Pointer] 32768[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7213 if not-equal[compile-time] 32768[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7214 if not-equal[Pointer] 32768[Pointer], 0[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7215 if not-equal[Pointer] 32768[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7216 if not-equal[Pointer] 32768[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7217 if not-equal[compile-time] 32768[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7218 if not-equal[Pointer] 32768[Pointer], 1[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7219 if not-equal[Pointer] 32768[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7220 if not-equal[Pointer] 32768[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7221 if not-equal[compile-time] 32768[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7222 if not-equal[Pointer] 32768[Pointer], 1[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7223 if not-equal[Pointer] 32768[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7224 if not-equal[Pointer] 32768[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7225 if not-equal[compile-time] 32768[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7226 if not-equal[Pointer] 32768[Pointer], 127[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7227 if not-equal[Pointer] 32768[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7228 if not-equal[Pointer] 32768[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7229 if not-equal[compile-time] 32768[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7230 if not-equal[Pointer] 32768[Pointer], 127[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7231 if not-equal[Pointer] 32768[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7232 if not-equal[Pointer] 32768[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7233 if not-equal[compile-time] 32768[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7234 if not-equal[Pointer] 32768[Pointer], 128[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7235 if not-equal[Pointer] 32768[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7236 if not-equal[Pointer] 32768[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7237 if not-equal[compile-time] 32768[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7238 if not-equal[Pointer] 32768[Pointer], 128[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7239 if not-equal[Pointer] 32768[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7240 if not-equal[Pointer] 32768[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7241 if not-equal[compile-time] 32768[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7242 if not-equal[Pointer] 32768[Pointer], 255[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7243 if not-equal[Pointer] 32768[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7244 if not-equal[Pointer] 32768[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7245 if not-equal[compile-time] 32768[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7246 if not-equal[Pointer] 32768[Pointer], 255[Byte] Var
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7247 if not-equal[Pointer] 32768[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7248 if not-equal[Pointer] 32768[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7249 if not-equal[compile-time] 32768[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7250 if not-equal[Pointer] 65535[Pointer], 0[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7251 if not-equal[Pointer] 65535[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7252 if not-equal[Pointer] 65535[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7253 if not-equal[compile-time] 65535[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7254 if not-equal[Pointer] 65535[Pointer], 0[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7255 if not-equal[Pointer] 65535[Pointer], 0[Byte] Left immediate
  var  b: Byte = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7256 if not-equal[Pointer] 65535[Pointer], 0[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7257 if not-equal[compile-time] 65535[Pointer], 0[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7258 if not-equal[Pointer] 65535[Pointer], 1[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7259 if not-equal[Pointer] 65535[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7260 if not-equal[Pointer] 65535[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7261 if not-equal[compile-time] 65535[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1;
endcode
varvalue r 1

code auto:7262 if not-equal[Pointer] 65535[Pointer], 1[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7263 if not-equal[Pointer] 65535[Pointer], 1[Byte] Left immediate
  var  b: Byte = 1;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7264 if not-equal[Pointer] 65535[Pointer], 1[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7265 if not-equal[compile-time] 65535[Pointer], 1[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 1 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7266 if not-equal[Pointer] 65535[Pointer], 127[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7267 if not-equal[Pointer] 65535[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7268 if not-equal[Pointer] 65535[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7269 if not-equal[compile-time] 65535[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1;
endcode
varvalue r 1

code auto:7270 if not-equal[Pointer] 65535[Pointer], 127[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7271 if not-equal[Pointer] 65535[Pointer], 127[Byte] Left immediate
  var  b: Byte = 127;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7272 if not-equal[Pointer] 65535[Pointer], 127[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7273 if not-equal[compile-time] 65535[Pointer], 127[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 127 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7274 if not-equal[Pointer] 65535[Pointer], 128[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7275 if not-equal[Pointer] 65535[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7276 if not-equal[Pointer] 65535[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7277 if not-equal[compile-time] 65535[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1;
endcode
varvalue r 1

code auto:7278 if not-equal[Pointer] 65535[Pointer], 128[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7279 if not-equal[Pointer] 65535[Pointer], 128[Byte] Left immediate
  var  b: Byte = 128;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7280 if not-equal[Pointer] 65535[Pointer], 128[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7281 if not-equal[compile-time] 65535[Pointer], 128[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 128 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7282 if not-equal[Pointer] 65535[Pointer], 255[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7283 if not-equal[Pointer] 65535[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7284 if not-equal[Pointer] 65535[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7285 if not-equal[compile-time] 65535[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7286 if not-equal[Pointer] 65535[Pointer], 255[Byte] Var
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7287 if not-equal[Pointer] 65535[Pointer], 255[Byte] Left immediate
  var  b: Byte = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7288 if not-equal[Pointer] 65535[Pointer], 255[Byte] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7289 if not-equal[compile-time] 65535[Pointer], 255[Byte] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7290 if not-equal[Pointer] 0[Pointer], 0[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7291 if not-equal[Pointer] 0[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7292 if not-equal[Pointer] 0[Pointer], 0[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7293 if not-equal[compile-time] 0[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7294 if not-equal[Pointer] 0[Pointer], 0[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7295 if not-equal[Pointer] 0[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7296 if not-equal[Pointer] 0[Pointer], 0[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7297 if not-equal[compile-time] 0[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7298 if not-equal[Pointer] 0[Pointer], 255[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7299 if not-equal[Pointer] 0[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7300 if not-equal[Pointer] 0[Pointer], 255[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7301 if not-equal[compile-time] 0[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7302 if not-equal[Pointer] 0[Pointer], 255[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7303 if not-equal[Pointer] 0[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7304 if not-equal[Pointer] 0[Pointer], 255[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7305 if not-equal[compile-time] 0[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7306 if not-equal[Pointer] 0[Pointer], 32767[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7307 if not-equal[Pointer] 0[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7308 if not-equal[Pointer] 0[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7309 if not-equal[compile-time] 0[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7310 if not-equal[Pointer] 0[Pointer], 32767[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7311 if not-equal[Pointer] 0[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7312 if not-equal[Pointer] 0[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7313 if not-equal[compile-time] 0[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7314 if not-equal[Pointer] 0[Pointer], 32768[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7315 if not-equal[Pointer] 0[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7316 if not-equal[Pointer] 0[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7317 if not-equal[compile-time] 0[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7318 if not-equal[Pointer] 0[Pointer], 32768[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7319 if not-equal[Pointer] 0[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7320 if not-equal[Pointer] 0[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7321 if not-equal[compile-time] 0[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7322 if not-equal[Pointer] 0[Pointer], 65535[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7323 if not-equal[Pointer] 0[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7324 if not-equal[Pointer] 0[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7325 if not-equal[compile-time] 0[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7326 if not-equal[Pointer] 0[Pointer], 65535[Word] Var
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7327 if not-equal[Pointer] 0[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7328 if not-equal[Pointer] 0[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7329 if not-equal[compile-time] 0[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7330 if not-equal[Pointer] 255[Pointer], 0[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7331 if not-equal[Pointer] 255[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7332 if not-equal[Pointer] 255[Pointer], 0[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7333 if not-equal[compile-time] 255[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7334 if not-equal[Pointer] 255[Pointer], 0[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7335 if not-equal[Pointer] 255[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7336 if not-equal[Pointer] 255[Pointer], 0[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7337 if not-equal[compile-time] 255[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7338 if not-equal[Pointer] 255[Pointer], 255[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7339 if not-equal[Pointer] 255[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7340 if not-equal[Pointer] 255[Pointer], 255[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7341 if not-equal[compile-time] 255[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7342 if not-equal[Pointer] 255[Pointer], 255[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7343 if not-equal[Pointer] 255[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7344 if not-equal[Pointer] 255[Pointer], 255[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7345 if not-equal[compile-time] 255[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7346 if not-equal[Pointer] 255[Pointer], 32767[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7347 if not-equal[Pointer] 255[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7348 if not-equal[Pointer] 255[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7349 if not-equal[compile-time] 255[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7350 if not-equal[Pointer] 255[Pointer], 32767[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7351 if not-equal[Pointer] 255[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7352 if not-equal[Pointer] 255[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7353 if not-equal[compile-time] 255[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7354 if not-equal[Pointer] 255[Pointer], 32768[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7355 if not-equal[Pointer] 255[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7356 if not-equal[Pointer] 255[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7357 if not-equal[compile-time] 255[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7358 if not-equal[Pointer] 255[Pointer], 32768[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7359 if not-equal[Pointer] 255[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7360 if not-equal[Pointer] 255[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7361 if not-equal[compile-time] 255[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7362 if not-equal[Pointer] 255[Pointer], 65535[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7363 if not-equal[Pointer] 255[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7364 if not-equal[Pointer] 255[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7365 if not-equal[compile-time] 255[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7366 if not-equal[Pointer] 255[Pointer], 65535[Word] Var
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7367 if not-equal[Pointer] 255[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7368 if not-equal[Pointer] 255[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7369 if not-equal[compile-time] 255[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7370 if not-equal[Pointer] 32767[Pointer], 0[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7371 if not-equal[Pointer] 32767[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7372 if not-equal[Pointer] 32767[Pointer], 0[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7373 if not-equal[compile-time] 32767[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7374 if not-equal[Pointer] 32767[Pointer], 0[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7375 if not-equal[Pointer] 32767[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7376 if not-equal[Pointer] 32767[Pointer], 0[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7377 if not-equal[compile-time] 32767[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7378 if not-equal[Pointer] 32767[Pointer], 255[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7379 if not-equal[Pointer] 32767[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7380 if not-equal[Pointer] 32767[Pointer], 255[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7381 if not-equal[compile-time] 32767[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7382 if not-equal[Pointer] 32767[Pointer], 255[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7383 if not-equal[Pointer] 32767[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7384 if not-equal[Pointer] 32767[Pointer], 255[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7385 if not-equal[compile-time] 32767[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7386 if not-equal[Pointer] 32767[Pointer], 32767[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7387 if not-equal[Pointer] 32767[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7388 if not-equal[Pointer] 32767[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:7389 if not-equal[compile-time] 32767[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:7390 if not-equal[Pointer] 32767[Pointer], 32767[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7391 if not-equal[Pointer] 32767[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7392 if not-equal[Pointer] 32767[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7393 if not-equal[compile-time] 32767[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7394 if not-equal[Pointer] 32767[Pointer], 32768[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7395 if not-equal[Pointer] 32767[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7396 if not-equal[Pointer] 32767[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7397 if not-equal[compile-time] 32767[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7398 if not-equal[Pointer] 32767[Pointer], 32768[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7399 if not-equal[Pointer] 32767[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7400 if not-equal[Pointer] 32767[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7401 if not-equal[compile-time] 32767[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7402 if not-equal[Pointer] 32767[Pointer], 65535[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7403 if not-equal[Pointer] 32767[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7404 if not-equal[Pointer] 32767[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7405 if not-equal[compile-time] 32767[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7406 if not-equal[Pointer] 32767[Pointer], 65535[Word] Var
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7407 if not-equal[Pointer] 32767[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7408 if not-equal[Pointer] 32767[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7409 if not-equal[compile-time] 32767[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7410 if not-equal[Pointer] 32768[Pointer], 0[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7411 if not-equal[Pointer] 32768[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7412 if not-equal[Pointer] 32768[Pointer], 0[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7413 if not-equal[compile-time] 32768[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7414 if not-equal[Pointer] 32768[Pointer], 0[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7415 if not-equal[Pointer] 32768[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7416 if not-equal[Pointer] 32768[Pointer], 0[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7417 if not-equal[compile-time] 32768[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7418 if not-equal[Pointer] 32768[Pointer], 255[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7419 if not-equal[Pointer] 32768[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7420 if not-equal[Pointer] 32768[Pointer], 255[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7421 if not-equal[compile-time] 32768[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7422 if not-equal[Pointer] 32768[Pointer], 255[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7423 if not-equal[Pointer] 32768[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7424 if not-equal[Pointer] 32768[Pointer], 255[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7425 if not-equal[compile-time] 32768[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7426 if not-equal[Pointer] 32768[Pointer], 32767[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7427 if not-equal[Pointer] 32768[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7428 if not-equal[Pointer] 32768[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7429 if not-equal[compile-time] 32768[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7430 if not-equal[Pointer] 32768[Pointer], 32767[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7431 if not-equal[Pointer] 32768[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7432 if not-equal[Pointer] 32768[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7433 if not-equal[compile-time] 32768[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7434 if not-equal[Pointer] 32768[Pointer], 32768[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7435 if not-equal[Pointer] 32768[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7436 if not-equal[Pointer] 32768[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:7437 if not-equal[compile-time] 32768[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:7438 if not-equal[Pointer] 32768[Pointer], 32768[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7439 if not-equal[Pointer] 32768[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7440 if not-equal[Pointer] 32768[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7441 if not-equal[compile-time] 32768[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7442 if not-equal[Pointer] 32768[Pointer], 65535[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7443 if not-equal[Pointer] 32768[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7444 if not-equal[Pointer] 32768[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7445 if not-equal[compile-time] 32768[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7446 if not-equal[Pointer] 32768[Pointer], 65535[Word] Var
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7447 if not-equal[Pointer] 32768[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7448 if not-equal[Pointer] 32768[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7449 if not-equal[compile-time] 32768[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7450 if not-equal[Pointer] 65535[Pointer], 0[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7451 if not-equal[Pointer] 65535[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7452 if not-equal[Pointer] 65535[Pointer], 0[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7453 if not-equal[compile-time] 65535[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7454 if not-equal[Pointer] 65535[Pointer], 0[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7455 if not-equal[Pointer] 65535[Pointer], 0[Word] Left immediate
  var  b: Word = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7456 if not-equal[Pointer] 65535[Pointer], 0[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7457 if not-equal[compile-time] 65535[Pointer], 0[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7458 if not-equal[Pointer] 65535[Pointer], 255[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7459 if not-equal[Pointer] 65535[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7460 if not-equal[Pointer] 65535[Pointer], 255[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7461 if not-equal[compile-time] 65535[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7462 if not-equal[Pointer] 65535[Pointer], 255[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7463 if not-equal[Pointer] 65535[Pointer], 255[Word] Left immediate
  var  b: Word = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7464 if not-equal[Pointer] 65535[Pointer], 255[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7465 if not-equal[compile-time] 65535[Pointer], 255[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7466 if not-equal[Pointer] 65535[Pointer], 32767[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7467 if not-equal[Pointer] 65535[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7468 if not-equal[Pointer] 65535[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7469 if not-equal[compile-time] 65535[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7470 if not-equal[Pointer] 65535[Pointer], 32767[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7471 if not-equal[Pointer] 65535[Pointer], 32767[Word] Left immediate
  var  b: Word = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7472 if not-equal[Pointer] 65535[Pointer], 32767[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7473 if not-equal[compile-time] 65535[Pointer], 32767[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7474 if not-equal[Pointer] 65535[Pointer], 32768[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7475 if not-equal[Pointer] 65535[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7476 if not-equal[Pointer] 65535[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7477 if not-equal[compile-time] 65535[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7478 if not-equal[Pointer] 65535[Pointer], 32768[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7479 if not-equal[Pointer] 65535[Pointer], 32768[Word] Left immediate
  var  b: Word = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7480 if not-equal[Pointer] 65535[Pointer], 32768[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7481 if not-equal[compile-time] 65535[Pointer], 32768[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7482 if not-equal[Pointer] 65535[Pointer], 65535[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7483 if not-equal[Pointer] 65535[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7484 if not-equal[Pointer] 65535[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:7485 if not-equal[compile-time] 65535[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:7486 if not-equal[Pointer] 65535[Pointer], 65535[Word] Var
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7487 if not-equal[Pointer] 65535[Pointer], 65535[Word] Left immediate
  var  b: Word = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7488 if not-equal[Pointer] 65535[Pointer], 65535[Word] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7489 if not-equal[compile-time] 65535[Pointer], 65535[Word] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7490 if not-equal[Pointer] 0[Pointer], 0[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7491 if not-equal[Pointer] 0[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7492 if not-equal[Pointer] 0[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7493 if not-equal[compile-time] 0[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1;
endcode
varvalue r 0

code auto:7494 if not-equal[Pointer] 0[Pointer], 0[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7495 if not-equal[Pointer] 0[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7496 if not-equal[Pointer] 0[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7497 if not-equal[compile-time] 0[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7498 if not-equal[Pointer] 0[Pointer], 255[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7499 if not-equal[Pointer] 0[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7500 if not-equal[Pointer] 0[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7501 if not-equal[compile-time] 0[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7502 if not-equal[Pointer] 0[Pointer], 255[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7503 if not-equal[Pointer] 0[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7504 if not-equal[Pointer] 0[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7505 if not-equal[compile-time] 0[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7506 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7507 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7508 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7509 if not-equal[compile-time] 0[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7510 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7511 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7512 if not-equal[Pointer] 0[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7513 if not-equal[compile-time] 0[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7514 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7515 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7516 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7517 if not-equal[compile-time] 0[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7518 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7519 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7520 if not-equal[Pointer] 0[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7521 if not-equal[compile-time] 0[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7522 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7523 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7524 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7525 if not-equal[compile-time] 0[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7526 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Var
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7527 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7528 if not-equal[Pointer] 0[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 0;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7529 if not-equal[compile-time] 0[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 0 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7530 if not-equal[Pointer] 255[Pointer], 0[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7531 if not-equal[Pointer] 255[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7532 if not-equal[Pointer] 255[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7533 if not-equal[compile-time] 255[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7534 if not-equal[Pointer] 255[Pointer], 0[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7535 if not-equal[Pointer] 255[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7536 if not-equal[Pointer] 255[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7537 if not-equal[compile-time] 255[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7538 if not-equal[Pointer] 255[Pointer], 255[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7539 if not-equal[Pointer] 255[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7540 if not-equal[Pointer] 255[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7541 if not-equal[compile-time] 255[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1;
endcode
varvalue r 0

code auto:7542 if not-equal[Pointer] 255[Pointer], 255[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7543 if not-equal[Pointer] 255[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7544 if not-equal[Pointer] 255[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7545 if not-equal[compile-time] 255[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7546 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7547 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7548 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7549 if not-equal[compile-time] 255[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7550 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7551 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7552 if not-equal[Pointer] 255[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7553 if not-equal[compile-time] 255[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7554 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7555 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7556 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7557 if not-equal[compile-time] 255[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7558 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7559 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7560 if not-equal[Pointer] 255[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7561 if not-equal[compile-time] 255[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7562 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7563 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7564 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7565 if not-equal[compile-time] 255[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7566 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Var
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7567 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7568 if not-equal[Pointer] 255[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 255;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7569 if not-equal[compile-time] 255[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 255 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7570 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7571 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7572 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7573 if not-equal[compile-time] 32767[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7574 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7575 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7576 if not-equal[Pointer] 32767[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7577 if not-equal[compile-time] 32767[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7578 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7579 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7580 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7581 if not-equal[compile-time] 32767[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7582 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7583 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7584 if not-equal[Pointer] 32767[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7585 if not-equal[compile-time] 32767[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7586 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7587 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7588 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:7589 if not-equal[compile-time] 32767[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1;
endcode
varvalue r 0

code auto:7590 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7591 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7592 if not-equal[Pointer] 32767[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7593 if not-equal[compile-time] 32767[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7594 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7595 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7596 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7597 if not-equal[compile-time] 32767[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7598 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7599 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7600 if not-equal[Pointer] 32767[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7601 if not-equal[compile-time] 32767[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7602 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7603 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7604 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7605 if not-equal[compile-time] 32767[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7606 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Var
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7607 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32767 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7608 if not-equal[Pointer] 32767[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 32767;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7609 if not-equal[compile-time] 32767[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32767 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7610 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7611 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7612 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7613 if not-equal[compile-time] 32768[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7614 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7615 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7616 if not-equal[Pointer] 32768[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7617 if not-equal[compile-time] 32768[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7618 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7619 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7620 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7621 if not-equal[compile-time] 32768[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7622 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7623 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7624 if not-equal[Pointer] 32768[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7625 if not-equal[compile-time] 32768[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7626 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7627 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7628 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7629 if not-equal[compile-time] 32768[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7630 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7631 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7632 if not-equal[Pointer] 32768[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7633 if not-equal[compile-time] 32768[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7634 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7635 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7636 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:7637 if not-equal[compile-time] 32768[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1;
endcode
varvalue r 0

code auto:7638 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7639 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7640 if not-equal[Pointer] 32768[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7641 if not-equal[compile-time] 32768[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7642 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7643 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7644 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7645 if not-equal[compile-time] 32768[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1;
endcode
varvalue r 1

code auto:7646 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Var
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7647 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 32768 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7648 if not-equal[Pointer] 32768[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 32768;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7649 if not-equal[compile-time] 32768[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 32768 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7650 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7651 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7652 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7653 if not-equal[compile-time] 65535[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1;
endcode
varvalue r 1

code auto:7654 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7655 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Left immediate
  var  b: Pointer = 0;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7656 if not-equal[Pointer] 65535[Pointer], 0[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7657 if not-equal[compile-time] 65535[Pointer], 0[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7658 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7659 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7660 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7661 if not-equal[compile-time] 65535[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1;
endcode
varvalue r 1

code auto:7662 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7663 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Left immediate
  var  b: Pointer = 255;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7664 if not-equal[Pointer] 65535[Pointer], 255[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7665 if not-equal[compile-time] 65535[Pointer], 255[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7666 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7667 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7668 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7669 if not-equal[compile-time] 65535[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1;
endcode
varvalue r 1

code auto:7670 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7671 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Left immediate
  var  b: Pointer = 32767;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7672 if not-equal[Pointer] 65535[Pointer], 32767[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7673 if not-equal[compile-time] 65535[Pointer], 32767[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32767 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7674 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7675 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7676 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7677 if not-equal[compile-time] 65535[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1;
endcode
varvalue r 1

code auto:7678 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7679 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Left immediate
  var  b: Pointer = 32768;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7680 if not-equal[Pointer] 65535[Pointer], 32768[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7681 if not-equal[compile-time] 65535[Pointer], 32768[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 32768 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7682 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7683 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7684 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:7685 if not-equal[compile-time] 65535[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1;
endcode
varvalue r 0

code auto:7686 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Var
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7687 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Left immediate
  var  b: Pointer = 65535;
  var  r: Byte = 0;
  if 65535 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7688 if not-equal[Pointer] 65535[Pointer], 65535[Pointer] Right immediate
  var  a: Pointer = 65535;
  var  r: Byte = 0;
  if a <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7689 if not-equal[compile-time] 65535[Pointer], 65535[Pointer] Both immediate
  var  r: Byte = 0;
  if 65535 <> 65535 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7690 if not-equal[Boolean] 0[Boolean], 0[Boolean] Var
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7691 if not-equal[Boolean] 0[Boolean], 0[Boolean] Left immediate
  var  b: Boolean = False;
  var  r: Byte = 0;
  if False <> b then
    r := 1;
endcode
varvalue r 0

code auto:7692 if not-equal[Boolean] 0[Boolean], 0[Boolean] Right immediate
  var  a: Boolean = False;
  var  r: Byte = 0;
  if a <> False then
    r := 1;
endcode
varvalue r 0

code auto:7693 if not-equal[compile-time] 0[Boolean], 0[Boolean] Both immediate
  var  r: Byte = 0;
  if False <> False then
    r := 1;
endcode
varvalue r 0

code auto:7694 if not-equal[Boolean] 0[Boolean], 0[Boolean] Var
  var  a: Boolean = False;
  var  b: Boolean = False;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7695 if not-equal[Boolean] 0[Boolean], 0[Boolean] Left immediate
  var  b: Boolean = False;
  var  r: Byte = 0;
  if False <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7696 if not-equal[Boolean] 0[Boolean], 0[Boolean] Right immediate
  var  a: Boolean = False;
  var  r: Byte = 0;
  if a <> False then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7697 if not-equal[compile-time] 0[Boolean], 0[Boolean] Both immediate
  var  r: Byte = 0;
  if False <> False then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7698 if not-equal[Boolean] 0[Boolean], 255[Boolean] Var
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7699 if not-equal[Boolean] 0[Boolean], 255[Boolean] Left immediate
  var  b: Boolean = True;
  var  r: Byte = 0;
  if False <> b then
    r := 1;
endcode
varvalue r 1

code auto:7700 if not-equal[Boolean] 0[Boolean], 255[Boolean] Right immediate
  var  a: Boolean = False;
  var  r: Byte = 0;
  if a <> True then
    r := 1;
endcode
varvalue r 1

code auto:7701 if not-equal[compile-time] 0[Boolean], 255[Boolean] Both immediate
  var  r: Byte = 0;
  if False <> True then
    r := 1;
endcode
varvalue r 1

code auto:7702 if not-equal[Boolean] 0[Boolean], 255[Boolean] Var
  var  a: Boolean = False;
  var  b: Boolean = True;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7703 if not-equal[Boolean] 0[Boolean], 255[Boolean] Left immediate
  var  b: Boolean = True;
  var  r: Byte = 0;
  if False <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7704 if not-equal[Boolean] 0[Boolean], 255[Boolean] Right immediate
  var  a: Boolean = False;
  var  r: Byte = 0;
  if a <> True then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7705 if not-equal[compile-time] 0[Boolean], 255[Boolean] Both immediate
  var  r: Byte = 0;
  if False <> True then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7706 if not-equal[Boolean] 255[Boolean], 0[Boolean] Var
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7707 if not-equal[Boolean] 255[Boolean], 0[Boolean] Left immediate
  var  b: Boolean = False;
  var  r: Byte = 0;
  if True <> b then
    r := 1;
endcode
varvalue r 1

code auto:7708 if not-equal[Boolean] 255[Boolean], 0[Boolean] Right immediate
  var  a: Boolean = True;
  var  r: Byte = 0;
  if a <> False then
    r := 1;
endcode
varvalue r 1

code auto:7709 if not-equal[compile-time] 255[Boolean], 0[Boolean] Both immediate
  var  r: Byte = 0;
  if True <> False then
    r := 1;
endcode
varvalue r 1

code auto:7710 if not-equal[Boolean] 255[Boolean], 0[Boolean] Var
  var  a: Boolean = True;
  var  b: Boolean = False;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7711 if not-equal[Boolean] 255[Boolean], 0[Boolean] Left immediate
  var  b: Boolean = False;
  var  r: Byte = 0;
  if True <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7712 if not-equal[Boolean] 255[Boolean], 0[Boolean] Right immediate
  var  a: Boolean = True;
  var  r: Byte = 0;
  if a <> False then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7713 if not-equal[compile-time] 255[Boolean], 0[Boolean] Both immediate
  var  r: Byte = 0;
  if True <> False then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7714 if not-equal[Boolean] 255[Boolean], 255[Boolean] Var
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7715 if not-equal[Boolean] 255[Boolean], 255[Boolean] Left immediate
  var  b: Boolean = True;
  var  r: Byte = 0;
  if True <> b then
    r := 1;
endcode
varvalue r 0

code auto:7716 if not-equal[Boolean] 255[Boolean], 255[Boolean] Right immediate
  var  a: Boolean = True;
  var  r: Byte = 0;
  if a <> True then
    r := 1;
endcode
varvalue r 0

code auto:7717 if not-equal[compile-time] 255[Boolean], 255[Boolean] Both immediate
  var  r: Byte = 0;
  if True <> True then
    r := 1;
endcode
varvalue r 0

code auto:7718 if not-equal[Boolean] 255[Boolean], 255[Boolean] Var
  var  a: Boolean = True;
  var  b: Boolean = True;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7719 if not-equal[Boolean] 255[Boolean], 255[Boolean] Left immediate
  var  b: Boolean = True;
  var  r: Byte = 0;
  if True <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7720 if not-equal[Boolean] 255[Boolean], 255[Boolean] Right immediate
  var  a: Boolean = True;
  var  r: Byte = 0;
  if a <> True then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7721 if not-equal[compile-time] 255[Boolean], 255[Boolean] Both immediate
  var  r: Byte = 0;
  if True <> True then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7722 if not-equal[Char] 0[Char], 0[Char] Var
  var  a: Char = #0;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7723 if not-equal[Char] 0[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7724 if not-equal[Char] 0[Char], 0[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1;
endcode
varvalue r 0

code auto:7725 if not-equal[compile-time] 0[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #0 then
    r := 1;
endcode
varvalue r 0

code auto:7726 if not-equal[Char] 0[Char], 0[Char] Var
  var  a: Char = #0;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7727 if not-equal[Char] 0[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7728 if not-equal[Char] 0[Char], 0[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7729 if not-equal[compile-time] 0[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7730 if not-equal[Char] 0[Char], 31[Char] Var
  var  a: Char = #0;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7731 if not-equal[Char] 0[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7732 if not-equal[Char] 0[Char], 31[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7733 if not-equal[compile-time] 0[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7734 if not-equal[Char] 0[Char], 31[Char] Var
  var  a: Char = #0;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7735 if not-equal[Char] 0[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7736 if not-equal[Char] 0[Char], 31[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7737 if not-equal[compile-time] 0[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7738 if not-equal[Char] 0[Char], 32[Char] Var
  var  a: Char = #0;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7739 if not-equal[Char] 0[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7740 if not-equal[Char] 0[Char], 32[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7741 if not-equal[compile-time] 0[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7742 if not-equal[Char] 0[Char], 32[Char] Var
  var  a: Char = #0;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7743 if not-equal[Char] 0[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7744 if not-equal[Char] 0[Char], 32[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7745 if not-equal[compile-time] 0[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7746 if not-equal[Char] 0[Char], 255[Char] Var
  var  a: Char = #0;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7747 if not-equal[Char] 0[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7748 if not-equal[Char] 0[Char], 255[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7749 if not-equal[compile-time] 0[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7750 if not-equal[Char] 0[Char], 255[Char] Var
  var  a: Char = #0;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7751 if not-equal[Char] 0[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #0 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7752 if not-equal[Char] 0[Char], 255[Char] Right immediate
  var  a: Char = #0;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7753 if not-equal[compile-time] 0[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #0 <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7754 if not-equal[Char] 31[Char], 0[Char] Var
  var  a: Char = #31;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7755 if not-equal[Char] 31[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7756 if not-equal[Char] 31[Char], 0[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7757 if not-equal[compile-time] 31[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7758 if not-equal[Char] 31[Char], 0[Char] Var
  var  a: Char = #31;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7759 if not-equal[Char] 31[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7760 if not-equal[Char] 31[Char], 0[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7761 if not-equal[compile-time] 31[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7762 if not-equal[Char] 31[Char], 31[Char] Var
  var  a: Char = #31;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7763 if not-equal[Char] 31[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7764 if not-equal[Char] 31[Char], 31[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1;
endcode
varvalue r 0

code auto:7765 if not-equal[compile-time] 31[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #31 then
    r := 1;
endcode
varvalue r 0

code auto:7766 if not-equal[Char] 31[Char], 31[Char] Var
  var  a: Char = #31;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7767 if not-equal[Char] 31[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7768 if not-equal[Char] 31[Char], 31[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7769 if not-equal[compile-time] 31[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7770 if not-equal[Char] 31[Char], 32[Char] Var
  var  a: Char = #31;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7771 if not-equal[Char] 31[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #31 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7772 if not-equal[Char] 31[Char], 32[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7773 if not-equal[compile-time] 31[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7774 if not-equal[Char] 31[Char], 32[Char] Var
  var  a: Char = #31;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7775 if not-equal[Char] 31[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #31 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7776 if not-equal[Char] 31[Char], 32[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7777 if not-equal[compile-time] 31[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7778 if not-equal[Char] 31[Char], 255[Char] Var
  var  a: Char = #31;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7779 if not-equal[Char] 31[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7780 if not-equal[Char] 31[Char], 255[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7781 if not-equal[compile-time] 31[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7782 if not-equal[Char] 31[Char], 255[Char] Var
  var  a: Char = #31;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7783 if not-equal[Char] 31[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #31 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7784 if not-equal[Char] 31[Char], 255[Char] Right immediate
  var  a: Char = #31;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7785 if not-equal[compile-time] 31[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #31 <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7786 if not-equal[Char] 32[Char], 0[Char] Var
  var  a: Char = ' ';
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7787 if not-equal[Char] 32[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1;
endcode
varvalue r 1

code auto:7788 if not-equal[Char] 32[Char], 0[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7789 if not-equal[compile-time] 32[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7790 if not-equal[Char] 32[Char], 0[Char] Var
  var  a: Char = ' ';
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7791 if not-equal[Char] 32[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7792 if not-equal[Char] 32[Char], 0[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7793 if not-equal[compile-time] 32[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7794 if not-equal[Char] 32[Char], 31[Char] Var
  var  a: Char = ' ';
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7795 if not-equal[Char] 32[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1;
endcode
varvalue r 1

code auto:7796 if not-equal[Char] 32[Char], 31[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7797 if not-equal[compile-time] 32[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7798 if not-equal[Char] 32[Char], 31[Char] Var
  var  a: Char = ' ';
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7799 if not-equal[Char] 32[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7800 if not-equal[Char] 32[Char], 31[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7801 if not-equal[compile-time] 32[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7802 if not-equal[Char] 32[Char], 32[Char] Var
  var  a: Char = ' ';
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7803 if not-equal[Char] 32[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1;
endcode
varvalue r 0

code auto:7804 if not-equal[Char] 32[Char], 32[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1;
endcode
varvalue r 0

code auto:7805 if not-equal[compile-time] 32[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> ' ' then
    r := 1;
endcode
varvalue r 0

code auto:7806 if not-equal[Char] 32[Char], 32[Char] Var
  var  a: Char = ' ';
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7807 if not-equal[Char] 32[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7808 if not-equal[Char] 32[Char], 32[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7809 if not-equal[compile-time] 32[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7810 if not-equal[Char] 32[Char], 255[Char] Var
  var  a: Char = ' ';
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7811 if not-equal[Char] 32[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1;
endcode
varvalue r 1

code auto:7812 if not-equal[Char] 32[Char], 255[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7813 if not-equal[compile-time] 32[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #255 then
    r := 1;
endcode
varvalue r 1

code auto:7814 if not-equal[Char] 32[Char], 255[Char] Var
  var  a: Char = ' ';
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7815 if not-equal[Char] 32[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if ' ' <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7816 if not-equal[Char] 32[Char], 255[Char] Right immediate
  var  a: Char = ' ';
  var  r: Byte = 0;
  if a <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7817 if not-equal[compile-time] 32[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if ' ' <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7818 if not-equal[Char] 255[Char], 0[Char] Var
  var  a: Char = #255;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7819 if not-equal[Char] 255[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7820 if not-equal[Char] 255[Char], 0[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7821 if not-equal[compile-time] 255[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #0 then
    r := 1;
endcode
varvalue r 1

code auto:7822 if not-equal[Char] 255[Char], 0[Char] Var
  var  a: Char = #255;
  var  b: Char = #0;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7823 if not-equal[Char] 255[Char], 0[Char] Left immediate
  var  b: Char = #0;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7824 if not-equal[Char] 255[Char], 0[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7825 if not-equal[compile-time] 255[Char], 0[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #0 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7826 if not-equal[Char] 255[Char], 31[Char] Var
  var  a: Char = #255;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7827 if not-equal[Char] 255[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7828 if not-equal[Char] 255[Char], 31[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7829 if not-equal[compile-time] 255[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #31 then
    r := 1;
endcode
varvalue r 1

code auto:7830 if not-equal[Char] 255[Char], 31[Char] Var
  var  a: Char = #255;
  var  b: Char = #31;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7831 if not-equal[Char] 255[Char], 31[Char] Left immediate
  var  b: Char = #31;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7832 if not-equal[Char] 255[Char], 31[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7833 if not-equal[compile-time] 255[Char], 31[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #31 then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7834 if not-equal[Char] 255[Char], 32[Char] Var
  var  a: Char = #255;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 1

code auto:7835 if not-equal[Char] 255[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #255 <> b then
    r := 1;
endcode
varvalue r 1

code auto:7836 if not-equal[Char] 255[Char], 32[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7837 if not-equal[compile-time] 255[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> ' ' then
    r := 1;
endcode
varvalue r 1

code auto:7838 if not-equal[Char] 255[Char], 32[Char] Var
  var  a: Char = #255;
  var  b: Char = ' ';
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7839 if not-equal[Char] 255[Char], 32[Char] Left immediate
  var  b: Char = ' ';
  var  r: Byte = 0;
  if #255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7840 if not-equal[Char] 255[Char], 32[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7841 if not-equal[compile-time] 255[Char], 32[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> ' ' then
    r := 1
  else
    r := 2;
endcode
varvalue r 1

code auto:7842 if not-equal[Char] 255[Char], 255[Char] Var
  var  a: Char = #255;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1;
endcode
varvalue r 0

code auto:7843 if not-equal[Char] 255[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1;
endcode
varvalue r 0

code auto:7844 if not-equal[Char] 255[Char], 255[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1;
endcode
varvalue r 0

code auto:7845 if not-equal[compile-time] 255[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #255 then
    r := 1;
endcode
varvalue r 0

code auto:7846 if not-equal[Char] 255[Char], 255[Char] Var
  var  a: Char = #255;
  var  b: Char = #255;
  var  r: Byte = 0;
  if a <> b then 
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7847 if not-equal[Char] 255[Char], 255[Char] Left immediate
  var  b: Char = #255;
  var  r: Byte = 0;
  if #255 <> b then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7848 if not-equal[Char] 255[Char], 255[Char] Right immediate
  var  a: Char = #255;
  var  r: Byte = 0;
  if a <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

code auto:7849 if not-equal[compile-time] 255[Char], 255[Char] Both immediate
  var  r: Byte = 0;
  if #255 <> #255 then
    r := 1
  else
    r := 2;
endcode
varvalue r 2

