;Arrays and Strings and Lists;============================;=============== ARRAY DECLARATIONS;Note: It's not easy to self test that the array data structures have been set ;up correctly, so these tests are really just testing the syntax(es) parse ;correctly. The execution tests should find any deeper flaws.code Array Single  type Basic = array[0..10] of Byteendcodecompile noerrorcode Array Double  type Basic = array[0..10, 11..20] of Byteendcodecompile noerrorcode Array Triple  type Basic = array[0..10, 11..20, 21..30] of Byteendcodecompile noerrorcode Array Alternate Double  type Basic = array[0..10][11..20] of Byteendcodecompile noerrorcode Array Another Alternate Double  type Basic = array[0..10] of array [11..20] of Byteendcodecompile noerrorcode Array Unbounded  type Basic = array of Byteendcodecompile noerrorcode Array Various Variants  type A=array of Byte  type B=array[1..10] of Byte  type C=array[1..10,11..20] of Byte  type D=array[1..10][11..20] of Byte  type E=array[Char] of Integer  type F=array[(Red, White, Blue)] of 'a'..'z'  type G=array[1..5] of array [1..5] of Boolean  const Start=1  const Finish=10  type H=array[Start+1..2*Finish] of Byteendcodecompile noerrorcode Array Whitespace  type A= array of Byte  type B=array [1..10] of Byte  type C=array[ 1..10,11.. 20] of Byte  type D=array[1..10] [11..20]    of Byteendcodecompile noerrorcode Array Linebreaks A  type A1=    array of Byte  type A2=array     of Byte  type A3=array of     Byteendcodecompile noerrorcode Array Invalid Line Break A  type B4=array[1    ..10] of Byteendcodecompile RangeOperatorExpectedcode Array Linebreaks B  type B1=array    [1..10] of Byte  type B2=array[    1..10] of Byte  type B3=array[1..    10] of Byte  type B5=array[1..10    ] of Byte  type B7=array[1..10] of     Byteendcodecompile noerrorcode Array No ]  type B1=array[1..10 of Byteendcodecompile ArrayBoundsDefinitioncode Array Invalid Line Break B  type B6=array[1..10]     of Byteendcodecompile OFExpected	code Array Linebreaks C  type C1=array[1..10    ,11..20] of Byte  type C2=array[1..10,    11..20] of Byteendcodecompile noerror	code Array Invalid Line Break D  type D=array[1..10]    [11..20] of Byteendcodecompile OFExpectedcode Array Invalid Type  type Basic = array[String] of Byteendcodecompile OrdinalTypeExpected;======================= LIST DECLARATIONScode List Unsized  type A=list of Byteendcodecompile noerrorcode List Sized  type B=list[10] of Byteendcodecompile noerrorcode List Spacing  type B=list [ 10 ] of Byteendcodecompile noerrorcode List Unsized Line Breaks  type A1=    list of Byte  type A3=list of     Byteendcodecompile noerrorcode List Unsized Line Break Error  type A2=list    of Byteendcodecompile noerrorcode List Sized Line Breaks  type B1=list[    10] of Byte  type B2=list[10    ] of Byteendcodecompile noerrorcode List Sized Line Break Error  type B=list    [10] of Byteendcodecompile noerrorcode List Sized Line Breaks  type B=list[10]     of Byteendcodecompile OFExpectedcode List Invalid Capacity 1  type B=list[0] of Byteendcodecompile ListCapacityErrorcode List Invalid Capacity 2  type B=list[-100] of Byteendcodecompile ListCapacityErrorcode List Invalid Capacity 3  type B=list[False] of Byteendcodecompile ListCapacityErrorcode List unbounded to bounded 1  type TA = list of Integer  type TB = TA[10]endcodecompile noerrorcode List unbounded to bounded 2  type TA = list of Integer  var A: TA[10]endcodecompile noerror;====================== INSTANTIATE VARIABLEScode Inst Simple Array Typed  type TA = array[0..10] of Integer  var A: TAendcodecompile noerrorcode Inst Simple Array Inline  var A: array[0..10] of Integerendcodecompile noerrorcode Inst Multi Array Typed  type TA = array[0..10,0..10] of Integer  var A: TAendcodecompile noerrorcode Inst Multi Array Inline  var A: array[0..10,0..10] of Integerendcodecompile noerrorcode Inst Long Simple Array Typed  type TA = array[0..300] of Integer  var A: TAendcodecompile noerrorcode Inst Long Simple Array Inline  var A: array[0..300] of Integerendcodecompile noerrorcode Inst Long Multi Array Typed  type TA = array[0..300,0..300] of Byte  var A: TAendcodecompile noerrorcode Inst Long Multi Array Inline  var A: array[0..300,0..300] of Integerendcodecompile noerrorcode Inst Unbounded Array Typed  type TA = array of Integer  var A: TAendcodecompile InstantiateUnboundedArraycode Inst Unbounded Array Inline  var A: array of Integerendcodecompile InstantiateUnboundedArraycode Inst Short List Typed  type TA = list[10] of Integer  var A: TAendcodecompile noerrorcode Inst Short List Inline  var A: list[10] of Integerendcodecompile noerrorcode Inst Long List Typed  type TA = list[300] of Integer  var A: TAendcodecompile noerrorcode Inst Long List Inline  var A: list[300] of Integerendcodecompile noerrorcode Inst Unbounded List Typed  type TA = list of Integer  var A: TAendcodecompile InstantiateUnboundedArraycode Inst Unbounded List Inline  var A: list of Integerendcodecompile InstantiateUnboundedArray