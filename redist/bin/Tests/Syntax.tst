;Syntax;These tests are largely verifying statement breaks, new lines and comments.;==================Expressionscode Expr valid syntaxes  var a:= 1  a := a + 1    a := a +    1  a :=     a + 1endcodecompile noerrorcode Expr incomplete  var a:= 1  a := a + endcodecompile OperandExpectedcode Expr invalid break point 1  var a:= 1  a := a     + 1endcodecompile IdentifierExpectedcode Expr invalid break point 2  var a: Integer  a     := a + 1endcodecompile AssignmentExpected	code SubExpr valid syntaxes  var a:= 1  a := (a + 1)  a := a +    (1 - a)  a := (    a + 1)  a := (a) + 1  a := (((a)+1))endcodecompile noerrorcode SubExpr invalid breakpoint 1  var a:= 1  a := (a + 1    )endcodecompile UnmatchedBracketscode SubExpr unmatched  var a:= 1  a := (a + 1endcodecompile UnmatchedBracketscode SubExpr unmatched 1  var a:= 1  a := (a + 1endcodecompile UnmatchedBracketscode SubExpr unmatched 2  var a:= 1  a := a + 1)endcodecompile EndOfStatementExpectedcode SubExpr unmatched 3  var a:= 1  a := a) + 1endcodecompile EndOfStatementExpectedcode Expr Continuation  var a:= 1  a := a \    +1endcodecompile noerrorcode Expr Invalid Continuation 1  var a:= 1  a := a \ +1endcodecompile TextAfterContinuationCharcode Expr Invalid Continuation 2  var a:= 1  a := a \ //Comment    +1endcodecompile TextAfterContinuationChar;=====================COMMENTS;Curly commentscode Comment Curly  var a:=1 {A comment}{ comment }  var {these}b{are}:={all}1{comments}  var c := a + {A  multiline  comment  }  1  var d:=b + {A 	comment} 1    var e := d {A               comment}endcodecompile noerrorcode Comment Curly Unterminaed  var a:=1 {A commentendcodecompile UnterminatedCommentcode Comment Curly Invalid line break  var a:=1 {A 	comment} + 1endcodecompile IdentifierExpected;;Bracket star commentscode Comment Bracket  var a:=1 (*A comment*)(* comment *)  var (*these*)b(*are*):=(*all*)1(*comments*)  var c := a + (*A  multiline  comment  *)  1  var d:=b + (*A 	comment*) 1  endcodecompile noerrorcode Comment Bracket Unterminaed  var a:=1 (*A commentendcodecompile UnterminatedCommentcode Comment Bracket Invalid line break  var a:=1 (*A 	comment*) + 1endcodecompile IdentifierExpected;; Slash-slash commentscode Comment slash-slash  var a:=1 //A comment//A commentendcodecompile noerror