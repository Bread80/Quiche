;Simple user types;=================;Enumerations, and generic user type stuff;==========================DECLARATIONScode Synonym  type x = Integerendcodecompile noerrorcode Identifier redeclared  var x: Integer  type x = Integerendcodecompile IdentifierRedeclaredcode Reserved word  type for = Integerendcodecompile ReservedWordcode Not a Type 1  type x = forendcodecompile ReservedWordcode Not a Type 2  type x = yendcodecompile UndeclaredTypeOrInvalidTypeDefcode Not a Type 3  var a: Integer  type x = aendcodecompile InvalidTypeDefinitioncode Pointer 1  type x = ^Integerendcodecompile noerrorcode Pointer 2  type MyNumber = Integer  type MyPointer = ^MyNumberendcodecompile noerror;========== ENUMERATION DECLARATIONScode Enumeration  type Colour = (Red,White, Green , Teal,    Amber )endcodecompile noerrorcode Enumeration Reserved Word  type Colour = (Red, for, Green, Teal)endcodecompile ReservedWordcode Enumeration Redeclared 1  var MyVar: Integer  type Colour = (Red, MyVar, Green, Teal)endcodecompile IdentifierRedeclaredcode Enumeration Redeclared 2  type Green = (Red, Green, Teal)endcodecompile IdentifierRedeclaredcode Enumeration Redeclared 3  type Colour = (Red, Green, Teal)  var Green: Charendcodecompile IdentifierRedeclaredcode Enumeration Missing Brace  type Colour = (Red, White, Green  var x:Integerendcodecompile CommaOrCloseParensExpected;=================== INSTANTIATE VARIABLEcode Instantiate Enumeration Typed  type TColour = (Red, Green, Blue)  var Colour: TColourendcodecompile noerrorcode Instantiate Enumeration Inline  var Colour: (Red, Green, Blue)endcodecompile noerror;=================== OPERATIONS;--Highcode Enum High Variable  type TColour = (Red, Green, Blue)  var Colour: TColour  Colour := high(Colour)endcodevarvalue Colour Bluecode Enum High Type  type TColour = (Red, Green, Blue)  var Colour: TColour  Colour := high(TColour)endcodevarvalue Colour Blue;--Lowcode Enum Low Variable  type TColour = (Red, Green, Blue)  var Colour: TColour  Colour := low(Colour)endcodevarvalue Colour Redcode Enum Low Type  type TColour = (Red, Green, Blue)  var Colour: TColour  Colour := low(TColour)endcodevarvalue Colour Red;--Ordcode Enum Ord  type TColour = (Red, Green, Blue)  var Colour: TColour  Colour := high(Colour)  var I := ord(Colour)  var J := ord(Green)endcodevarvalue I 2varvalue J 1;--Succcode Enum Succ  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := succ(Colour)endcodevarvalue Colour Greencode Enum Succ Step  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := succ(Colour, 2)endcodevarvalue Colour Bluecode Enum Succ Constant  type TColour = (Red, Green, Blue)  var Colour := succ(Red)endcodevarvalue Colour Greencode Enum Succ Constant Step  type TColour = (Red, Green, Blue)  var Colour := succ(Red, 2)endcodevarvalue Colour Bluecode Enum Succ Overflow error 1 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Blue  Colour := succ(Colour)endcoderuntime errorcode Enum Succ Overflow error 2 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := succ(Colour, 3)endcoderuntime errorcode Enum Succ Overflow error 3 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := succ(Colour, 255)endcoderuntime errorcode Enum Succ Overflow checks off  {$O-}  type TColour = (Red, Green, Blue)  var Colour := Blue  Colour := succ(Colour)endcoderuntime noerror;--Predcode Enum Pred  type TColour = (Red, Green, Blue)  var Colour := Blue  Colour := pred(Colour)endcodevarvalue Colour Greencode Enum Pred Step  type TColour = (Red, Green, Blue)  var Colour := Blue  Colour := pred(Colour, 2)endcodevarvalue Colour Redcode Enum Pred Constant  type TColour = (Red, Green, Blue)  var Colour := pred(Blue)endcodevarvalue Colour Greencode Enum Pred Constant Step  type TColour = (Red, Green, Blue)  var Colour := pred(Blue, 2)endcodevarvalue Colour Redcode Enum Pred Overflow error 1  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := pred(Colour)endcoderuntime errorcode Enum Pred Overflow error 2  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Blue  Colour := pred(Colour, 3)endcoderuntime errorcode Enum Pred Overflow error 3  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := pred(Colour, 255)endcoderuntime errorcode Enum Pred Overflow checks off  {$O-}  type TColour = (Red, Green, Blue)  var Colour := Red  Colour := pred(Colour)endcoderuntime noerror;--Inccode Enum Inc Succ  type TColour = (Red, Green, Blue)  var Colour := Red  Inc(Colour)endcodevarvalue Colour Greencode Enum Inc Step  type TColour = (Red, Green, Blue)  var Colour := Red  Inc(Colour, 2)endcodevarvalue Colour Bluecode Enum Inc Overflow error 1 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Blue  inc(Colour)endcoderuntime errorcode Enum Inc Overflow error 2 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Inc(Colour, 3)endcoderuntime errorcode Enum Inc Overflow error 3 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  Inc(Colour, 255)endcoderuntime errorcode Enum Inc Overflow checks off  {$O-}  type TColour = (Red, Green, Blue)  var Colour := Blue  inc(Colour)endcoderuntime noerror;--Deccode Enum Dec  type TColour = (Red, Green, Blue)  var Colour := Blue  dec(Colour)endcodevarvalue Colour Greencode Enum Dec Step  type TColour = (Red, Green, Blue)  var Colour := Blue  dec(Colour, 2)endcodevarvalue Colour Redcode Enum Dec Overflow error 1 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Red  dec(Colour)endcoderuntime errorcode Enum Dec Overflow error 2 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Blue  dec(Colour, 3)endcoderuntime errorcode Enum Dec Overflow error 3 [TODO]  {$O+}  type TColour = (Red, Green, Blue)  var Colour := Blue  dec(Colour, 255)endcoderuntime errorcode Enum Dec Overflow checks off  {$O-}  type TColour = (Red, Green, Blue)  var Colour := Red  dec(Colour)endcoderuntime noerror;--Sizeof;All enums are 8-bits (1 byte) storage (ie max 256 elements)code Enum Sizeof  type TColour = (Red, Green, Blue)  var T := sizeof(TColour)  var Colour: TColour  var V := sizeof(Colour)endcodevarvalue T 1varvalue V 1;--Comparisonscode Equality  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RF := A=B    var RT := A=Cendcodevarvalue RF Falsevarvalue RT Truecode Equality Type Mismatch Literals  type TColour = (Red, Green, Blue)  type TDay = (Monday, Tuesday, Wednesday, Thursday, Friday)  var RE := Red = Mondayendcodecompile OpIncompatibleTypescode Equality Type Mismatch Vars  type TColour = (Red, Green, Blue)  type TDay = (Monday, Tuesday, Wednesday, Thursday, Friday)  var A := Red  var B := Monday  var RE := A = Bendcodecompile OpIncompatibleTypescode Inequality  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RT := A<>B    var RF := A<>Cendcodevarvalue RF Falsevarvalue RT Truecode Less Than  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RT := A<B  endcodevarvalue RT Truecode Less Than or Equal  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RT := A<=B  endcodevarvalue RT Truecode Greater Than  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RT := B>A  endcodevarvalue RT Truecode Greater Than or Equal  type TColour = (Red, Green, Blue)  var A := Red  var B := Green  var C := A  var RT := B>=A  endcodevarvalue RT True;====================FUNCTION CALLScode Function Call Stack  type TColour = (Red, Green, Blue)    function Loop(Colour: TColour): TColour;stack;  begin    if Colour = high(TColour) then      Result := low(TColour)    else      Result := succ(Colour)  end    var Col1 := Green  var Col2 := Blue  Col1 := Loop(Col1)  Col2 := Loop(Col2)endcodevarvalue Col1 Bluevarvalue Col2 Redcode Function Call Register  type TColour = (Red, Green, Blue)    function Loop(Colour: TColour): TColour;register;  begin    if Colour = high(TColour) then      Result := low(TColour)    else      Result := succ(Colour)  end    var Col1 := Green  var Col2 := Blue  Col1 := Loop(Col1)  Col2 := Loop(Col2)endcodevarvalue Col1 Bluevarvalue Col2 Red