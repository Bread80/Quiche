//Conway's Game of Life implementation for the Quiche language and compiler.
//The compiler is currently an early work in progress (WiP). This code uses various
//work arounds for not-yet-implemented, or just plain buggy, features. The code here
//will be updates as the compiler progresses.

//The code here is deliberately not optimised in order to give the compiler more work to
//do (or, at least that's my story).

//Language features to note:
//* Quiche is a variant of Pascal. Most Pascal code will work as-is. Extra features are
//layered on top and (mostly) optional.
//* Semi-colon statement separators are allowed but ignored. The compiler relies more
//heavily on end-of-lines as statement separators (this is still WiP). With semicolons
//the code is very Pascal compatible.
//* Parenthesis around function arguments are optional, using the same rules as Ruby:
//Essentually they're optional if the syntax would be unambiguous. There must be no whitespace
//between a function name and the opening parenthesis around an argument list. If there is the
//parenthesis will be parsed as part of an expression.
//* VARiables can be declared in a declarations section (or globally)(as in Pascal) or inline
//(as in C)


//Platform specific code

//The extern directive imports an assembly subroutine. When the routine is used the
//compiler will set up the registers as given in the function template.
//These are firmware routines for the Amstrad CPC. The capitalisation and underscores
//are standard Amstrad style for the routine names but Quiche style camel case could also
//be used.

//Set the screen mode. We'll use this to initialise the display at startup.
[Corrupts AF, BC, DE, HL]
procedure SCR_SET_MODE(Mode: A); extern $bc0e;

//Output a character. Note how we've given a type to the parameter. If no type is specified
//the compiler will assume a Byte or Word depending on a register(s). The compiler will
//use the type to help create correct code even when calling assembler routines. Typecasts can,
//of course, be used when calling external code if needed. As the type system develops you'll
//be able to specify complex user-defined types as needed, whether that be arrays, records,
//enumerations or whatever else.
[PreservesAll]
procedure TXT_OUTPUT(Character: A as Char); extern $bb5a;

//Set the text cursor position. Values are 1-based.
[Corrupts AF, HL]
procedure TXT_SET_CURSOR(LogicalColumn: H;LogicalRow: L); extern $bb75;

//Turn off the text cursor
[PreservesAll]
procedure TXT_CUR_OFF; extern $bb84;

//The program itself

//Buffers have two extra rows, and two extra columns. These are the 'off-screen' cells,
//or margins. All cells in the off-screen rows are always 'off'. This makes updating the
//buffers much easier as we don't need to create exceptions for cells at the edges

//These should be CONSTants but the compiler doesn't have them yet, so
//we'll create them as VARs and initialise at startup
var
  //These first two would be better off as Bytes, and we can typecast to Word if necessary
  //for a calculation. But typecasts aren't currently working while I revise the Intrinsic
  //implementation
  ColCount: Word

  //VAR should be sticky. It currently isn't :(
var  RowCount: Word
var  BufSize: Word  //Buffer size is (ColCount + 2) * (RowCount + 2)

//Initialise a buffer by setting all cells to off
procedure InitBuffer(Buffer: Pointer)
begin
  for Buffer := Buffer to Buffer + BufSize - 1 do
    poke(Buffer, False)
end

procedure InitScreen
begin
  //Clear screen, set mode, etc
  //Call the firmware routine to change screen mode
  SCR_SET_MODE(1)
  //Turn the text cursor off to avoid flicker
  TXT_CUR_OFF
end

//Co-ordinates are 1-based. Unsigned maths is (usually) significantly faster
//than signed (and mixed). If we used 0-based co-ords the left and top margins
//would be at -1.
function CoordToOffset(X, Y: Word): Word
begin
  Result := Y * (ColCount+2) + X
end

function ReadCell(Buffer: Pointer;X, Y: Word): Boolean
begin
  Result := Peek(Buffer + CoordToOffset(X, Y), Boolean)
end

procedure WriteCell(Buffer: Pointer;X, Y: Word;Value: Boolean)
begin
  //Parenthesis are optional (see notes at top)
  //Sometimes it just feels natural to omit them
  poke(Buffer + CoordToOffset(X, Y), Value)
end

//Put initial data (first generation) into the buffer
//Here we're creating a glider
procedure SetInitialState(Buffer: Pointer)
begin
  WriteCell(Buffer, 2,3, True)
  WriteCell(Buffer, 3,4, True)
  WriteCell(Buffer, 4,2, True)
  WriteCell(Buffer, 4,3, True)
  WriteCell(Buffer, 4,4, True)
end

procedure UpdateCell(OldBuf, NewBuf: Pointer;X, Y: Word)
var Alive: Byte
begin
  Alive := 0
  if ReadCell(OldBuf, X-1, Y-1) then
    inc(Alive)
  if ReadCell(OldBuf, X, Y-1) then
    inc(Alive)
  if ReadCell(OldBuf, X+1, Y-1) then
    inc(Alive)
  if ReadCell(OldBuf, X-1, Y) then
    inc(Alive)
  if ReadCell(OldBuf, X+1, Y) then
    inc(Alive)
  if ReadCell(OldBuf, X-1, Y+1) then
    inc(Alive)
  if ReadCell(OldBuf, X, Y+1) then
    inc(Alive)
  if ReadCell(OldBuf, X+1, Y+1) then
    inc(Alive)

  if ReadCell(OldBuf, X, Y) then
    WriteCell(NewBuf, X, Y, (Alive = 2) or (Alive = 3))
  else
    WriteCell(NewBuf, X, Y, Alive = 3)
end

//Set the state of NewBuf based on the state of OldBuf and the game rules
procedure UpdateBuffer(OldBuf, NewBuf: Pointer)
var X:Word
var Y:Word
begin
  for Y := 1 to RowCount do
    for X := 1 to ColCount do
      UpdateCell(OldBuf, NewBuf, X, Y)
end

//Update the display to show the state of Buffer
procedure UpdateScreen(Buffer: Pointer);
var X: Word
var Y: Word
begin
  for Y := 1 to RowCount do
  begin
    //Set cursor position to start of row
    TXT_SET_CURSOR(1, Y)

    for X := 1 to ColCount do
      if ReadCell(Buffer, X, Y) then
        //We could use standard function Write but this is more fun <g> - and shows how easy
        //it is to call external routines.
        //(And Write is currently broken. Oops).
        TXT_OUTPUT(#$e9)
      else
        TXT_OUTPUT(' ')
  end
end

var
  //We have no arrays (yet) so we'll just peek and poke data into memory using pointers
  //for the start of each buffer
  //We have no memory management, so use buffer addresses which we know won't overwrite anything
  Buffer1: Pointer
var  Buffer2: Pointer
begin
  //'Constants'
  ColCount := 20
  RowCount := 20
  BufSize := (ColCount + 2) * (RowCount + 2)

  //Init buffer pointers
  Buffer1 := $4000
  Buffer2 := Buffer1 + BufSize

  //Clear buffers
  InitBuffer(Buffer1)
  InitBuffer Buffer2

  InitScreen

  //Set initial pattern
  SetInitialState(Buffer1)

  //We don't have while loops yet
  for var gen:=1 to 20 do
  begin
    UpdateScreen Buffer1
    UpdateBuffer Buffer1, Buffer2

    //Swap buffers
    var Temp := Buffer1
    Buffer1 := Buffer2
    Buffer2 := Temp
  end
end.
