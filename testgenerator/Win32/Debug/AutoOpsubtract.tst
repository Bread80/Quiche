;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow off
code auto:2 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:3 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 0

code auto:4 subtract[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:5 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 0

code auto:7 subtract[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:8 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:9 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r -1

code auto:10 subtract[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -127;
endcode
varvalue r -1

$overflow on
code auto:11 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:12 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r -1

code auto:13 subtract[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -127;
endcode
varvalue r -1

$overflow off
code auto:14 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:15 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -127

code auto:16 subtract[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:17 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:18 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -127

code auto:19 subtract[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:20 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:21 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -128

code auto:22 subtract[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:23 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:24 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -128

code auto:25 subtract[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:26 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:27 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 127

code auto:28 subtract[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:29 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:30 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 1;
endcode
runtime overflow

code auto:31 subtract[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:32 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:33 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 1

code auto:34 subtract[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:35 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:36 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:37 subtract[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:38 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:39 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 1

code auto:40 subtract[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:41 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:42 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 1

code auto:43 subtract[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -128;
endcode
varvalue r 1

$overflow off
code auto:44 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:45 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 0

code auto:46 subtract[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - -127;
endcode
varvalue r 0

$overflow on
code auto:47 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:48 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 0

code auto:49 subtract[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -127;
endcode
varvalue r 0

$overflow off
code auto:50 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:51 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -126

code auto:52 subtract[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - -1;
endcode
varvalue r -126

$overflow on
code auto:53 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:54 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -126

code auto:55 subtract[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -1;
endcode
varvalue r -126

$overflow off
code auto:56 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:57 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -127

code auto:58 subtract[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:59 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:60 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -127

code auto:61 subtract[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 0;
endcode
varvalue r -127

$overflow off
code auto:62 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:63 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -128

code auto:64 subtract[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - 1;
endcode
varvalue r -128

$overflow on
code auto:65 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:66 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -128

code auto:67 subtract[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 1;
endcode
varvalue r -128

$overflow off
code auto:68 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:69 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 2

code auto:70 subtract[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 - 127;
endcode
compile error

$overflow on
code auto:71 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:72 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:73 subtract[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 127;
endcode
compile error

$overflow off
code auto:74 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:75 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 127

code auto:76 subtract[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:77 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:78 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 127

code auto:79 subtract[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:80 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:81 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 126

code auto:82 subtract[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:83 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:84 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 126

code auto:85 subtract[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -127;
endcode
varvalue r 126

$overflow off
code auto:86 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:87 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 0

code auto:88 subtract[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:89 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:90 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 0

code auto:91 subtract[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:92 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:93 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -1

code auto:94 subtract[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:95 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:96 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -1

code auto:97 subtract[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:98 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:99 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -2

code auto:100 subtract[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:101 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:102 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -2

code auto:103 subtract[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:104 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:105 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -128

code auto:106 subtract[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:107 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:108 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -128

code auto:109 subtract[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:110 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:111 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r -128

code auto:112 subtract[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -128;
endcode
compile error

$overflow on
code auto:113 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:114 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:115 subtract[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -128;
endcode
compile error

$overflow off
code auto:116 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:117 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 127

code auto:118 subtract[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:119 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:120 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 127

code auto:121 subtract[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:122 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:123 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 1

code auto:124 subtract[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:125 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:126 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 1

code auto:127 subtract[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:128 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:129 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 0

code auto:130 subtract[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:131 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:132 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 0

code auto:133 subtract[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:134 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:135 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -1

code auto:136 subtract[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:137 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:138 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -1

code auto:139 subtract[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:140 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:141 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -127

code auto:142 subtract[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:143 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:144 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -127

code auto:145 subtract[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:146 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:147 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r -127

code auto:148 subtract[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -128;
endcode
compile error

$overflow on
code auto:149 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:150 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:151 subtract[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -128;
endcode
compile error

$overflow off
code auto:152 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:153 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r -128

code auto:154 subtract[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -127;
endcode
compile error

$overflow on
code auto:155 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:156 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -127;
endcode
runtime overflow

code auto:157 subtract[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -127;
endcode
compile error

$overflow off
code auto:158 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:159 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 2

code auto:160 subtract[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:161 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:162 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 2

code auto:163 subtract[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:164 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:165 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 1

code auto:166 subtract[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:167 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:168 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 1

code auto:169 subtract[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:170 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:171 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 0

code auto:172 subtract[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:173 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:174 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 0

code auto:175 subtract[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:176 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:177 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -126

code auto:178 subtract[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:179 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:180 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -126

code auto:181 subtract[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:182 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:183 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r -1

code auto:184 subtract[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -128;
endcode
compile error

$overflow on
code auto:185 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:186 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:187 subtract[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -128;
endcode
compile error

$overflow off
code auto:188 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:189 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r -2

code auto:190 subtract[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -127;
endcode
compile error

$overflow on
code auto:191 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:192 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -127;
endcode
runtime overflow

code auto:193 subtract[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -127;
endcode
compile error

$overflow off
code auto:194 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:195 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -128

code auto:196 subtract[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -1;
endcode
compile error

$overflow on
code auto:197 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:198 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -1;
endcode
runtime overflow

code auto:199 subtract[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -1;
endcode
compile error

$overflow off
code auto:200 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:201 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 127

code auto:202 subtract[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:203 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:204 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 127

code auto:205 subtract[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:206 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:207 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 126

code auto:208 subtract[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:209 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:210 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 126

code auto:211 subtract[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:212 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:213 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 0

code auto:214 subtract[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:215 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:216 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 0

code auto:217 subtract[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:218 subtract[Integer] -128[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:219 subtract[compile-time] -128[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow on
code auto:220 subtract[Integer] -128[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:221 subtract[compile-time] -128[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow off
code auto:222 subtract[Integer] -128[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:223 subtract[compile-time] -128[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow on
code auto:224 subtract[Integer] -128[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:225 subtract[compile-time] -128[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow off
code auto:226 subtract[Integer] -128[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:227 subtract[compile-time] -128[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:228 subtract[Integer] -128[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:229 subtract[compile-time] -128[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -129;
endcode
varvalue r 1

$overflow off
code auto:230 subtract[Integer] -128[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:231 subtract[compile-time] -128[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:232 subtract[Integer] -128[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:233 subtract[compile-time] -128[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:234 subtract[Integer] -128[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:235 subtract[compile-time] -128[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:236 subtract[Integer] -128[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:237 subtract[compile-time] -128[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:238 subtract[Integer] -128[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:239 subtract[compile-time] -128[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:240 subtract[Integer] -128[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:241 subtract[compile-time] -128[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:242 subtract[Integer] -128[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:243 subtract[compile-time] -128[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:244 subtract[Integer] -128[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:245 subtract[compile-time] -128[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:246 subtract[Integer] -128[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:247 subtract[compile-time] -128[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:248 subtract[Integer] -128[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:249 subtract[compile-time] -128[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:250 subtract[Integer] -128[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:251 subtract[compile-time] -128[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow on
code auto:252 subtract[Integer] -128[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:253 subtract[compile-time] -128[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow off
code auto:254 subtract[Integer] -128[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:255 subtract[compile-time] -128[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:256 subtract[Integer] -128[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:257 subtract[compile-time] -128[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:258 subtract[Integer] -127[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:259 subtract[compile-time] -127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -32768;
endcode
varvalue r 32641

$overflow on
code auto:260 subtract[Integer] -127[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:261 subtract[compile-time] -127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -32768;
endcode
varvalue r 32641

$overflow off
code auto:262 subtract[Integer] -127[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:263 subtract[compile-time] -127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -32767;
endcode
varvalue r 32640

$overflow on
code auto:264 subtract[Integer] -127[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:265 subtract[compile-time] -127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -32767;
endcode
varvalue r 32640

$overflow off
code auto:266 subtract[Integer] -127[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:267 subtract[compile-time] -127[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -129;
endcode
varvalue r 2

$overflow on
code auto:268 subtract[Integer] -127[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:269 subtract[compile-time] -127[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -129;
endcode
varvalue r 2

$overflow off
code auto:270 subtract[Integer] -127[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:271 subtract[compile-time] -127[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:272 subtract[Integer] -127[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:273 subtract[compile-time] -127[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -128;
endcode
varvalue r 1

$overflow off
code auto:274 subtract[Integer] -127[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:275 subtract[compile-time] -127[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -1;
endcode
varvalue r -126

$overflow on
code auto:276 subtract[Integer] -127[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:277 subtract[compile-time] -127[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -1;
endcode
varvalue r -126

$overflow off
code auto:278 subtract[Integer] -127[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:279 subtract[compile-time] -127[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:280 subtract[Integer] -127[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:281 subtract[compile-time] -127[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow off
code auto:282 subtract[Integer] -127[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:283 subtract[compile-time] -127[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow on
code auto:284 subtract[Integer] -127[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:285 subtract[compile-time] -127[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow off
code auto:286 subtract[Integer] -127[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:287 subtract[compile-time] -127[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow on
code auto:288 subtract[Integer] -127[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:289 subtract[compile-time] -127[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow off
code auto:290 subtract[Integer] -127[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:291 subtract[compile-time] -127[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 128;
endcode
varvalue r -255

$overflow on
code auto:292 subtract[Integer] -127[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:293 subtract[compile-time] -127[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 128;
endcode
varvalue r -255

$overflow off
code auto:294 subtract[Integer] -127[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32642

code auto:295 subtract[compile-time] -127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 32767;
endcode
compile error

$overflow on
code auto:296 subtract[Integer] -127[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:297 subtract[compile-time] -127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 32767;
endcode
compile error

$overflow off
code auto:298 subtract[Integer] -1[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:299 subtract[compile-time] -1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow on
code auto:300 subtract[Integer] -1[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:301 subtract[compile-time] -1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow off
code auto:302 subtract[Integer] -1[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:303 subtract[compile-time] -1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow on
code auto:304 subtract[Integer] -1[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:305 subtract[compile-time] -1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow off
code auto:306 subtract[Integer] -1[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:307 subtract[compile-time] -1[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -129;
endcode
varvalue r 128

$overflow on
code auto:308 subtract[Integer] -1[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:309 subtract[compile-time] -1[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -129;
endcode
varvalue r 128

$overflow off
code auto:310 subtract[Integer] -1[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:311 subtract[compile-time] -1[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:312 subtract[Integer] -1[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:313 subtract[compile-time] -1[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:314 subtract[Integer] -1[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:315 subtract[compile-time] -1[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:316 subtract[Integer] -1[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:317 subtract[compile-time] -1[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:318 subtract[Integer] -1[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:319 subtract[compile-time] -1[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:320 subtract[Integer] -1[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:321 subtract[compile-time] -1[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:322 subtract[Integer] -1[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:323 subtract[compile-time] -1[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:324 subtract[Integer] -1[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:325 subtract[compile-time] -1[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:326 subtract[Integer] -1[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:327 subtract[compile-time] -1[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:328 subtract[Integer] -1[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:329 subtract[compile-time] -1[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:330 subtract[Integer] -1[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:331 subtract[compile-time] -1[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow on
code auto:332 subtract[Integer] -1[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:333 subtract[compile-time] -1[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow off
code auto:334 subtract[Integer] -1[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:335 subtract[compile-time] -1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow on
code auto:336 subtract[Integer] -1[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:337 subtract[compile-time] -1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow off
code auto:338 subtract[Integer] 0[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:339 subtract[compile-time] 0[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:340 subtract[Integer] 0[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:341 subtract[compile-time] 0[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:342 subtract[Integer] 0[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:343 subtract[compile-time] 0[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:344 subtract[Integer] 0[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:345 subtract[compile-time] 0[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:346 subtract[Integer] 0[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:347 subtract[compile-time] 0[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:348 subtract[Integer] 0[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:349 subtract[compile-time] 0[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:350 subtract[Integer] 0[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:351 subtract[compile-time] 0[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:352 subtract[Integer] 0[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:353 subtract[compile-time] 0[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:354 subtract[Integer] 0[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:355 subtract[compile-time] 0[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:356 subtract[Integer] 0[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:357 subtract[compile-time] 0[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:358 subtract[Integer] 0[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:359 subtract[compile-time] 0[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:360 subtract[Integer] 0[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:361 subtract[compile-time] 0[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:362 subtract[Integer] 0[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:363 subtract[compile-time] 0[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:364 subtract[Integer] 0[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:365 subtract[compile-time] 0[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:366 subtract[Integer] 0[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:367 subtract[compile-time] 0[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:368 subtract[Integer] 0[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:369 subtract[compile-time] 0[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:370 subtract[Integer] 0[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:371 subtract[compile-time] 0[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:372 subtract[Integer] 0[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:373 subtract[compile-time] 0[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:374 subtract[Integer] 0[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:375 subtract[compile-time] 0[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:376 subtract[Integer] 0[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:377 subtract[compile-time] 0[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:378 subtract[Integer] 1[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:379 subtract[compile-time] 1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:380 subtract[Integer] 1[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:381 subtract[compile-time] 1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow off
code auto:382 subtract[Integer] 1[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:383 subtract[compile-time] 1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:384 subtract[Integer] 1[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:385 subtract[compile-time] 1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow off
code auto:386 subtract[Integer] 1[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:387 subtract[compile-time] 1[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:388 subtract[Integer] 1[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:389 subtract[compile-time] 1[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow off
code auto:390 subtract[Integer] 1[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:391 subtract[compile-time] 1[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:392 subtract[Integer] 1[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:393 subtract[compile-time] 1[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:394 subtract[Integer] 1[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:395 subtract[compile-time] 1[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:396 subtract[Integer] 1[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:397 subtract[compile-time] 1[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:398 subtract[Integer] 1[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:399 subtract[compile-time] 1[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:400 subtract[Integer] 1[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:401 subtract[compile-time] 1[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:402 subtract[Integer] 1[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:403 subtract[compile-time] 1[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:404 subtract[Integer] 1[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:405 subtract[compile-time] 1[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:406 subtract[Integer] 1[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:407 subtract[compile-time] 1[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:408 subtract[Integer] 1[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:409 subtract[compile-time] 1[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:410 subtract[Integer] 1[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:411 subtract[compile-time] 1[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:412 subtract[Integer] 1[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:413 subtract[compile-time] 1[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:414 subtract[Integer] 1[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:415 subtract[compile-time] 1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:416 subtract[Integer] 1[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:417 subtract[compile-time] 1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow off
code auto:418 subtract[Integer] 127[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:419 subtract[compile-time] 127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:420 subtract[Integer] 127[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:421 subtract[compile-time] 127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow off
code auto:422 subtract[Integer] 127[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32642

code auto:423 subtract[compile-time] 127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:424 subtract[Integer] 127[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:425 subtract[compile-time] 127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow off
code auto:426 subtract[Integer] 127[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:427 subtract[compile-time] 127[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow on
code auto:428 subtract[Integer] 127[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:429 subtract[compile-time] 127[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow off
code auto:430 subtract[Integer] 127[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:431 subtract[compile-time] 127[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:432 subtract[Integer] 127[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:433 subtract[compile-time] 127[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:434 subtract[Integer] 127[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:435 subtract[compile-time] 127[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:436 subtract[Integer] 127[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:437 subtract[compile-time] 127[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:438 subtract[Integer] 127[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:439 subtract[compile-time] 127[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:440 subtract[Integer] 127[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:441 subtract[compile-time] 127[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:442 subtract[Integer] 127[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:443 subtract[compile-time] 127[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:444 subtract[Integer] 127[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:445 subtract[compile-time] 127[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:446 subtract[Integer] 127[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:447 subtract[compile-time] 127[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:448 subtract[Integer] 127[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:449 subtract[compile-time] 127[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:450 subtract[Integer] 127[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:451 subtract[compile-time] 127[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:452 subtract[Integer] 127[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:453 subtract[compile-time] 127[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:454 subtract[Integer] 127[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:455 subtract[compile-time] 127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:456 subtract[Integer] 127[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:457 subtract[compile-time] 127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow off
code auto:458 subtract[Integer] -128[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:459 subtract[compile-time] -128[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:460 subtract[Integer] -128[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:461 subtract[compile-time] -128[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:462 subtract[Integer] -128[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:463 subtract[compile-time] -128[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:464 subtract[Integer] -128[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:465 subtract[compile-time] -128[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:466 subtract[Integer] -128[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:467 subtract[compile-time] -128[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:468 subtract[Integer] -128[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:469 subtract[compile-time] -128[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:470 subtract[Integer] -128[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:471 subtract[compile-time] -128[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow on
code auto:472 subtract[Integer] -128[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:473 subtract[compile-time] -128[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow off
code auto:474 subtract[Integer] -128[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:475 subtract[compile-time] -128[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow on
code auto:476 subtract[Integer] -128[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:477 subtract[compile-time] -128[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow off
code auto:478 subtract[Integer] -127[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:479 subtract[compile-time] -127[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:480 subtract[Integer] -127[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:481 subtract[compile-time] -127[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow off
code auto:482 subtract[Integer] -127[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:483 subtract[compile-time] -127[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow on
code auto:484 subtract[Integer] -127[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:485 subtract[compile-time] -127[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow off
code auto:486 subtract[Integer] -127[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:487 subtract[compile-time] -127[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow on
code auto:488 subtract[Integer] -127[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:489 subtract[compile-time] -127[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow off
code auto:490 subtract[Integer] -127[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:491 subtract[compile-time] -127[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 128;
endcode
varvalue r -255

$overflow on
code auto:492 subtract[Integer] -127[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:493 subtract[compile-time] -127[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 128;
endcode
varvalue r -255

$overflow off
code auto:494 subtract[Integer] -127[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -382

code auto:495 subtract[compile-time] -127[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 255;
endcode
varvalue r -382

$overflow on
code auto:496 subtract[Integer] -127[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -382

code auto:497 subtract[compile-time] -127[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 255;
endcode
varvalue r -382

$overflow off
code auto:498 subtract[Integer] -1[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:499 subtract[compile-time] -1[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:500 subtract[Integer] -1[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:501 subtract[compile-time] -1[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:502 subtract[Integer] -1[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:503 subtract[compile-time] -1[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:504 subtract[Integer] -1[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:505 subtract[compile-time] -1[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:506 subtract[Integer] -1[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:507 subtract[compile-time] -1[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:508 subtract[Integer] -1[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:509 subtract[compile-time] -1[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:510 subtract[Integer] -1[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:511 subtract[compile-time] -1[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow on
code auto:512 subtract[Integer] -1[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:513 subtract[compile-time] -1[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow off
code auto:514 subtract[Integer] -1[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:515 subtract[compile-time] -1[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow on
code auto:516 subtract[Integer] -1[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:517 subtract[compile-time] -1[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow off
code auto:518 subtract[Integer] 0[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:519 subtract[compile-time] 0[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:520 subtract[Integer] 0[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:521 subtract[compile-time] 0[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:522 subtract[Integer] 0[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:523 subtract[compile-time] 0[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:524 subtract[Integer] 0[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:525 subtract[compile-time] 0[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:526 subtract[Integer] 0[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:527 subtract[compile-time] 0[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:528 subtract[Integer] 0[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:529 subtract[compile-time] 0[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:530 subtract[Integer] 0[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:531 subtract[compile-time] 0[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:532 subtract[Integer] 0[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:533 subtract[compile-time] 0[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:534 subtract[Integer] 0[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:535 subtract[compile-time] 0[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:536 subtract[Integer] 0[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:537 subtract[compile-time] 0[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:538 subtract[Integer] 1[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:539 subtract[compile-time] 1[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:540 subtract[Integer] 1[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:541 subtract[compile-time] 1[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:542 subtract[Integer] 1[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:543 subtract[compile-time] 1[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:544 subtract[Integer] 1[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:545 subtract[compile-time] 1[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:546 subtract[Integer] 1[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:547 subtract[compile-time] 1[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:548 subtract[Integer] 1[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:549 subtract[compile-time] 1[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:550 subtract[Integer] 1[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:551 subtract[compile-time] 1[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:552 subtract[Integer] 1[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:553 subtract[compile-time] 1[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:554 subtract[Integer] 1[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:555 subtract[compile-time] 1[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow on
code auto:556 subtract[Integer] 1[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:557 subtract[compile-time] 1[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow off
code auto:558 subtract[Integer] 127[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:559 subtract[compile-time] 127[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:560 subtract[Integer] 127[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:561 subtract[compile-time] 127[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:562 subtract[Integer] 127[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:563 subtract[compile-time] 127[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:564 subtract[Integer] 127[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:565 subtract[compile-time] 127[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:566 subtract[Integer] 127[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:567 subtract[compile-time] 127[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:568 subtract[Integer] 127[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:569 subtract[compile-time] 127[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:570 subtract[Integer] 127[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:571 subtract[compile-time] 127[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:572 subtract[Integer] 127[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:573 subtract[compile-time] 127[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:574 subtract[Integer] 127[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:575 subtract[compile-time] 127[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:576 subtract[Integer] 127[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:577 subtract[compile-time] 127[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:578 subtract[Integer] -128[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:579 subtract[compile-time] -128[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:580 subtract[Integer] -128[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:581 subtract[compile-time] -128[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:582 subtract[Integer] -128[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:583 subtract[compile-time] -128[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow on
code auto:584 subtract[Integer] -128[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:585 subtract[compile-time] -128[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow off
code auto:586 subtract[Integer] -128[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:587 subtract[compile-time] -128[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:588 subtract[Integer] -128[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:589 subtract[compile-time] -128[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:590 subtract[Integer] -128[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:591 subtract[compile-time] -128[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32768;
endcode
compile error

$overflow on
code auto:592 subtract[Integer] -128[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:593 subtract[compile-time] -128[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32768;
endcode
compile error

$overflow off
code auto:594 subtract[Integer] -128[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:595 subtract[compile-time] -128[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 65535;
endcode
compile error

$overflow on
code auto:596 subtract[Integer] -128[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:597 subtract[compile-time] -128[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 65535;
endcode
compile error

$overflow off
code auto:598 subtract[Integer] -127[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:599 subtract[compile-time] -127[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:600 subtract[Integer] -127[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:601 subtract[compile-time] -127[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow off
code auto:602 subtract[Integer] -127[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -382

code auto:603 subtract[compile-time] -127[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 255;
endcode
varvalue r -382

$overflow on
code auto:604 subtract[Integer] -127[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -382

code auto:605 subtract[compile-time] -127[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 255;
endcode
varvalue r -382

$overflow off
code auto:606 subtract[Integer] -127[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32642

code auto:607 subtract[compile-time] -127[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 32767;
endcode
compile error

$overflow on
code auto:608 subtract[Integer] -127[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:609 subtract[compile-time] -127[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 32767;
endcode
compile error

$overflow off
code auto:610 subtract[Integer] -127[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:611 subtract[compile-time] -127[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 32768;
endcode
compile error

$overflow on
code auto:612 subtract[Integer] -127[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:613 subtract[compile-time] -127[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 32768;
endcode
compile error

$overflow off
code auto:614 subtract[Integer] -127[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:615 subtract[compile-time] -127[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 65535;
endcode
compile error

$overflow on
code auto:616 subtract[Integer] -127[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:617 subtract[compile-time] -127[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 65535;
endcode
compile error

$overflow off
code auto:618 subtract[Integer] -1[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:619 subtract[compile-time] -1[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:620 subtract[Integer] -1[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:621 subtract[compile-time] -1[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:622 subtract[Integer] -1[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:623 subtract[compile-time] -1[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow on
code auto:624 subtract[Integer] -1[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:625 subtract[compile-time] -1[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow off
code auto:626 subtract[Integer] -1[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:627 subtract[compile-time] -1[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow on
code auto:628 subtract[Integer] -1[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:629 subtract[compile-time] -1[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow off
code auto:630 subtract[Integer] -1[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:631 subtract[compile-time] -1[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32768;
endcode
compile error

$overflow on
code auto:632 subtract[Integer] -1[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:633 subtract[compile-time] -1[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32768;
endcode
compile error

$overflow off
code auto:634 subtract[Integer] -1[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:635 subtract[compile-time] -1[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 65535;
endcode
compile error

$overflow on
code auto:636 subtract[Integer] -1[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:637 subtract[compile-time] -1[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 65535;
endcode
compile error

$overflow off
code auto:638 subtract[Integer] 0[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:639 subtract[compile-time] 0[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:640 subtract[Integer] 0[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:641 subtract[compile-time] 0[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:642 subtract[Integer] 0[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:643 subtract[compile-time] 0[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:644 subtract[Integer] 0[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:645 subtract[compile-time] 0[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:646 subtract[Integer] 0[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:647 subtract[compile-time] 0[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:648 subtract[Integer] 0[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:649 subtract[compile-time] 0[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:650 subtract[Integer] 0[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:651 subtract[compile-time] 0[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow on
code auto:652 subtract[Integer] 0[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:653 subtract[compile-time] 0[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow off
code auto:654 subtract[Integer] 0[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:655 subtract[compile-time] 0[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:656 subtract[Integer] 0[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:657 subtract[compile-time] 0[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:658 subtract[Integer] 1[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:659 subtract[compile-time] 1[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:660 subtract[Integer] 1[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:661 subtract[compile-time] 1[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:662 subtract[Integer] 1[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:663 subtract[compile-time] 1[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow on
code auto:664 subtract[Integer] 1[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:665 subtract[compile-time] 1[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow off
code auto:666 subtract[Integer] 1[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:667 subtract[compile-time] 1[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:668 subtract[Integer] 1[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:669 subtract[compile-time] 1[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow off
code auto:670 subtract[Integer] 1[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:671 subtract[compile-time] 1[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32768;
endcode
varvalue r -32767

$overflow on
code auto:672 subtract[Integer] 1[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:673 subtract[compile-time] 1[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32768;
endcode
varvalue r -32767

$overflow off
code auto:674 subtract[Integer] 1[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:675 subtract[compile-time] 1[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:676 subtract[Integer] 1[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:677 subtract[compile-time] 1[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:678 subtract[Integer] 127[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:679 subtract[compile-time] 127[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:680 subtract[Integer] 127[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:681 subtract[compile-time] 127[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:682 subtract[Integer] 127[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:683 subtract[compile-time] 127[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:684 subtract[Integer] 127[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:685 subtract[compile-time] 127[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:686 subtract[Integer] 127[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:687 subtract[compile-time] 127[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:688 subtract[Integer] 127[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:689 subtract[compile-time] 127[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow off
code auto:690 subtract[Integer] 127[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:691 subtract[compile-time] 127[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32768;
endcode
varvalue r -32641

$overflow on
code auto:692 subtract[Integer] 127[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:693 subtract[compile-time] 127[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32768;
endcode
varvalue r -32641

$overflow off
code auto:694 subtract[Integer] 127[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:695 subtract[compile-time] 127[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:696 subtract[Integer] 127[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:697 subtract[compile-time] 127[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:698 subtract[Pointer] -128[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:699 subtract[compile-time] -128[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:700 subtract[Pointer] -128[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:701 subtract[compile-time] -128[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:702 subtract[Pointer] -128[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65153

code auto:703 subtract[compile-time] -128[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 255;
endcode
compile error

$overflow on
code auto:704 subtract[Pointer] -128[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:705 subtract[compile-time] -128[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 255;
endcode
compile error

$overflow off
code auto:706 subtract[Pointer] -128[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:707 subtract[compile-time] -128[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:708 subtract[Pointer] -128[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:709 subtract[compile-time] -128[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:710 subtract[Pointer] -128[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:711 subtract[compile-time] -128[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 32768;
endcode
compile error

$overflow on
code auto:712 subtract[Pointer] -128[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:713 subtract[compile-time] -128[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 32768;
endcode
compile error

$overflow off
code auto:714 subtract[Pointer] -128[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:715 subtract[compile-time] -128[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 65535;
endcode
compile error

$overflow on
code auto:716 subtract[Pointer] -128[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:717 subtract[compile-time] -128[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 65535;
endcode
compile error

$overflow off
code auto:718 subtract[Pointer] -127[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:719 subtract[compile-time] -127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 - 0;
endcode
compile error

$overflow on
code auto:720 subtract[Pointer] -127[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:721 subtract[compile-time] -127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 - 0;
endcode
compile error

$overflow off
code auto:722 subtract[Pointer] -127[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65154

code auto:723 subtract[compile-time] -127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 - 255;
endcode
compile error

$overflow on
code auto:724 subtract[Pointer] -127[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:725 subtract[compile-time] -127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 - 255;
endcode
compile error

$overflow off
code auto:726 subtract[Pointer] -127[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32642

code auto:727 subtract[compile-time] -127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 - 32767;
endcode
compile error

$overflow on
code auto:728 subtract[Pointer] -127[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:729 subtract[compile-time] -127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 - 32767;
endcode
compile error

$overflow off
code auto:730 subtract[Pointer] -127[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:731 subtract[compile-time] -127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 - 32768;
endcode
compile error

$overflow on
code auto:732 subtract[Pointer] -127[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:733 subtract[compile-time] -127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 - 32768;
endcode
compile error

$overflow off
code auto:734 subtract[Pointer] -127[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65410

code auto:735 subtract[compile-time] -127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 - 65535;
endcode
compile error

$overflow on
code auto:736 subtract[Pointer] -127[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:737 subtract[compile-time] -127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 - 65535;
endcode
compile error

$overflow off
code auto:738 subtract[Pointer] -1[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:739 subtract[compile-time] -1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:740 subtract[Pointer] -1[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:741 subtract[compile-time] -1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:742 subtract[Pointer] -1[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:743 subtract[compile-time] -1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 255;
endcode
compile error

$overflow on
code auto:744 subtract[Pointer] -1[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:745 subtract[compile-time] -1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 255;
endcode
compile error

$overflow off
code auto:746 subtract[Pointer] -1[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:747 subtract[compile-time] -1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 32767;
endcode
compile error

$overflow on
code auto:748 subtract[Pointer] -1[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:749 subtract[compile-time] -1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 32767;
endcode
compile error

$overflow off
code auto:750 subtract[Pointer] -1[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:751 subtract[compile-time] -1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 32768;
endcode
compile error

$overflow on
code auto:752 subtract[Pointer] -1[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:753 subtract[compile-time] -1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 32768;
endcode
compile error

$overflow off
code auto:754 subtract[Pointer] -1[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:755 subtract[compile-time] -1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 65535;
endcode
compile error

$overflow on
code auto:756 subtract[Pointer] -1[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:757 subtract[compile-time] -1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 65535;
endcode
compile error

$overflow off
code auto:758 subtract[Pointer] 0[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:759 subtract[compile-time] 0[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:760 subtract[Pointer] 0[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:761 subtract[compile-time] 0[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:762 subtract[Pointer] 0[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:763 subtract[compile-time] 0[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:764 subtract[Pointer] 0[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:765 subtract[compile-time] 0[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:766 subtract[Pointer] 0[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:767 subtract[compile-time] 0[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:768 subtract[Pointer] 0[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:769 subtract[compile-time] 0[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:770 subtract[Pointer] 0[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:771 subtract[compile-time] 0[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:772 subtract[Pointer] 0[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:773 subtract[compile-time] 0[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:774 subtract[Pointer] 0[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:775 subtract[compile-time] 0[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:776 subtract[Pointer] 0[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:777 subtract[compile-time] 0[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:778 subtract[Pointer] 1[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:779 subtract[compile-time] 1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:780 subtract[Pointer] 1[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:781 subtract[compile-time] 1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:782 subtract[Pointer] 1[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65282

code auto:783 subtract[compile-time] 1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:784 subtract[Pointer] 1[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:785 subtract[compile-time] 1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:786 subtract[Pointer] 1[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32770

code auto:787 subtract[compile-time] 1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:788 subtract[Pointer] 1[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:789 subtract[compile-time] 1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:790 subtract[Pointer] 1[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:791 subtract[compile-time] 1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow on
code auto:792 subtract[Pointer] 1[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:793 subtract[compile-time] 1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow off
code auto:794 subtract[Pointer] 1[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 2

code auto:795 subtract[compile-time] 1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:796 subtract[Pointer] 1[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:797 subtract[compile-time] 1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:798 subtract[Pointer] 127[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:799 subtract[compile-time] 127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:800 subtract[Pointer] 127[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:801 subtract[compile-time] 127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:802 subtract[Pointer] 127[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:803 subtract[compile-time] 127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:804 subtract[Pointer] 127[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:805 subtract[compile-time] 127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:806 subtract[Pointer] 127[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:807 subtract[compile-time] 127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:808 subtract[Pointer] 127[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:809 subtract[compile-time] 127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:810 subtract[Pointer] 127[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:811 subtract[compile-time] 127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow on
code auto:812 subtract[Pointer] 127[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:813 subtract[compile-time] 127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow off
code auto:814 subtract[Pointer] 127[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:815 subtract[compile-time] 127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:816 subtract[Pointer] 127[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:817 subtract[compile-time] 127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:818 subtract[Integer] -32768[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:819 subtract[compile-time] -32768[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -128;
endcode
varvalue r -32640

$overflow on
code auto:820 subtract[Integer] -32768[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:821 subtract[compile-time] -32768[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -128;
endcode
varvalue r -32640

$overflow off
code auto:822 subtract[Integer] -32768[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:823 subtract[compile-time] -32768[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -127;
endcode
varvalue r -32641

$overflow on
code auto:824 subtract[Integer] -32768[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:825 subtract[compile-time] -32768[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -127;
endcode
varvalue r -32641

$overflow off
code auto:826 subtract[Integer] -32768[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:827 subtract[compile-time] -32768[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -1;
endcode
varvalue r -32767

$overflow on
code auto:828 subtract[Integer] -32768[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:829 subtract[compile-time] -32768[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -1;
endcode
varvalue r -32767

$overflow off
code auto:830 subtract[Integer] -32768[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:831 subtract[compile-time] -32768[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow on
code auto:832 subtract[Integer] -32768[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:833 subtract[compile-time] -32768[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow off
code auto:834 subtract[Integer] -32768[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:835 subtract[compile-time] -32768[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:836 subtract[Integer] -32768[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:837 subtract[compile-time] -32768[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:838 subtract[Integer] -32768[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:839 subtract[compile-time] -32768[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:840 subtract[Integer] -32768[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:841 subtract[compile-time] -32768[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:842 subtract[Integer] -32767[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:843 subtract[compile-time] -32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -128;
endcode
varvalue r -32639

$overflow on
code auto:844 subtract[Integer] -32767[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:845 subtract[compile-time] -32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -128;
endcode
varvalue r -32639

$overflow off
code auto:846 subtract[Integer] -32767[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:847 subtract[compile-time] -32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -127;
endcode
varvalue r -32640

$overflow on
code auto:848 subtract[Integer] -32767[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:849 subtract[compile-time] -32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -127;
endcode
varvalue r -32640

$overflow off
code auto:850 subtract[Integer] -32767[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:851 subtract[compile-time] -32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -1;
endcode
varvalue r -32766

$overflow on
code auto:852 subtract[Integer] -32767[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:853 subtract[compile-time] -32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -1;
endcode
varvalue r -32766

$overflow off
code auto:854 subtract[Integer] -32767[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:855 subtract[compile-time] -32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow on
code auto:856 subtract[Integer] -32767[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:857 subtract[compile-time] -32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow off
code auto:858 subtract[Integer] -32767[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:859 subtract[compile-time] -32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow on
code auto:860 subtract[Integer] -32767[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:861 subtract[compile-time] -32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow off
code auto:862 subtract[Integer] -32767[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32642

code auto:863 subtract[compile-time] -32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:864 subtract[Integer] -32767[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:865 subtract[compile-time] -32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:866 subtract[Integer] -129[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:867 subtract[compile-time] -129[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -128;
endcode
varvalue r -1

$overflow on
code auto:868 subtract[Integer] -129[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:869 subtract[compile-time] -129[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -128;
endcode
varvalue r -1

$overflow off
code auto:870 subtract[Integer] -129[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:871 subtract[compile-time] -129[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -127;
endcode
varvalue r -2

$overflow on
code auto:872 subtract[Integer] -129[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:873 subtract[compile-time] -129[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -127;
endcode
varvalue r -2

$overflow off
code auto:874 subtract[Integer] -129[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:875 subtract[compile-time] -129[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -1;
endcode
varvalue r -128

$overflow on
code auto:876 subtract[Integer] -129[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:877 subtract[compile-time] -129[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -1;
endcode
varvalue r -128

$overflow off
code auto:878 subtract[Integer] -129[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:879 subtract[compile-time] -129[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow on
code auto:880 subtract[Integer] -129[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:881 subtract[compile-time] -129[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow off
code auto:882 subtract[Integer] -129[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:883 subtract[compile-time] -129[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow on
code auto:884 subtract[Integer] -129[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:885 subtract[compile-time] -129[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow off
code auto:886 subtract[Integer] -129[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:887 subtract[compile-time] -129[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow on
code auto:888 subtract[Integer] -129[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:889 subtract[compile-time] -129[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow off
code auto:890 subtract[Integer] -128[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:891 subtract[compile-time] -128[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:892 subtract[Integer] -128[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:893 subtract[compile-time] -128[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:894 subtract[Integer] -128[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:895 subtract[compile-time] -128[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -127;
endcode
varvalue r -1

$overflow on
code auto:896 subtract[Integer] -128[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:897 subtract[compile-time] -128[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -127;
endcode
varvalue r -1

$overflow off
code auto:898 subtract[Integer] -128[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:899 subtract[compile-time] -128[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:900 subtract[Integer] -128[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:901 subtract[compile-time] -128[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:902 subtract[Integer] -128[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:903 subtract[compile-time] -128[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:904 subtract[Integer] -128[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:905 subtract[compile-time] -128[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:906 subtract[Integer] -128[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:907 subtract[compile-time] -128[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:908 subtract[Integer] -128[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:909 subtract[compile-time] -128[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:910 subtract[Integer] -128[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:911 subtract[compile-time] -128[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:912 subtract[Integer] -128[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:913 subtract[compile-time] -128[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:914 subtract[Integer] -1[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:915 subtract[compile-time] -1[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:916 subtract[Integer] -1[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:917 subtract[compile-time] -1[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:918 subtract[Integer] -1[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:919 subtract[compile-time] -1[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:920 subtract[Integer] -1[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:921 subtract[compile-time] -1[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -127;
endcode
varvalue r 126

$overflow off
code auto:922 subtract[Integer] -1[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:923 subtract[compile-time] -1[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:924 subtract[Integer] -1[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:925 subtract[compile-time] -1[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:926 subtract[Integer] -1[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:927 subtract[compile-time] -1[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:928 subtract[Integer] -1[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:929 subtract[compile-time] -1[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:930 subtract[Integer] -1[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:931 subtract[compile-time] -1[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:932 subtract[Integer] -1[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:933 subtract[compile-time] -1[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:934 subtract[Integer] -1[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:935 subtract[compile-time] -1[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:936 subtract[Integer] -1[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:937 subtract[compile-time] -1[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:938 subtract[Integer] 0[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:939 subtract[compile-time] 0[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:940 subtract[Integer] 0[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:941 subtract[compile-time] 0[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:942 subtract[Integer] 0[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:943 subtract[compile-time] 0[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:944 subtract[Integer] 0[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:945 subtract[compile-time] 0[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:946 subtract[Integer] 0[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:947 subtract[compile-time] 0[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:948 subtract[Integer] 0[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:949 subtract[compile-time] 0[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:950 subtract[Integer] 0[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:951 subtract[compile-time] 0[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:952 subtract[Integer] 0[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:953 subtract[compile-time] 0[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:954 subtract[Integer] 0[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:955 subtract[compile-time] 0[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:956 subtract[Integer] 0[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:957 subtract[compile-time] 0[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:958 subtract[Integer] 0[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:959 subtract[compile-time] 0[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:960 subtract[Integer] 0[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:961 subtract[compile-time] 0[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:962 subtract[Integer] 1[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:963 subtract[compile-time] 1[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:964 subtract[Integer] 1[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:965 subtract[compile-time] 1[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:966 subtract[Integer] 1[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:967 subtract[compile-time] 1[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow on
code auto:968 subtract[Integer] 1[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:969 subtract[compile-time] 1[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow off
code auto:970 subtract[Integer] 1[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:971 subtract[compile-time] 1[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:972 subtract[Integer] 1[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:973 subtract[compile-time] 1[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:974 subtract[Integer] 1[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:975 subtract[compile-time] 1[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:976 subtract[Integer] 1[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:977 subtract[compile-time] 1[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:978 subtract[Integer] 1[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:979 subtract[compile-time] 1[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:980 subtract[Integer] 1[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:981 subtract[compile-time] 1[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:982 subtract[Integer] 1[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:983 subtract[compile-time] 1[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:984 subtract[Integer] 1[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:985 subtract[compile-time] 1[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:986 subtract[Integer] 127[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:987 subtract[compile-time] 127[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:988 subtract[Integer] 127[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:989 subtract[compile-time] 127[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:990 subtract[Integer] 127[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:991 subtract[compile-time] 127[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow on
code auto:992 subtract[Integer] 127[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:993 subtract[compile-time] 127[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow off
code auto:994 subtract[Integer] 127[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:995 subtract[compile-time] 127[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:996 subtract[Integer] 127[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:997 subtract[compile-time] 127[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:998 subtract[Integer] 127[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:999 subtract[compile-time] 127[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:1000 subtract[Integer] 127[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1001 subtract[compile-time] 127[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:1002 subtract[Integer] 127[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1003 subtract[compile-time] 127[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:1004 subtract[Integer] 127[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1005 subtract[compile-time] 127[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:1006 subtract[Integer] 127[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1007 subtract[compile-time] 127[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:1008 subtract[Integer] 127[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1009 subtract[compile-time] 127[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:1010 subtract[Integer] 128[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1011 subtract[compile-time] 128[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:1012 subtract[Integer] 128[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1013 subtract[compile-time] 128[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow off
code auto:1014 subtract[Integer] 128[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:1015 subtract[compile-time] 128[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -127;
endcode
varvalue r 255

$overflow on
code auto:1016 subtract[Integer] 128[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:1017 subtract[compile-time] 128[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -127;
endcode
varvalue r 255

$overflow off
code auto:1018 subtract[Integer] 128[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1019 subtract[compile-time] 128[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:1020 subtract[Integer] 128[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1021 subtract[compile-time] 128[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:1022 subtract[Integer] 128[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1023 subtract[compile-time] 128[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:1024 subtract[Integer] 128[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1025 subtract[compile-time] 128[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:1026 subtract[Integer] 128[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1027 subtract[compile-time] 128[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:1028 subtract[Integer] 128[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1029 subtract[compile-time] 128[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:1030 subtract[Integer] 128[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1031 subtract[compile-time] 128[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:1032 subtract[Integer] 128[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1033 subtract[compile-time] 128[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:1034 subtract[Integer] 32767[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1035 subtract[compile-time] 32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:1036 subtract[Integer] 32767[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1037 subtract[compile-time] 32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:1038 subtract[Integer] 32767[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32642

code auto:1039 subtract[compile-time] 32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -127;
endcode
compile error

$overflow on
code auto:1040 subtract[Integer] 32767[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1041 subtract[compile-time] 32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -127;
endcode
compile error

$overflow off
code auto:1042 subtract[Integer] 32767[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1043 subtract[compile-time] 32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:1044 subtract[Integer] 32767[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1045 subtract[compile-time] 32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:1046 subtract[Integer] 32767[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1047 subtract[compile-time] 32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:1048 subtract[Integer] 32767[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1049 subtract[compile-time] 32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:1050 subtract[Integer] 32767[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1051 subtract[compile-time] 32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:1052 subtract[Integer] 32767[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1053 subtract[compile-time] 32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:1054 subtract[Integer] 32767[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1055 subtract[compile-time] 32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:1056 subtract[Integer] 32767[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1057 subtract[compile-time] 32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:1058 subtract[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1059 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow on
code auto:1060 subtract[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1061 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow off
code auto:1062 subtract[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1063 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -32767;
endcode
varvalue r -1

$overflow on
code auto:1064 subtract[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1065 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -32767;
endcode
varvalue r -1

$overflow off
code auto:1066 subtract[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1067 subtract[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -129;
endcode
varvalue r -32639

$overflow on
code auto:1068 subtract[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1069 subtract[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -129;
endcode
varvalue r -32639

$overflow off
code auto:1070 subtract[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1071 subtract[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -128;
endcode
varvalue r -32640

$overflow on
code auto:1072 subtract[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1073 subtract[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -128;
endcode
varvalue r -32640

$overflow off
code auto:1074 subtract[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1075 subtract[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - -1;
endcode
varvalue r -32767

$overflow on
code auto:1076 subtract[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1077 subtract[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -1;
endcode
varvalue r -32767

$overflow off
code auto:1078 subtract[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1079 subtract[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow on
code auto:1080 subtract[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1081 subtract[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow off
code auto:1082 subtract[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1083 subtract[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:1084 subtract[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1085 subtract[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:1086 subtract[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1087 subtract[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:1088 subtract[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1089 subtract[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:1090 subtract[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1091 subtract[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:1092 subtract[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1093 subtract[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 128;
endcode
compile error

$overflow off
code auto:1094 subtract[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1095 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:1096 subtract[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1097 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:1098 subtract[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1099 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow on
code auto:1100 subtract[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1101 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow off
code auto:1102 subtract[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1103 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow on
code auto:1104 subtract[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1105 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow off
code auto:1106 subtract[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32638

code auto:1107 subtract[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -129;
endcode
varvalue r -32638

$overflow on
code auto:1108 subtract[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32638

code auto:1109 subtract[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -129;
endcode
varvalue r -32638

$overflow off
code auto:1110 subtract[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1111 subtract[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -128;
endcode
varvalue r -32639

$overflow on
code auto:1112 subtract[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1113 subtract[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -128;
endcode
varvalue r -32639

$overflow off
code auto:1114 subtract[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1115 subtract[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - -1;
endcode
varvalue r -32766

$overflow on
code auto:1116 subtract[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1117 subtract[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -1;
endcode
varvalue r -32766

$overflow off
code auto:1118 subtract[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1119 subtract[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow on
code auto:1120 subtract[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1121 subtract[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow off
code auto:1122 subtract[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1123 subtract[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow on
code auto:1124 subtract[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1125 subtract[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow off
code auto:1126 subtract[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32642

code auto:1127 subtract[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:1128 subtract[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1129 subtract[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:1130 subtract[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1131 subtract[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:1132 subtract[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1133 subtract[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 128;
endcode
compile error

$overflow off
code auto:1134 subtract[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:1135 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:1136 subtract[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1137 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:1138 subtract[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1139 subtract[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -32768;
endcode
varvalue r 32639

$overflow on
code auto:1140 subtract[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1141 subtract[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -32768;
endcode
varvalue r 32639

$overflow off
code auto:1142 subtract[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32638

code auto:1143 subtract[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -32767;
endcode
varvalue r 32638

$overflow on
code auto:1144 subtract[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32638

code auto:1145 subtract[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -32767;
endcode
varvalue r 32638

$overflow off
code auto:1146 subtract[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1147 subtract[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -129;
endcode
varvalue r 0

$overflow on
code auto:1148 subtract[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1149 subtract[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -129;
endcode
varvalue r 0

$overflow off
code auto:1150 subtract[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1151 subtract[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -128;
endcode
varvalue r -1

$overflow on
code auto:1152 subtract[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1153 subtract[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -128;
endcode
varvalue r -1

$overflow off
code auto:1154 subtract[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1155 subtract[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - -1;
endcode
varvalue r -128

$overflow on
code auto:1156 subtract[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1157 subtract[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -1;
endcode
varvalue r -128

$overflow off
code auto:1158 subtract[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1159 subtract[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow on
code auto:1160 subtract[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1161 subtract[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow off
code auto:1162 subtract[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:1163 subtract[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow on
code auto:1164 subtract[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:1165 subtract[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow off
code auto:1166 subtract[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1167 subtract[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow on
code auto:1168 subtract[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1169 subtract[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow off
code auto:1170 subtract[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -257

code auto:1171 subtract[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 128;
endcode
varvalue r -257

$overflow on
code auto:1172 subtract[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -257

code auto:1173 subtract[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 128;
endcode
varvalue r -257

$overflow off
code auto:1174 subtract[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1175 subtract[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:1176 subtract[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1177 subtract[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:1178 subtract[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1179 subtract[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow on
code auto:1180 subtract[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1181 subtract[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow off
code auto:1182 subtract[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1183 subtract[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow on
code auto:1184 subtract[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1185 subtract[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow off
code auto:1186 subtract[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1187 subtract[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:1188 subtract[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1189 subtract[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -129;
endcode
varvalue r 1

$overflow off
code auto:1190 subtract[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1191 subtract[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:1192 subtract[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1193 subtract[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:1194 subtract[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1195 subtract[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:1196 subtract[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1197 subtract[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:1198 subtract[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1199 subtract[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:1200 subtract[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1201 subtract[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:1202 subtract[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1203 subtract[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:1204 subtract[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1205 subtract[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:1206 subtract[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1207 subtract[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:1208 subtract[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1209 subtract[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:1210 subtract[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1211 subtract[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow on
code auto:1212 subtract[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1213 subtract[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow off
code auto:1214 subtract[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1215 subtract[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:1216 subtract[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1217 subtract[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:1218 subtract[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1219 subtract[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow on
code auto:1220 subtract[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1221 subtract[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow off
code auto:1222 subtract[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1223 subtract[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow on
code auto:1224 subtract[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1225 subtract[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow off
code auto:1226 subtract[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1227 subtract[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -129;
endcode
varvalue r 128

$overflow on
code auto:1228 subtract[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1229 subtract[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -129;
endcode
varvalue r 128

$overflow off
code auto:1230 subtract[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1231 subtract[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:1232 subtract[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1233 subtract[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:1234 subtract[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1235 subtract[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:1236 subtract[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1237 subtract[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:1238 subtract[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1239 subtract[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:1240 subtract[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1241 subtract[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:1242 subtract[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:1243 subtract[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:1244 subtract[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:1245 subtract[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:1246 subtract[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1247 subtract[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:1248 subtract[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1249 subtract[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:1250 subtract[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1251 subtract[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow on
code auto:1252 subtract[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1253 subtract[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow off
code auto:1254 subtract[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1255 subtract[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow on
code auto:1256 subtract[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1257 subtract[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow off
code auto:1258 subtract[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1259 subtract[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:1260 subtract[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1261 subtract[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:1262 subtract[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1263 subtract[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:1264 subtract[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1265 subtract[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:1266 subtract[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1267 subtract[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:1268 subtract[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1269 subtract[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:1270 subtract[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1271 subtract[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:1272 subtract[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1273 subtract[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:1274 subtract[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1275 subtract[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:1276 subtract[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1277 subtract[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:1278 subtract[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1279 subtract[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:1280 subtract[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1281 subtract[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:1282 subtract[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1283 subtract[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:1284 subtract[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1285 subtract[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:1286 subtract[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1287 subtract[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:1288 subtract[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1289 subtract[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:1290 subtract[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1291 subtract[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:1292 subtract[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1293 subtract[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:1294 subtract[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1295 subtract[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:1296 subtract[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1297 subtract[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:1298 subtract[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1299 subtract[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:1300 subtract[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1301 subtract[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow off
code auto:1302 subtract[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1303 subtract[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:1304 subtract[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1305 subtract[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow off
code auto:1306 subtract[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:1307 subtract[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:1308 subtract[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:1309 subtract[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow off
code auto:1310 subtract[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1311 subtract[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:1312 subtract[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1313 subtract[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:1314 subtract[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:1315 subtract[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:1316 subtract[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:1317 subtract[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:1318 subtract[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1319 subtract[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:1320 subtract[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1321 subtract[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:1322 subtract[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1323 subtract[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:1324 subtract[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1325 subtract[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:1326 subtract[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:1327 subtract[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:1328 subtract[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:1329 subtract[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:1330 subtract[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1331 subtract[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:1332 subtract[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1333 subtract[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:1334 subtract[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1335 subtract[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:1336 subtract[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1337 subtract[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow off
code auto:1338 subtract[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1339 subtract[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:1340 subtract[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1341 subtract[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow off
code auto:1342 subtract[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32642

code auto:1343 subtract[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:1344 subtract[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1345 subtract[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow off
code auto:1346 subtract[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1347 subtract[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow on
code auto:1348 subtract[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1349 subtract[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow off
code auto:1350 subtract[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:1351 subtract[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:1352 subtract[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:1353 subtract[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:1354 subtract[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1355 subtract[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:1356 subtract[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1357 subtract[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:1358 subtract[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1359 subtract[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:1360 subtract[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1361 subtract[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:1362 subtract[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1363 subtract[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:1364 subtract[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1365 subtract[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:1366 subtract[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1367 subtract[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:1368 subtract[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1369 subtract[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:1370 subtract[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1371 subtract[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:1372 subtract[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1373 subtract[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:1374 subtract[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1375 subtract[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:1376 subtract[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1377 subtract[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow off
code auto:1378 subtract[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1379 subtract[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -32768;
endcode
compile error

$overflow on
code auto:1380 subtract[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1381 subtract[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32768;
endcode
compile error

$overflow off
code auto:1382 subtract[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1383 subtract[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -32767;
endcode
compile error

$overflow on
code auto:1384 subtract[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1385 subtract[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32767;
endcode
compile error

$overflow off
code auto:1386 subtract[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 257

code auto:1387 subtract[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -129;
endcode
varvalue r 257

$overflow on
code auto:1388 subtract[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 257

code auto:1389 subtract[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -129;
endcode
varvalue r 257

$overflow off
code auto:1390 subtract[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1391 subtract[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:1392 subtract[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:1393 subtract[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow off
code auto:1394 subtract[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1395 subtract[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:1396 subtract[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1397 subtract[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:1398 subtract[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1399 subtract[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:1400 subtract[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1401 subtract[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:1402 subtract[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1403 subtract[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:1404 subtract[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1405 subtract[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:1406 subtract[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1407 subtract[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:1408 subtract[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1409 subtract[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:1410 subtract[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1411 subtract[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:1412 subtract[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1413 subtract[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:1414 subtract[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1415 subtract[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow on
code auto:1416 subtract[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1417 subtract[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow off
code auto:1418 subtract[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1419 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -32768;
endcode
compile error

$overflow on
code auto:1420 subtract[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1421 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32768;
endcode
compile error

$overflow off
code auto:1422 subtract[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:1423 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -32767;
endcode
compile error

$overflow on
code auto:1424 subtract[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1425 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32767;
endcode
compile error

$overflow off
code auto:1426 subtract[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1427 subtract[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -129;
endcode
compile error

$overflow on
code auto:1428 subtract[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1429 subtract[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -129;
endcode
compile error

$overflow off
code auto:1430 subtract[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1431 subtract[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:1432 subtract[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1433 subtract[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:1434 subtract[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1435 subtract[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:1436 subtract[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1437 subtract[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:1438 subtract[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1439 subtract[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:1440 subtract[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1441 subtract[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:1442 subtract[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1443 subtract[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:1444 subtract[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1445 subtract[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:1446 subtract[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1447 subtract[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:1448 subtract[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1449 subtract[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:1450 subtract[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1451 subtract[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:1452 subtract[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1453 subtract[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:1454 subtract[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1455 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:1456 subtract[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1457 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:1458 subtract[Integer] -32768[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1459 subtract[compile-time] -32768[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow on
code auto:1460 subtract[Integer] -32768[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1461 subtract[compile-time] -32768[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow off
code auto:1462 subtract[Integer] -32768[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1463 subtract[compile-time] -32768[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:1464 subtract[Integer] -32768[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1465 subtract[compile-time] -32768[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:1466 subtract[Integer] -32768[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1467 subtract[compile-time] -32768[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:1468 subtract[Integer] -32768[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1469 subtract[compile-time] -32768[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:1470 subtract[Integer] -32768[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1471 subtract[compile-time] -32768[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:1472 subtract[Integer] -32768[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1473 subtract[compile-time] -32768[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 128;
endcode
compile error

$overflow off
code auto:1474 subtract[Integer] -32768[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:1475 subtract[compile-time] -32768[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 255;
endcode
compile error

$overflow on
code auto:1476 subtract[Integer] -32768[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1477 subtract[compile-time] -32768[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 255;
endcode
compile error

$overflow off
code auto:1478 subtract[Integer] -32767[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1479 subtract[compile-time] -32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow on
code auto:1480 subtract[Integer] -32767[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1481 subtract[compile-time] -32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow off
code auto:1482 subtract[Integer] -32767[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1483 subtract[compile-time] -32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow on
code auto:1484 subtract[Integer] -32767[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1485 subtract[compile-time] -32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow off
code auto:1486 subtract[Integer] -32767[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32642

code auto:1487 subtract[compile-time] -32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:1488 subtract[Integer] -32767[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1489 subtract[compile-time] -32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:1490 subtract[Integer] -32767[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1491 subtract[compile-time] -32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:1492 subtract[Integer] -32767[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1493 subtract[compile-time] -32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 128;
endcode
compile error

$overflow off
code auto:1494 subtract[Integer] -32767[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32514

code auto:1495 subtract[compile-time] -32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 255;
endcode
compile error

$overflow on
code auto:1496 subtract[Integer] -32767[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1497 subtract[compile-time] -32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 255;
endcode
compile error

$overflow off
code auto:1498 subtract[Integer] -129[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1499 subtract[compile-time] -129[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow on
code auto:1500 subtract[Integer] -129[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1501 subtract[compile-time] -129[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow off
code auto:1502 subtract[Integer] -129[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:1503 subtract[compile-time] -129[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow on
code auto:1504 subtract[Integer] -129[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:1505 subtract[compile-time] -129[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow off
code auto:1506 subtract[Integer] -129[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1507 subtract[compile-time] -129[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow on
code auto:1508 subtract[Integer] -129[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1509 subtract[compile-time] -129[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow off
code auto:1510 subtract[Integer] -129[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -257

code auto:1511 subtract[compile-time] -129[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 128;
endcode
varvalue r -257

$overflow on
code auto:1512 subtract[Integer] -129[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -257

code auto:1513 subtract[compile-time] -129[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 128;
endcode
varvalue r -257

$overflow off
code auto:1514 subtract[Integer] -129[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -384

code auto:1515 subtract[compile-time] -129[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 255;
endcode
varvalue r -384

$overflow on
code auto:1516 subtract[Integer] -129[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -384

code auto:1517 subtract[compile-time] -129[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 255;
endcode
varvalue r -384

$overflow off
code auto:1518 subtract[Integer] -128[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1519 subtract[compile-time] -128[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:1520 subtract[Integer] -128[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1521 subtract[compile-time] -128[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:1522 subtract[Integer] -128[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1523 subtract[compile-time] -128[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:1524 subtract[Integer] -128[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1525 subtract[compile-time] -128[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:1526 subtract[Integer] -128[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1527 subtract[compile-time] -128[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:1528 subtract[Integer] -128[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1529 subtract[compile-time] -128[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:1530 subtract[Integer] -128[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1531 subtract[compile-time] -128[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow on
code auto:1532 subtract[Integer] -128[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1533 subtract[compile-time] -128[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow off
code auto:1534 subtract[Integer] -128[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:1535 subtract[compile-time] -128[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow on
code auto:1536 subtract[Integer] -128[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:1537 subtract[compile-time] -128[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow off
code auto:1538 subtract[Integer] -1[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1539 subtract[compile-time] -1[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:1540 subtract[Integer] -1[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1541 subtract[compile-time] -1[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:1542 subtract[Integer] -1[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:1543 subtract[compile-time] -1[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:1544 subtract[Integer] -1[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:1545 subtract[compile-time] -1[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:1546 subtract[Integer] -1[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1547 subtract[compile-time] -1[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:1548 subtract[Integer] -1[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1549 subtract[compile-time] -1[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:1550 subtract[Integer] -1[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1551 subtract[compile-time] -1[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow on
code auto:1552 subtract[Integer] -1[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1553 subtract[compile-time] -1[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow off
code auto:1554 subtract[Integer] -1[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1555 subtract[compile-time] -1[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow on
code auto:1556 subtract[Integer] -1[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1557 subtract[compile-time] -1[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow off
code auto:1558 subtract[Integer] 0[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1559 subtract[compile-time] 0[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:1560 subtract[Integer] 0[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1561 subtract[compile-time] 0[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:1562 subtract[Integer] 0[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1563 subtract[compile-time] 0[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:1564 subtract[Integer] 0[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1565 subtract[compile-time] 0[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:1566 subtract[Integer] 0[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1567 subtract[compile-time] 0[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:1568 subtract[Integer] 0[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1569 subtract[compile-time] 0[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:1570 subtract[Integer] 0[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1571 subtract[compile-time] 0[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:1572 subtract[Integer] 0[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1573 subtract[compile-time] 0[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:1574 subtract[Integer] 0[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1575 subtract[compile-time] 0[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:1576 subtract[Integer] 0[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1577 subtract[compile-time] 0[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:1578 subtract[Integer] 1[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1579 subtract[compile-time] 1[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:1580 subtract[Integer] 1[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1581 subtract[compile-time] 1[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:1582 subtract[Integer] 1[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1583 subtract[compile-time] 1[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:1584 subtract[Integer] 1[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1585 subtract[compile-time] 1[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:1586 subtract[Integer] 1[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:1587 subtract[compile-time] 1[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:1588 subtract[Integer] 1[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:1589 subtract[compile-time] 1[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:1590 subtract[Integer] 1[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1591 subtract[compile-time] 1[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:1592 subtract[Integer] 1[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1593 subtract[compile-time] 1[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:1594 subtract[Integer] 1[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:1595 subtract[compile-time] 1[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow on
code auto:1596 subtract[Integer] 1[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:1597 subtract[compile-time] 1[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow off
code auto:1598 subtract[Integer] 127[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1599 subtract[compile-time] 127[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:1600 subtract[Integer] 127[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1601 subtract[compile-time] 127[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:1602 subtract[Integer] 127[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1603 subtract[compile-time] 127[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:1604 subtract[Integer] 127[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:1605 subtract[compile-time] 127[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:1606 subtract[Integer] 127[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1607 subtract[compile-time] 127[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:1608 subtract[Integer] 127[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1609 subtract[compile-time] 127[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:1610 subtract[Integer] 127[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1611 subtract[compile-time] 127[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:1612 subtract[Integer] 127[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1613 subtract[compile-time] 127[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:1614 subtract[Integer] 127[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1615 subtract[compile-time] 127[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:1616 subtract[Integer] 127[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1617 subtract[compile-time] 127[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:1618 subtract[Integer] 128[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1619 subtract[compile-time] 128[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:1620 subtract[Integer] 128[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1621 subtract[compile-time] 128[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:1622 subtract[Integer] 128[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1623 subtract[compile-time] 128[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:1624 subtract[Integer] 128[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1625 subtract[compile-time] 128[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:1626 subtract[Integer] 128[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1627 subtract[compile-time] 128[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:1628 subtract[Integer] 128[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1629 subtract[compile-time] 128[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:1630 subtract[Integer] 128[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1631 subtract[compile-time] 128[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:1632 subtract[Integer] 128[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1633 subtract[compile-time] 128[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:1634 subtract[Integer] 128[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1635 subtract[compile-time] 128[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow on
code auto:1636 subtract[Integer] 128[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1637 subtract[compile-time] 128[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow off
code auto:1638 subtract[Integer] 32767[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1639 subtract[compile-time] 32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:1640 subtract[Integer] 32767[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1641 subtract[compile-time] 32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:1642 subtract[Integer] 32767[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1643 subtract[compile-time] 32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:1644 subtract[Integer] 32767[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:1645 subtract[compile-time] 32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:1646 subtract[Integer] 32767[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1647 subtract[compile-time] 32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:1648 subtract[Integer] 32767[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1649 subtract[compile-time] 32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:1650 subtract[Integer] 32767[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1651 subtract[compile-time] 32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:1652 subtract[Integer] 32767[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1653 subtract[compile-time] 32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:1654 subtract[Integer] 32767[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:1655 subtract[compile-time] 32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:1656 subtract[Integer] 32767[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:1657 subtract[compile-time] 32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:1658 subtract[Integer] -32768[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1659 subtract[compile-time] -32768[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow on
code auto:1660 subtract[Integer] -32768[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1661 subtract[compile-time] -32768[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow off
code auto:1662 subtract[Integer] -32768[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:1663 subtract[compile-time] -32768[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 255;
endcode
compile error

$overflow on
code auto:1664 subtract[Integer] -32768[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1665 subtract[compile-time] -32768[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 255;
endcode
compile error

$overflow off
code auto:1666 subtract[Integer] -32768[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1667 subtract[compile-time] -32768[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:1668 subtract[Integer] -32768[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1669 subtract[compile-time] -32768[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:1670 subtract[Integer] -32768[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1671 subtract[compile-time] -32768[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 32768;
endcode
compile error

$overflow on
code auto:1672 subtract[Integer] -32768[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1673 subtract[compile-time] -32768[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 32768;
endcode
compile error

$overflow off
code auto:1674 subtract[Integer] -32768[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1675 subtract[compile-time] -32768[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 - 65535;
endcode
compile error

$overflow on
code auto:1676 subtract[Integer] -32768[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1677 subtract[compile-time] -32768[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 65535;
endcode
compile error

$overflow off
code auto:1678 subtract[Integer] -32767[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1679 subtract[compile-time] -32767[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow on
code auto:1680 subtract[Integer] -32767[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1681 subtract[compile-time] -32767[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow off
code auto:1682 subtract[Integer] -32767[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32514

code auto:1683 subtract[compile-time] -32767[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 255;
endcode
compile error

$overflow on
code auto:1684 subtract[Integer] -32767[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1685 subtract[compile-time] -32767[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 255;
endcode
compile error

$overflow off
code auto:1686 subtract[Integer] -32767[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:1687 subtract[compile-time] -32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:1688 subtract[Integer] -32767[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1689 subtract[compile-time] -32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:1690 subtract[Integer] -32767[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1691 subtract[compile-time] -32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 32768;
endcode
compile error

$overflow on
code auto:1692 subtract[Integer] -32767[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1693 subtract[compile-time] -32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 32768;
endcode
compile error

$overflow off
code auto:1694 subtract[Integer] -32767[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1695 subtract[compile-time] -32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 - 65535;
endcode
compile error

$overflow on
code auto:1696 subtract[Integer] -32767[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1697 subtract[compile-time] -32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 65535;
endcode
compile error

$overflow off
code auto:1698 subtract[Integer] -129[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1699 subtract[compile-time] -129[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow on
code auto:1700 subtract[Integer] -129[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:1701 subtract[compile-time] -129[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow off
code auto:1702 subtract[Integer] -129[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -384

code auto:1703 subtract[compile-time] -129[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 255;
endcode
varvalue r -384

$overflow on
code auto:1704 subtract[Integer] -129[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -384

code auto:1705 subtract[compile-time] -129[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 255;
endcode
varvalue r -384

$overflow off
code auto:1706 subtract[Integer] -129[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1707 subtract[compile-time] -129[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:1708 subtract[Integer] -129[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1709 subtract[compile-time] -129[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:1710 subtract[Integer] -129[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:1711 subtract[compile-time] -129[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 32768;
endcode
compile error

$overflow on
code auto:1712 subtract[Integer] -129[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1713 subtract[compile-time] -129[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 32768;
endcode
compile error

$overflow off
code auto:1714 subtract[Integer] -129[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1715 subtract[compile-time] -129[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 - 65535;
endcode
compile error

$overflow on
code auto:1716 subtract[Integer] -129[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1717 subtract[compile-time] -129[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 65535;
endcode
compile error

$overflow off
code auto:1718 subtract[Integer] -128[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1719 subtract[compile-time] -128[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:1720 subtract[Integer] -128[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1721 subtract[compile-time] -128[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:1722 subtract[Integer] -128[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:1723 subtract[compile-time] -128[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow on
code auto:1724 subtract[Integer] -128[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -383

code auto:1725 subtract[compile-time] -128[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 255;
endcode
varvalue r -383

$overflow off
code auto:1726 subtract[Integer] -128[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:1727 subtract[compile-time] -128[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:1728 subtract[Integer] -128[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1729 subtract[compile-time] -128[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:1730 subtract[Integer] -128[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:1731 subtract[compile-time] -128[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 32768;
endcode
compile error

$overflow on
code auto:1732 subtract[Integer] -128[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1733 subtract[compile-time] -128[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32768;
endcode
compile error

$overflow off
code auto:1734 subtract[Integer] -128[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1735 subtract[compile-time] -128[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 65535;
endcode
compile error

$overflow on
code auto:1736 subtract[Integer] -128[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1737 subtract[compile-time] -128[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 65535;
endcode
compile error

$overflow off
code auto:1738 subtract[Integer] -1[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1739 subtract[compile-time] -1[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:1740 subtract[Integer] -1[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1741 subtract[compile-time] -1[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:1742 subtract[Integer] -1[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1743 subtract[compile-time] -1[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow on
code auto:1744 subtract[Integer] -1[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:1745 subtract[compile-time] -1[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 255;
endcode
varvalue r -256

$overflow off
code auto:1746 subtract[Integer] -1[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1747 subtract[compile-time] -1[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow on
code auto:1748 subtract[Integer] -1[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1749 subtract[compile-time] -1[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow off
code auto:1750 subtract[Integer] -1[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1751 subtract[compile-time] -1[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 32768;
endcode
compile error

$overflow on
code auto:1752 subtract[Integer] -1[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1753 subtract[compile-time] -1[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32768;
endcode
compile error

$overflow off
code auto:1754 subtract[Integer] -1[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1755 subtract[compile-time] -1[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 65535;
endcode
compile error

$overflow on
code auto:1756 subtract[Integer] -1[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1757 subtract[compile-time] -1[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 65535;
endcode
compile error

$overflow off
code auto:1758 subtract[Integer] 0[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1759 subtract[compile-time] 0[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:1760 subtract[Integer] 0[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1761 subtract[compile-time] 0[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:1762 subtract[Integer] 0[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1763 subtract[compile-time] 0[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:1764 subtract[Integer] 0[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:1765 subtract[compile-time] 0[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:1766 subtract[Integer] 0[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1767 subtract[compile-time] 0[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:1768 subtract[Integer] 0[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1769 subtract[compile-time] 0[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:1770 subtract[Integer] 0[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1771 subtract[compile-time] 0[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow on
code auto:1772 subtract[Integer] 0[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1773 subtract[compile-time] 0[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow off
code auto:1774 subtract[Integer] 0[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1775 subtract[compile-time] 0[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:1776 subtract[Integer] 0[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1777 subtract[compile-time] 0[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:1778 subtract[Integer] 1[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1779 subtract[compile-time] 1[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:1780 subtract[Integer] 1[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:1781 subtract[compile-time] 1[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:1782 subtract[Integer] 1[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:1783 subtract[compile-time] 1[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow on
code auto:1784 subtract[Integer] 1[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -254

code auto:1785 subtract[compile-time] 1[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow off
code auto:1786 subtract[Integer] 1[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1787 subtract[compile-time] 1[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:1788 subtract[Integer] 1[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:1789 subtract[compile-time] 1[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow off
code auto:1790 subtract[Integer] 1[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1791 subtract[compile-time] 1[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32768;
endcode
varvalue r -32767

$overflow on
code auto:1792 subtract[Integer] 1[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:1793 subtract[compile-time] 1[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32768;
endcode
varvalue r -32767

$overflow off
code auto:1794 subtract[Integer] 1[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:1795 subtract[compile-time] 1[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:1796 subtract[Integer] 1[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1797 subtract[compile-time] 1[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:1798 subtract[Integer] 127[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1799 subtract[compile-time] 127[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:1800 subtract[Integer] 127[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:1801 subtract[compile-time] 127[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:1802 subtract[Integer] 127[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1803 subtract[compile-time] 127[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:1804 subtract[Integer] 127[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:1805 subtract[compile-time] 127[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:1806 subtract[Integer] 127[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1807 subtract[compile-time] 127[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:1808 subtract[Integer] 127[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1809 subtract[compile-time] 127[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow off
code auto:1810 subtract[Integer] 127[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1811 subtract[compile-time] 127[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32768;
endcode
varvalue r -32641

$overflow on
code auto:1812 subtract[Integer] 127[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:1813 subtract[compile-time] 127[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32768;
endcode
varvalue r -32641

$overflow off
code auto:1814 subtract[Integer] 127[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1815 subtract[compile-time] 127[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:1816 subtract[Integer] 127[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1817 subtract[compile-time] 127[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:1818 subtract[Integer] 128[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1819 subtract[compile-time] 128[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:1820 subtract[Integer] 128[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:1821 subtract[compile-time] 128[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:1822 subtract[Integer] 128[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1823 subtract[compile-time] 128[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow on
code auto:1824 subtract[Integer] 128[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:1825 subtract[compile-time] 128[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow off
code auto:1826 subtract[Integer] 128[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1827 subtract[compile-time] 128[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow on
code auto:1828 subtract[Integer] 128[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:1829 subtract[compile-time] 128[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow off
code auto:1830 subtract[Integer] 128[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1831 subtract[compile-time] 128[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 32768;
endcode
varvalue r -32640

$overflow on
code auto:1832 subtract[Integer] 128[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:1833 subtract[compile-time] 128[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 32768;
endcode
varvalue r -32640

$overflow off
code auto:1834 subtract[Integer] 128[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:1835 subtract[compile-time] 128[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 65535;
endcode
compile error

$overflow on
code auto:1836 subtract[Integer] 128[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:1837 subtract[compile-time] 128[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 65535;
endcode
compile error

$overflow off
code auto:1838 subtract[Integer] 32767[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1839 subtract[compile-time] 32767[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:1840 subtract[Integer] 32767[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:1841 subtract[compile-time] 32767[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:1842 subtract[Integer] 32767[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:1843 subtract[compile-time] 32767[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:1844 subtract[Integer] 32767[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:1845 subtract[compile-time] 32767[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:1846 subtract[Integer] 32767[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1847 subtract[compile-time] 32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:1848 subtract[Integer] 32767[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:1849 subtract[compile-time] 32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:1850 subtract[Integer] 32767[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1851 subtract[compile-time] 32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow on
code auto:1852 subtract[Integer] 32767[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:1853 subtract[compile-time] 32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow off
code auto:1854 subtract[Integer] 32767[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1855 subtract[compile-time] 32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow on
code auto:1856 subtract[Integer] 32767[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:1857 subtract[compile-time] 32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow off
code auto:1858 subtract[Pointer] -32768[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:1859 subtract[compile-time] -32768[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 - 0;
endcode
compile error

$overflow on
code auto:1860 subtract[Pointer] -32768[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1861 subtract[compile-time] -32768[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 - 0;
endcode
compile error

$overflow off
code auto:1862 subtract[Pointer] -32768[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:1863 subtract[compile-time] -32768[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 - 255;
endcode
compile error

$overflow on
code auto:1864 subtract[Pointer] -32768[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1865 subtract[compile-time] -32768[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 - 255;
endcode
compile error

$overflow off
code auto:1866 subtract[Pointer] -32768[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:1867 subtract[compile-time] -32768[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:1868 subtract[Pointer] -32768[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1869 subtract[compile-time] -32768[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:1870 subtract[Pointer] -32768[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:1871 subtract[compile-time] -32768[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 - 32768;
endcode
compile error

$overflow on
code auto:1872 subtract[Pointer] -32768[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1873 subtract[compile-time] -32768[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 - 32768;
endcode
compile error

$overflow off
code auto:1874 subtract[Pointer] -32768[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:1875 subtract[compile-time] -32768[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 - 65535;
endcode
compile error

$overflow on
code auto:1876 subtract[Pointer] -32768[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1877 subtract[compile-time] -32768[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 - 65535;
endcode
compile error

$overflow off
code auto:1878 subtract[Pointer] -32767[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:1879 subtract[compile-time] -32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 - 0;
endcode
compile error

$overflow on
code auto:1880 subtract[Pointer] -32767[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1881 subtract[compile-time] -32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 - 0;
endcode
compile error

$overflow off
code auto:1882 subtract[Pointer] -32767[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32514

code auto:1883 subtract[compile-time] -32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 - 255;
endcode
compile error

$overflow on
code auto:1884 subtract[Pointer] -32767[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1885 subtract[compile-time] -32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 - 255;
endcode
compile error

$overflow off
code auto:1886 subtract[Pointer] -32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 2

code auto:1887 subtract[compile-time] -32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:1888 subtract[Pointer] -32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1889 subtract[compile-time] -32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:1890 subtract[Pointer] -32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:1891 subtract[compile-time] -32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 - 32768;
endcode
compile error

$overflow on
code auto:1892 subtract[Pointer] -32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1893 subtract[compile-time] -32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 - 32768;
endcode
compile error

$overflow off
code auto:1894 subtract[Pointer] -32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32770

code auto:1895 subtract[compile-time] -32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 - 65535;
endcode
compile error

$overflow on
code auto:1896 subtract[Pointer] -32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1897 subtract[compile-time] -32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 - 65535;
endcode
compile error

$overflow off
code auto:1898 subtract[Pointer] -129[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65407

code auto:1899 subtract[compile-time] -129[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 - 0;
endcode
compile error

$overflow on
code auto:1900 subtract[Pointer] -129[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1901 subtract[compile-time] -129[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 - 0;
endcode
compile error

$overflow off
code auto:1902 subtract[Pointer] -129[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65152

code auto:1903 subtract[compile-time] -129[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 - 255;
endcode
compile error

$overflow on
code auto:1904 subtract[Pointer] -129[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1905 subtract[compile-time] -129[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 - 255;
endcode
compile error

$overflow off
code auto:1906 subtract[Pointer] -129[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:1907 subtract[compile-time] -129[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:1908 subtract[Pointer] -129[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1909 subtract[compile-time] -129[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:1910 subtract[Pointer] -129[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32639

code auto:1911 subtract[compile-time] -129[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 - 32768;
endcode
compile error

$overflow on
code auto:1912 subtract[Pointer] -129[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1913 subtract[compile-time] -129[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 - 32768;
endcode
compile error

$overflow off
code auto:1914 subtract[Pointer] -129[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:1915 subtract[compile-time] -129[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 - 65535;
endcode
compile error

$overflow on
code auto:1916 subtract[Pointer] -129[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1917 subtract[compile-time] -129[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 - 65535;
endcode
compile error

$overflow off
code auto:1918 subtract[Pointer] -128[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:1919 subtract[compile-time] -128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:1920 subtract[Pointer] -128[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1921 subtract[compile-time] -128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:1922 subtract[Pointer] -128[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65153

code auto:1923 subtract[compile-time] -128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 255;
endcode
compile error

$overflow on
code auto:1924 subtract[Pointer] -128[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1925 subtract[compile-time] -128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 255;
endcode
compile error

$overflow off
code auto:1926 subtract[Pointer] -128[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:1927 subtract[compile-time] -128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:1928 subtract[Pointer] -128[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1929 subtract[compile-time] -128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:1930 subtract[Pointer] -128[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:1931 subtract[compile-time] -128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 32768;
endcode
compile error

$overflow on
code auto:1932 subtract[Pointer] -128[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1933 subtract[compile-time] -128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 32768;
endcode
compile error

$overflow off
code auto:1934 subtract[Pointer] -128[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:1935 subtract[compile-time] -128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 - 65535;
endcode
compile error

$overflow on
code auto:1936 subtract[Pointer] -128[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1937 subtract[compile-time] -128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 - 65535;
endcode
compile error

$overflow off
code auto:1938 subtract[Pointer] -1[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:1939 subtract[compile-time] -1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:1940 subtract[Pointer] -1[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1941 subtract[compile-time] -1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:1942 subtract[Pointer] -1[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:1943 subtract[compile-time] -1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 255;
endcode
compile error

$overflow on
code auto:1944 subtract[Pointer] -1[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1945 subtract[compile-time] -1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 255;
endcode
compile error

$overflow off
code auto:1946 subtract[Pointer] -1[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:1947 subtract[compile-time] -1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 32767;
endcode
compile error

$overflow on
code auto:1948 subtract[Pointer] -1[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1949 subtract[compile-time] -1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 32767;
endcode
compile error

$overflow off
code auto:1950 subtract[Pointer] -1[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:1951 subtract[compile-time] -1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 32768;
endcode
compile error

$overflow on
code auto:1952 subtract[Pointer] -1[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1953 subtract[compile-time] -1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 32768;
endcode
compile error

$overflow off
code auto:1954 subtract[Pointer] -1[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:1955 subtract[compile-time] -1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 - 65535;
endcode
compile error

$overflow on
code auto:1956 subtract[Pointer] -1[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1957 subtract[compile-time] -1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 - 65535;
endcode
compile error

$overflow off
code auto:1958 subtract[Pointer] 0[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:1959 subtract[compile-time] 0[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:1960 subtract[Pointer] 0[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:1961 subtract[compile-time] 0[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:1962 subtract[Pointer] 0[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:1963 subtract[compile-time] 0[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:1964 subtract[Pointer] 0[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1965 subtract[compile-time] 0[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:1966 subtract[Pointer] 0[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:1967 subtract[compile-time] 0[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:1968 subtract[Pointer] 0[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1969 subtract[compile-time] 0[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:1970 subtract[Pointer] 0[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:1971 subtract[compile-time] 0[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:1972 subtract[Pointer] 0[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1973 subtract[compile-time] 0[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:1974 subtract[Pointer] 0[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:1975 subtract[compile-time] 0[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:1976 subtract[Pointer] 0[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1977 subtract[compile-time] 0[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:1978 subtract[Pointer] 1[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:1979 subtract[compile-time] 1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:1980 subtract[Pointer] 1[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:1981 subtract[compile-time] 1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:1982 subtract[Pointer] 1[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65282

code auto:1983 subtract[compile-time] 1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:1984 subtract[Pointer] 1[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1985 subtract[compile-time] 1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:1986 subtract[Pointer] 1[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32770

code auto:1987 subtract[compile-time] 1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:1988 subtract[Pointer] 1[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1989 subtract[compile-time] 1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:1990 subtract[Pointer] 1[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:1991 subtract[compile-time] 1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow on
code auto:1992 subtract[Pointer] 1[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1993 subtract[compile-time] 1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow off
code auto:1994 subtract[Pointer] 1[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 2

code auto:1995 subtract[compile-time] 1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:1996 subtract[Pointer] 1[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:1997 subtract[compile-time] 1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:1998 subtract[Pointer] 127[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:1999 subtract[compile-time] 127[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2000 subtract[Pointer] 127[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:2001 subtract[compile-time] 127[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2002 subtract[Pointer] 127[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:2003 subtract[compile-time] 127[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:2004 subtract[Pointer] 127[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2005 subtract[compile-time] 127[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:2006 subtract[Pointer] 127[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:2007 subtract[compile-time] 127[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:2008 subtract[Pointer] 127[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2009 subtract[compile-time] 127[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:2010 subtract[Pointer] 127[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:2011 subtract[compile-time] 127[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow on
code auto:2012 subtract[Pointer] 127[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2013 subtract[compile-time] 127[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow off
code auto:2014 subtract[Pointer] 127[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2015 subtract[compile-time] 127[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:2016 subtract[Pointer] 127[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2017 subtract[compile-time] 127[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:2018 subtract[Pointer] 128[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2019 subtract[compile-time] 128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2020 subtract[Pointer] 128[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2021 subtract[compile-time] 128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2022 subtract[Pointer] 128[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:2023 subtract[compile-time] 128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:2024 subtract[Pointer] 128[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2025 subtract[compile-time] 128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 255;
endcode
compile error

$overflow off
code auto:2026 subtract[Pointer] 128[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32897

code auto:2027 subtract[compile-time] 128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:2028 subtract[Pointer] 128[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2029 subtract[compile-time] 128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:2030 subtract[Pointer] 128[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:2031 subtract[compile-time] 128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 32768;
endcode
compile error

$overflow on
code auto:2032 subtract[Pointer] 128[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2033 subtract[compile-time] 128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 32768;
endcode
compile error

$overflow off
code auto:2034 subtract[Pointer] 128[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 129

code auto:2035 subtract[compile-time] 128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 65535;
endcode
compile error

$overflow on
code auto:2036 subtract[Pointer] 128[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2037 subtract[compile-time] 128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 65535;
endcode
compile error

$overflow off
code auto:2038 subtract[Pointer] 32767[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:2039 subtract[compile-time] 32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:2040 subtract[Pointer] 32767[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:2041 subtract[compile-time] 32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:2042 subtract[Pointer] 32767[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:2043 subtract[compile-time] 32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:2044 subtract[Pointer] 32767[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:2045 subtract[compile-time] 32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:2046 subtract[Pointer] 32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2047 subtract[compile-time] 32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:2048 subtract[Pointer] 32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2049 subtract[compile-time] 32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:2050 subtract[Pointer] 32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:2051 subtract[compile-time] 32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:2052 subtract[Pointer] 32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2053 subtract[compile-time] 32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:2054 subtract[Pointer] 32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:2055 subtract[compile-time] 32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:2056 subtract[Pointer] 32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2057 subtract[compile-time] 32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:2058 subtract[Integer] 0[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2059 subtract[compile-time] 0[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:2060 subtract[Integer] 0[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2061 subtract[compile-time] 0[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:2062 subtract[Integer] 0[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2063 subtract[compile-time] 0[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:2064 subtract[Integer] 0[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2065 subtract[compile-time] 0[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:2066 subtract[Integer] 0[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2067 subtract[compile-time] 0[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:2068 subtract[Integer] 0[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2069 subtract[compile-time] 0[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:2070 subtract[Integer] 0[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2071 subtract[compile-time] 0[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2072 subtract[Integer] 0[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2073 subtract[compile-time] 0[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2074 subtract[Integer] 0[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2075 subtract[compile-time] 0[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:2076 subtract[Integer] 0[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2077 subtract[compile-time] 0[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:2078 subtract[Integer] 0[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2079 subtract[compile-time] 0[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:2080 subtract[Integer] 0[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2081 subtract[compile-time] 0[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:2082 subtract[Integer] 1[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2083 subtract[compile-time] 1[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:2084 subtract[Integer] 1[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2085 subtract[compile-time] 1[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:2086 subtract[Integer] 1[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2087 subtract[compile-time] 1[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow on
code auto:2088 subtract[Integer] 1[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2089 subtract[compile-time] 1[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow off
code auto:2090 subtract[Integer] 1[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:2091 subtract[compile-time] 1[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:2092 subtract[Integer] 1[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:2093 subtract[compile-time] 1[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:2094 subtract[Integer] 1[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2095 subtract[compile-time] 1[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:2096 subtract[Integer] 1[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2097 subtract[compile-time] 1[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:2098 subtract[Integer] 1[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2099 subtract[compile-time] 1[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:2100 subtract[Integer] 1[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2101 subtract[compile-time] 1[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:2102 subtract[Integer] 1[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:2103 subtract[compile-time] 1[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:2104 subtract[Integer] 1[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:2105 subtract[compile-time] 1[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:2106 subtract[Integer] 127[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2107 subtract[compile-time] 127[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:2108 subtract[Integer] 127[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2109 subtract[compile-time] 127[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:2110 subtract[Integer] 127[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2111 subtract[compile-time] 127[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow on
code auto:2112 subtract[Integer] 127[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2113 subtract[compile-time] 127[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow off
code auto:2114 subtract[Integer] 127[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2115 subtract[compile-time] 127[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:2116 subtract[Integer] 127[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2117 subtract[compile-time] 127[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:2118 subtract[Integer] 127[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2119 subtract[compile-time] 127[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2120 subtract[Integer] 127[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2121 subtract[compile-time] 127[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2122 subtract[Integer] 127[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:2123 subtract[compile-time] 127[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:2124 subtract[Integer] 127[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:2125 subtract[compile-time] 127[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:2126 subtract[Integer] 127[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2127 subtract[compile-time] 127[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:2128 subtract[Integer] 127[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2129 subtract[compile-time] 127[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:2130 subtract[Integer] 128[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2131 subtract[compile-time] 128[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:2132 subtract[Integer] 128[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2133 subtract[compile-time] 128[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow off
code auto:2134 subtract[Integer] 128[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2135 subtract[compile-time] 128[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -127;
endcode
varvalue r 255

$overflow on
code auto:2136 subtract[Integer] 128[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2137 subtract[compile-time] 128[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -127;
endcode
varvalue r 255

$overflow off
code auto:2138 subtract[Integer] 128[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2139 subtract[compile-time] 128[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:2140 subtract[Integer] 128[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2141 subtract[compile-time] 128[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:2142 subtract[Integer] 128[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2143 subtract[compile-time] 128[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2144 subtract[Integer] 128[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2145 subtract[compile-time] 128[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2146 subtract[Integer] 128[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2147 subtract[compile-time] 128[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:2148 subtract[Integer] 128[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2149 subtract[compile-time] 128[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:2150 subtract[Integer] 128[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2151 subtract[compile-time] 128[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:2152 subtract[Integer] 128[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2153 subtract[compile-time] 128[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:2154 subtract[Integer] 255[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2155 subtract[compile-time] 255[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:2156 subtract[Integer] 255[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2157 subtract[compile-time] 255[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:2158 subtract[Integer] 255[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 382

code auto:2159 subtract[compile-time] 255[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow on
code auto:2160 subtract[Integer] 255[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 382

code auto:2161 subtract[compile-time] 255[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow off
code auto:2162 subtract[Integer] 255[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2163 subtract[compile-time] 255[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:2164 subtract[Integer] 255[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2165 subtract[compile-time] 255[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:2166 subtract[Integer] 255[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2167 subtract[compile-time] 255[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2168 subtract[Integer] 255[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2169 subtract[compile-time] 255[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2170 subtract[Integer] 255[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2171 subtract[compile-time] 255[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:2172 subtract[Integer] 255[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2173 subtract[compile-time] 255[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:2174 subtract[Integer] 255[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2175 subtract[compile-time] 255[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:2176 subtract[Integer] 255[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2177 subtract[compile-time] 255[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:2178 subtract[Integer] 0[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2179 subtract[compile-time] 0[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:2180 subtract[Integer] 0[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2181 subtract[compile-time] 0[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:2182 subtract[Integer] 0[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2183 subtract[compile-time] 0[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:2184 subtract[Integer] 0[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2185 subtract[compile-time] 0[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:2186 subtract[Integer] 0[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2187 subtract[compile-time] 0[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:2188 subtract[Integer] 0[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2189 subtract[compile-time] 0[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:2190 subtract[Integer] 0[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2191 subtract[compile-time] 0[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:2192 subtract[Integer] 0[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2193 subtract[compile-time] 0[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:2194 subtract[Integer] 0[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2195 subtract[compile-time] 0[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:2196 subtract[Integer] 0[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2197 subtract[compile-time] 0[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:2198 subtract[Integer] 0[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2199 subtract[compile-time] 0[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2200 subtract[Integer] 0[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2201 subtract[compile-time] 0[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2202 subtract[Integer] 0[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2203 subtract[compile-time] 0[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:2204 subtract[Integer] 0[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2205 subtract[compile-time] 0[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:2206 subtract[Integer] 0[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2207 subtract[compile-time] 0[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:2208 subtract[Integer] 0[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2209 subtract[compile-time] 0[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:2210 subtract[Integer] 0[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:2211 subtract[compile-time] 0[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:2212 subtract[Integer] 0[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:2213 subtract[compile-time] 0[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:2214 subtract[Integer] 0[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2215 subtract[compile-time] 0[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:2216 subtract[Integer] 0[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2217 subtract[compile-time] 0[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:2218 subtract[Integer] 1[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2219 subtract[compile-time] 1[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:2220 subtract[Integer] 1[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2221 subtract[compile-time] 1[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow off
code auto:2222 subtract[Integer] 1[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2223 subtract[compile-time] 1[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:2224 subtract[Integer] 1[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2225 subtract[compile-time] 1[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow off
code auto:2226 subtract[Integer] 1[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:2227 subtract[compile-time] 1[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:2228 subtract[Integer] 1[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:2229 subtract[compile-time] 1[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow off
code auto:2230 subtract[Integer] 1[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2231 subtract[compile-time] 1[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:2232 subtract[Integer] 1[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2233 subtract[compile-time] 1[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:2234 subtract[Integer] 1[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:2235 subtract[compile-time] 1[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:2236 subtract[Integer] 1[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:2237 subtract[compile-time] 1[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:2238 subtract[Integer] 1[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2239 subtract[compile-time] 1[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:2240 subtract[Integer] 1[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2241 subtract[compile-time] 1[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:2242 subtract[Integer] 1[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2243 subtract[compile-time] 1[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:2244 subtract[Integer] 1[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2245 subtract[compile-time] 1[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:2246 subtract[Integer] 1[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:2247 subtract[compile-time] 1[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:2248 subtract[Integer] 1[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:2249 subtract[compile-time] 1[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:2250 subtract[Integer] 1[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2251 subtract[compile-time] 1[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:2252 subtract[Integer] 1[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2253 subtract[compile-time] 1[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:2254 subtract[Integer] 1[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:2255 subtract[compile-time] 1[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:2256 subtract[Integer] 1[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:2257 subtract[compile-time] 1[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow off
code auto:2258 subtract[Integer] 127[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:2259 subtract[compile-time] 127[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:2260 subtract[Integer] 127[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2261 subtract[compile-time] 127[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow off
code auto:2262 subtract[Integer] 127[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32642

code auto:2263 subtract[compile-time] 127[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:2264 subtract[Integer] 127[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2265 subtract[compile-time] 127[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow off
code auto:2266 subtract[Integer] 127[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2267 subtract[compile-time] 127[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow on
code auto:2268 subtract[Integer] 127[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2269 subtract[compile-time] 127[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow off
code auto:2270 subtract[Integer] 127[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2271 subtract[compile-time] 127[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:2272 subtract[Integer] 127[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2273 subtract[compile-time] 127[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:2274 subtract[Integer] 127[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2275 subtract[compile-time] 127[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:2276 subtract[Integer] 127[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2277 subtract[compile-time] 127[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:2278 subtract[Integer] 127[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2279 subtract[compile-time] 127[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2280 subtract[Integer] 127[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2281 subtract[compile-time] 127[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2282 subtract[Integer] 127[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:2283 subtract[compile-time] 127[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:2284 subtract[Integer] 127[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:2285 subtract[compile-time] 127[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:2286 subtract[Integer] 127[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2287 subtract[compile-time] 127[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:2288 subtract[Integer] 127[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2289 subtract[compile-time] 127[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:2290 subtract[Integer] 127[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2291 subtract[compile-time] 127[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:2292 subtract[Integer] 127[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2293 subtract[compile-time] 127[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:2294 subtract[Integer] 127[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2295 subtract[compile-time] 127[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:2296 subtract[Integer] 127[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2297 subtract[compile-time] 127[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow off
code auto:2298 subtract[Integer] 128[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2299 subtract[compile-time] 128[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -32768;
endcode
compile error

$overflow on
code auto:2300 subtract[Integer] 128[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2301 subtract[compile-time] 128[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32768;
endcode
compile error

$overflow off
code auto:2302 subtract[Integer] 128[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:2303 subtract[compile-time] 128[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -32767;
endcode
compile error

$overflow on
code auto:2304 subtract[Integer] 128[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2305 subtract[compile-time] 128[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32767;
endcode
compile error

$overflow off
code auto:2306 subtract[Integer] 128[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 257

code auto:2307 subtract[compile-time] 128[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -129;
endcode
varvalue r 257

$overflow on
code auto:2308 subtract[Integer] 128[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 257

code auto:2309 subtract[compile-time] 128[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -129;
endcode
varvalue r 257

$overflow off
code auto:2310 subtract[Integer] 128[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2311 subtract[compile-time] 128[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:2312 subtract[Integer] 128[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2313 subtract[compile-time] 128[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow off
code auto:2314 subtract[Integer] 128[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2315 subtract[compile-time] 128[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:2316 subtract[Integer] 128[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2317 subtract[compile-time] 128[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:2318 subtract[Integer] 128[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2319 subtract[compile-time] 128[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2320 subtract[Integer] 128[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2321 subtract[compile-time] 128[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2322 subtract[Integer] 128[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2323 subtract[compile-time] 128[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:2324 subtract[Integer] 128[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2325 subtract[compile-time] 128[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:2326 subtract[Integer] 128[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2327 subtract[compile-time] 128[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:2328 subtract[Integer] 128[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2329 subtract[compile-time] 128[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:2330 subtract[Integer] 128[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2331 subtract[compile-time] 128[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:2332 subtract[Integer] 128[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2333 subtract[compile-time] 128[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:2334 subtract[Integer] 128[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:2335 subtract[compile-time] 128[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow on
code auto:2336 subtract[Integer] 128[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:2337 subtract[compile-time] 128[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow off
code auto:2338 subtract[Integer] 255[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32513

code auto:2339 subtract[compile-time] 255[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -32768;
endcode
compile error

$overflow on
code auto:2340 subtract[Integer] 255[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2341 subtract[compile-time] 255[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -32768;
endcode
compile error

$overflow off
code auto:2342 subtract[Integer] 255[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32514

code auto:2343 subtract[compile-time] 255[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -32767;
endcode
compile error

$overflow on
code auto:2344 subtract[Integer] 255[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2345 subtract[compile-time] 255[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -32767;
endcode
compile error

$overflow off
code auto:2346 subtract[Integer] 255[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 384

code auto:2347 subtract[compile-time] 255[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow on
code auto:2348 subtract[Integer] 255[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 384

code auto:2349 subtract[compile-time] 255[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow off
code auto:2350 subtract[Integer] 255[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2351 subtract[compile-time] 255[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:2352 subtract[Integer] 255[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2353 subtract[compile-time] 255[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:2354 subtract[Integer] 255[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2355 subtract[compile-time] 255[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:2356 subtract[Integer] 255[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2357 subtract[compile-time] 255[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:2358 subtract[Integer] 255[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2359 subtract[compile-time] 255[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2360 subtract[Integer] 255[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2361 subtract[compile-time] 255[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2362 subtract[Integer] 255[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2363 subtract[compile-time] 255[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:2364 subtract[Integer] 255[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2365 subtract[compile-time] 255[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:2366 subtract[Integer] 255[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2367 subtract[compile-time] 255[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:2368 subtract[Integer] 255[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2369 subtract[compile-time] 255[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:2370 subtract[Integer] 255[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2371 subtract[compile-time] 255[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:2372 subtract[Integer] 255[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2373 subtract[compile-time] 255[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:2374 subtract[Integer] 255[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:2375 subtract[compile-time] 255[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow on
code auto:2376 subtract[Integer] 255[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:2377 subtract[compile-time] 255[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow off
code auto:2378 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2379 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 0

code auto:2380 subtract[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2381 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2382 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 0

code auto:2383 subtract[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2384 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:2385 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 255

code auto:2386 subtract[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:2387 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2388 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:2389 subtract[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:2390 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:2391 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 129

code auto:2392 subtract[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:2393 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2394 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:2395 subtract[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:2396 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2397 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 128

code auto:2398 subtract[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:2399 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2400 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:2401 subtract[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:2402 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:2403 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 1

code auto:2404 subtract[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:2405 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2406 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:2407 subtract[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:2408 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:2409 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 1

code auto:2410 subtract[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:2411 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:2412 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 1

code auto:2413 subtract[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:2414 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2415 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 0

code auto:2416 subtract[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:2417 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2418 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 0

code auto:2419 subtract[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:2420 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:2421 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 130

code auto:2422 subtract[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:2423 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2424 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:2425 subtract[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:2426 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:2427 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 129

code auto:2428 subtract[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 128;
endcode
compile error

$overflow on
code auto:2429 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2430 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:2431 subtract[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 128;
endcode
compile error

$overflow off
code auto:2432 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:2433 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 2

code auto:2434 subtract[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:2435 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2436 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:2437 subtract[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:2438 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2439 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 127

code auto:2440 subtract[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2441 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2442 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 127

code auto:2443 subtract[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2444 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:2445 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 126

code auto:2446 subtract[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:2447 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:2448 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 126

code auto:2449 subtract[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:2450 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2451 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 0

code auto:2452 subtract[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:2453 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2454 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 0

code auto:2455 subtract[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:2456 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:2457 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 255

code auto:2458 subtract[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 128;
endcode
compile error

$overflow on
code auto:2459 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2460 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:2461 subtract[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 128;
endcode
compile error

$overflow off
code auto:2462 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2463 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 128

code auto:2464 subtract[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:2465 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2466 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:2467 subtract[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:2468 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2469 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 128

code auto:2470 subtract[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2471 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2472 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 128

code auto:2473 subtract[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2474 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2475 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 127

code auto:2476 subtract[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:2477 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2478 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 127

code auto:2479 subtract[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:2480 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:2481 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 1

code auto:2482 subtract[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:2483 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:2484 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 1

code auto:2485 subtract[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:2486 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2487 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 0

code auto:2488 subtract[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:2489 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2490 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 0

code auto:2491 subtract[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:2492 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:2493 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 129

code auto:2494 subtract[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:2495 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:2496 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:2497 subtract[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 255;
endcode
compile error

$overflow off
code auto:2498 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:2499 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 255

code auto:2500 subtract[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2501 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:2502 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 255

code auto:2503 subtract[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2504 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:2505 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 254

code auto:2506 subtract[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:2507 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:2508 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 254

code auto:2509 subtract[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:2510 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2511 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 128

code auto:2512 subtract[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:2513 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:2514 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 128

code auto:2515 subtract[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:2516 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2517 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 127

code auto:2518 subtract[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:2519 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:2520 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 127

code auto:2521 subtract[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:2522 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2523 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 0

code auto:2524 subtract[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:2525 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:2526 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 0

code auto:2527 subtract[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:2528 subtract[Word] 0[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:2529 subtract[compile-time] 0[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2530 subtract[Word] 0[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:2531 subtract[compile-time] 0[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2532 subtract[Word] 0[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65281

code auto:2533 subtract[compile-time] 0[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:2534 subtract[Word] 0[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2535 subtract[compile-time] 0[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:2536 subtract[Word] 0[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:2537 subtract[compile-time] 0[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:2538 subtract[Word] 0[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2539 subtract[compile-time] 0[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:2540 subtract[Word] 0[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:2541 subtract[compile-time] 0[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:2542 subtract[Word] 0[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2543 subtract[compile-time] 0[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:2544 subtract[Word] 0[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:2545 subtract[compile-time] 0[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:2546 subtract[Word] 0[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2547 subtract[compile-time] 0[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:2548 subtract[Word] 1[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:2549 subtract[compile-time] 1[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:2550 subtract[Word] 1[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:2551 subtract[compile-time] 1[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:2552 subtract[Word] 1[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65282

code auto:2553 subtract[compile-time] 1[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:2554 subtract[Word] 1[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2555 subtract[compile-time] 1[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:2556 subtract[Word] 1[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32770

code auto:2557 subtract[compile-time] 1[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:2558 subtract[Word] 1[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2559 subtract[compile-time] 1[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:2560 subtract[Word] 1[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:2561 subtract[compile-time] 1[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 32768;
endcode
compile error

$overflow on
code auto:2562 subtract[Word] 1[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2563 subtract[compile-time] 1[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 32768;
endcode
compile error

$overflow off
code auto:2564 subtract[Word] 1[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:2565 subtract[compile-time] 1[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:2566 subtract[Word] 1[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2567 subtract[compile-time] 1[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:2568 subtract[Word] 127[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:2569 subtract[compile-time] 127[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2570 subtract[Word] 127[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:2571 subtract[compile-time] 127[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2572 subtract[Word] 127[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:2573 subtract[compile-time] 127[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:2574 subtract[Word] 127[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2575 subtract[compile-time] 127[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:2576 subtract[Word] 127[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:2577 subtract[compile-time] 127[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:2578 subtract[Word] 127[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2579 subtract[compile-time] 127[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:2580 subtract[Word] 127[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32895

code auto:2581 subtract[compile-time] 127[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 32768;
endcode
compile error

$overflow on
code auto:2582 subtract[Word] 127[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2583 subtract[compile-time] 127[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 32768;
endcode
compile error

$overflow off
code auto:2584 subtract[Word] 127[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:2585 subtract[compile-time] 127[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:2586 subtract[Word] 127[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2587 subtract[compile-time] 127[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:2588 subtract[Word] 128[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:2589 subtract[compile-time] 128[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2590 subtract[Word] 128[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:2591 subtract[compile-time] 128[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2592 subtract[Word] 128[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:2593 subtract[compile-time] 128[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:2594 subtract[Word] 128[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2595 subtract[compile-time] 128[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 255;
endcode
compile error

$overflow off
code auto:2596 subtract[Word] 128[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32897

code auto:2597 subtract[compile-time] 128[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:2598 subtract[Word] 128[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2599 subtract[compile-time] 128[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:2600 subtract[Word] 128[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:2601 subtract[compile-time] 128[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 32768;
endcode
compile error

$overflow on
code auto:2602 subtract[Word] 128[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2603 subtract[compile-time] 128[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 32768;
endcode
compile error

$overflow off
code auto:2604 subtract[Word] 128[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:2605 subtract[compile-time] 128[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 65535;
endcode
compile error

$overflow on
code auto:2606 subtract[Word] 128[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2607 subtract[compile-time] 128[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 65535;
endcode
compile error

$overflow off
code auto:2608 subtract[Word] 255[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:2609 subtract[compile-time] 255[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2610 subtract[Word] 255[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:2611 subtract[compile-time] 255[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2612 subtract[Word] 255[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:2613 subtract[compile-time] 255[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:2614 subtract[Word] 255[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:2615 subtract[compile-time] 255[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:2616 subtract[Word] 255[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33024

code auto:2617 subtract[compile-time] 255[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:2618 subtract[Word] 255[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2619 subtract[compile-time] 255[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:2620 subtract[Word] 255[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33023

code auto:2621 subtract[compile-time] 255[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:2622 subtract[Word] 255[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2623 subtract[compile-time] 255[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:2624 subtract[Word] 255[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:2625 subtract[compile-time] 255[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:2626 subtract[Word] 255[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:2627 subtract[compile-time] 255[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:2628 subtract[Pointer] 0[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2629 subtract[compile-time] 0[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2630 subtract[Pointer] 0[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2631 subtract[compile-time] 0[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2632 subtract[Pointer] 0[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:2633 subtract[compile-time] 0[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:2634 subtract[Pointer] 0[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2635 subtract[compile-time] 0[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:2636 subtract[Pointer] 0[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:2637 subtract[compile-time] 0[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:2638 subtract[Pointer] 0[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2639 subtract[compile-time] 0[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:2640 subtract[Pointer] 0[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:2641 subtract[compile-time] 0[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:2642 subtract[Pointer] 0[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2643 subtract[compile-time] 0[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:2644 subtract[Pointer] 0[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:2645 subtract[compile-time] 0[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:2646 subtract[Pointer] 0[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2647 subtract[compile-time] 0[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:2648 subtract[Pointer] 1[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:2649 subtract[compile-time] 1[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:2650 subtract[Pointer] 1[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:2651 subtract[compile-time] 1[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:2652 subtract[Pointer] 1[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65282

code auto:2653 subtract[compile-time] 1[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:2654 subtract[Pointer] 1[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2655 subtract[compile-time] 1[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:2656 subtract[Pointer] 1[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32770

code auto:2657 subtract[compile-time] 1[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:2658 subtract[Pointer] 1[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2659 subtract[compile-time] 1[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:2660 subtract[Pointer] 1[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:2661 subtract[compile-time] 1[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow on
code auto:2662 subtract[Pointer] 1[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2663 subtract[compile-time] 1[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 32768;
endcode
compile error

$overflow off
code auto:2664 subtract[Pointer] 1[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 2

code auto:2665 subtract[compile-time] 1[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow on
code auto:2666 subtract[Pointer] 1[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2667 subtract[compile-time] 1[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 - 65535;
endcode
compile error

$overflow off
code auto:2668 subtract[Pointer] 127[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:2669 subtract[compile-time] 127[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:2670 subtract[Pointer] 127[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:2671 subtract[compile-time] 127[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:2672 subtract[Pointer] 127[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:2673 subtract[compile-time] 127[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:2674 subtract[Pointer] 127[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2675 subtract[compile-time] 127[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:2676 subtract[Pointer] 127[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:2677 subtract[compile-time] 127[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:2678 subtract[Pointer] 127[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2679 subtract[compile-time] 127[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:2680 subtract[Pointer] 127[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:2681 subtract[compile-time] 127[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow on
code auto:2682 subtract[Pointer] 127[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2683 subtract[compile-time] 127[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 32768;
endcode
compile error

$overflow off
code auto:2684 subtract[Pointer] 127[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2685 subtract[compile-time] 127[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow on
code auto:2686 subtract[Pointer] 127[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2687 subtract[compile-time] 127[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 - 65535;
endcode
compile error

$overflow off
code auto:2688 subtract[Pointer] 128[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2689 subtract[compile-time] 128[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:2690 subtract[Pointer] 128[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:2691 subtract[compile-time] 128[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:2692 subtract[Pointer] 128[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:2693 subtract[compile-time] 128[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:2694 subtract[Pointer] 128[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2695 subtract[compile-time] 128[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 255;
endcode
compile error

$overflow off
code auto:2696 subtract[Pointer] 128[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32897

code auto:2697 subtract[compile-time] 128[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:2698 subtract[Pointer] 128[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2699 subtract[compile-time] 128[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:2700 subtract[Pointer] 128[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:2701 subtract[compile-time] 128[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 32768;
endcode
compile error

$overflow on
code auto:2702 subtract[Pointer] 128[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2703 subtract[compile-time] 128[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 32768;
endcode
compile error

$overflow off
code auto:2704 subtract[Pointer] 128[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 129

code auto:2705 subtract[compile-time] 128[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 - 65535;
endcode
compile error

$overflow on
code auto:2706 subtract[Pointer] 128[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2707 subtract[compile-time] 128[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 - 65535;
endcode
compile error

$overflow off
code auto:2708 subtract[Pointer] 255[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:2709 subtract[compile-time] 255[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2710 subtract[Pointer] 255[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:2711 subtract[compile-time] 255[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2712 subtract[Pointer] 255[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2713 subtract[compile-time] 255[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:2714 subtract[Pointer] 255[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:2715 subtract[compile-time] 255[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:2716 subtract[Pointer] 255[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33024

code auto:2717 subtract[compile-time] 255[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:2718 subtract[Pointer] 255[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2719 subtract[compile-time] 255[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:2720 subtract[Pointer] 255[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:2721 subtract[compile-time] 255[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:2722 subtract[Pointer] 255[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2723 subtract[compile-time] 255[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:2724 subtract[Pointer] 255[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:2725 subtract[compile-time] 255[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:2726 subtract[Pointer] 255[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:2727 subtract[compile-time] 255[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:2728 subtract[Integer] 0[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2729 subtract[compile-time] 0[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:2730 subtract[Integer] 0[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2731 subtract[compile-time] 0[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:2732 subtract[Integer] 0[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2733 subtract[compile-time] 0[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:2734 subtract[Integer] 0[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2735 subtract[compile-time] 0[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:2736 subtract[Integer] 0[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2737 subtract[compile-time] 0[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:2738 subtract[Integer] 0[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2739 subtract[compile-time] 0[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:2740 subtract[Integer] 0[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2741 subtract[compile-time] 0[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2742 subtract[Integer] 0[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2743 subtract[compile-time] 0[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2744 subtract[Integer] 0[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2745 subtract[compile-time] 0[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:2746 subtract[Integer] 0[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2747 subtract[compile-time] 0[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:2748 subtract[Integer] 0[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2749 subtract[compile-time] 0[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:2750 subtract[Integer] 0[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2751 subtract[compile-time] 0[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:2752 subtract[Integer] 255[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2753 subtract[compile-time] 255[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:2754 subtract[Integer] 255[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2755 subtract[compile-time] 255[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:2756 subtract[Integer] 255[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 382

code auto:2757 subtract[compile-time] 255[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow on
code auto:2758 subtract[Integer] 255[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 382

code auto:2759 subtract[compile-time] 255[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow off
code auto:2760 subtract[Integer] 255[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2761 subtract[compile-time] 255[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:2762 subtract[Integer] 255[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2763 subtract[compile-time] 255[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:2764 subtract[Integer] 255[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2765 subtract[compile-time] 255[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2766 subtract[Integer] 255[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2767 subtract[compile-time] 255[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2768 subtract[Integer] 255[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2769 subtract[compile-time] 255[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:2770 subtract[Integer] 255[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2771 subtract[compile-time] 255[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:2772 subtract[Integer] 255[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2773 subtract[compile-time] 255[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:2774 subtract[Integer] 255[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2775 subtract[compile-time] 255[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:2776 subtract[Integer] 32767[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:2777 subtract[compile-time] 32767[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:2778 subtract[Integer] 32767[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2779 subtract[compile-time] 32767[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:2780 subtract[Integer] 32767[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32642

code auto:2781 subtract[compile-time] 32767[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -127;
endcode
compile error

$overflow on
code auto:2782 subtract[Integer] 32767[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2783 subtract[compile-time] 32767[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -127;
endcode
compile error

$overflow off
code auto:2784 subtract[Integer] 32767[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2785 subtract[compile-time] 32767[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:2786 subtract[Integer] 32767[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2787 subtract[compile-time] 32767[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:2788 subtract[Integer] 32767[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2789 subtract[compile-time] 32767[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:2790 subtract[Integer] 32767[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2791 subtract[compile-time] 32767[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:2792 subtract[Integer] 32767[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:2793 subtract[compile-time] 32767[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:2794 subtract[Integer] 32767[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:2795 subtract[compile-time] 32767[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:2796 subtract[Integer] 32767[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:2797 subtract[compile-time] 32767[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:2798 subtract[Integer] 32767[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:2799 subtract[compile-time] 32767[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:2800 subtract[Integer] 32768[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2801 subtract[compile-time] 32768[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -128;
endcode
compile error

$overflow on
code auto:2802 subtract[Integer] 32768[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2803 subtract[compile-time] 32768[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -128;
endcode
compile error

$overflow off
code auto:2804 subtract[Integer] 32768[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:2805 subtract[compile-time] 32768[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -127;
endcode
compile error

$overflow on
code auto:2806 subtract[Integer] 32768[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2807 subtract[compile-time] 32768[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -127;
endcode
compile error

$overflow off
code auto:2808 subtract[Integer] 32768[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2809 subtract[compile-time] 32768[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -1;
endcode
compile error

$overflow on
code auto:2810 subtract[Integer] 32768[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2811 subtract[compile-time] 32768[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -1;
endcode
compile error

$overflow off
code auto:2812 subtract[Integer] 32768[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2813 subtract[compile-time] 32768[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:2814 subtract[Integer] 32768[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2815 subtract[compile-time] 32768[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:2816 subtract[Integer] 32768[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2817 subtract[compile-time] 32768[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:2818 subtract[Integer] 32768[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2819 subtract[compile-time] 32768[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:2820 subtract[Integer] 32768[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:2821 subtract[compile-time] 32768[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:2822 subtract[Integer] 32768[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:2823 subtract[compile-time] 32768[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:2824 subtract[Integer] 65535[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2825 subtract[compile-time] 65535[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -128;
endcode
compile error

$overflow on
code auto:2826 subtract[Integer] 65535[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2827 subtract[compile-time] 65535[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -128;
endcode
compile error

$overflow off
code auto:2828 subtract[Integer] 65535[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:2829 subtract[compile-time] 65535[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -127;
endcode
compile error

$overflow on
code auto:2830 subtract[Integer] 65535[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2831 subtract[compile-time] 65535[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -127;
endcode
compile error

$overflow off
code auto:2832 subtract[Integer] 65535[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2833 subtract[compile-time] 65535[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -1;
endcode
compile error

$overflow on
code auto:2834 subtract[Integer] 65535[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2835 subtract[compile-time] 65535[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -1;
endcode
compile error

$overflow off
code auto:2836 subtract[Integer] 65535[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2837 subtract[compile-time] 65535[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:2838 subtract[Integer] 65535[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2839 subtract[compile-time] 65535[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:2840 subtract[Integer] 65535[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:2841 subtract[compile-time] 65535[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 1;
endcode
compile error

$overflow on
code auto:2842 subtract[Integer] 65535[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2843 subtract[compile-time] 65535[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 1;
endcode
compile error

$overflow off
code auto:2844 subtract[Integer] 65535[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:2845 subtract[compile-time] 65535[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 127;
endcode
compile error

$overflow on
code auto:2846 subtract[Integer] 65535[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2847 subtract[compile-time] 65535[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 127;
endcode
compile error

$overflow off
code auto:2848 subtract[Integer] 0[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2849 subtract[compile-time] 0[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:2850 subtract[Integer] 0[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2851 subtract[compile-time] 0[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:2852 subtract[Integer] 0[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2853 subtract[compile-time] 0[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:2854 subtract[Integer] 0[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2855 subtract[compile-time] 0[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:2856 subtract[Integer] 0[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2857 subtract[compile-time] 0[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:2858 subtract[Integer] 0[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:2859 subtract[compile-time] 0[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:2860 subtract[Integer] 0[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2861 subtract[compile-time] 0[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:2862 subtract[Integer] 0[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2863 subtract[compile-time] 0[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:2864 subtract[Integer] 0[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2865 subtract[compile-time] 0[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:2866 subtract[Integer] 0[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:2867 subtract[compile-time] 0[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:2868 subtract[Integer] 0[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2869 subtract[compile-time] 0[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:2870 subtract[Integer] 0[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2871 subtract[compile-time] 0[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:2872 subtract[Integer] 0[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2873 subtract[compile-time] 0[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:2874 subtract[Integer] 0[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2875 subtract[compile-time] 0[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:2876 subtract[Integer] 0[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2877 subtract[compile-time] 0[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:2878 subtract[Integer] 0[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:2879 subtract[compile-time] 0[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:2880 subtract[Integer] 0[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:2881 subtract[compile-time] 0[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:2882 subtract[Integer] 0[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:2883 subtract[compile-time] 0[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:2884 subtract[Integer] 0[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2885 subtract[compile-time] 0[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:2886 subtract[Integer] 0[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2887 subtract[compile-time] 0[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:2888 subtract[Integer] 255[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32513

code auto:2889 subtract[compile-time] 255[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -32768;
endcode
compile error

$overflow on
code auto:2890 subtract[Integer] 255[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2891 subtract[compile-time] 255[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -32768;
endcode
compile error

$overflow off
code auto:2892 subtract[Integer] 255[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32514

code auto:2893 subtract[compile-time] 255[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -32767;
endcode
compile error

$overflow on
code auto:2894 subtract[Integer] 255[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2895 subtract[compile-time] 255[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -32767;
endcode
compile error

$overflow off
code auto:2896 subtract[Integer] 255[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 384

code auto:2897 subtract[compile-time] 255[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow on
code auto:2898 subtract[Integer] 255[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 384

code auto:2899 subtract[compile-time] 255[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow off
code auto:2900 subtract[Integer] 255[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2901 subtract[compile-time] 255[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:2902 subtract[Integer] 255[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 383

code auto:2903 subtract[compile-time] 255[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:2904 subtract[Integer] 255[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2905 subtract[compile-time] 255[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:2906 subtract[Integer] 255[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:2907 subtract[compile-time] 255[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:2908 subtract[Integer] 255[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2909 subtract[compile-time] 255[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:2910 subtract[Integer] 255[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:2911 subtract[compile-time] 255[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:2912 subtract[Integer] 255[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2913 subtract[compile-time] 255[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:2914 subtract[Integer] 255[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:2915 subtract[compile-time] 255[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:2916 subtract[Integer] 255[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2917 subtract[compile-time] 255[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:2918 subtract[Integer] 255[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:2919 subtract[compile-time] 255[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:2920 subtract[Integer] 255[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2921 subtract[compile-time] 255[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:2922 subtract[Integer] 255[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:2923 subtract[compile-time] 255[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:2924 subtract[Integer] 255[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:2925 subtract[compile-time] 255[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow on
code auto:2926 subtract[Integer] 255[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:2927 subtract[compile-time] 255[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow off
code auto:2928 subtract[Integer] 32767[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2929 subtract[compile-time] 32767[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -32768;
endcode
compile error

$overflow on
code auto:2930 subtract[Integer] 32767[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2931 subtract[compile-time] 32767[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32768;
endcode
compile error

$overflow off
code auto:2932 subtract[Integer] 32767[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:2933 subtract[compile-time] 32767[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -32767;
endcode
compile error

$overflow on
code auto:2934 subtract[Integer] 32767[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2935 subtract[compile-time] 32767[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32767;
endcode
compile error

$overflow off
code auto:2936 subtract[Integer] 32767[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2937 subtract[compile-time] 32767[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -129;
endcode
compile error

$overflow on
code auto:2938 subtract[Integer] 32767[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2939 subtract[compile-time] 32767[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -129;
endcode
compile error

$overflow off
code auto:2940 subtract[Integer] 32767[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32641

code auto:2941 subtract[compile-time] 32767[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:2942 subtract[Integer] 32767[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2943 subtract[compile-time] 32767[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:2944 subtract[Integer] 32767[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2945 subtract[compile-time] 32767[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:2946 subtract[Integer] 32767[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2947 subtract[compile-time] 32767[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:2948 subtract[Integer] 32767[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2949 subtract[compile-time] 32767[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:2950 subtract[Integer] 32767[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2951 subtract[compile-time] 32767[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:2952 subtract[Integer] 32767[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:2953 subtract[compile-time] 32767[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:2954 subtract[Integer] 32767[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:2955 subtract[compile-time] 32767[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:2956 subtract[Integer] 32767[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:2957 subtract[compile-time] 32767[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:2958 subtract[Integer] 32767[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:2959 subtract[compile-time] 32767[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:2960 subtract[Integer] 32767[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:2961 subtract[compile-time] 32767[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:2962 subtract[Integer] 32767[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:2963 subtract[compile-time] 32767[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:2964 subtract[Integer] 32767[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2965 subtract[compile-time] 32767[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:2966 subtract[Integer] 32767[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2967 subtract[compile-time] 32767[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:2968 subtract[Integer] 32768[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:2969 subtract[compile-time] 32768[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -32768;
endcode
compile error

$overflow on
code auto:2970 subtract[Integer] 32768[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2971 subtract[compile-time] 32768[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -32768;
endcode
compile error

$overflow off
code auto:2972 subtract[Integer] 32768[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:2973 subtract[compile-time] 32768[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -32767;
endcode
compile error

$overflow on
code auto:2974 subtract[Integer] 32768[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2975 subtract[compile-time] 32768[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -32767;
endcode
compile error

$overflow off
code auto:2976 subtract[Integer] 32768[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:2977 subtract[compile-time] 32768[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -129;
endcode
compile error

$overflow on
code auto:2978 subtract[Integer] 32768[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2979 subtract[compile-time] 32768[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -129;
endcode
compile error

$overflow off
code auto:2980 subtract[Integer] 32768[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:2981 subtract[compile-time] 32768[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -128;
endcode
compile error

$overflow on
code auto:2982 subtract[Integer] 32768[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2983 subtract[compile-time] 32768[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -128;
endcode
compile error

$overflow off
code auto:2984 subtract[Integer] 32768[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:2985 subtract[compile-time] 32768[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - -1;
endcode
compile error

$overflow on
code auto:2986 subtract[Integer] 32768[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2987 subtract[compile-time] 32768[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - -1;
endcode
compile error

$overflow off
code auto:2988 subtract[Integer] 32768[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:2989 subtract[compile-time] 32768[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:2990 subtract[Integer] 32768[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:2991 subtract[compile-time] 32768[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:2992 subtract[Integer] 32768[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2993 subtract[compile-time] 32768[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:2994 subtract[Integer] 32768[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:2995 subtract[compile-time] 32768[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:2996 subtract[Integer] 32768[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:2997 subtract[compile-time] 32768[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:2998 subtract[Integer] 32768[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32641

code auto:2999 subtract[compile-time] 32768[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:3000 subtract[Integer] 32768[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:3001 subtract[compile-time] 32768[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow on
code auto:3002 subtract[Integer] 32768[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:3003 subtract[compile-time] 32768[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow off
code auto:3004 subtract[Integer] 32768[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:3005 subtract[compile-time] 32768[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3006 subtract[Integer] 32768[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:3007 subtract[compile-time] 32768[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3008 subtract[Integer] 65535[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:3009 subtract[compile-time] 65535[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -32768;
endcode
compile error

$overflow on
code auto:3010 subtract[Integer] 65535[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3011 subtract[compile-time] 65535[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -32768;
endcode
compile error

$overflow off
code auto:3012 subtract[Integer] 65535[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:3013 subtract[compile-time] 65535[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -32767;
endcode
compile error

$overflow on
code auto:3014 subtract[Integer] 65535[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3015 subtract[compile-time] 65535[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -32767;
endcode
compile error

$overflow off
code auto:3016 subtract[Integer] 65535[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:3017 subtract[compile-time] 65535[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -129;
endcode
compile error

$overflow on
code auto:3018 subtract[Integer] 65535[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3019 subtract[compile-time] 65535[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -129;
endcode
compile error

$overflow off
code auto:3020 subtract[Integer] 65535[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:3021 subtract[compile-time] 65535[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -128;
endcode
compile error

$overflow on
code auto:3022 subtract[Integer] 65535[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3023 subtract[compile-time] 65535[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -128;
endcode
compile error

$overflow off
code auto:3024 subtract[Integer] 65535[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:3025 subtract[compile-time] 65535[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - -1;
endcode
compile error

$overflow on
code auto:3026 subtract[Integer] 65535[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3027 subtract[compile-time] 65535[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - -1;
endcode
compile error

$overflow off
code auto:3028 subtract[Integer] 65535[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:3029 subtract[compile-time] 65535[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:3030 subtract[Integer] 65535[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3031 subtract[compile-time] 65535[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:3032 subtract[Integer] 65535[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:3033 subtract[compile-time] 65535[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 1;
endcode
compile error

$overflow on
code auto:3034 subtract[Integer] 65535[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3035 subtract[compile-time] 65535[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 1;
endcode
compile error

$overflow off
code auto:3036 subtract[Integer] 65535[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:3037 subtract[compile-time] 65535[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 127;
endcode
compile error

$overflow on
code auto:3038 subtract[Integer] 65535[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3039 subtract[compile-time] 65535[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 127;
endcode
compile error

$overflow off
code auto:3040 subtract[Integer] 65535[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:3041 subtract[compile-time] 65535[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 128;
endcode
compile error

$overflow on
code auto:3042 subtract[Integer] 65535[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3043 subtract[compile-time] 65535[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 128;
endcode
compile error

$overflow off
code auto:3044 subtract[Integer] 65535[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:3045 subtract[compile-time] 65535[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:3046 subtract[Integer] 65535[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:3047 subtract[compile-time] 65535[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:3048 subtract[Word] 0[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3049 subtract[compile-time] 0[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3050 subtract[Word] 0[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3051 subtract[compile-time] 0[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3052 subtract[Word] 0[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3053 subtract[compile-time] 0[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:3054 subtract[Word] 0[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3055 subtract[compile-time] 0[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:3056 subtract[Word] 0[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:3057 subtract[compile-time] 0[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:3058 subtract[Word] 0[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3059 subtract[compile-time] 0[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:3060 subtract[Word] 0[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:3061 subtract[compile-time] 0[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:3062 subtract[Word] 0[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3063 subtract[compile-time] 0[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:3064 subtract[Word] 0[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65281

code auto:3065 subtract[compile-time] 0[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3066 subtract[Word] 0[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3067 subtract[compile-time] 0[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3068 subtract[Word] 255[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:3069 subtract[compile-time] 255[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3070 subtract[Word] 255[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:3071 subtract[compile-time] 255[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3072 subtract[Word] 255[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 254

code auto:3073 subtract[compile-time] 255[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:3074 subtract[Word] 255[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 254

code auto:3075 subtract[compile-time] 255[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:3076 subtract[Word] 255[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:3077 subtract[compile-time] 255[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:3078 subtract[Word] 255[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:3079 subtract[compile-time] 255[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:3080 subtract[Word] 255[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:3081 subtract[compile-time] 255[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:3082 subtract[Word] 255[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:3083 subtract[compile-time] 255[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:3084 subtract[Word] 255[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3085 subtract[compile-time] 255[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3086 subtract[Word] 255[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3087 subtract[compile-time] 255[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3088 subtract[Word] 32767[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3089 subtract[compile-time] 32767[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3090 subtract[Word] 32767[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3091 subtract[compile-time] 32767[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3092 subtract[Word] 32767[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:3093 subtract[compile-time] 32767[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:3094 subtract[Word] 32767[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:3095 subtract[compile-time] 32767[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:3096 subtract[Word] 32767[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:3097 subtract[compile-time] 32767[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:3098 subtract[Word] 32767[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:3099 subtract[compile-time] 32767[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:3100 subtract[Word] 32767[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:3101 subtract[compile-time] 32767[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:3102 subtract[Word] 32767[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:3103 subtract[compile-time] 32767[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:3104 subtract[Word] 32767[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:3105 subtract[compile-time] 32767[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3106 subtract[Word] 32767[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:3107 subtract[compile-time] 32767[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3108 subtract[Word] 32768[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3109 subtract[compile-time] 32768[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3110 subtract[Word] 32768[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3111 subtract[compile-time] 32768[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3112 subtract[Word] 32768[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3113 subtract[compile-time] 32768[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:3114 subtract[Word] 32768[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3115 subtract[compile-time] 32768[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:3116 subtract[Word] 32768[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32641

code auto:3117 subtract[compile-time] 32768[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:3118 subtract[Word] 32768[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32641

code auto:3119 subtract[compile-time] 32768[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:3120 subtract[Word] 32768[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:3121 subtract[compile-time] 32768[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow on
code auto:3122 subtract[Word] 32768[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:3123 subtract[compile-time] 32768[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow off
code auto:3124 subtract[Word] 32768[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:3125 subtract[compile-time] 32768[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3126 subtract[Word] 32768[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:3127 subtract[compile-time] 32768[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3128 subtract[Word] 65535[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3129 subtract[compile-time] 65535[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3130 subtract[Word] 65535[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3131 subtract[compile-time] 65535[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3132 subtract[Word] 65535[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:3133 subtract[compile-time] 65535[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow on
code auto:3134 subtract[Word] 65535[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:3135 subtract[compile-time] 65535[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow off
code auto:3136 subtract[Word] 65535[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:3137 subtract[compile-time] 65535[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow on
code auto:3138 subtract[Word] 65535[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:3139 subtract[compile-time] 65535[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow off
code auto:3140 subtract[Word] 65535[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65407

code auto:3141 subtract[compile-time] 65535[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow on
code auto:3142 subtract[Word] 65535[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65407

code auto:3143 subtract[compile-time] 65535[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow off
code auto:3144 subtract[Word] 65535[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:3145 subtract[compile-time] 65535[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3146 subtract[Word] 65535[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:3147 subtract[compile-time] 65535[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3148 subtract[Word] 0[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3149 subtract[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3150 subtract[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3151 subtract[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3152 subtract[Word] 0[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65281

code auto:3153 subtract[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3154 subtract[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3155 subtract[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3156 subtract[Word] 0[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:3157 subtract[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:3158 subtract[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3159 subtract[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:3160 subtract[Word] 0[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3161 subtract[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:3162 subtract[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3163 subtract[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:3164 subtract[Word] 0[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:3165 subtract[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:3166 subtract[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3167 subtract[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:3168 subtract[Word] 255[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:3169 subtract[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3170 subtract[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:3171 subtract[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3172 subtract[Word] 255[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3173 subtract[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3174 subtract[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3175 subtract[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3176 subtract[Word] 255[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33024

code auto:3177 subtract[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:3178 subtract[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3179 subtract[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:3180 subtract[Word] 255[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33023

code auto:3181 subtract[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:3182 subtract[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3183 subtract[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:3184 subtract[Word] 255[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:3185 subtract[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:3186 subtract[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3187 subtract[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:3188 subtract[Word] 32767[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3189 subtract[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3190 subtract[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3191 subtract[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3192 subtract[Word] 32767[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:3193 subtract[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3194 subtract[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:3195 subtract[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3196 subtract[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3197 subtract[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:3198 subtract[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3199 subtract[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:3200 subtract[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3201 subtract[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:3202 subtract[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3203 subtract[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:3204 subtract[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3205 subtract[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:3206 subtract[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3207 subtract[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:3208 subtract[Word] 32768[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3209 subtract[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3210 subtract[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3211 subtract[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3212 subtract[Word] 32768[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:3213 subtract[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3214 subtract[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:3215 subtract[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3216 subtract[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:3217 subtract[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3218 subtract[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:3219 subtract[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3220 subtract[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3221 subtract[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:3222 subtract[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3223 subtract[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:3224 subtract[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:3225 subtract[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:3226 subtract[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:3227 subtract[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:3228 subtract[Word] 65535[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3229 subtract[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3230 subtract[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:3231 subtract[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3232 subtract[Word] 65535[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:3233 subtract[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3234 subtract[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:3235 subtract[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3236 subtract[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3237 subtract[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:3238 subtract[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:3239 subtract[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:3240 subtract[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3241 subtract[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:3242 subtract[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:3243 subtract[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:3244 subtract[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3245 subtract[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:3246 subtract[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:3247 subtract[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:3248 subtract[Pointer] 0[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3249 subtract[compile-time] 0[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3250 subtract[Pointer] 0[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3251 subtract[compile-time] 0[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3252 subtract[Pointer] 0[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:3253 subtract[compile-time] 0[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3254 subtract[Pointer] 0[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3255 subtract[compile-time] 0[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3256 subtract[Pointer] 0[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3257 subtract[compile-time] 0[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:3258 subtract[Pointer] 0[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3259 subtract[compile-time] 0[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:3260 subtract[Pointer] 0[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3261 subtract[compile-time] 0[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:3262 subtract[Pointer] 0[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3263 subtract[compile-time] 0[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:3264 subtract[Pointer] 0[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3265 subtract[compile-time] 0[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:3266 subtract[Pointer] 0[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3267 subtract[compile-time] 0[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:3268 subtract[Pointer] 255[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3269 subtract[compile-time] 255[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3270 subtract[Pointer] 255[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3271 subtract[compile-time] 255[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3272 subtract[Pointer] 255[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3273 subtract[compile-time] 255[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3274 subtract[Pointer] 255[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3275 subtract[compile-time] 255[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3276 subtract[Pointer] 255[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33024

code auto:3277 subtract[compile-time] 255[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:3278 subtract[Pointer] 255[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3279 subtract[compile-time] 255[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:3280 subtract[Pointer] 255[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:3281 subtract[compile-time] 255[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:3282 subtract[Pointer] 255[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3283 subtract[compile-time] 255[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:3284 subtract[Pointer] 255[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3285 subtract[compile-time] 255[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:3286 subtract[Pointer] 255[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3287 subtract[compile-time] 255[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:3288 subtract[Pointer] 32767[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3289 subtract[compile-time] 32767[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3290 subtract[Pointer] 32767[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3291 subtract[compile-time] 32767[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3292 subtract[Pointer] 32767[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3293 subtract[compile-time] 32767[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3294 subtract[Pointer] 32767[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3295 subtract[compile-time] 32767[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3296 subtract[Pointer] 32767[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3297 subtract[compile-time] 32767[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:3298 subtract[Pointer] 32767[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3299 subtract[compile-time] 32767[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:3300 subtract[Pointer] 32767[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3301 subtract[compile-time] 32767[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:3302 subtract[Pointer] 32767[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3303 subtract[compile-time] 32767[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:3304 subtract[Pointer] 32767[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3305 subtract[compile-time] 32767[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:3306 subtract[Pointer] 32767[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3307 subtract[compile-time] 32767[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:3308 subtract[Pointer] 32768[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3309 subtract[compile-time] 32768[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3310 subtract[Pointer] 32768[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3311 subtract[compile-time] 32768[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3312 subtract[Pointer] 32768[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3313 subtract[compile-time] 32768[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3314 subtract[Pointer] 32768[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3315 subtract[compile-time] 32768[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3316 subtract[Pointer] 32768[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3317 subtract[compile-time] 32768[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3318 subtract[Pointer] 32768[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3319 subtract[compile-time] 32768[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3320 subtract[Pointer] 32768[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3321 subtract[compile-time] 32768[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:3322 subtract[Pointer] 32768[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3323 subtract[compile-time] 32768[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:3324 subtract[Pointer] 32768[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3325 subtract[compile-time] 32768[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:3326 subtract[Pointer] 32768[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3327 subtract[compile-time] 32768[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:3328 subtract[Pointer] 65535[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3329 subtract[compile-time] 65535[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3330 subtract[Pointer] 65535[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3331 subtract[compile-time] 65535[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3332 subtract[Pointer] 65535[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3333 subtract[compile-time] 65535[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3334 subtract[Pointer] 65535[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3335 subtract[compile-time] 65535[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3336 subtract[Pointer] 65535[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3337 subtract[compile-time] 65535[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:3338 subtract[Pointer] 65535[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3339 subtract[compile-time] 65535[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:3340 subtract[Pointer] 65535[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3341 subtract[compile-time] 65535[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:3342 subtract[Pointer] 65535[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3343 subtract[compile-time] 65535[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:3344 subtract[Pointer] 65535[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3345 subtract[compile-time] 65535[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:3346 subtract[Pointer] 65535[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3347 subtract[compile-time] 65535[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:3348 subtract[Pointer] 0[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3349 subtract[compile-time] 0[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:3350 subtract[Pointer] 0[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3351 subtract[compile-time] 0[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:3352 subtract[Pointer] 0[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3353 subtract[compile-time] 0[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:3354 subtract[Pointer] 0[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3355 subtract[compile-time] 0[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:3356 subtract[Pointer] 0[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3357 subtract[compile-time] 0[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:3358 subtract[Pointer] 0[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3359 subtract[compile-time] 0[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:3360 subtract[Pointer] 0[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3361 subtract[compile-time] 0[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3362 subtract[Pointer] 0[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3363 subtract[compile-time] 0[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3364 subtract[Pointer] 0[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3365 subtract[compile-time] 0[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:3366 subtract[Pointer] 0[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3367 subtract[compile-time] 0[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:3368 subtract[Pointer] 0[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:3369 subtract[compile-time] 0[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:3370 subtract[Pointer] 0[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3371 subtract[compile-time] 0[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:3372 subtract[Pointer] 255[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 383

code auto:3373 subtract[compile-time] 255[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:3374 subtract[Pointer] 255[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 383

code auto:3375 subtract[compile-time] 255[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:3376 subtract[Pointer] 255[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 382

code auto:3377 subtract[compile-time] 255[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow on
code auto:3378 subtract[Pointer] 255[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 382

code auto:3379 subtract[compile-time] 255[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -127;
endcode
varvalue r 382

$overflow off
code auto:3380 subtract[Pointer] 255[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3381 subtract[compile-time] 255[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:3382 subtract[Pointer] 255[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3383 subtract[compile-time] 255[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:3384 subtract[Pointer] 255[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3385 subtract[compile-time] 255[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3386 subtract[Pointer] 255[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3387 subtract[compile-time] 255[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3388 subtract[Pointer] 255[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3389 subtract[compile-time] 255[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:3390 subtract[Pointer] 255[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3391 subtract[compile-time] 255[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:3392 subtract[Pointer] 255[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3393 subtract[compile-time] 255[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:3394 subtract[Pointer] 255[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3395 subtract[compile-time] 255[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:3396 subtract[Pointer] 32767[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3397 subtract[compile-time] 32767[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow on
code auto:3398 subtract[Pointer] 32767[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3399 subtract[compile-time] 32767[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow off
code auto:3400 subtract[Pointer] 32767[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32894

code auto:3401 subtract[compile-time] 32767[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -127;
endcode
varvalue r 32894

$overflow on
code auto:3402 subtract[Pointer] 32767[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32894

code auto:3403 subtract[compile-time] 32767[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -127;
endcode
varvalue r 32894

$overflow off
code auto:3404 subtract[Pointer] 32767[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3405 subtract[compile-time] 32767[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow on
code auto:3406 subtract[Pointer] 32767[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3407 subtract[compile-time] 32767[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow off
code auto:3408 subtract[Pointer] 32767[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3409 subtract[compile-time] 32767[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3410 subtract[Pointer] 32767[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3411 subtract[compile-time] 32767[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3412 subtract[Pointer] 32767[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3413 subtract[compile-time] 32767[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:3414 subtract[Pointer] 32767[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3415 subtract[compile-time] 32767[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:3416 subtract[Pointer] 32767[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3417 subtract[compile-time] 32767[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:3418 subtract[Pointer] 32767[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3419 subtract[compile-time] 32767[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:3420 subtract[Pointer] 32768[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3421 subtract[compile-time] 32768[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -128;
endcode
varvalue r 32896

$overflow on
code auto:3422 subtract[Pointer] 32768[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3423 subtract[compile-time] 32768[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -128;
endcode
varvalue r 32896

$overflow off
code auto:3424 subtract[Pointer] 32768[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3425 subtract[compile-time] 32768[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -127;
endcode
varvalue r 32895

$overflow on
code auto:3426 subtract[Pointer] 32768[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3427 subtract[compile-time] 32768[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -127;
endcode
varvalue r 32895

$overflow off
code auto:3428 subtract[Pointer] 32768[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3429 subtract[compile-time] 32768[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -1;
endcode
varvalue r 32769

$overflow on
code auto:3430 subtract[Pointer] 32768[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3431 subtract[compile-time] 32768[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -1;
endcode
varvalue r 32769

$overflow off
code auto:3432 subtract[Pointer] 32768[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3433 subtract[compile-time] 32768[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3434 subtract[Pointer] 32768[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3435 subtract[compile-time] 32768[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3436 subtract[Pointer] 32768[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3437 subtract[compile-time] 32768[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:3438 subtract[Pointer] 32768[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3439 subtract[compile-time] 32768[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:3440 subtract[Pointer] 32768[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3441 subtract[compile-time] 32768[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:3442 subtract[Pointer] 32768[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3443 subtract[compile-time] 32768[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:3444 subtract[Pointer] 65535[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3445 subtract[compile-time] 65535[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -128;
endcode
compile error

$overflow on
code auto:3446 subtract[Pointer] 65535[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3447 subtract[compile-time] 65535[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -128;
endcode
compile error

$overflow off
code auto:3448 subtract[Pointer] 65535[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 126

code auto:3449 subtract[compile-time] 65535[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -127;
endcode
compile error

$overflow on
code auto:3450 subtract[Pointer] 65535[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3451 subtract[compile-time] 65535[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -127;
endcode
compile error

$overflow off
code auto:3452 subtract[Pointer] 65535[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3453 subtract[compile-time] 65535[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -1;
endcode
compile error

$overflow on
code auto:3454 subtract[Pointer] 65535[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3455 subtract[compile-time] 65535[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -1;
endcode
compile error

$overflow off
code auto:3456 subtract[Pointer] 65535[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3457 subtract[compile-time] 65535[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3458 subtract[Pointer] 65535[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3459 subtract[compile-time] 65535[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3460 subtract[Pointer] 65535[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3461 subtract[compile-time] 65535[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow on
code auto:3462 subtract[Pointer] 65535[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3463 subtract[compile-time] 65535[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow off
code auto:3464 subtract[Pointer] 65535[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3465 subtract[compile-time] 65535[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow on
code auto:3466 subtract[Pointer] 65535[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3467 subtract[compile-time] 65535[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow off
code auto:3468 subtract[Pointer] 0[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3469 subtract[compile-time] 0[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -32768;
endcode
varvalue r 32768

$overflow on
code auto:3470 subtract[Pointer] 0[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3471 subtract[compile-time] 0[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -32768;
endcode
varvalue r 32768

$overflow off
code auto:3472 subtract[Pointer] 0[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3473 subtract[compile-time] 0[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:3474 subtract[Pointer] 0[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3475 subtract[compile-time] 0[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:3476 subtract[Pointer] 0[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 129

code auto:3477 subtract[compile-time] 0[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:3478 subtract[Pointer] 0[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 129

code auto:3479 subtract[compile-time] 0[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:3480 subtract[Pointer] 0[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3481 subtract[compile-time] 0[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:3482 subtract[Pointer] 0[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3483 subtract[compile-time] 0[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:3484 subtract[Pointer] 0[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3485 subtract[compile-time] 0[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:3486 subtract[Pointer] 0[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3487 subtract[compile-time] 0[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:3488 subtract[Pointer] 0[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3489 subtract[compile-time] 0[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3490 subtract[Pointer] 0[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3491 subtract[compile-time] 0[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3492 subtract[Pointer] 0[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3493 subtract[compile-time] 0[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:3494 subtract[Pointer] 0[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3495 subtract[compile-time] 0[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:3496 subtract[Pointer] 0[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:3497 subtract[compile-time] 0[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:3498 subtract[Pointer] 0[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3499 subtract[compile-time] 0[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:3500 subtract[Pointer] 0[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3501 subtract[compile-time] 0[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:3502 subtract[Pointer] 0[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3503 subtract[compile-time] 0[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:3504 subtract[Pointer] 0[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3505 subtract[compile-time] 0[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:3506 subtract[Pointer] 0[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3507 subtract[compile-time] 0[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:3508 subtract[Pointer] 255[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:3509 subtract[compile-time] 255[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -32768;
endcode
varvalue r 33023

$overflow on
code auto:3510 subtract[Pointer] 255[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:3511 subtract[compile-time] 255[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -32768;
endcode
varvalue r 33023

$overflow off
code auto:3512 subtract[Pointer] 255[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33022

code auto:3513 subtract[compile-time] 255[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -32767;
endcode
varvalue r 33022

$overflow on
code auto:3514 subtract[Pointer] 255[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33022

code auto:3515 subtract[compile-time] 255[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -32767;
endcode
varvalue r 33022

$overflow off
code auto:3516 subtract[Pointer] 255[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 384

code auto:3517 subtract[compile-time] 255[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow on
code auto:3518 subtract[Pointer] 255[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 384

code auto:3519 subtract[compile-time] 255[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -129;
endcode
varvalue r 384

$overflow off
code auto:3520 subtract[Pointer] 255[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 383

code auto:3521 subtract[compile-time] 255[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow on
code auto:3522 subtract[Pointer] 255[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 383

code auto:3523 subtract[compile-time] 255[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -128;
endcode
varvalue r 383

$overflow off
code auto:3524 subtract[Pointer] 255[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3525 subtract[compile-time] 255[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow on
code auto:3526 subtract[Pointer] 255[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3527 subtract[compile-time] 255[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - -1;
endcode
varvalue r 256

$overflow off
code auto:3528 subtract[Pointer] 255[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3529 subtract[compile-time] 255[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3530 subtract[Pointer] 255[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3531 subtract[compile-time] 255[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3532 subtract[Pointer] 255[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3533 subtract[compile-time] 255[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:3534 subtract[Pointer] 255[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3535 subtract[compile-time] 255[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:3536 subtract[Pointer] 255[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3537 subtract[compile-time] 255[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:3538 subtract[Pointer] 255[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3539 subtract[compile-time] 255[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:3540 subtract[Pointer] 255[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3541 subtract[compile-time] 255[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:3542 subtract[Pointer] 255[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3543 subtract[compile-time] 255[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:3544 subtract[Pointer] 255[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33024

code auto:3545 subtract[compile-time] 255[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:3546 subtract[Pointer] 255[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3547 subtract[compile-time] 255[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:3548 subtract[Pointer] 32767[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3549 subtract[compile-time] 32767[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -32768;
endcode
varvalue r 65535

$overflow on
code auto:3550 subtract[Pointer] 32767[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3551 subtract[compile-time] 32767[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -32768;
endcode
varvalue r 65535

$overflow off
code auto:3552 subtract[Pointer] 32767[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3553 subtract[compile-time] 32767[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -32767;
endcode
varvalue r 65534

$overflow on
code auto:3554 subtract[Pointer] 32767[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3555 subtract[compile-time] 32767[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -32767;
endcode
varvalue r 65534

$overflow off
code auto:3556 subtract[Pointer] 32767[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3557 subtract[compile-time] 32767[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -129;
endcode
varvalue r 32896

$overflow on
code auto:3558 subtract[Pointer] 32767[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3559 subtract[compile-time] 32767[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -129;
endcode
varvalue r 32896

$overflow off
code auto:3560 subtract[Pointer] 32767[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3561 subtract[compile-time] 32767[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow on
code auto:3562 subtract[Pointer] 32767[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32895

code auto:3563 subtract[compile-time] 32767[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow off
code auto:3564 subtract[Pointer] 32767[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3565 subtract[compile-time] 32767[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow on
code auto:3566 subtract[Pointer] 32767[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3567 subtract[compile-time] 32767[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow off
code auto:3568 subtract[Pointer] 32767[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3569 subtract[compile-time] 32767[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3570 subtract[Pointer] 32767[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3571 subtract[compile-time] 32767[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3572 subtract[Pointer] 32767[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3573 subtract[compile-time] 32767[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:3574 subtract[Pointer] 32767[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3575 subtract[compile-time] 32767[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:3576 subtract[Pointer] 32767[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3577 subtract[compile-time] 32767[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:3578 subtract[Pointer] 32767[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3579 subtract[compile-time] 32767[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:3580 subtract[Pointer] 32767[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32639

code auto:3581 subtract[compile-time] 32767[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:3582 subtract[Pointer] 32767[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32639

code auto:3583 subtract[compile-time] 32767[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:3584 subtract[Pointer] 32767[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3585 subtract[compile-time] 32767[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:3586 subtract[Pointer] 32767[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3587 subtract[compile-time] 32767[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:3588 subtract[Pointer] 32768[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3589 subtract[compile-time] 32768[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -32768;
endcode
compile error

$overflow on
code auto:3590 subtract[Pointer] 32768[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3591 subtract[compile-time] 32768[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -32768;
endcode
compile error

$overflow off
code auto:3592 subtract[Pointer] 32768[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3593 subtract[compile-time] 32768[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -32767;
endcode
varvalue r 65535

$overflow on
code auto:3594 subtract[Pointer] 32768[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3595 subtract[compile-time] 32768[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -32767;
endcode
varvalue r 65535

$overflow off
code auto:3596 subtract[Pointer] 32768[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32897

code auto:3597 subtract[compile-time] 32768[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -129;
endcode
varvalue r 32897

$overflow on
code auto:3598 subtract[Pointer] 32768[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32897

code auto:3599 subtract[compile-time] 32768[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -129;
endcode
varvalue r 32897

$overflow off
code auto:3600 subtract[Pointer] 32768[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3601 subtract[compile-time] 32768[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -128;
endcode
varvalue r 32896

$overflow on
code auto:3602 subtract[Pointer] 32768[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32896

code auto:3603 subtract[compile-time] 32768[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -128;
endcode
varvalue r 32896

$overflow off
code auto:3604 subtract[Pointer] 32768[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3605 subtract[compile-time] 32768[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - -1;
endcode
varvalue r 32769

$overflow on
code auto:3606 subtract[Pointer] 32768[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3607 subtract[compile-time] 32768[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - -1;
endcode
varvalue r 32769

$overflow off
code auto:3608 subtract[Pointer] 32768[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3609 subtract[compile-time] 32768[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3610 subtract[Pointer] 32768[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3611 subtract[compile-time] 32768[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3612 subtract[Pointer] 32768[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3613 subtract[compile-time] 32768[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:3614 subtract[Pointer] 32768[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3615 subtract[compile-time] 32768[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:3616 subtract[Pointer] 32768[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3617 subtract[compile-time] 32768[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:3618 subtract[Pointer] 32768[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3619 subtract[compile-time] 32768[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:3620 subtract[Pointer] 32768[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3621 subtract[compile-time] 32768[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow on
code auto:3622 subtract[Pointer] 32768[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3623 subtract[compile-time] 32768[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow off
code auto:3624 subtract[Pointer] 32768[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3625 subtract[compile-time] 32768[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3626 subtract[Pointer] 32768[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3627 subtract[compile-time] 32768[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3628 subtract[Pointer] 65535[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3629 subtract[compile-time] 65535[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -32768;
endcode
compile error

$overflow on
code auto:3630 subtract[Pointer] 65535[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3631 subtract[compile-time] 65535[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -32768;
endcode
compile error

$overflow off
code auto:3632 subtract[Pointer] 65535[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3633 subtract[compile-time] 65535[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -32767;
endcode
compile error

$overflow on
code auto:3634 subtract[Pointer] 65535[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3635 subtract[compile-time] 65535[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -32767;
endcode
compile error

$overflow off
code auto:3636 subtract[Pointer] 65535[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3637 subtract[compile-time] 65535[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -129;
endcode
compile error

$overflow on
code auto:3638 subtract[Pointer] 65535[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3639 subtract[compile-time] 65535[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -129;
endcode
compile error

$overflow off
code auto:3640 subtract[Pointer] 65535[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3641 subtract[compile-time] 65535[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -128;
endcode
compile error

$overflow on
code auto:3642 subtract[Pointer] 65535[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3643 subtract[compile-time] 65535[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -128;
endcode
compile error

$overflow off
code auto:3644 subtract[Pointer] 65535[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3645 subtract[compile-time] 65535[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - -1;
endcode
compile error

$overflow on
code auto:3646 subtract[Pointer] 65535[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3647 subtract[compile-time] 65535[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - -1;
endcode
compile error

$overflow off
code auto:3648 subtract[Pointer] 65535[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3649 subtract[compile-time] 65535[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3650 subtract[Pointer] 65535[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3651 subtract[compile-time] 65535[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3652 subtract[Pointer] 65535[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3653 subtract[compile-time] 65535[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow on
code auto:3654 subtract[Pointer] 65535[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3655 subtract[compile-time] 65535[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow off
code auto:3656 subtract[Pointer] 65535[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3657 subtract[compile-time] 65535[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow on
code auto:3658 subtract[Pointer] 65535[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3659 subtract[compile-time] 65535[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow off
code auto:3660 subtract[Pointer] 65535[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65407

code auto:3661 subtract[compile-time] 65535[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow on
code auto:3662 subtract[Pointer] 65535[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65407

code auto:3663 subtract[compile-time] 65535[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow off
code auto:3664 subtract[Pointer] 65535[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3665 subtract[compile-time] 65535[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:3666 subtract[Pointer] 65535[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3667 subtract[compile-time] 65535[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:3668 subtract[Pointer] 0[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3669 subtract[compile-time] 0[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3670 subtract[Pointer] 0[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3671 subtract[compile-time] 0[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3672 subtract[Pointer] 0[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3673 subtract[compile-time] 0[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:3674 subtract[Pointer] 0[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3675 subtract[compile-time] 0[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:3676 subtract[Pointer] 0[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65409

code auto:3677 subtract[compile-time] 0[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:3678 subtract[Pointer] 0[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3679 subtract[compile-time] 0[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:3680 subtract[Pointer] 0[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3681 subtract[compile-time] 0[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:3682 subtract[Pointer] 0[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3683 subtract[compile-time] 0[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:3684 subtract[Pointer] 0[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:3685 subtract[compile-time] 0[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3686 subtract[Pointer] 0[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3687 subtract[compile-time] 0[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3688 subtract[Pointer] 255[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3689 subtract[compile-time] 255[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3690 subtract[Pointer] 255[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3691 subtract[compile-time] 255[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3692 subtract[Pointer] 255[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3693 subtract[compile-time] 255[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:3694 subtract[Pointer] 255[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 254

code auto:3695 subtract[compile-time] 255[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:3696 subtract[Pointer] 255[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3697 subtract[compile-time] 255[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:3698 subtract[Pointer] 255[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 128

code auto:3699 subtract[compile-time] 255[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:3700 subtract[Pointer] 255[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3701 subtract[compile-time] 255[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:3702 subtract[Pointer] 255[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 127

code auto:3703 subtract[compile-time] 255[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:3704 subtract[Pointer] 255[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3705 subtract[compile-time] 255[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3706 subtract[Pointer] 255[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3707 subtract[compile-time] 255[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3708 subtract[Pointer] 32767[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3709 subtract[compile-time] 32767[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3710 subtract[Pointer] 32767[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3711 subtract[compile-time] 32767[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3712 subtract[Pointer] 32767[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3713 subtract[compile-time] 32767[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:3714 subtract[Pointer] 32767[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32766

code auto:3715 subtract[compile-time] 32767[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:3716 subtract[Pointer] 32767[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3717 subtract[compile-time] 32767[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:3718 subtract[Pointer] 32767[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3719 subtract[compile-time] 32767[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:3720 subtract[Pointer] 32767[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32639

code auto:3721 subtract[compile-time] 32767[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:3722 subtract[Pointer] 32767[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32639

code auto:3723 subtract[compile-time] 32767[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:3724 subtract[Pointer] 32767[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3725 subtract[compile-time] 32767[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3726 subtract[Pointer] 32767[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3727 subtract[compile-time] 32767[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3728 subtract[Pointer] 32768[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3729 subtract[compile-time] 32768[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3730 subtract[Pointer] 32768[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3731 subtract[compile-time] 32768[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3732 subtract[Pointer] 32768[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3733 subtract[compile-time] 32768[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow on
code auto:3734 subtract[Pointer] 32768[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3735 subtract[compile-time] 32768[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 1;
endcode
varvalue r 32767

$overflow off
code auto:3736 subtract[Pointer] 32768[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3737 subtract[compile-time] 32768[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow on
code auto:3738 subtract[Pointer] 32768[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32641

code auto:3739 subtract[compile-time] 32768[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 127;
endcode
varvalue r 32641

$overflow off
code auto:3740 subtract[Pointer] 32768[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3741 subtract[compile-time] 32768[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow on
code auto:3742 subtract[Pointer] 32768[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32640

code auto:3743 subtract[compile-time] 32768[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 128;
endcode
varvalue r 32640

$overflow off
code auto:3744 subtract[Pointer] 32768[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3745 subtract[compile-time] 32768[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3746 subtract[Pointer] 32768[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3747 subtract[compile-time] 32768[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3748 subtract[Pointer] 65535[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3749 subtract[compile-time] 65535[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3750 subtract[Pointer] 65535[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3751 subtract[compile-time] 65535[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3752 subtract[Pointer] 65535[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3753 subtract[compile-time] 65535[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow on
code auto:3754 subtract[Pointer] 65535[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65534

code auto:3755 subtract[compile-time] 65535[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 1;
endcode
varvalue r 65534

$overflow off
code auto:3756 subtract[Pointer] 65535[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3757 subtract[compile-time] 65535[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow on
code auto:3758 subtract[Pointer] 65535[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65408

code auto:3759 subtract[compile-time] 65535[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 127;
endcode
varvalue r 65408

$overflow off
code auto:3760 subtract[Pointer] 65535[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65407

code auto:3761 subtract[compile-time] 65535[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow on
code auto:3762 subtract[Pointer] 65535[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65407

code auto:3763 subtract[compile-time] 65535[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 128;
endcode
varvalue r 65407

$overflow off
code auto:3764 subtract[Pointer] 65535[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3765 subtract[compile-time] 65535[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3766 subtract[Pointer] 65535[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3767 subtract[compile-time] 65535[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3768 subtract[Pointer] 0[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3769 subtract[compile-time] 0[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3770 subtract[Pointer] 0[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3771 subtract[compile-time] 0[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3772 subtract[Pointer] 0[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:3773 subtract[compile-time] 0[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3774 subtract[Pointer] 0[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3775 subtract[compile-time] 0[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3776 subtract[Pointer] 0[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3777 subtract[compile-time] 0[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:3778 subtract[Pointer] 0[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3779 subtract[compile-time] 0[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:3780 subtract[Pointer] 0[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3781 subtract[compile-time] 0[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:3782 subtract[Pointer] 0[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3783 subtract[compile-time] 0[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:3784 subtract[Pointer] 0[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3785 subtract[compile-time] 0[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:3786 subtract[Pointer] 0[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3787 subtract[compile-time] 0[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:3788 subtract[Pointer] 255[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3789 subtract[compile-time] 255[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3790 subtract[Pointer] 255[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3791 subtract[compile-time] 255[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3792 subtract[Pointer] 255[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3793 subtract[compile-time] 255[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3794 subtract[Pointer] 255[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3795 subtract[compile-time] 255[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3796 subtract[Pointer] 255[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33024

code auto:3797 subtract[compile-time] 255[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:3798 subtract[Pointer] 255[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3799 subtract[compile-time] 255[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:3800 subtract[Pointer] 255[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:3801 subtract[compile-time] 255[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:3802 subtract[Pointer] 255[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3803 subtract[compile-time] 255[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:3804 subtract[Pointer] 255[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3805 subtract[compile-time] 255[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:3806 subtract[Pointer] 255[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3807 subtract[compile-time] 255[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:3808 subtract[Pointer] 32767[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3809 subtract[compile-time] 32767[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3810 subtract[Pointer] 32767[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3811 subtract[compile-time] 32767[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3812 subtract[Pointer] 32767[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3813 subtract[compile-time] 32767[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3814 subtract[Pointer] 32767[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3815 subtract[compile-time] 32767[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3816 subtract[Pointer] 32767[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3817 subtract[compile-time] 32767[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:3818 subtract[Pointer] 32767[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3819 subtract[compile-time] 32767[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:3820 subtract[Pointer] 32767[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3821 subtract[compile-time] 32767[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:3822 subtract[Pointer] 32767[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3823 subtract[compile-time] 32767[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:3824 subtract[Pointer] 32767[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3825 subtract[compile-time] 32767[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:3826 subtract[Pointer] 32767[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3827 subtract[compile-time] 32767[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:3828 subtract[Pointer] 32768[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3829 subtract[compile-time] 32768[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3830 subtract[Pointer] 32768[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3831 subtract[compile-time] 32768[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3832 subtract[Pointer] 32768[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3833 subtract[compile-time] 32768[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3834 subtract[Pointer] 32768[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3835 subtract[compile-time] 32768[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3836 subtract[Pointer] 32768[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3837 subtract[compile-time] 32768[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3838 subtract[Pointer] 32768[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3839 subtract[compile-time] 32768[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3840 subtract[Pointer] 32768[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3841 subtract[compile-time] 32768[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:3842 subtract[Pointer] 32768[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3843 subtract[compile-time] 32768[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:3844 subtract[Pointer] 32768[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3845 subtract[compile-time] 32768[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:3846 subtract[Pointer] 32768[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3847 subtract[compile-time] 32768[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:3848 subtract[Pointer] 65535[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3849 subtract[compile-time] 65535[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3850 subtract[Pointer] 65535[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3851 subtract[compile-time] 65535[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3852 subtract[Pointer] 65535[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3853 subtract[compile-time] 65535[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3854 subtract[Pointer] 65535[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3855 subtract[compile-time] 65535[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3856 subtract[Pointer] 65535[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3857 subtract[compile-time] 65535[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:3858 subtract[Pointer] 65535[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3859 subtract[compile-time] 65535[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:3860 subtract[Pointer] 65535[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3861 subtract[compile-time] 65535[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:3862 subtract[Pointer] 65535[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3863 subtract[compile-time] 65535[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:3864 subtract[Pointer] 65535[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3865 subtract[compile-time] 65535[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:3866 subtract[Pointer] 65535[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3867 subtract[compile-time] 65535[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:3868 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3869 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:3870 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3871 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:3872 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65281

code auto:3873 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:3874 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3875 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:3876 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3877 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:3878 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3879 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:3880 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3881 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:3882 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3883 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:3884 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3885 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:3886 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3887 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:3888 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3889 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:3890 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 255

code auto:3891 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:3892 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3893 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:3894 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3895 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:3896 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33024

code auto:3897 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:3898 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3899 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:3900 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 33023

code auto:3901 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:3902 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3903 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:3904 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 256

code auto:3905 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:3906 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3907 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:3908 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3909 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:3910 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3911 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:3912 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3913 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:3914 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32512

code auto:3915 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:3916 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3917 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:3918 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3919 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:3920 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3921 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:3922 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3923 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:3924 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3925 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:3926 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3927 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:3928 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3929 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:3930 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3931 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:3932 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3933 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:3934 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32513

code auto:3935 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:3936 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3937 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:3938 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 1

code auto:3939 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:3940 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3941 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:3942 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3943 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:3944 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32769

code auto:3945 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:3946 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
runtime overflow

code auto:3947 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:3948 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3949 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:3950 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65535

code auto:3951 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:3952 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3953 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:3954 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 65280

code auto:3955 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:3956 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3957 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:3958 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32768

code auto:3959 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:3960 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3961 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:3962 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 32767

code auto:3963 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:3964 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3965 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:3966 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a - b;
endcode
varvalue r 0

code auto:3967 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:3968 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:3969 subtract[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 0

code auto:3970 subtract[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:3971 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:3972 subtract[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r -1

code auto:3973 subtract[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -127;
endcode
varvalue r -1

$overflow on
code auto:3974 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:3975 subtract[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -127

code auto:3976 subtract[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:3977 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:3978 subtract[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -128

code auto:3979 subtract[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:3980 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:3981 subtract[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 1;
endcode
runtime overflow

code auto:3982 subtract[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:3983 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:3984 subtract[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:3985 subtract[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:3986 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:3987 subtract[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 1

code auto:3988 subtract[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:3989 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:3990 subtract[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 0

code auto:3991 subtract[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -127;
endcode
varvalue r 0

$overflow on
code auto:3992 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:3993 subtract[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r -126

code auto:3994 subtract[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - -1;
endcode
varvalue r -126

$overflow on
code auto:3995 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:3996 subtract[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -127

code auto:3997 subtract[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:3998 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:3999 subtract[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -128

code auto:4000 subtract[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 1;
endcode
varvalue r -128

$overflow on
code auto:4001 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4002 subtract[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:4003 subtract[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 - 127;
endcode
compile error

$overflow on
code auto:4004 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4005 subtract[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -128;
endcode
varvalue r 127

code auto:4006 subtract[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:4007 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:4008 subtract[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 126

code auto:4009 subtract[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:4010 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4011 subtract[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 0

code auto:4012 subtract[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:4013 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4014 subtract[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -1

code auto:4015 subtract[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:4016 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:4017 subtract[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -2

code auto:4018 subtract[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:4019 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4020 subtract[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -128

code auto:4021 subtract[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:4022 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4023 subtract[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:4024 subtract[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -128;
endcode
compile error

$overflow on
code auto:4025 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4026 subtract[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -127;
endcode
varvalue r 127

code auto:4027 subtract[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:4028 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4029 subtract[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 1

code auto:4030 subtract[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:4031 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4032 subtract[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 0

code auto:4033 subtract[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:4034 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4035 subtract[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -1

code auto:4036 subtract[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:4037 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4038 subtract[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -127

code auto:4039 subtract[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:4040 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4041 subtract[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:4042 subtract[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -128;
endcode
compile error

$overflow on
code auto:4043 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4044 subtract[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -127;
endcode
runtime overflow

code auto:4045 subtract[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -127;
endcode
compile error

$overflow on
code auto:4046 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:4047 subtract[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - -1;
endcode
varvalue r 2

code auto:4048 subtract[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:4049 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4050 subtract[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 1

code auto:4051 subtract[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:4052 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4053 subtract[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 0

code auto:4054 subtract[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:4055 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4056 subtract[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -126

code auto:4057 subtract[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:4058 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4059 subtract[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -128;
endcode
runtime overflow

code auto:4060 subtract[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -128;
endcode
compile error

$overflow on
code auto:4061 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4062 subtract[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -127;
endcode
runtime overflow

code auto:4063 subtract[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -127;
endcode
compile error

$overflow on
code auto:4064 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4065 subtract[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - -1;
endcode
runtime overflow

code auto:4066 subtract[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -1;
endcode
compile error

$overflow on
code auto:4067 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4068 subtract[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 127

code auto:4069 subtract[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:4070 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:4071 subtract[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 126

code auto:4072 subtract[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:4073 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4074 subtract[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 0

code auto:4075 subtract[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:4076 subtract[Int8] -128[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4077 subtract[Int8] -128[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 0

code auto:4078 subtract[compile-time] -128[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:4079 subtract[Int8] -128[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4080 subtract[Int8] -128[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 0

code auto:4081 subtract[compile-time] -128[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:4082 subtract[Int8] -128[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4083 subtract[Int8] -128[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r -1

code auto:4084 subtract[compile-time] -128[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -127;
endcode
varvalue r -1

$overflow on
code auto:4085 subtract[Int8] -128[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4086 subtract[Int8] -128[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r -1

code auto:4087 subtract[compile-time] -128[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -127;
endcode
varvalue r -1

$overflow off
code auto:4088 subtract[Int8] -128[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4089 subtract[Int8] -128[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r -127

code auto:4090 subtract[compile-time] -128[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:4091 subtract[Int8] -128[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4092 subtract[Int8] -128[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r -127

code auto:4093 subtract[compile-time] -128[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:4094 subtract[Int8] -128[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4095 subtract[Int8] -128[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -128

code auto:4096 subtract[compile-time] -128[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:4097 subtract[Int8] -128[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4098 subtract[Int8] -128[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -128

code auto:4099 subtract[compile-time] -128[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:4100 subtract[Int8] -128[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4101 subtract[Int8] -128[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 127

code auto:4102 subtract[compile-time] -128[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:4103 subtract[Int8] -128[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4104 subtract[Int8] -128[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 1;
endcode
runtime overflow

code auto:4105 subtract[compile-time] -128[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow off
code auto:4106 subtract[Int8] -128[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4107 subtract[Int8] -128[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 1

code auto:4108 subtract[compile-time] -128[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:4109 subtract[Int8] -128[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4110 subtract[Int8] -128[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a - 127;
endcode
runtime overflow

code auto:4111 subtract[compile-time] -128[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow off
code auto:4112 subtract[Int8] -127[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4113 subtract[Int8] -127[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 1

code auto:4114 subtract[compile-time] -127[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:4115 subtract[Int8] -127[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4116 subtract[Int8] -127[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 1

code auto:4117 subtract[compile-time] -127[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -128;
endcode
varvalue r 1

$overflow off
code auto:4118 subtract[Int8] -127[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4119 subtract[Int8] -127[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 0

code auto:4120 subtract[compile-time] -127[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -127;
endcode
varvalue r 0

$overflow on
code auto:4121 subtract[Int8] -127[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4122 subtract[Int8] -127[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 0

code auto:4123 subtract[compile-time] -127[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -127;
endcode
varvalue r 0

$overflow off
code auto:4124 subtract[Int8] -127[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:4125 subtract[Int8] -127[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r -126

code auto:4126 subtract[compile-time] -127[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - -1;
endcode
varvalue r -126

$overflow on
code auto:4127 subtract[Int8] -127[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:4128 subtract[Int8] -127[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r -126

code auto:4129 subtract[compile-time] -127[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - -1;
endcode
varvalue r -126

$overflow off
code auto:4130 subtract[Int8] -127[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4131 subtract[Int8] -127[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -127

code auto:4132 subtract[compile-time] -127[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow on
code auto:4133 subtract[Int8] -127[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4134 subtract[Int8] -127[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -127

code auto:4135 subtract[compile-time] -127[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 0;
endcode
varvalue r -127

$overflow off
code auto:4136 subtract[Int8] -127[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4137 subtract[Int8] -127[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -128

code auto:4138 subtract[compile-time] -127[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow on
code auto:4139 subtract[Int8] -127[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4140 subtract[Int8] -127[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -128

code auto:4141 subtract[compile-time] -127[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 1;
endcode
varvalue r -128

$overflow off
code auto:4142 subtract[Int8] -127[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:4143 subtract[Int8] -127[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 2

code auto:4144 subtract[compile-time] -127[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow on
code auto:4145 subtract[Int8] -127[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4146 subtract[Int8] -127[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a - 127;
endcode
runtime overflow

code auto:4147 subtract[compile-time] -127[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 - 127;
endcode
varvalue r -254

$overflow off
code auto:4148 subtract[Int8] -1[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4149 subtract[Int8] -1[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 127

code auto:4150 subtract[compile-time] -1[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:4151 subtract[Int8] -1[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4152 subtract[Int8] -1[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r 127

code auto:4153 subtract[compile-time] -1[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:4154 subtract[Int8] -1[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:4155 subtract[Int8] -1[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 126

code auto:4156 subtract[compile-time] -1[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:4157 subtract[Int8] -1[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:4158 subtract[Int8] -1[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 126

code auto:4159 subtract[compile-time] -1[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -127;
endcode
varvalue r 126

$overflow off
code auto:4160 subtract[Int8] -1[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4161 subtract[Int8] -1[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 0

code auto:4162 subtract[compile-time] -1[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:4163 subtract[Int8] -1[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4164 subtract[Int8] -1[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 0

code auto:4165 subtract[compile-time] -1[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:4166 subtract[Int8] -1[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4167 subtract[Int8] -1[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -1

code auto:4168 subtract[compile-time] -1[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:4169 subtract[Int8] -1[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4170 subtract[Int8] -1[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r -1

code auto:4171 subtract[compile-time] -1[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:4172 subtract[Int8] -1[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:4173 subtract[Int8] -1[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -2

code auto:4174 subtract[compile-time] -1[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:4175 subtract[Int8] -1[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:4176 subtract[Int8] -1[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -2

code auto:4177 subtract[compile-time] -1[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:4178 subtract[Int8] -1[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4179 subtract[Int8] -1[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -128

code auto:4180 subtract[compile-time] -1[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:4181 subtract[Int8] -1[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4182 subtract[Int8] -1[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -128

code auto:4183 subtract[compile-time] -1[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:4184 subtract[Int8] 0[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4185 subtract[Int8] 0[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r -128

code auto:4186 subtract[compile-time] 0[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:4187 subtract[Int8] 0[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4188 subtract[Int8] 0[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -128;
endcode
runtime overflow

code auto:4189 subtract[compile-time] 0[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:4190 subtract[Int8] 0[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4191 subtract[Int8] 0[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 127

code auto:4192 subtract[compile-time] 0[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:4193 subtract[Int8] 0[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4194 subtract[Int8] 0[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r 127

code auto:4195 subtract[compile-time] 0[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:4196 subtract[Int8] 0[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4197 subtract[Int8] 0[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 1

code auto:4198 subtract[compile-time] 0[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:4199 subtract[Int8] 0[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4200 subtract[Int8] 0[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 1

code auto:4201 subtract[compile-time] 0[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:4202 subtract[Int8] 0[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4203 subtract[Int8] 0[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 0

code auto:4204 subtract[compile-time] 0[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:4205 subtract[Int8] 0[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4206 subtract[Int8] 0[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 0

code auto:4207 subtract[compile-time] 0[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:4208 subtract[Int8] 0[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4209 subtract[Int8] 0[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -1

code auto:4210 subtract[compile-time] 0[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:4211 subtract[Int8] 0[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4212 subtract[Int8] 0[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r -1

code auto:4213 subtract[compile-time] 0[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:4214 subtract[Int8] 0[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4215 subtract[Int8] 0[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -127

code auto:4216 subtract[compile-time] 0[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:4217 subtract[Int8] 0[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4218 subtract[Int8] 0[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -127

code auto:4219 subtract[compile-time] 0[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:4220 subtract[Int8] 1[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:4221 subtract[Int8] 1[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r -127

code auto:4222 subtract[compile-time] 1[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:4223 subtract[Int8] 1[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4224 subtract[Int8] 1[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -128;
endcode
runtime overflow

code auto:4225 subtract[compile-time] 1[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:4226 subtract[Int8] 1[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4227 subtract[Int8] 1[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r -128

code auto:4228 subtract[compile-time] 1[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow on
code auto:4229 subtract[Int8] 1[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4230 subtract[Int8] 1[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -127;
endcode
runtime overflow

code auto:4231 subtract[compile-time] 1[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -127;
endcode
varvalue r 128

$overflow off
code auto:4232 subtract[Int8] 1[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:4233 subtract[Int8] 1[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 2

code auto:4234 subtract[compile-time] 1[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:4235 subtract[Int8] 1[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:4236 subtract[Int8] 1[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r 2

code auto:4237 subtract[compile-time] 1[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:4238 subtract[Int8] 1[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4239 subtract[Int8] 1[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 1

code auto:4240 subtract[compile-time] 1[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:4241 subtract[Int8] 1[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:4242 subtract[Int8] 1[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 1

code auto:4243 subtract[compile-time] 1[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:4244 subtract[Int8] 1[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4245 subtract[Int8] 1[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 0

code auto:4246 subtract[compile-time] 1[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:4247 subtract[Int8] 1[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4248 subtract[Int8] 1[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 0

code auto:4249 subtract[compile-time] 1[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:4250 subtract[Int8] 1[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:4251 subtract[Int8] 1[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -126

code auto:4252 subtract[compile-time] 1[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:4253 subtract[Int8] 1[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:4254 subtract[Int8] 1[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r -126

code auto:4255 subtract[compile-time] 1[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:4256 subtract[Int8] 127[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:4257 subtract[Int8] 127[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -128;
endcode
varvalue r -1

code auto:4258 subtract[compile-time] 127[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:4259 subtract[Int8] 127[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4260 subtract[Int8] 127[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -128;
endcode
runtime overflow

code auto:4261 subtract[compile-time] 127[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:4262 subtract[Int8] 127[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:4263 subtract[Int8] 127[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -127;
endcode
varvalue r -2

code auto:4264 subtract[compile-time] 127[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow on
code auto:4265 subtract[Int8] 127[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4266 subtract[Int8] 127[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -127;
endcode
runtime overflow

code auto:4267 subtract[compile-time] 127[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -127;
endcode
varvalue r 254

$overflow off
code auto:4268 subtract[Int8] 127[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:4269 subtract[Int8] 127[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -1;
endcode
varvalue r -128

code auto:4270 subtract[compile-time] 127[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:4271 subtract[Int8] 127[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:4272 subtract[Int8] 127[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - -1;
endcode
runtime overflow

code auto:4273 subtract[compile-time] 127[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:4274 subtract[Int8] 127[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4275 subtract[Int8] 127[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 127

code auto:4276 subtract[compile-time] 127[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:4277 subtract[Int8] 127[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:4278 subtract[Int8] 127[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 127

code auto:4279 subtract[compile-time] 127[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:4280 subtract[Int8] 127[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:4281 subtract[Int8] 127[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 126

code auto:4282 subtract[compile-time] 127[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:4283 subtract[Int8] 127[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:4284 subtract[Int8] 127[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 126

code auto:4285 subtract[compile-time] 127[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:4286 subtract[Int8] 127[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4287 subtract[Int8] 127[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 0

code auto:4288 subtract[compile-time] 127[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:4289 subtract[Int8] 127[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:4290 subtract[Int8] 127[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 0

code auto:4291 subtract[compile-time] 127[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:4292 subtract[Int8] -128[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4293 subtract[Int8] -128[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 0

code auto:4294 subtract[compile-time] -128[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:4295 subtract[Int8] -128[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4296 subtract[Int8] -128[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 0

code auto:4297 subtract[compile-time] -128[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:4298 subtract[Int8] -128[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:4299 subtract[Int8] -128[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 255

code auto:4300 subtract[compile-time] -128[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -127;
endcode
compile error

$overflow on
code auto:4301 subtract[Int8] -128[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4302 subtract[Int8] -128[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -127;
endcode
runtime overflow

code auto:4303 subtract[compile-time] -128[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -127;
endcode
compile error

$overflow off
code auto:4304 subtract[Int8] -128[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:4305 subtract[Int8] -128[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 129

code auto:4306 subtract[compile-time] -128[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -1;
endcode
compile error

$overflow on
code auto:4307 subtract[Int8] -128[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4308 subtract[Int8] -128[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - -1;
endcode
runtime overflow

code auto:4309 subtract[compile-time] -128[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -1;
endcode
compile error

$overflow off
code auto:4310 subtract[Int8] -128[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4311 subtract[Int8] -128[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 128

code auto:4312 subtract[compile-time] -128[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:4313 subtract[Int8] -128[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4314 subtract[Int8] -128[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 0;
endcode
runtime overflow

code auto:4315 subtract[compile-time] -128[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:4316 subtract[Int8] -128[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4317 subtract[Int8] -128[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 127

code auto:4318 subtract[compile-time] -128[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:4319 subtract[Int8] -128[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4320 subtract[Int8] -128[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:4321 subtract[compile-time] -128[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:4322 subtract[Int8] -128[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4323 subtract[Int8] -128[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 1

code auto:4324 subtract[compile-time] -128[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:4325 subtract[Int8] -128[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4326 subtract[Int8] -128[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:4327 subtract[compile-time] -128[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:4328 subtract[Int8] -127[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4329 subtract[Int8] -127[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 1

code auto:4330 subtract[compile-time] -127[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:4331 subtract[Int8] -127[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4332 subtract[Int8] -127[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 1

code auto:4333 subtract[compile-time] -127[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - -128;
endcode
varvalue r 1

$overflow off
code auto:4334 subtract[Int8] -127[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4335 subtract[Int8] -127[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 0

code auto:4336 subtract[compile-time] -127[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - -127;
endcode
varvalue r 0

$overflow on
code auto:4337 subtract[Int8] -127[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4338 subtract[Int8] -127[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 0

code auto:4339 subtract[compile-time] -127[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - -127;
endcode
varvalue r 0

$overflow off
code auto:4340 subtract[Int8] -127[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:4341 subtract[Int8] -127[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 130

code auto:4342 subtract[compile-time] -127[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - -1;
endcode
compile error

$overflow on
code auto:4343 subtract[Int8] -127[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4344 subtract[Int8] -127[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - -1;
endcode
runtime overflow

code auto:4345 subtract[compile-time] -127[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - -1;
endcode
compile error

$overflow off
code auto:4346 subtract[Int8] -127[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:4347 subtract[Int8] -127[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 129

code auto:4348 subtract[compile-time] -127[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - 0;
endcode
compile error

$overflow on
code auto:4349 subtract[Int8] -127[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4350 subtract[Int8] -127[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 0;
endcode
runtime overflow

code auto:4351 subtract[compile-time] -127[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - 0;
endcode
compile error

$overflow off
code auto:4352 subtract[Int8] -127[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4353 subtract[Int8] -127[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 128

code auto:4354 subtract[compile-time] -127[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - 1;
endcode
compile error

$overflow on
code auto:4355 subtract[Int8] -127[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4356 subtract[Int8] -127[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:4357 subtract[compile-time] -127[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - 1;
endcode
compile error

$overflow off
code auto:4358 subtract[Int8] -127[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:4359 subtract[Int8] -127[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 2

code auto:4360 subtract[compile-time] -127[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 - 127;
endcode
compile error

$overflow on
code auto:4361 subtract[Int8] -127[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4362 subtract[Int8] -127[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:4363 subtract[compile-time] -127[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 - 127;
endcode
compile error

$overflow off
code auto:4364 subtract[Int8] -1[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4365 subtract[Int8] -1[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 127

code auto:4366 subtract[compile-time] -1[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:4367 subtract[Int8] -1[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4368 subtract[Int8] -1[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 127

code auto:4369 subtract[compile-time] -1[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:4370 subtract[Int8] -1[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:4371 subtract[Int8] -1[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 126

code auto:4372 subtract[compile-time] -1[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:4373 subtract[Int8] -1[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:4374 subtract[Int8] -1[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 126

code auto:4375 subtract[compile-time] -1[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -127;
endcode
varvalue r 126

$overflow off
code auto:4376 subtract[Int8] -1[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4377 subtract[Int8] -1[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 0

code auto:4378 subtract[compile-time] -1[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:4379 subtract[Int8] -1[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4380 subtract[Int8] -1[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 0

code auto:4381 subtract[compile-time] -1[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:4382 subtract[Int8] -1[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:4383 subtract[Int8] -1[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 255

code auto:4384 subtract[compile-time] -1[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:4385 subtract[Int8] -1[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4386 subtract[Int8] -1[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 0;
endcode
runtime overflow

code auto:4387 subtract[compile-time] -1[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:4388 subtract[Int8] -1[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:4389 subtract[Int8] -1[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 254

code auto:4390 subtract[compile-time] -1[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 1;
endcode
compile error

$overflow on
code auto:4391 subtract[Int8] -1[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4392 subtract[Int8] -1[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:4393 subtract[compile-time] -1[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 1;
endcode
compile error

$overflow off
code auto:4394 subtract[Int8] -1[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4395 subtract[Int8] -1[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 128

code auto:4396 subtract[compile-time] -1[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 127;
endcode
compile error

$overflow on
code auto:4397 subtract[Int8] -1[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4398 subtract[Int8] -1[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:4399 subtract[compile-time] -1[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 127;
endcode
compile error

$overflow off
code auto:4400 subtract[Int8] 0[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4401 subtract[Int8] 0[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 128

code auto:4402 subtract[compile-time] 0[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:4403 subtract[Int8] 0[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4404 subtract[Int8] 0[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -128;
endcode
runtime overflow

code auto:4405 subtract[compile-time] 0[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:4406 subtract[Int8] 0[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4407 subtract[Int8] 0[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 127

code auto:4408 subtract[compile-time] 0[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:4409 subtract[Int8] 0[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4410 subtract[Int8] 0[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 127

code auto:4411 subtract[compile-time] 0[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:4412 subtract[Int8] 0[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4413 subtract[Int8] 0[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 1

code auto:4414 subtract[compile-time] 0[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:4415 subtract[Int8] 0[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4416 subtract[Int8] 0[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 1

code auto:4417 subtract[compile-time] 0[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:4418 subtract[Int8] 0[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4419 subtract[Int8] 0[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 0

code auto:4420 subtract[compile-time] 0[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:4421 subtract[Int8] 0[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4422 subtract[Int8] 0[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 0

code auto:4423 subtract[compile-time] 0[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:4424 subtract[Int8] 0[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:4425 subtract[Int8] 0[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 255

code auto:4426 subtract[compile-time] 0[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:4427 subtract[Int8] 0[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4428 subtract[Int8] 0[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:4429 subtract[compile-time] 0[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:4430 subtract[Int8] 0[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:4431 subtract[Int8] 0[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 129

code auto:4432 subtract[compile-time] 0[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:4433 subtract[Int8] 0[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4434 subtract[Int8] 0[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:4435 subtract[compile-time] 0[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:4436 subtract[Int8] 1[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:4437 subtract[Int8] 1[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 129

code auto:4438 subtract[compile-time] 1[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:4439 subtract[Int8] 1[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4440 subtract[Int8] 1[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -128;
endcode
runtime overflow

code auto:4441 subtract[compile-time] 1[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:4442 subtract[Int8] 1[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4443 subtract[Int8] 1[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 128

code auto:4444 subtract[compile-time] 1[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -127;
endcode
varvalue r 128

$overflow on
code auto:4445 subtract[Int8] 1[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4446 subtract[Int8] 1[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -127;
endcode
runtime overflow

code auto:4447 subtract[compile-time] 1[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -127;
endcode
varvalue r 128

$overflow off
code auto:4448 subtract[Int8] 1[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:4449 subtract[Int8] 1[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 2

code auto:4450 subtract[compile-time] 1[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:4451 subtract[Int8] 1[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:4452 subtract[Int8] 1[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 2

code auto:4453 subtract[compile-time] 1[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:4454 subtract[Int8] 1[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4455 subtract[Int8] 1[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 1

code auto:4456 subtract[compile-time] 1[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:4457 subtract[Int8] 1[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:4458 subtract[Int8] 1[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 1

code auto:4459 subtract[compile-time] 1[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:4460 subtract[Int8] 1[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4461 subtract[Int8] 1[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 0

code auto:4462 subtract[compile-time] 1[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:4463 subtract[Int8] 1[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4464 subtract[Int8] 1[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 0

code auto:4465 subtract[compile-time] 1[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:4466 subtract[Int8] 1[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:4467 subtract[Int8] 1[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 130

code auto:4468 subtract[compile-time] 1[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:4469 subtract[Int8] 1[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4470 subtract[Int8] 1[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:4471 subtract[compile-time] 1[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:4472 subtract[Int8] 127[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:4473 subtract[Int8] 127[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -128;
endcode
varvalue r 255

code auto:4474 subtract[compile-time] 127[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:4475 subtract[Int8] 127[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4476 subtract[Int8] 127[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -128;
endcode
runtime overflow

code auto:4477 subtract[compile-time] 127[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:4478 subtract[Int8] 127[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:4479 subtract[Int8] 127[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -127;
endcode
varvalue r 254

code auto:4480 subtract[compile-time] 127[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -127;
endcode
varvalue r 254

$overflow on
code auto:4481 subtract[Int8] 127[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4482 subtract[Int8] 127[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -127;
endcode
runtime overflow

code auto:4483 subtract[compile-time] 127[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -127;
endcode
varvalue r 254

$overflow off
code auto:4484 subtract[Int8] 127[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:4485 subtract[Int8] 127[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -1;
endcode
varvalue r 128

code auto:4486 subtract[compile-time] 127[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:4487 subtract[Int8] 127[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:4488 subtract[Int8] 127[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - -1;
endcode
runtime overflow

code auto:4489 subtract[compile-time] 127[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:4490 subtract[Int8] 127[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4491 subtract[Int8] 127[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 127

code auto:4492 subtract[compile-time] 127[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:4493 subtract[Int8] 127[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:4494 subtract[Int8] 127[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 127

code auto:4495 subtract[compile-time] 127[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:4496 subtract[Int8] 127[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:4497 subtract[Int8] 127[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 126

code auto:4498 subtract[compile-time] 127[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:4499 subtract[Int8] 127[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:4500 subtract[Int8] 127[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 126

code auto:4501 subtract[compile-time] 127[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:4502 subtract[Int8] 127[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4503 subtract[Int8] 127[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 0

code auto:4504 subtract[compile-time] 127[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:4505 subtract[Int8] 127[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:4506 subtract[Int8] 127[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 0

code auto:4507 subtract[compile-time] 127[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:4508 subtract[Int8] -128[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4509 subtract[Int8] -128[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 0

code auto:4510 subtract[compile-time] -128[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:4511 subtract[Int8] -128[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4512 subtract[Int8] -128[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 0

code auto:4513 subtract[compile-time] -128[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:4514 subtract[Int8] -128[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:4515 subtract[Int8] -128[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 65535

code auto:4516 subtract[compile-time] -128[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -127;
endcode
compile error

$overflow on
code auto:4517 subtract[Int8] -128[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4518 subtract[Int8] -128[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -127;
endcode
runtime overflow

code auto:4519 subtract[compile-time] -128[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -127;
endcode
compile error

$overflow off
code auto:4520 subtract[Int8] -128[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:4521 subtract[Int8] -128[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 65409

code auto:4522 subtract[compile-time] -128[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -1;
endcode
compile error

$overflow on
code auto:4523 subtract[Int8] -128[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4524 subtract[Int8] -128[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - -1;
endcode
runtime overflow

code auto:4525 subtract[compile-time] -128[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -1;
endcode
compile error

$overflow off
code auto:4526 subtract[Int8] -128[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4527 subtract[Int8] -128[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 65408

code auto:4528 subtract[compile-time] -128[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:4529 subtract[Int8] -128[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4530 subtract[Int8] -128[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 0;
endcode
runtime overflow

code auto:4531 subtract[compile-time] -128[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:4532 subtract[Int8] -128[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4533 subtract[Int8] -128[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 127

code auto:4534 subtract[compile-time] -128[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:4535 subtract[Int8] -128[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4536 subtract[Int8] -128[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 1;
endcode
runtime overflow

code auto:4537 subtract[compile-time] -128[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:4538 subtract[Int8] -128[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4539 subtract[Int8] -128[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 1

code auto:4540 subtract[compile-time] -128[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:4541 subtract[Int8] -128[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4542 subtract[Int8] -128[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:4543 subtract[compile-time] -128[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:4544 subtract[Int8] -127[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4545 subtract[Int8] -127[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 1

code auto:4546 subtract[compile-time] -127[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - -128;
endcode
varvalue r 1

$overflow on
code auto:4547 subtract[Int8] -127[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4548 subtract[Int8] -127[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 1

code auto:4549 subtract[compile-time] -127[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - -128;
endcode
varvalue r 1

$overflow off
code auto:4550 subtract[Int8] -127[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4551 subtract[Int8] -127[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 0

code auto:4552 subtract[compile-time] -127[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - -127;
endcode
varvalue r 0

$overflow on
code auto:4553 subtract[Int8] -127[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4554 subtract[Int8] -127[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 0

code auto:4555 subtract[compile-time] -127[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - -127;
endcode
varvalue r 0

$overflow off
code auto:4556 subtract[Int8] -127[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65410

code auto:4557 subtract[Int8] -127[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 65410

code auto:4558 subtract[compile-time] -127[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - -1;
endcode
compile error

$overflow on
code auto:4559 subtract[Int8] -127[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4560 subtract[Int8] -127[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - -1;
endcode
runtime overflow

code auto:4561 subtract[compile-time] -127[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - -1;
endcode
compile error

$overflow off
code auto:4562 subtract[Int8] -127[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:4563 subtract[Int8] -127[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 65409

code auto:4564 subtract[compile-time] -127[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - 0;
endcode
compile error

$overflow on
code auto:4565 subtract[Int8] -127[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4566 subtract[Int8] -127[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 0;
endcode
runtime overflow

code auto:4567 subtract[compile-time] -127[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - 0;
endcode
compile error

$overflow off
code auto:4568 subtract[Int8] -127[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4569 subtract[Int8] -127[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 65408

code auto:4570 subtract[compile-time] -127[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - 1;
endcode
compile error

$overflow on
code auto:4571 subtract[Int8] -127[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4572 subtract[Int8] -127[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 1;
endcode
runtime overflow

code auto:4573 subtract[compile-time] -127[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - 1;
endcode
compile error

$overflow off
code auto:4574 subtract[Int8] -127[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:4575 subtract[Int8] -127[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 2

code auto:4576 subtract[compile-time] -127[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 - 127;
endcode
compile error

$overflow on
code auto:4577 subtract[Int8] -127[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4578 subtract[Int8] -127[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:4579 subtract[compile-time] -127[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 - 127;
endcode
compile error

$overflow off
code auto:4580 subtract[Int8] -1[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4581 subtract[Int8] -1[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 127

code auto:4582 subtract[compile-time] -1[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:4583 subtract[Int8] -1[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4584 subtract[Int8] -1[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 127

code auto:4585 subtract[compile-time] -1[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:4586 subtract[Int8] -1[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:4587 subtract[Int8] -1[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 126

code auto:4588 subtract[compile-time] -1[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -127;
endcode
varvalue r 126

$overflow on
code auto:4589 subtract[Int8] -1[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:4590 subtract[Int8] -1[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 126

code auto:4591 subtract[compile-time] -1[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -127;
endcode
varvalue r 126

$overflow off
code auto:4592 subtract[Int8] -1[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4593 subtract[Int8] -1[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 0

code auto:4594 subtract[compile-time] -1[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:4595 subtract[Int8] -1[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4596 subtract[Int8] -1[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 0

code auto:4597 subtract[compile-time] -1[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:4598 subtract[Int8] -1[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:4599 subtract[Int8] -1[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 65535

code auto:4600 subtract[compile-time] -1[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:4601 subtract[Int8] -1[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4602 subtract[Int8] -1[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 0;
endcode
runtime overflow

code auto:4603 subtract[compile-time] -1[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:4604 subtract[Int8] -1[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:4605 subtract[Int8] -1[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 65534

code auto:4606 subtract[compile-time] -1[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 1;
endcode
compile error

$overflow on
code auto:4607 subtract[Int8] -1[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4608 subtract[Int8] -1[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 1;
endcode
runtime overflow

code auto:4609 subtract[compile-time] -1[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 1;
endcode
compile error

$overflow off
code auto:4610 subtract[Int8] -1[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4611 subtract[Int8] -1[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 65408

code auto:4612 subtract[compile-time] -1[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 127;
endcode
compile error

$overflow on
code auto:4613 subtract[Int8] -1[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4614 subtract[Int8] -1[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:4615 subtract[compile-time] -1[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 127;
endcode
compile error

$overflow off
code auto:4616 subtract[Int8] 0[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4617 subtract[Int8] 0[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 65408

code auto:4618 subtract[compile-time] 0[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:4619 subtract[Int8] 0[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4620 subtract[Int8] 0[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -128;
endcode
runtime overflow

code auto:4621 subtract[compile-time] 0[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:4622 subtract[Int8] 0[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4623 subtract[Int8] 0[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 127

code auto:4624 subtract[compile-time] 0[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -127;
endcode
varvalue r 127

$overflow on
code auto:4625 subtract[Int8] 0[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4626 subtract[Int8] 0[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 127

code auto:4627 subtract[compile-time] 0[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -127;
endcode
varvalue r 127

$overflow off
code auto:4628 subtract[Int8] 0[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4629 subtract[Int8] 0[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 1

code auto:4630 subtract[compile-time] 0[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:4631 subtract[Int8] 0[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4632 subtract[Int8] 0[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 1

code auto:4633 subtract[compile-time] 0[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:4634 subtract[Int8] 0[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4635 subtract[Int8] 0[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 0

code auto:4636 subtract[compile-time] 0[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:4637 subtract[Int8] 0[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4638 subtract[Int8] 0[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 0

code auto:4639 subtract[compile-time] 0[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:4640 subtract[Int8] 0[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:4641 subtract[Int8] 0[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 65535

code auto:4642 subtract[compile-time] 0[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:4643 subtract[Int8] 0[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4644 subtract[Int8] 0[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 1;
endcode
runtime overflow

code auto:4645 subtract[compile-time] 0[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:4646 subtract[Int8] 0[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:4647 subtract[Int8] 0[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 65409

code auto:4648 subtract[compile-time] 0[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:4649 subtract[Int8] 0[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4650 subtract[Int8] 0[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:4651 subtract[compile-time] 0[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:4652 subtract[Int8] 1[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:4653 subtract[Int8] 1[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 65409

code auto:4654 subtract[compile-time] 1[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:4655 subtract[Int8] 1[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4656 subtract[Int8] 1[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -128;
endcode
runtime overflow

code auto:4657 subtract[compile-time] 1[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:4658 subtract[Int8] 1[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4659 subtract[Int8] 1[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 65408

code auto:4660 subtract[compile-time] 1[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -127;
endcode
varvalue r 128

$overflow on
code auto:4661 subtract[Int8] 1[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4662 subtract[Int8] 1[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -127;
endcode
runtime overflow

code auto:4663 subtract[compile-time] 1[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -127;
endcode
varvalue r 128

$overflow off
code auto:4664 subtract[Int8] 1[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:4665 subtract[Int8] 1[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 2

code auto:4666 subtract[compile-time] 1[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:4667 subtract[Int8] 1[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:4668 subtract[Int8] 1[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 2

code auto:4669 subtract[compile-time] 1[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:4670 subtract[Int8] 1[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4671 subtract[Int8] 1[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 1

code auto:4672 subtract[compile-time] 1[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:4673 subtract[Int8] 1[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:4674 subtract[Int8] 1[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 1

code auto:4675 subtract[compile-time] 1[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:4676 subtract[Int8] 1[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4677 subtract[Int8] 1[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 0

code auto:4678 subtract[compile-time] 1[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:4679 subtract[Int8] 1[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4680 subtract[Int8] 1[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 0

code auto:4681 subtract[compile-time] 1[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:4682 subtract[Int8] 1[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65410

code auto:4683 subtract[Int8] 1[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 65410

code auto:4684 subtract[compile-time] 1[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:4685 subtract[Int8] 1[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4686 subtract[Int8] 1[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:4687 subtract[compile-time] 1[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:4688 subtract[Int8] 127[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:4689 subtract[Int8] 127[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -128;
endcode
varvalue r 65535

code auto:4690 subtract[compile-time] 127[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:4691 subtract[Int8] 127[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4692 subtract[Int8] 127[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -128;
endcode
runtime overflow

code auto:4693 subtract[compile-time] 127[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:4694 subtract[Int8] 127[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:4695 subtract[Int8] 127[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -127;
endcode
varvalue r 65534

code auto:4696 subtract[compile-time] 127[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -127;
endcode
varvalue r 254

$overflow on
code auto:4697 subtract[Int8] 127[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4698 subtract[Int8] 127[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -127;
endcode
runtime overflow

code auto:4699 subtract[compile-time] 127[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -127;
endcode
varvalue r 254

$overflow off
code auto:4700 subtract[Int8] 127[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:4701 subtract[Int8] 127[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -1;
endcode
varvalue r 65408

code auto:4702 subtract[compile-time] 127[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:4703 subtract[Int8] 127[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:4704 subtract[Int8] 127[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - -1;
endcode
runtime overflow

code auto:4705 subtract[compile-time] 127[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:4706 subtract[Int8] 127[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4707 subtract[Int8] 127[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 127

code auto:4708 subtract[compile-time] 127[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:4709 subtract[Int8] 127[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:4710 subtract[Int8] 127[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 127

code auto:4711 subtract[compile-time] 127[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:4712 subtract[Int8] 127[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:4713 subtract[Int8] 127[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 126

code auto:4714 subtract[compile-time] 127[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:4715 subtract[Int8] 127[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:4716 subtract[Int8] 127[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 126

code auto:4717 subtract[compile-time] 127[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:4718 subtract[Int8] 127[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4719 subtract[Int8] 127[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 0

code auto:4720 subtract[compile-time] 127[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:4721 subtract[Int8] 127[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:4722 subtract[Int8] 127[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 0

code auto:4723 subtract[compile-time] 127[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:4724 subtract[Integer] -32768[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4725 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow on
code auto:4726 subtract[Integer] -32768[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4727 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow off
code auto:4728 subtract[Integer] -32768[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4729 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - -32767;
endcode
varvalue r -1

$overflow on
code auto:4730 subtract[Integer] -32768[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4731 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - -32767;
endcode
varvalue r -1

$overflow off
code auto:4732 subtract[Integer] -32768[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4733 subtract[compile-time] -32768[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - -129;
endcode
compile error

$overflow on
code auto:4734 subtract[Integer] -32768[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4735 subtract[compile-time] -32768[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - -129;
endcode
compile error

$overflow off
code auto:4736 subtract[Integer] -32768[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4737 subtract[compile-time] -32768[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - -128;
endcode
compile error

$overflow on
code auto:4738 subtract[Integer] -32768[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4739 subtract[compile-time] -32768[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - -128;
endcode
compile error

$overflow off
code auto:4740 subtract[Integer] -32768[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4741 subtract[compile-time] -32768[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - -1;
endcode
compile error

$overflow on
code auto:4742 subtract[Integer] -32768[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4743 subtract[compile-time] -32768[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - -1;
endcode
compile error

$overflow off
code auto:4744 subtract[Integer] -32768[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4745 subtract[compile-time] -32768[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - 0;
endcode
compile error

$overflow on
code auto:4746 subtract[Integer] -32768[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4747 subtract[compile-time] -32768[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - 0;
endcode
compile error

$overflow off
code auto:4748 subtract[Integer] -32768[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4749 subtract[compile-time] -32768[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:4750 subtract[Integer] -32768[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4751 subtract[compile-time] -32768[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:4752 subtract[Integer] -32768[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4753 subtract[compile-time] -32768[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:4754 subtract[Integer] -32768[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4755 subtract[compile-time] -32768[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:4756 subtract[Integer] -32768[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4757 subtract[compile-time] -32768[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:4758 subtract[Integer] -32768[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4759 subtract[compile-time] -32768[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - 128;
endcode
compile error

$overflow off
code auto:4760 subtract[Integer] -32768[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4761 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:4762 subtract[Integer] -32768[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4763 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:4764 subtract[Integer] -32767[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4765 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow on
code auto:4766 subtract[Integer] -32767[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4767 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow off
code auto:4768 subtract[Integer] -32767[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4769 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow on
code auto:4770 subtract[Integer] -32767[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4771 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow off
code auto:4772 subtract[Integer] -32767[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4773 subtract[compile-time] -32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - -129;
endcode
compile error

$overflow on
code auto:4774 subtract[Integer] -32767[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4775 subtract[compile-time] -32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - -129;
endcode
compile error

$overflow off
code auto:4776 subtract[Integer] -32767[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4777 subtract[compile-time] -32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - -128;
endcode
compile error

$overflow on
code auto:4778 subtract[Integer] -32767[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4779 subtract[compile-time] -32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - -128;
endcode
compile error

$overflow off
code auto:4780 subtract[Integer] -32767[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:4781 subtract[compile-time] -32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - -1;
endcode
compile error

$overflow on
code auto:4782 subtract[Integer] -32767[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4783 subtract[compile-time] -32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - -1;
endcode
compile error

$overflow off
code auto:4784 subtract[Integer] -32767[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4785 subtract[compile-time] -32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - 0;
endcode
compile error

$overflow on
code auto:4786 subtract[Integer] -32767[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4787 subtract[compile-time] -32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - 0;
endcode
compile error

$overflow off
code auto:4788 subtract[Integer] -32767[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4789 subtract[compile-time] -32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - 1;
endcode
compile error

$overflow on
code auto:4790 subtract[Integer] -32767[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4791 subtract[compile-time] -32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - 1;
endcode
compile error

$overflow off
code auto:4792 subtract[Integer] -32767[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4793 subtract[compile-time] -32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:4794 subtract[Integer] -32767[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4795 subtract[compile-time] -32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:4796 subtract[Integer] -32767[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4797 subtract[compile-time] -32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:4798 subtract[Integer] -32767[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4799 subtract[compile-time] -32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - 128;
endcode
compile error

$overflow off
code auto:4800 subtract[Integer] -32767[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:4801 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:4802 subtract[Integer] -32767[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4803 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:4804 subtract[Integer] -129[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4805 subtract[compile-time] -129[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - -32768;
endcode
compile error

$overflow on
code auto:4806 subtract[Integer] -129[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4807 subtract[compile-time] -129[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - -32768;
endcode
compile error

$overflow off
code auto:4808 subtract[Integer] -129[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:4809 subtract[compile-time] -129[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - -32767;
endcode
compile error

$overflow on
code auto:4810 subtract[Integer] -129[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4811 subtract[compile-time] -129[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - -32767;
endcode
compile error

$overflow off
code auto:4812 subtract[Integer] -129[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4813 subtract[compile-time] -129[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - -129;
endcode
varvalue r 0

$overflow on
code auto:4814 subtract[Integer] -129[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4815 subtract[compile-time] -129[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - -129;
endcode
varvalue r 0

$overflow off
code auto:4816 subtract[Integer] -129[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4817 subtract[compile-time] -129[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - -128;
endcode
varvalue r -1

$overflow on
code auto:4818 subtract[Integer] -129[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4819 subtract[compile-time] -129[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - -128;
endcode
varvalue r -1

$overflow off
code auto:4820 subtract[Integer] -129[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4821 subtract[compile-time] -129[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - -1;
endcode
varvalue r -128

$overflow on
code auto:4822 subtract[Integer] -129[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4823 subtract[compile-time] -129[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - -1;
endcode
varvalue r -128

$overflow off
code auto:4824 subtract[Integer] -129[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4825 subtract[compile-time] -129[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - 0;
endcode
compile error

$overflow on
code auto:4826 subtract[Integer] -129[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4827 subtract[compile-time] -129[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - 0;
endcode
compile error

$overflow off
code auto:4828 subtract[Integer] -129[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:4829 subtract[compile-time] -129[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - 1;
endcode
compile error

$overflow on
code auto:4830 subtract[Integer] -129[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4831 subtract[compile-time] -129[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - 1;
endcode
compile error

$overflow off
code auto:4832 subtract[Integer] -129[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4833 subtract[compile-time] -129[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - 127;
endcode
compile error

$overflow on
code auto:4834 subtract[Integer] -129[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4835 subtract[compile-time] -129[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - 127;
endcode
compile error

$overflow off
code auto:4836 subtract[Integer] -129[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4837 subtract[compile-time] -129[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - 128;
endcode
compile error

$overflow on
code auto:4838 subtract[Integer] -129[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4839 subtract[compile-time] -129[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - 128;
endcode
compile error

$overflow off
code auto:4840 subtract[Integer] -129[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4841 subtract[compile-time] -129[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:4842 subtract[Integer] -129[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4843 subtract[compile-time] -129[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:4844 subtract[Integer] -128[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4845 subtract[compile-time] -128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -32768;
endcode
compile error

$overflow on
code auto:4846 subtract[Integer] -128[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4847 subtract[compile-time] -128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -32768;
endcode
compile error

$overflow off
code auto:4848 subtract[Integer] -128[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4849 subtract[compile-time] -128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -32767;
endcode
compile error

$overflow on
code auto:4850 subtract[Integer] -128[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4851 subtract[compile-time] -128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -32767;
endcode
compile error

$overflow off
code auto:4852 subtract[Integer] -128[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4853 subtract[compile-time] -128[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:4854 subtract[Integer] -128[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4855 subtract[compile-time] -128[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -129;
endcode
varvalue r 1

$overflow off
code auto:4856 subtract[Integer] -128[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4857 subtract[compile-time] -128[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:4858 subtract[Integer] -128[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4859 subtract[compile-time] -128[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:4860 subtract[Integer] -128[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4861 subtract[compile-time] -128[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:4862 subtract[Integer] -128[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4863 subtract[compile-time] -128[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - -1;
endcode
varvalue r -127

$overflow off
code auto:4864 subtract[Integer] -128[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4865 subtract[compile-time] -128[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:4866 subtract[Integer] -128[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4867 subtract[compile-time] -128[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 0;
endcode
varvalue r -128

$overflow off
code auto:4868 subtract[Integer] -128[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4869 subtract[compile-time] -128[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:4870 subtract[Integer] -128[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4871 subtract[compile-time] -128[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:4872 subtract[Integer] -128[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4873 subtract[compile-time] -128[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:4874 subtract[Integer] -128[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4875 subtract[compile-time] -128[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:4876 subtract[Integer] -128[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4877 subtract[compile-time] -128[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 128;
endcode
compile error

$overflow on
code auto:4878 subtract[Integer] -128[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4879 subtract[compile-time] -128[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 128;
endcode
compile error

$overflow off
code auto:4880 subtract[Integer] -128[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4881 subtract[compile-time] -128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:4882 subtract[Integer] -128[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4883 subtract[compile-time] -128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:4884 subtract[Integer] -1[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4885 subtract[compile-time] -1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -32768;
endcode
compile error

$overflow on
code auto:4886 subtract[Integer] -1[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4887 subtract[compile-time] -1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -32768;
endcode
compile error

$overflow off
code auto:4888 subtract[Integer] -1[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:4889 subtract[compile-time] -1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -32767;
endcode
compile error

$overflow on
code auto:4890 subtract[Integer] -1[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4891 subtract[compile-time] -1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -32767;
endcode
compile error

$overflow off
code auto:4892 subtract[Integer] -1[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4893 subtract[compile-time] -1[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -129;
endcode
compile error

$overflow on
code auto:4894 subtract[Integer] -1[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4895 subtract[compile-time] -1[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -129;
endcode
compile error

$overflow off
code auto:4896 subtract[Integer] -1[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4897 subtract[compile-time] -1[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:4898 subtract[Integer] -1[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4899 subtract[compile-time] -1[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:4900 subtract[Integer] -1[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4901 subtract[compile-time] -1[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:4902 subtract[Integer] -1[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4903 subtract[compile-time] -1[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:4904 subtract[Integer] -1[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4905 subtract[compile-time] -1[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:4906 subtract[Integer] -1[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4907 subtract[compile-time] -1[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 0;
endcode
varvalue r -1

$overflow off
code auto:4908 subtract[Integer] -1[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:4909 subtract[compile-time] -1[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:4910 subtract[Integer] -1[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:4911 subtract[compile-time] -1[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 1;
endcode
varvalue r -2

$overflow off
code auto:4912 subtract[Integer] -1[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4913 subtract[compile-time] -1[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:4914 subtract[Integer] -1[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4915 subtract[compile-time] -1[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 127;
endcode
varvalue r -128

$overflow off
code auto:4916 subtract[Integer] -1[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:4917 subtract[compile-time] -1[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 128;
endcode
compile error

$overflow on
code auto:4918 subtract[Integer] -1[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4919 subtract[compile-time] -1[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 128;
endcode
compile error

$overflow off
code auto:4920 subtract[Integer] -1[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4921 subtract[compile-time] -1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 - 32767;
endcode
compile error

$overflow on
code auto:4922 subtract[Integer] -1[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4923 subtract[compile-time] -1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 - 32767;
endcode
compile error

$overflow off
code auto:4924 subtract[Integer] 0[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4925 subtract[compile-time] 0[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:4926 subtract[Integer] 0[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4927 subtract[compile-time] 0[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:4928 subtract[Integer] 0[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4929 subtract[compile-time] 0[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -32767;
endcode
compile error

$overflow on
code auto:4930 subtract[Integer] 0[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4931 subtract[compile-time] 0[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -32767;
endcode
compile error

$overflow off
code auto:4932 subtract[Integer] 0[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4933 subtract[compile-time] 0[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -129;
endcode
compile error

$overflow on
code auto:4934 subtract[Integer] 0[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4935 subtract[compile-time] 0[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -129;
endcode
compile error

$overflow off
code auto:4936 subtract[Integer] 0[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4937 subtract[compile-time] 0[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -128;
endcode
compile error

$overflow on
code auto:4938 subtract[Integer] 0[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4939 subtract[compile-time] 0[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -128;
endcode
compile error

$overflow off
code auto:4940 subtract[Integer] 0[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4941 subtract[compile-time] 0[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:4942 subtract[Integer] 0[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4943 subtract[compile-time] 0[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:4944 subtract[Integer] 0[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4945 subtract[compile-time] 0[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:4946 subtract[Integer] 0[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4947 subtract[compile-time] 0[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:4948 subtract[Integer] 0[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4949 subtract[compile-time] 0[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:4950 subtract[Integer] 0[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:4951 subtract[compile-time] 0[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:4952 subtract[Integer] 0[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4953 subtract[compile-time] 0[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:4954 subtract[Integer] 0[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4955 subtract[compile-time] 0[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:4956 subtract[Integer] 0[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4957 subtract[compile-time] 0[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:4958 subtract[Integer] 0[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:4959 subtract[compile-time] 0[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:4960 subtract[Integer] 0[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4961 subtract[compile-time] 0[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:4962 subtract[Integer] 0[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4963 subtract[compile-time] 0[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:4964 subtract[Integer] 1[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4965 subtract[compile-time] 1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:4966 subtract[Integer] 1[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4967 subtract[compile-time] 1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -32768;
endcode
compile error

$overflow off
code auto:4968 subtract[Integer] 1[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4969 subtract[compile-time] 1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:4970 subtract[Integer] 1[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4971 subtract[compile-time] 1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -32767;
endcode
compile error

$overflow off
code auto:4972 subtract[Integer] 1[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4973 subtract[compile-time] 1[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -129;
endcode
compile error

$overflow on
code auto:4974 subtract[Integer] 1[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4975 subtract[compile-time] 1[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -129;
endcode
compile error

$overflow off
code auto:4976 subtract[Integer] 1[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4977 subtract[compile-time] 1[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -128;
endcode
compile error

$overflow on
code auto:4978 subtract[Integer] 1[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:4979 subtract[compile-time] 1[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -128;
endcode
compile error

$overflow off
code auto:4980 subtract[Integer] 1[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:4981 subtract[compile-time] 1[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:4982 subtract[Integer] 1[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:4983 subtract[compile-time] 1[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:4984 subtract[Integer] 1[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4985 subtract[compile-time] 1[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:4986 subtract[Integer] 1[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:4987 subtract[compile-time] 1[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:4988 subtract[Integer] 1[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4989 subtract[compile-time] 1[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:4990 subtract[Integer] 1[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:4991 subtract[compile-time] 1[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:4992 subtract[Integer] 1[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4993 subtract[compile-time] 1[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:4994 subtract[Integer] 1[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:4995 subtract[compile-time] 1[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:4996 subtract[Integer] 1[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4997 subtract[compile-time] 1[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:4998 subtract[Integer] 1[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:4999 subtract[compile-time] 1[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:5000 subtract[Integer] 1[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:5001 subtract[compile-time] 1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:5002 subtract[Integer] 1[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5003 subtract[compile-time] 1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:5004 subtract[Integer] 127[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5005 subtract[compile-time] 127[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:5006 subtract[Integer] 127[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5007 subtract[compile-time] 127[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -32768;
endcode
compile error

$overflow off
code auto:5008 subtract[Integer] 127[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:5009 subtract[compile-time] 127[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:5010 subtract[Integer] 127[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5011 subtract[compile-time] 127[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -32767;
endcode
compile error

$overflow off
code auto:5012 subtract[Integer] 127[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5013 subtract[compile-time] 127[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -129;
endcode
compile error

$overflow on
code auto:5014 subtract[Integer] 127[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5015 subtract[compile-time] 127[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -129;
endcode
compile error

$overflow off
code auto:5016 subtract[Integer] 127[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:5017 subtract[compile-time] 127[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -128;
endcode
compile error

$overflow on
code auto:5018 subtract[Integer] 127[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5019 subtract[compile-time] 127[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -128;
endcode
compile error

$overflow off
code auto:5020 subtract[Integer] 127[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5021 subtract[compile-time] 127[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - -1;
endcode
compile error

$overflow on
code auto:5022 subtract[Integer] 127[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5023 subtract[compile-time] 127[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - -1;
endcode
compile error

$overflow off
code auto:5024 subtract[Integer] 127[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5025 subtract[compile-time] 127[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:5026 subtract[Integer] 127[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5027 subtract[compile-time] 127[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:5028 subtract[Integer] 127[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:5029 subtract[compile-time] 127[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:5030 subtract[Integer] 127[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:5031 subtract[compile-time] 127[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:5032 subtract[Integer] 127[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5033 subtract[compile-time] 127[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:5034 subtract[Integer] 127[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5035 subtract[compile-time] 127[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:5036 subtract[Integer] 127[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:5037 subtract[compile-time] 127[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:5038 subtract[Integer] 127[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:5039 subtract[compile-time] 127[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:5040 subtract[Integer] 127[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5041 subtract[compile-time] 127[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:5042 subtract[Integer] 127[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5043 subtract[compile-time] 127[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:5044 subtract[Integer] 128[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5045 subtract[compile-time] 128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - -32768;
endcode
compile error

$overflow on
code auto:5046 subtract[Integer] 128[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5047 subtract[compile-time] 128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - -32768;
endcode
compile error

$overflow off
code auto:5048 subtract[Integer] 128[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5049 subtract[compile-time] 128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - -32767;
endcode
compile error

$overflow on
code auto:5050 subtract[Integer] 128[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5051 subtract[compile-time] 128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - -32767;
endcode
compile error

$overflow off
code auto:5052 subtract[Integer] 128[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:5053 subtract[compile-time] 128[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - -129;
endcode
compile error

$overflow on
code auto:5054 subtract[Integer] 128[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5055 subtract[compile-time] 128[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - -129;
endcode
compile error

$overflow off
code auto:5056 subtract[Integer] 128[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5057 subtract[compile-time] 128[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - -128;
endcode
compile error

$overflow on
code auto:5058 subtract[Integer] 128[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5059 subtract[compile-time] 128[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - -128;
endcode
compile error

$overflow off
code auto:5060 subtract[Integer] 128[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:5061 subtract[compile-time] 128[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - -1;
endcode
compile error

$overflow on
code auto:5062 subtract[Integer] 128[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5063 subtract[compile-time] 128[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - -1;
endcode
compile error

$overflow off
code auto:5064 subtract[Integer] 128[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5065 subtract[compile-time] 128[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 0;
endcode
compile error

$overflow on
code auto:5066 subtract[Integer] 128[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5067 subtract[compile-time] 128[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 0;
endcode
compile error

$overflow off
code auto:5068 subtract[Integer] 128[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5069 subtract[compile-time] 128[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:5070 subtract[Integer] 128[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5071 subtract[compile-time] 128[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:5072 subtract[Integer] 128[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:5073 subtract[compile-time] 128[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:5074 subtract[Integer] 128[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:5075 subtract[compile-time] 128[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:5076 subtract[Integer] 128[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5077 subtract[compile-time] 128[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:5078 subtract[Integer] 128[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5079 subtract[compile-time] 128[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:5080 subtract[Integer] 128[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:5081 subtract[compile-time] 128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:5082 subtract[Integer] 128[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5083 subtract[compile-time] 128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:5084 subtract[Integer] 32767[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:5085 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - -32768;
endcode
compile error

$overflow on
code auto:5086 subtract[Integer] 32767[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5087 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - -32768;
endcode
compile error

$overflow off
code auto:5088 subtract[Integer] 32767[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:5089 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - -32767;
endcode
compile error

$overflow on
code auto:5090 subtract[Integer] 32767[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5091 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - -32767;
endcode
compile error

$overflow off
code auto:5092 subtract[Integer] 32767[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5093 subtract[compile-time] 32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - -129;
endcode
compile error

$overflow on
code auto:5094 subtract[Integer] 32767[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5095 subtract[compile-time] 32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - -129;
endcode
compile error

$overflow off
code auto:5096 subtract[Integer] 32767[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5097 subtract[compile-time] 32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:5098 subtract[Integer] 32767[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5099 subtract[compile-time] 32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:5100 subtract[Integer] 32767[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5101 subtract[compile-time] 32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:5102 subtract[Integer] 32767[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5103 subtract[compile-time] 32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:5104 subtract[Integer] 32767[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:5105 subtract[compile-time] 32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:5106 subtract[Integer] 32767[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5107 subtract[compile-time] 32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:5108 subtract[Integer] 32767[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:5109 subtract[compile-time] 32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 1;
endcode
compile error

$overflow on
code auto:5110 subtract[Integer] 32767[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5111 subtract[compile-time] 32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 1;
endcode
compile error

$overflow off
code auto:5112 subtract[Integer] 32767[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:5113 subtract[compile-time] 32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 127;
endcode
compile error

$overflow on
code auto:5114 subtract[Integer] 32767[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5115 subtract[compile-time] 32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 127;
endcode
compile error

$overflow off
code auto:5116 subtract[Integer] 32767[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:5117 subtract[compile-time] 32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 128;
endcode
compile error

$overflow on
code auto:5118 subtract[Integer] 32767[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:5119 subtract[compile-time] 32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 128;
endcode
compile error

$overflow off
code auto:5120 subtract[Integer] 32767[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5121 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:5122 subtract[Integer] 32767[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:5123 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:5124 subtract[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5125 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow on
code auto:5126 subtract[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:5127 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -32767;
endcode
varvalue r -1

$overflow on
code auto:5128 subtract[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:5129 subtract[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -129;
endcode
varvalue r -32639

$overflow on
code auto:5130 subtract[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:5131 subtract[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -128;
endcode
varvalue r -32640

$overflow on
code auto:5132 subtract[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:5133 subtract[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - -1;
endcode
varvalue r -32767

$overflow on
code auto:5134 subtract[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:5135 subtract[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 0;
endcode
varvalue r -32768

$overflow on
code auto:5136 subtract[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5137 subtract[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:5138 subtract[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5139 subtract[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:5140 subtract[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5141 subtract[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:5142 subtract[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5143 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:5144 subtract[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:5145 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow on
code auto:5146 subtract[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5147 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow on
code auto:5148 subtract[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32638

code auto:5149 subtract[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -129;
endcode
varvalue r -32638

$overflow on
code auto:5150 subtract[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:5151 subtract[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -128;
endcode
varvalue r -32639

$overflow on
code auto:5152 subtract[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:5153 subtract[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - -1;
endcode
varvalue r -32766

$overflow on
code auto:5154 subtract[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:5155 subtract[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 0;
endcode
varvalue r -32767

$overflow on
code auto:5156 subtract[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:5157 subtract[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 1;
endcode
varvalue r -32768

$overflow on
code auto:5158 subtract[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5159 subtract[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:5160 subtract[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5161 subtract[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:5162 subtract[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5163 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:5164 subtract[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:5165 subtract[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -32768;
endcode
varvalue r 32639

$overflow on
code auto:5166 subtract[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32638

code auto:5167 subtract[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -32767;
endcode
varvalue r 32638

$overflow on
code auto:5168 subtract[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5169 subtract[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -129;
endcode
varvalue r 0

$overflow on
code auto:5170 subtract[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:5171 subtract[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -128;
endcode
varvalue r -1

$overflow on
code auto:5172 subtract[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:5173 subtract[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - -1;
endcode
varvalue r -128

$overflow on
code auto:5174 subtract[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:5175 subtract[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 0;
endcode
varvalue r -129

$overflow on
code auto:5176 subtract[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -130

code auto:5177 subtract[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 1;
endcode
varvalue r -130

$overflow on
code auto:5178 subtract[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:5179 subtract[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 127;
endcode
varvalue r -256

$overflow on
code auto:5180 subtract[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -257

code auto:5181 subtract[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 128;
endcode
varvalue r -257

$overflow on
code auto:5182 subtract[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5183 subtract[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:5184 subtract[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:5185 subtract[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow on
code auto:5186 subtract[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:5187 subtract[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow on
code auto:5188 subtract[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:5189 subtract[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:5190 subtract[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5191 subtract[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:5192 subtract[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:5193 subtract[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - -1;
endcode
varvalue r -127

$overflow on
code auto:5194 subtract[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:5195 subtract[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 0;
endcode
varvalue r -128

$overflow on
code auto:5196 subtract[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:5197 subtract[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 1;
endcode
varvalue r -129

$overflow on
code auto:5198 subtract[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:5199 subtract[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 127;
endcode
varvalue r -255

$overflow on
code auto:5200 subtract[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:5201 subtract[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 128;
endcode
varvalue r -256

$overflow on
code auto:5202 subtract[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5203 subtract[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:5204 subtract[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:5205 subtract[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow on
code auto:5206 subtract[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:5207 subtract[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow on
code auto:5208 subtract[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:5209 subtract[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -129;
endcode
varvalue r 128

$overflow on
code auto:5210 subtract[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:5211 subtract[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:5212 subtract[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5213 subtract[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:5214 subtract[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:5215 subtract[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 0;
endcode
varvalue r -1

$overflow on
code auto:5216 subtract[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -2

code auto:5217 subtract[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 1;
endcode
varvalue r -2

$overflow on
code auto:5218 subtract[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:5219 subtract[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 127;
endcode
varvalue r -128

$overflow on
code auto:5220 subtract[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -129

code auto:5221 subtract[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 128;
endcode
varvalue r -129

$overflow on
code auto:5222 subtract[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:5223 subtract[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 - 32767;
endcode
varvalue r -32768

$overflow on
code auto:5224 subtract[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5225 subtract[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:5226 subtract[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:5227 subtract[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:5228 subtract[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:5229 subtract[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:5230 subtract[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:5231 subtract[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:5232 subtract[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:5233 subtract[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:5234 subtract[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5235 subtract[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:5236 subtract[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:5237 subtract[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:5238 subtract[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:5239 subtract[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:5240 subtract[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -128

code auto:5241 subtract[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:5242 subtract[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:5243 subtract[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:5244 subtract[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5245 subtract[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:5246 subtract[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5247 subtract[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:5248 subtract[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:5249 subtract[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:5250 subtract[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:5251 subtract[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:5252 subtract[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:5253 subtract[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:5254 subtract[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:5255 subtract[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:5256 subtract[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5257 subtract[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:5258 subtract[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -126

code auto:5259 subtract[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:5260 subtract[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -127

code auto:5261 subtract[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:5262 subtract[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32766

code auto:5263 subtract[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 32767;
endcode
varvalue r -32766

$overflow on
code auto:5264 subtract[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5265 subtract[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:5266 subtract[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5267 subtract[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:5268 subtract[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:5269 subtract[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -129;
endcode
varvalue r 256

$overflow on
code auto:5270 subtract[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:5271 subtract[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:5272 subtract[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:5273 subtract[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:5274 subtract[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:5275 subtract[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:5276 subtract[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:5277 subtract[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:5278 subtract[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5279 subtract[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:5280 subtract[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:5281 subtract[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:5282 subtract[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32640

code auto:5283 subtract[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 32767;
endcode
varvalue r -32640

$overflow on
code auto:5284 subtract[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5285 subtract[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32768;
endcode
compile error

$overflow on
code auto:5286 subtract[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5287 subtract[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -32767;
endcode
compile error

$overflow on
code auto:5288 subtract[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 257

code auto:5289 subtract[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -129;
endcode
varvalue r 257

$overflow on
code auto:5290 subtract[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:5291 subtract[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:5292 subtract[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:5293 subtract[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:5294 subtract[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:5295 subtract[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:5296 subtract[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:5297 subtract[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:5298 subtract[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:5299 subtract[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:5300 subtract[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5301 subtract[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:5302 subtract[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32639

code auto:5303 subtract[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 32767;
endcode
varvalue r -32639

$overflow on
code auto:5304 subtract[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5305 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32768;
endcode
compile error

$overflow on
code auto:5306 subtract[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5307 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -32767;
endcode
compile error

$overflow on
code auto:5308 subtract[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5309 subtract[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -129;
endcode
compile error

$overflow on
code auto:5310 subtract[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5311 subtract[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:5312 subtract[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:5313 subtract[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:5314 subtract[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:5315 subtract[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:5316 subtract[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32766

code auto:5317 subtract[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:5318 subtract[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32640

code auto:5319 subtract[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:5320 subtract[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32639

code auto:5321 subtract[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:5322 subtract[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:5323 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:5324 subtract[Integer] -32768[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5325 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow on
code auto:5326 subtract[Integer] -32768[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5327 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow off
code auto:5328 subtract[Integer] -32768[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5329 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - -32767;
endcode
compile error

$overflow on
code auto:5330 subtract[Integer] -32768[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5331 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - -32767;
endcode
compile error

$overflow off
code auto:5332 subtract[Integer] -32768[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5333 subtract[compile-time] -32768[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - -129;
endcode
compile error

$overflow on
code auto:5334 subtract[Integer] -32768[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5335 subtract[compile-time] -32768[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - -129;
endcode
compile error

$overflow off
code auto:5336 subtract[Integer] -32768[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5337 subtract[compile-time] -32768[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - -128;
endcode
compile error

$overflow on
code auto:5338 subtract[Integer] -32768[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5339 subtract[compile-time] -32768[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - -128;
endcode
compile error

$overflow off
code auto:5340 subtract[Integer] -32768[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5341 subtract[compile-time] -32768[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - -1;
endcode
compile error

$overflow on
code auto:5342 subtract[Integer] -32768[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5343 subtract[compile-time] -32768[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - -1;
endcode
compile error

$overflow off
code auto:5344 subtract[Integer] -32768[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5345 subtract[compile-time] -32768[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - 0;
endcode
compile error

$overflow on
code auto:5346 subtract[Integer] -32768[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5347 subtract[compile-time] -32768[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - 0;
endcode
compile error

$overflow off
code auto:5348 subtract[Integer] -32768[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5349 subtract[compile-time] -32768[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:5350 subtract[Integer] -32768[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5351 subtract[compile-time] -32768[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:5352 subtract[Integer] -32768[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5353 subtract[compile-time] -32768[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:5354 subtract[Integer] -32768[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5355 subtract[compile-time] -32768[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:5356 subtract[Integer] -32768[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5357 subtract[compile-time] -32768[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:5358 subtract[Integer] -32768[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5359 subtract[compile-time] -32768[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - 128;
endcode
compile error

$overflow off
code auto:5360 subtract[Integer] -32768[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5361 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:5362 subtract[Integer] -32768[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5363 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:5364 subtract[Integer] -32767[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5365 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow on
code auto:5366 subtract[Integer] -32767[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5367 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow off
code auto:5368 subtract[Integer] -32767[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5369 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow on
code auto:5370 subtract[Integer] -32767[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5371 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow off
code auto:5372 subtract[Integer] -32767[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:5373 subtract[compile-time] -32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - -129;
endcode
compile error

$overflow on
code auto:5374 subtract[Integer] -32767[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5375 subtract[compile-time] -32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - -129;
endcode
compile error

$overflow off
code auto:5376 subtract[Integer] -32767[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5377 subtract[compile-time] -32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - -128;
endcode
compile error

$overflow on
code auto:5378 subtract[Integer] -32767[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5379 subtract[compile-time] -32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - -128;
endcode
compile error

$overflow off
code auto:5380 subtract[Integer] -32767[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:5381 subtract[compile-time] -32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - -1;
endcode
compile error

$overflow on
code auto:5382 subtract[Integer] -32767[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5383 subtract[compile-time] -32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - -1;
endcode
compile error

$overflow off
code auto:5384 subtract[Integer] -32767[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5385 subtract[compile-time] -32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - 0;
endcode
compile error

$overflow on
code auto:5386 subtract[Integer] -32767[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5387 subtract[compile-time] -32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - 0;
endcode
compile error

$overflow off
code auto:5388 subtract[Integer] -32767[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5389 subtract[compile-time] -32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - 1;
endcode
compile error

$overflow on
code auto:5390 subtract[Integer] -32767[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5391 subtract[compile-time] -32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - 1;
endcode
compile error

$overflow off
code auto:5392 subtract[Integer] -32767[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:5393 subtract[compile-time] -32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:5394 subtract[Integer] -32767[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5395 subtract[compile-time] -32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:5396 subtract[Integer] -32767[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5397 subtract[compile-time] -32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:5398 subtract[Integer] -32767[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5399 subtract[compile-time] -32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - 128;
endcode
compile error

$overflow off
code auto:5400 subtract[Integer] -32767[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:5401 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:5402 subtract[Integer] -32767[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5403 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:5404 subtract[Integer] -129[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5405 subtract[compile-time] -129[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - -32768;
endcode
compile error

$overflow on
code auto:5406 subtract[Integer] -129[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5407 subtract[compile-time] -129[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - -32768;
endcode
compile error

$overflow off
code auto:5408 subtract[Integer] -129[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:5409 subtract[compile-time] -129[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - -32767;
endcode
compile error

$overflow on
code auto:5410 subtract[Integer] -129[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5411 subtract[compile-time] -129[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - -32767;
endcode
compile error

$overflow off
code auto:5412 subtract[Integer] -129[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5413 subtract[compile-time] -129[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - -129;
endcode
varvalue r 0

$overflow on
code auto:5414 subtract[Integer] -129[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5415 subtract[compile-time] -129[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - -129;
endcode
varvalue r 0

$overflow off
code auto:5416 subtract[Integer] -129[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5417 subtract[compile-time] -129[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - -128;
endcode
compile error

$overflow on
code auto:5418 subtract[Integer] -129[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5419 subtract[compile-time] -129[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - -128;
endcode
compile error

$overflow off
code auto:5420 subtract[Integer] -129[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5421 subtract[compile-time] -129[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - -1;
endcode
compile error

$overflow on
code auto:5422 subtract[Integer] -129[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5423 subtract[compile-time] -129[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - -1;
endcode
compile error

$overflow off
code auto:5424 subtract[Integer] -129[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5425 subtract[compile-time] -129[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - 0;
endcode
compile error

$overflow on
code auto:5426 subtract[Integer] -129[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5427 subtract[compile-time] -129[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - 0;
endcode
compile error

$overflow off
code auto:5428 subtract[Integer] -129[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:5429 subtract[compile-time] -129[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - 1;
endcode
compile error

$overflow on
code auto:5430 subtract[Integer] -129[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5431 subtract[compile-time] -129[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - 1;
endcode
compile error

$overflow off
code auto:5432 subtract[Integer] -129[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5433 subtract[compile-time] -129[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - 127;
endcode
compile error

$overflow on
code auto:5434 subtract[Integer] -129[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5435 subtract[compile-time] -129[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - 127;
endcode
compile error

$overflow off
code auto:5436 subtract[Integer] -129[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5437 subtract[compile-time] -129[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - 128;
endcode
compile error

$overflow on
code auto:5438 subtract[Integer] -129[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5439 subtract[compile-time] -129[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - 128;
endcode
compile error

$overflow off
code auto:5440 subtract[Integer] -129[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5441 subtract[compile-time] -129[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:5442 subtract[Integer] -129[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5443 subtract[compile-time] -129[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:5444 subtract[Integer] -128[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5445 subtract[compile-time] -128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -32768;
endcode
compile error

$overflow on
code auto:5446 subtract[Integer] -128[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5447 subtract[compile-time] -128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -32768;
endcode
compile error

$overflow off
code auto:5448 subtract[Integer] -128[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5449 subtract[compile-time] -128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -32767;
endcode
compile error

$overflow on
code auto:5450 subtract[Integer] -128[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5451 subtract[compile-time] -128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -32767;
endcode
compile error

$overflow off
code auto:5452 subtract[Integer] -128[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5453 subtract[compile-time] -128[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:5454 subtract[Integer] -128[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5455 subtract[compile-time] -128[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -129;
endcode
varvalue r 1

$overflow off
code auto:5456 subtract[Integer] -128[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5457 subtract[compile-time] -128[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:5458 subtract[Integer] -128[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5459 subtract[compile-time] -128[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:5460 subtract[Integer] -128[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5461 subtract[compile-time] -128[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - -1;
endcode
compile error

$overflow on
code auto:5462 subtract[Integer] -128[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5463 subtract[compile-time] -128[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - -1;
endcode
compile error

$overflow off
code auto:5464 subtract[Integer] -128[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5465 subtract[compile-time] -128[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:5466 subtract[Integer] -128[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5467 subtract[compile-time] -128[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:5468 subtract[Integer] -128[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5469 subtract[compile-time] -128[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:5470 subtract[Integer] -128[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5471 subtract[compile-time] -128[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:5472 subtract[Integer] -128[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5473 subtract[compile-time] -128[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:5474 subtract[Integer] -128[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5475 subtract[compile-time] -128[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:5476 subtract[Integer] -128[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5477 subtract[compile-time] -128[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 128;
endcode
compile error

$overflow on
code auto:5478 subtract[Integer] -128[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5479 subtract[compile-time] -128[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 128;
endcode
compile error

$overflow off
code auto:5480 subtract[Integer] -128[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5481 subtract[compile-time] -128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:5482 subtract[Integer] -128[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5483 subtract[compile-time] -128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:5484 subtract[Integer] -1[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5485 subtract[compile-time] -1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -32768;
endcode
compile error

$overflow on
code auto:5486 subtract[Integer] -1[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5487 subtract[compile-time] -1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -32768;
endcode
compile error

$overflow off
code auto:5488 subtract[Integer] -1[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:5489 subtract[compile-time] -1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -32767;
endcode
compile error

$overflow on
code auto:5490 subtract[Integer] -1[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5491 subtract[compile-time] -1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -32767;
endcode
compile error

$overflow off
code auto:5492 subtract[Integer] -1[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5493 subtract[compile-time] -1[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -129;
endcode
varvalue r 128

$overflow on
code auto:5494 subtract[Integer] -1[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5495 subtract[compile-time] -1[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -129;
endcode
varvalue r 128

$overflow off
code auto:5496 subtract[Integer] -1[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5497 subtract[compile-time] -1[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:5498 subtract[Integer] -1[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5499 subtract[compile-time] -1[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:5500 subtract[Integer] -1[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5501 subtract[compile-time] -1[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:5502 subtract[Integer] -1[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5503 subtract[compile-time] -1[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:5504 subtract[Integer] -1[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5505 subtract[compile-time] -1[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:5506 subtract[Integer] -1[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5507 subtract[compile-time] -1[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:5508 subtract[Integer] -1[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:5509 subtract[compile-time] -1[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 1;
endcode
compile error

$overflow on
code auto:5510 subtract[Integer] -1[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5511 subtract[compile-time] -1[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 1;
endcode
compile error

$overflow off
code auto:5512 subtract[Integer] -1[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5513 subtract[compile-time] -1[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 127;
endcode
compile error

$overflow on
code auto:5514 subtract[Integer] -1[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5515 subtract[compile-time] -1[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 127;
endcode
compile error

$overflow off
code auto:5516 subtract[Integer] -1[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5517 subtract[compile-time] -1[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 128;
endcode
compile error

$overflow on
code auto:5518 subtract[Integer] -1[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5519 subtract[compile-time] -1[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 128;
endcode
compile error

$overflow off
code auto:5520 subtract[Integer] -1[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5521 subtract[compile-time] -1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 - 32767;
endcode
compile error

$overflow on
code auto:5522 subtract[Integer] -1[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5523 subtract[compile-time] -1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 - 32767;
endcode
compile error

$overflow off
code auto:5524 subtract[Integer] 0[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5525 subtract[compile-time] 0[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -32768;
endcode
compile error

$overflow on
code auto:5526 subtract[Integer] 0[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5527 subtract[compile-time] 0[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -32768;
endcode
compile error

$overflow off
code auto:5528 subtract[Integer] 0[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5529 subtract[compile-time] 0[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -32767;
endcode
compile error

$overflow on
code auto:5530 subtract[Integer] 0[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5531 subtract[compile-time] 0[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -32767;
endcode
compile error

$overflow off
code auto:5532 subtract[Integer] 0[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5533 subtract[compile-time] 0[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:5534 subtract[Integer] 0[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5535 subtract[compile-time] 0[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:5536 subtract[Integer] 0[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5537 subtract[compile-time] 0[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:5538 subtract[Integer] 0[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5539 subtract[compile-time] 0[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:5540 subtract[Integer] 0[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5541 subtract[compile-time] 0[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:5542 subtract[Integer] 0[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5543 subtract[compile-time] 0[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:5544 subtract[Integer] 0[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5545 subtract[compile-time] 0[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:5546 subtract[Integer] 0[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5547 subtract[compile-time] 0[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:5548 subtract[Integer] 0[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5549 subtract[compile-time] 0[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:5550 subtract[Integer] 0[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5551 subtract[compile-time] 0[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:5552 subtract[Integer] 0[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5553 subtract[compile-time] 0[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:5554 subtract[Integer] 0[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5555 subtract[compile-time] 0[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:5556 subtract[Integer] 0[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5557 subtract[compile-time] 0[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:5558 subtract[Integer] 0[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5559 subtract[compile-time] 0[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:5560 subtract[Integer] 0[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5561 subtract[compile-time] 0[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:5562 subtract[Integer] 0[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5563 subtract[compile-time] 0[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:5564 subtract[Integer] 1[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5565 subtract[compile-time] 1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -32768;
endcode
compile error

$overflow on
code auto:5566 subtract[Integer] 1[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5567 subtract[compile-time] 1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -32768;
endcode
compile error

$overflow off
code auto:5568 subtract[Integer] 1[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5569 subtract[compile-time] 1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -32767;
endcode
compile error

$overflow on
code auto:5570 subtract[Integer] 1[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5571 subtract[compile-time] 1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -32767;
endcode
compile error

$overflow off
code auto:5572 subtract[Integer] 1[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:5573 subtract[compile-time] 1[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:5574 subtract[Integer] 1[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:5575 subtract[compile-time] 1[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -129;
endcode
varvalue r 130

$overflow off
code auto:5576 subtract[Integer] 1[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5577 subtract[compile-time] 1[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:5578 subtract[Integer] 1[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5579 subtract[compile-time] 1[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:5580 subtract[Integer] 1[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:5581 subtract[compile-time] 1[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:5582 subtract[Integer] 1[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:5583 subtract[compile-time] 1[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:5584 subtract[Integer] 1[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5585 subtract[compile-time] 1[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:5586 subtract[Integer] 1[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5587 subtract[compile-time] 1[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:5588 subtract[Integer] 1[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5589 subtract[compile-time] 1[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:5590 subtract[Integer] 1[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5591 subtract[compile-time] 1[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:5592 subtract[Integer] 1[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 130

code auto:5593 subtract[compile-time] 1[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:5594 subtract[Integer] 1[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5595 subtract[compile-time] 1[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:5596 subtract[Integer] 1[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5597 subtract[compile-time] 1[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 128;
endcode
compile error

$overflow on
code auto:5598 subtract[Integer] 1[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5599 subtract[compile-time] 1[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 128;
endcode
compile error

$overflow off
code auto:5600 subtract[Integer] 1[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 2

code auto:5601 subtract[compile-time] 1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:5602 subtract[Integer] 1[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5603 subtract[compile-time] 1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:5604 subtract[Integer] 127[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5605 subtract[compile-time] 127[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -32768;
endcode
compile error

$overflow on
code auto:5606 subtract[Integer] 127[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5607 subtract[compile-time] 127[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -32768;
endcode
compile error

$overflow off
code auto:5608 subtract[Integer] 127[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:5609 subtract[compile-time] 127[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -32767;
endcode
compile error

$overflow on
code auto:5610 subtract[Integer] 127[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5611 subtract[compile-time] 127[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -32767;
endcode
compile error

$overflow off
code auto:5612 subtract[Integer] 127[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5613 subtract[compile-time] 127[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -129;
endcode
compile error

$overflow on
code auto:5614 subtract[Integer] 127[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5615 subtract[compile-time] 127[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -129;
endcode
compile error

$overflow off
code auto:5616 subtract[Integer] 127[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5617 subtract[compile-time] 127[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:5618 subtract[Integer] 127[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5619 subtract[compile-time] 127[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:5620 subtract[Integer] 127[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5621 subtract[compile-time] 127[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:5622 subtract[Integer] 127[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5623 subtract[compile-time] 127[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:5624 subtract[Integer] 127[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5625 subtract[compile-time] 127[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:5626 subtract[Integer] 127[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5627 subtract[compile-time] 127[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:5628 subtract[Integer] 127[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:5629 subtract[compile-time] 127[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:5630 subtract[Integer] 127[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:5631 subtract[compile-time] 127[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:5632 subtract[Integer] 127[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5633 subtract[compile-time] 127[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:5634 subtract[Integer] 127[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5635 subtract[compile-time] 127[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:5636 subtract[Integer] 127[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5637 subtract[compile-time] 127[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 128;
endcode
compile error

$overflow on
code auto:5638 subtract[Integer] 127[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5639 subtract[compile-time] 127[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 128;
endcode
compile error

$overflow off
code auto:5640 subtract[Integer] 127[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5641 subtract[compile-time] 127[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:5642 subtract[Integer] 127[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5643 subtract[compile-time] 127[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:5644 subtract[Integer] 128[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5645 subtract[compile-time] 128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - -32768;
endcode
compile error

$overflow on
code auto:5646 subtract[Integer] 128[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5647 subtract[compile-time] 128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - -32768;
endcode
compile error

$overflow off
code auto:5648 subtract[Integer] 128[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5649 subtract[compile-time] 128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - -32767;
endcode
compile error

$overflow on
code auto:5650 subtract[Integer] 128[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5651 subtract[compile-time] 128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - -32767;
endcode
compile error

$overflow off
code auto:5652 subtract[Integer] 128[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5653 subtract[compile-time] 128[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - -129;
endcode
compile error

$overflow on
code auto:5654 subtract[Integer] 128[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5655 subtract[compile-time] 128[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - -129;
endcode
compile error

$overflow off
code auto:5656 subtract[Integer] 128[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5657 subtract[compile-time] 128[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - -128;
endcode
compile error

$overflow on
code auto:5658 subtract[Integer] 128[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5659 subtract[compile-time] 128[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - -128;
endcode
compile error

$overflow off
code auto:5660 subtract[Integer] 128[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5661 subtract[compile-time] 128[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:5662 subtract[Integer] 128[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5663 subtract[compile-time] 128[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:5664 subtract[Integer] 128[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5665 subtract[compile-time] 128[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:5666 subtract[Integer] 128[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5667 subtract[compile-time] 128[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:5668 subtract[Integer] 128[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5669 subtract[compile-time] 128[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:5670 subtract[Integer] 128[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5671 subtract[compile-time] 128[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:5672 subtract[Integer] 128[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5673 subtract[compile-time] 128[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:5674 subtract[Integer] 128[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:5675 subtract[compile-time] 128[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:5676 subtract[Integer] 128[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5677 subtract[compile-time] 128[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:5678 subtract[Integer] 128[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5679 subtract[compile-time] 128[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:5680 subtract[Integer] 128[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 129

code auto:5681 subtract[compile-time] 128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:5682 subtract[Integer] 128[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5683 subtract[compile-time] 128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:5684 subtract[Integer] 32767[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5685 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - -32768;
endcode
compile error

$overflow on
code auto:5686 subtract[Integer] 32767[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5687 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - -32768;
endcode
compile error

$overflow off
code auto:5688 subtract[Integer] 32767[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:5689 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - -32767;
endcode
compile error

$overflow on
code auto:5690 subtract[Integer] 32767[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5691 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - -32767;
endcode
compile error

$overflow off
code auto:5692 subtract[Integer] 32767[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5693 subtract[compile-time] 32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - -129;
endcode
compile error

$overflow on
code auto:5694 subtract[Integer] 32767[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5695 subtract[compile-time] 32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - -129;
endcode
compile error

$overflow off
code auto:5696 subtract[Integer] 32767[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5697 subtract[compile-time] 32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - -128;
endcode
compile error

$overflow on
code auto:5698 subtract[Integer] 32767[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5699 subtract[compile-time] 32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - -128;
endcode
compile error

$overflow off
code auto:5700 subtract[Integer] 32767[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5701 subtract[compile-time] 32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - -1;
endcode
compile error

$overflow on
code auto:5702 subtract[Integer] 32767[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5703 subtract[compile-time] 32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - -1;
endcode
compile error

$overflow off
code auto:5704 subtract[Integer] 32767[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:5705 subtract[compile-time] 32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:5706 subtract[Integer] 32767[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5707 subtract[compile-time] 32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:5708 subtract[Integer] 32767[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:5709 subtract[compile-time] 32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 1;
endcode
compile error

$overflow on
code auto:5710 subtract[Integer] 32767[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5711 subtract[compile-time] 32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 1;
endcode
compile error

$overflow off
code auto:5712 subtract[Integer] 32767[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:5713 subtract[compile-time] 32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 127;
endcode
compile error

$overflow on
code auto:5714 subtract[Integer] 32767[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5715 subtract[compile-time] 32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 127;
endcode
compile error

$overflow off
code auto:5716 subtract[Integer] 32767[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:5717 subtract[compile-time] 32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 128;
endcode
compile error

$overflow on
code auto:5718 subtract[Integer] 32767[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:5719 subtract[compile-time] 32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 128;
endcode
compile error

$overflow off
code auto:5720 subtract[Integer] 32767[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5721 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:5722 subtract[Integer] 32767[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:5723 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:5724 subtract[Integer] -32768[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5725 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow on
code auto:5726 subtract[Integer] -32768[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5727 subtract[compile-time] -32768[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - -32768;
endcode
varvalue r 0

$overflow off
code auto:5728 subtract[Integer] -32768[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:5729 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - -32767;
endcode
compile error

$overflow on
code auto:5730 subtract[Integer] -32768[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5731 subtract[compile-time] -32768[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - -32767;
endcode
compile error

$overflow off
code auto:5732 subtract[Integer] -32768[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32897

code auto:5733 subtract[compile-time] -32768[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - -129;
endcode
compile error

$overflow on
code auto:5734 subtract[Integer] -32768[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5735 subtract[compile-time] -32768[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - -129;
endcode
compile error

$overflow off
code auto:5736 subtract[Integer] -32768[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:5737 subtract[compile-time] -32768[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - -128;
endcode
compile error

$overflow on
code auto:5738 subtract[Integer] -32768[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5739 subtract[compile-time] -32768[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - -128;
endcode
compile error

$overflow off
code auto:5740 subtract[Integer] -32768[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:5741 subtract[compile-time] -32768[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - -1;
endcode
compile error

$overflow on
code auto:5742 subtract[Integer] -32768[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5743 subtract[compile-time] -32768[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - -1;
endcode
compile error

$overflow off
code auto:5744 subtract[Integer] -32768[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:5745 subtract[compile-time] -32768[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - 0;
endcode
compile error

$overflow on
code auto:5746 subtract[Integer] -32768[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5747 subtract[compile-time] -32768[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - 0;
endcode
compile error

$overflow off
code auto:5748 subtract[Integer] -32768[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:5749 subtract[compile-time] -32768[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - 1;
endcode
compile error

$overflow on
code auto:5750 subtract[Integer] -32768[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5751 subtract[compile-time] -32768[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - 1;
endcode
compile error

$overflow off
code auto:5752 subtract[Integer] -32768[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32641

code auto:5753 subtract[compile-time] -32768[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - 127;
endcode
compile error

$overflow on
code auto:5754 subtract[Integer] -32768[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5755 subtract[compile-time] -32768[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - 127;
endcode
compile error

$overflow off
code auto:5756 subtract[Integer] -32768[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:5757 subtract[compile-time] -32768[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - 128;
endcode
compile error

$overflow on
code auto:5758 subtract[Integer] -32768[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5759 subtract[compile-time] -32768[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - 128;
endcode
compile error

$overflow off
code auto:5760 subtract[Integer] -32768[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5761 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 - 32767;
endcode
compile error

$overflow on
code auto:5762 subtract[Integer] -32768[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5763 subtract[compile-time] -32768[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 - 32767;
endcode
compile error

$overflow off
code auto:5764 subtract[Integer] -32767[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5765 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow on
code auto:5766 subtract[Integer] -32767[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5767 subtract[compile-time] -32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - -32768;
endcode
varvalue r 1

$overflow off
code auto:5768 subtract[Integer] -32767[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5769 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow on
code auto:5770 subtract[Integer] -32767[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5771 subtract[compile-time] -32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - -32767;
endcode
varvalue r 0

$overflow off
code auto:5772 subtract[Integer] -32767[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32898

code auto:5773 subtract[compile-time] -32767[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - -129;
endcode
compile error

$overflow on
code auto:5774 subtract[Integer] -32767[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5775 subtract[compile-time] -32767[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - -129;
endcode
compile error

$overflow off
code auto:5776 subtract[Integer] -32767[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32897

code auto:5777 subtract[compile-time] -32767[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - -128;
endcode
compile error

$overflow on
code auto:5778 subtract[Integer] -32767[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5779 subtract[compile-time] -32767[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - -128;
endcode
compile error

$overflow off
code auto:5780 subtract[Integer] -32767[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32770

code auto:5781 subtract[compile-time] -32767[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - -1;
endcode
compile error

$overflow on
code auto:5782 subtract[Integer] -32767[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5783 subtract[compile-time] -32767[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - -1;
endcode
compile error

$overflow off
code auto:5784 subtract[Integer] -32767[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:5785 subtract[compile-time] -32767[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - 0;
endcode
compile error

$overflow on
code auto:5786 subtract[Integer] -32767[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5787 subtract[compile-time] -32767[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - 0;
endcode
compile error

$overflow off
code auto:5788 subtract[Integer] -32767[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:5789 subtract[compile-time] -32767[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - 1;
endcode
compile error

$overflow on
code auto:5790 subtract[Integer] -32767[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5791 subtract[compile-time] -32767[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - 1;
endcode
compile error

$overflow off
code auto:5792 subtract[Integer] -32767[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32642

code auto:5793 subtract[compile-time] -32767[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - 127;
endcode
compile error

$overflow on
code auto:5794 subtract[Integer] -32767[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5795 subtract[compile-time] -32767[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - 127;
endcode
compile error

$overflow off
code auto:5796 subtract[Integer] -32767[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32641

code auto:5797 subtract[compile-time] -32767[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - 128;
endcode
compile error

$overflow on
code auto:5798 subtract[Integer] -32767[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5799 subtract[compile-time] -32767[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - 128;
endcode
compile error

$overflow off
code auto:5800 subtract[Integer] -32767[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:5801 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 - 32767;
endcode
compile error

$overflow on
code auto:5802 subtract[Integer] -32767[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5803 subtract[compile-time] -32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 - 32767;
endcode
compile error

$overflow off
code auto:5804 subtract[Integer] -129[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:5805 subtract[compile-time] -129[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - -32768;
endcode
varvalue r 32639

$overflow on
code auto:5806 subtract[Integer] -129[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:5807 subtract[compile-time] -129[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - -32768;
endcode
varvalue r 32639

$overflow off
code auto:5808 subtract[Integer] -129[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32638

code auto:5809 subtract[compile-time] -129[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - -32767;
endcode
varvalue r 32638

$overflow on
code auto:5810 subtract[Integer] -129[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32638

code auto:5811 subtract[compile-time] -129[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - -32767;
endcode
varvalue r 32638

$overflow off
code auto:5812 subtract[Integer] -129[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5813 subtract[compile-time] -129[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - -129;
endcode
varvalue r 0

$overflow on
code auto:5814 subtract[Integer] -129[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5815 subtract[compile-time] -129[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - -129;
endcode
varvalue r 0

$overflow off
code auto:5816 subtract[Integer] -129[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:5817 subtract[compile-time] -129[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - -128;
endcode
compile error

$overflow on
code auto:5818 subtract[Integer] -129[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5819 subtract[compile-time] -129[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - -128;
endcode
compile error

$overflow off
code auto:5820 subtract[Integer] -129[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:5821 subtract[compile-time] -129[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - -1;
endcode
compile error

$overflow on
code auto:5822 subtract[Integer] -129[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5823 subtract[compile-time] -129[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - -1;
endcode
compile error

$overflow off
code auto:5824 subtract[Integer] -129[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65407

code auto:5825 subtract[compile-time] -129[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - 0;
endcode
compile error

$overflow on
code auto:5826 subtract[Integer] -129[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5827 subtract[compile-time] -129[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - 0;
endcode
compile error

$overflow off
code auto:5828 subtract[Integer] -129[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65406

code auto:5829 subtract[compile-time] -129[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - 1;
endcode
compile error

$overflow on
code auto:5830 subtract[Integer] -129[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5831 subtract[compile-time] -129[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - 1;
endcode
compile error

$overflow off
code auto:5832 subtract[Integer] -129[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:5833 subtract[compile-time] -129[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - 127;
endcode
compile error

$overflow on
code auto:5834 subtract[Integer] -129[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5835 subtract[compile-time] -129[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - 127;
endcode
compile error

$overflow off
code auto:5836 subtract[Integer] -129[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65279

code auto:5837 subtract[compile-time] -129[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - 128;
endcode
compile error

$overflow on
code auto:5838 subtract[Integer] -129[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5839 subtract[compile-time] -129[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - 128;
endcode
compile error

$overflow off
code auto:5840 subtract[Integer] -129[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:5841 subtract[compile-time] -129[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 - 32767;
endcode
compile error

$overflow on
code auto:5842 subtract[Integer] -129[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5843 subtract[compile-time] -129[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 - 32767;
endcode
compile error

$overflow off
code auto:5844 subtract[Integer] -128[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:5845 subtract[compile-time] -128[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow on
code auto:5846 subtract[Integer] -128[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:5847 subtract[compile-time] -128[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -32768;
endcode
varvalue r 32640

$overflow off
code auto:5848 subtract[Integer] -128[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:5849 subtract[compile-time] -128[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow on
code auto:5850 subtract[Integer] -128[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:5851 subtract[compile-time] -128[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -32767;
endcode
varvalue r 32639

$overflow off
code auto:5852 subtract[Integer] -128[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5853 subtract[compile-time] -128[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -129;
endcode
varvalue r 1

$overflow on
code auto:5854 subtract[Integer] -128[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5855 subtract[compile-time] -128[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -129;
endcode
varvalue r 1

$overflow off
code auto:5856 subtract[Integer] -128[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5857 subtract[compile-time] -128[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -128;
endcode
varvalue r 0

$overflow on
code auto:5858 subtract[Integer] -128[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5859 subtract[compile-time] -128[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -128;
endcode
varvalue r 0

$overflow off
code auto:5860 subtract[Integer] -128[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:5861 subtract[compile-time] -128[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - -1;
endcode
compile error

$overflow on
code auto:5862 subtract[Integer] -128[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5863 subtract[compile-time] -128[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - -1;
endcode
compile error

$overflow off
code auto:5864 subtract[Integer] -128[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:5865 subtract[compile-time] -128[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 0;
endcode
compile error

$overflow on
code auto:5866 subtract[Integer] -128[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5867 subtract[compile-time] -128[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 0;
endcode
compile error

$overflow off
code auto:5868 subtract[Integer] -128[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65407

code auto:5869 subtract[compile-time] -128[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 1;
endcode
compile error

$overflow on
code auto:5870 subtract[Integer] -128[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5871 subtract[compile-time] -128[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 1;
endcode
compile error

$overflow off
code auto:5872 subtract[Integer] -128[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65281

code auto:5873 subtract[compile-time] -128[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 127;
endcode
compile error

$overflow on
code auto:5874 subtract[Integer] -128[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5875 subtract[compile-time] -128[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 127;
endcode
compile error

$overflow off
code auto:5876 subtract[Integer] -128[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:5877 subtract[compile-time] -128[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 128;
endcode
compile error

$overflow on
code auto:5878 subtract[Integer] -128[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5879 subtract[compile-time] -128[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 128;
endcode
compile error

$overflow off
code auto:5880 subtract[Integer] -128[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32641

code auto:5881 subtract[compile-time] -128[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 - 32767;
endcode
compile error

$overflow on
code auto:5882 subtract[Integer] -128[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5883 subtract[compile-time] -128[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 - 32767;
endcode
compile error

$overflow off
code auto:5884 subtract[Integer] -1[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:5885 subtract[compile-time] -1[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow on
code auto:5886 subtract[Integer] -1[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:5887 subtract[compile-time] -1[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -32768;
endcode
varvalue r 32767

$overflow off
code auto:5888 subtract[Integer] -1[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:5889 subtract[compile-time] -1[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow on
code auto:5890 subtract[Integer] -1[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:5891 subtract[compile-time] -1[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -32767;
endcode
varvalue r 32766

$overflow off
code auto:5892 subtract[Integer] -1[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:5893 subtract[compile-time] -1[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -129;
endcode
varvalue r 128

$overflow on
code auto:5894 subtract[Integer] -1[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:5895 subtract[compile-time] -1[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -129;
endcode
varvalue r 128

$overflow off
code auto:5896 subtract[Integer] -1[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:5897 subtract[compile-time] -1[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -128;
endcode
varvalue r 127

$overflow on
code auto:5898 subtract[Integer] -1[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:5899 subtract[compile-time] -1[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -128;
endcode
varvalue r 127

$overflow off
code auto:5900 subtract[Integer] -1[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5901 subtract[compile-time] -1[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - -1;
endcode
varvalue r 0

$overflow on
code auto:5902 subtract[Integer] -1[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5903 subtract[compile-time] -1[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - -1;
endcode
varvalue r 0

$overflow off
code auto:5904 subtract[Integer] -1[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:5905 subtract[compile-time] -1[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 0;
endcode
compile error

$overflow on
code auto:5906 subtract[Integer] -1[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5907 subtract[compile-time] -1[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 0;
endcode
compile error

$overflow off
code auto:5908 subtract[Integer] -1[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:5909 subtract[compile-time] -1[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 1;
endcode
compile error

$overflow on
code auto:5910 subtract[Integer] -1[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5911 subtract[compile-time] -1[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 1;
endcode
compile error

$overflow off
code auto:5912 subtract[Integer] -1[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:5913 subtract[compile-time] -1[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 127;
endcode
compile error

$overflow on
code auto:5914 subtract[Integer] -1[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5915 subtract[compile-time] -1[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 127;
endcode
compile error

$overflow off
code auto:5916 subtract[Integer] -1[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65407

code auto:5917 subtract[compile-time] -1[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 128;
endcode
compile error

$overflow on
code auto:5918 subtract[Integer] -1[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5919 subtract[compile-time] -1[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 128;
endcode
compile error

$overflow off
code auto:5920 subtract[Integer] -1[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:5921 subtract[compile-time] -1[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 - 32767;
endcode
compile error

$overflow on
code auto:5922 subtract[Integer] -1[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5923 subtract[compile-time] -1[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 - 32767;
endcode
compile error

$overflow off
code auto:5924 subtract[Integer] 0[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:5925 subtract[compile-time] 0[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -32768;
endcode
varvalue r 32768

$overflow on
code auto:5926 subtract[Integer] 0[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5927 subtract[compile-time] 0[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -32768;
endcode
varvalue r 32768

$overflow off
code auto:5928 subtract[Integer] 0[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:5929 subtract[compile-time] 0[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow on
code auto:5930 subtract[Integer] 0[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:5931 subtract[compile-time] 0[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -32767;
endcode
varvalue r 32767

$overflow off
code auto:5932 subtract[Integer] 0[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:5933 subtract[compile-time] 0[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -129;
endcode
varvalue r 129

$overflow on
code auto:5934 subtract[Integer] 0[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:5935 subtract[compile-time] 0[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -129;
endcode
varvalue r 129

$overflow off
code auto:5936 subtract[Integer] 0[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:5937 subtract[compile-time] 0[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -128;
endcode
varvalue r 128

$overflow on
code auto:5938 subtract[Integer] 0[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:5939 subtract[compile-time] 0[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -128;
endcode
varvalue r 128

$overflow off
code auto:5940 subtract[Integer] 0[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5941 subtract[compile-time] 0[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - -1;
endcode
varvalue r 1

$overflow on
code auto:5942 subtract[Integer] 0[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5943 subtract[compile-time] 0[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - -1;
endcode
varvalue r 1

$overflow off
code auto:5944 subtract[Integer] 0[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5945 subtract[compile-time] 0[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:5946 subtract[Integer] 0[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5947 subtract[compile-time] 0[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:5948 subtract[Integer] 0[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:5949 subtract[compile-time] 0[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:5950 subtract[Integer] 0[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5951 subtract[compile-time] 0[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:5952 subtract[Integer] 0[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:5953 subtract[compile-time] 0[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:5954 subtract[Integer] 0[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5955 subtract[compile-time] 0[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:5956 subtract[Integer] 0[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65408

code auto:5957 subtract[compile-time] 0[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:5958 subtract[Integer] 0[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5959 subtract[compile-time] 0[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:5960 subtract[Integer] 0[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:5961 subtract[compile-time] 0[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:5962 subtract[Integer] 0[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5963 subtract[compile-time] 0[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:5964 subtract[Integer] 1[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:5965 subtract[compile-time] 1[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -32768;
endcode
varvalue r 32769

$overflow on
code auto:5966 subtract[Integer] 1[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5967 subtract[compile-time] 1[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -32768;
endcode
varvalue r 32769

$overflow off
code auto:5968 subtract[Integer] 1[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:5969 subtract[compile-time] 1[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -32767;
endcode
varvalue r 32768

$overflow on
code auto:5970 subtract[Integer] 1[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5971 subtract[compile-time] 1[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -32767;
endcode
varvalue r 32768

$overflow off
code auto:5972 subtract[Integer] 1[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 130

code auto:5973 subtract[compile-time] 1[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -129;
endcode
varvalue r 130

$overflow on
code auto:5974 subtract[Integer] 1[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 130

code auto:5975 subtract[compile-time] 1[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -129;
endcode
varvalue r 130

$overflow off
code auto:5976 subtract[Integer] 1[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:5977 subtract[compile-time] 1[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -128;
endcode
varvalue r 129

$overflow on
code auto:5978 subtract[Integer] 1[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:5979 subtract[compile-time] 1[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -128;
endcode
varvalue r 129

$overflow off
code auto:5980 subtract[Integer] 1[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:5981 subtract[compile-time] 1[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - -1;
endcode
varvalue r 2

$overflow on
code auto:5982 subtract[Integer] 1[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:5983 subtract[compile-time] 1[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - -1;
endcode
varvalue r 2

$overflow off
code auto:5984 subtract[Integer] 1[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5985 subtract[compile-time] 1[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:5986 subtract[Integer] 1[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:5987 subtract[compile-time] 1[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:5988 subtract[Integer] 1[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5989 subtract[compile-time] 1[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:5990 subtract[Integer] 1[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:5991 subtract[compile-time] 1[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:5992 subtract[Integer] 1[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65410

code auto:5993 subtract[compile-time] 1[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:5994 subtract[Integer] 1[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5995 subtract[compile-time] 1[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:5996 subtract[Integer] 1[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65409

code auto:5997 subtract[compile-time] 1[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 128;
endcode
compile error

$overflow on
code auto:5998 subtract[Integer] 1[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:5999 subtract[compile-time] 1[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 128;
endcode
compile error

$overflow off
code auto:6000 subtract[Integer] 1[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32770

code auto:6001 subtract[compile-time] 1[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 32767;
endcode
compile error

$overflow on
code auto:6002 subtract[Integer] 1[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6003 subtract[compile-time] 1[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 32767;
endcode
compile error

$overflow off
code auto:6004 subtract[Integer] 127[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32895

code auto:6005 subtract[compile-time] 127[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -32768;
endcode
varvalue r 32895

$overflow on
code auto:6006 subtract[Integer] 127[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6007 subtract[compile-time] 127[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -32768;
endcode
varvalue r 32895

$overflow off
code auto:6008 subtract[Integer] 127[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32894

code auto:6009 subtract[compile-time] 127[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -32767;
endcode
varvalue r 32894

$overflow on
code auto:6010 subtract[Integer] 127[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6011 subtract[compile-time] 127[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -32767;
endcode
varvalue r 32894

$overflow off
code auto:6012 subtract[Integer] 127[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:6013 subtract[compile-time] 127[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -129;
endcode
varvalue r 256

$overflow on
code auto:6014 subtract[Integer] 127[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:6015 subtract[compile-time] 127[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -129;
endcode
varvalue r 256

$overflow off
code auto:6016 subtract[Integer] 127[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6017 subtract[compile-time] 127[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -128;
endcode
varvalue r 255

$overflow on
code auto:6018 subtract[Integer] 127[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6019 subtract[compile-time] 127[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -128;
endcode
varvalue r 255

$overflow off
code auto:6020 subtract[Integer] 127[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6021 subtract[compile-time] 127[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - -1;
endcode
varvalue r 128

$overflow on
code auto:6022 subtract[Integer] 127[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6023 subtract[compile-time] 127[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - -1;
endcode
varvalue r 128

$overflow off
code auto:6024 subtract[Integer] 127[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6025 subtract[compile-time] 127[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:6026 subtract[Integer] 127[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6027 subtract[compile-time] 127[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:6028 subtract[Integer] 127[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:6029 subtract[compile-time] 127[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:6030 subtract[Integer] 127[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:6031 subtract[compile-time] 127[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:6032 subtract[Integer] 127[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6033 subtract[compile-time] 127[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:6034 subtract[Integer] 127[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6035 subtract[compile-time] 127[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:6036 subtract[Integer] 127[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:6037 subtract[compile-time] 127[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 128;
endcode
compile error

$overflow on
code auto:6038 subtract[Integer] 127[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6039 subtract[compile-time] 127[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 128;
endcode
compile error

$overflow off
code auto:6040 subtract[Integer] 127[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:6041 subtract[compile-time] 127[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 32767;
endcode
compile error

$overflow on
code auto:6042 subtract[Integer] 127[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6043 subtract[compile-time] 127[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 32767;
endcode
compile error

$overflow off
code auto:6044 subtract[Integer] 128[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:6045 subtract[compile-time] 128[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - -32768;
endcode
varvalue r 32896

$overflow on
code auto:6046 subtract[Integer] 128[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6047 subtract[compile-time] 128[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - -32768;
endcode
varvalue r 32896

$overflow off
code auto:6048 subtract[Integer] 128[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32895

code auto:6049 subtract[compile-time] 128[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - -32767;
endcode
varvalue r 32895

$overflow on
code auto:6050 subtract[Integer] 128[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6051 subtract[compile-time] 128[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - -32767;
endcode
varvalue r 32895

$overflow off
code auto:6052 subtract[Integer] 128[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 257

code auto:6053 subtract[compile-time] 128[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - -129;
endcode
varvalue r 257

$overflow on
code auto:6054 subtract[Integer] 128[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 257

code auto:6055 subtract[compile-time] 128[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - -129;
endcode
varvalue r 257

$overflow off
code auto:6056 subtract[Integer] 128[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:6057 subtract[compile-time] 128[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - -128;
endcode
varvalue r 256

$overflow on
code auto:6058 subtract[Integer] 128[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:6059 subtract[compile-time] 128[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - -128;
endcode
varvalue r 256

$overflow off
code auto:6060 subtract[Integer] 128[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:6061 subtract[compile-time] 128[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - -1;
endcode
varvalue r 129

$overflow on
code auto:6062 subtract[Integer] 128[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:6063 subtract[compile-time] 128[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - -1;
endcode
varvalue r 129

$overflow off
code auto:6064 subtract[Integer] 128[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6065 subtract[compile-time] 128[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:6066 subtract[Integer] 128[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6067 subtract[compile-time] 128[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:6068 subtract[Integer] 128[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6069 subtract[compile-time] 128[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:6070 subtract[Integer] 128[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6071 subtract[compile-time] 128[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:6072 subtract[Integer] 128[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6073 subtract[compile-time] 128[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:6074 subtract[Integer] 128[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6075 subtract[compile-time] 128[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:6076 subtract[Integer] 128[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6077 subtract[compile-time] 128[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:6078 subtract[Integer] 128[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6079 subtract[compile-time] 128[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:6080 subtract[Integer] 128[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32897

code auto:6081 subtract[compile-time] 128[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 32767;
endcode
compile error

$overflow on
code auto:6082 subtract[Integer] 128[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6083 subtract[compile-time] 128[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 32767;
endcode
compile error

$overflow off
code auto:6084 subtract[Integer] 32767[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:6085 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - -32768;
endcode
varvalue r 65535

$overflow on
code auto:6086 subtract[Integer] 32767[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6087 subtract[compile-time] 32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - -32768;
endcode
varvalue r 65535

$overflow off
code auto:6088 subtract[Integer] 32767[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65534

code auto:6089 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - -32767;
endcode
varvalue r 65534

$overflow on
code auto:6090 subtract[Integer] 32767[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6091 subtract[compile-time] 32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - -32767;
endcode
varvalue r 65534

$overflow off
code auto:6092 subtract[Integer] 32767[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32896

code auto:6093 subtract[compile-time] 32767[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - -129;
endcode
varvalue r 32896

$overflow on
code auto:6094 subtract[Integer] 32767[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6095 subtract[compile-time] 32767[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - -129;
endcode
varvalue r 32896

$overflow off
code auto:6096 subtract[Integer] 32767[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32895

code auto:6097 subtract[compile-time] 32767[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow on
code auto:6098 subtract[Integer] 32767[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6099 subtract[compile-time] 32767[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - -128;
endcode
varvalue r 32895

$overflow off
code auto:6100 subtract[Integer] 32767[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:6101 subtract[compile-time] 32767[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow on
code auto:6102 subtract[Integer] 32767[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6103 subtract[compile-time] 32767[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - -1;
endcode
varvalue r 32768

$overflow off
code auto:6104 subtract[Integer] 32767[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:6105 subtract[compile-time] 32767[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:6106 subtract[Integer] 32767[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:6107 subtract[compile-time] 32767[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:6108 subtract[Integer] 32767[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:6109 subtract[compile-time] 32767[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow on
code auto:6110 subtract[Integer] 32767[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32766

code auto:6111 subtract[compile-time] 32767[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 1;
endcode
varvalue r 32766

$overflow off
code auto:6112 subtract[Integer] 32767[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:6113 subtract[compile-time] 32767[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow on
code auto:6114 subtract[Integer] 32767[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32640

code auto:6115 subtract[compile-time] 32767[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 127;
endcode
varvalue r 32640

$overflow off
code auto:6116 subtract[Integer] 32767[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:6117 subtract[compile-time] 32767[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow on
code auto:6118 subtract[Integer] 32767[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32639

code auto:6119 subtract[compile-time] 32767[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 128;
endcode
varvalue r 32639

$overflow off
code auto:6120 subtract[Integer] 32767[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6121 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:6122 subtract[Integer] 32767[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6123 subtract[compile-time] 32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:6124 subtract[Byte] 0[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6125 subtract[Byte] 0[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 0

code auto:6126 subtract[compile-time] 0[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6127 subtract[Byte] 0[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6128 subtract[Byte] 0[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 0

code auto:6129 subtract[compile-time] 0[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6130 subtract[Byte] 0[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6131 subtract[Byte] 0[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -1

code auto:6132 subtract[compile-time] 0[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:6133 subtract[Byte] 0[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6134 subtract[Byte] 0[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 1;
endcode
runtime overflow

code auto:6135 subtract[compile-time] 0[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:6136 subtract[Byte] 0[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:6137 subtract[Byte] 0[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -127

code auto:6138 subtract[compile-time] 0[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:6139 subtract[Byte] 0[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6140 subtract[Byte] 0[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:6141 subtract[compile-time] 0[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:6142 subtract[Byte] 0[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:6143 subtract[Byte] 0[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r -128

code auto:6144 subtract[compile-time] 0[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:6145 subtract[Byte] 0[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6146 subtract[Byte] 0[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 128;
endcode
runtime overflow

code auto:6147 subtract[compile-time] 0[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:6148 subtract[Byte] 0[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6149 subtract[Byte] 0[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r 1

code auto:6150 subtract[compile-time] 0[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6151 subtract[Byte] 0[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6152 subtract[Byte] 0[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a - 255;
endcode
runtime overflow

code auto:6153 subtract[compile-time] 0[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:6154 subtract[Byte] 1[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6155 subtract[Byte] 1[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 1

code auto:6156 subtract[compile-time] 1[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:6157 subtract[Byte] 1[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6158 subtract[Byte] 1[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 1

code auto:6159 subtract[compile-time] 1[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:6160 subtract[Byte] 1[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6161 subtract[Byte] 1[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 0

code auto:6162 subtract[compile-time] 1[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:6163 subtract[Byte] 1[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6164 subtract[Byte] 1[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 0

code auto:6165 subtract[compile-time] 1[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:6166 subtract[Byte] 1[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -126

code auto:6167 subtract[Byte] 1[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -126

code auto:6168 subtract[compile-time] 1[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:6169 subtract[Byte] 1[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6170 subtract[Byte] 1[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:6171 subtract[compile-time] 1[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:6172 subtract[Byte] 1[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:6173 subtract[Byte] 1[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r -127

code auto:6174 subtract[compile-time] 1[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:6175 subtract[Byte] 1[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6176 subtract[Byte] 1[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 128;
endcode
runtime overflow

code auto:6177 subtract[compile-time] 1[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:6178 subtract[Byte] 1[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 2

code auto:6179 subtract[Byte] 1[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r 2

code auto:6180 subtract[compile-time] 1[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:6181 subtract[Byte] 1[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6182 subtract[Byte] 1[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a - 255;
endcode
runtime overflow

code auto:6183 subtract[compile-time] 1[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:6184 subtract[Byte] 127[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6185 subtract[Byte] 127[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 127

code auto:6186 subtract[compile-time] 127[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:6187 subtract[Byte] 127[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6188 subtract[Byte] 127[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r 127

code auto:6189 subtract[compile-time] 127[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:6190 subtract[Byte] 127[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:6191 subtract[Byte] 127[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 126

code auto:6192 subtract[compile-time] 127[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:6193 subtract[Byte] 127[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 126

code auto:6194 subtract[Byte] 127[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 126

code auto:6195 subtract[compile-time] 127[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:6196 subtract[Byte] 127[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6197 subtract[Byte] 127[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 0

code auto:6198 subtract[compile-time] 127[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:6199 subtract[Byte] 127[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6200 subtract[Byte] 127[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 0

code auto:6201 subtract[compile-time] 127[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:6202 subtract[Byte] 127[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6203 subtract[Byte] 127[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r -1

code auto:6204 subtract[compile-time] 127[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:6205 subtract[Byte] 127[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6206 subtract[Byte] 127[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 128;
endcode
runtime overflow

code auto:6207 subtract[compile-time] 127[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:6208 subtract[Byte] 127[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:6209 subtract[Byte] 127[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r -128

code auto:6210 subtract[compile-time] 127[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:6211 subtract[Byte] 127[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6212 subtract[Byte] 127[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a - 255;
endcode
runtime overflow

code auto:6213 subtract[compile-time] 127[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:6214 subtract[Byte] 128[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:6215 subtract[Byte] 128[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -128

code auto:6216 subtract[compile-time] 128[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 0;
endcode
compile error

$overflow on
code auto:6217 subtract[Byte] 128[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6218 subtract[Byte] 128[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 0;
endcode
runtime overflow

code auto:6219 subtract[compile-time] 128[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 0;
endcode
compile error

$overflow off
code auto:6220 subtract[Byte] 128[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6221 subtract[Byte] 128[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 127

code auto:6222 subtract[compile-time] 128[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:6223 subtract[Byte] 128[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6224 subtract[Byte] 128[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r 127

code auto:6225 subtract[compile-time] 128[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:6226 subtract[Byte] 128[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6227 subtract[Byte] 128[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 1

code auto:6228 subtract[compile-time] 128[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:6229 subtract[Byte] 128[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6230 subtract[Byte] 128[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r 1

code auto:6231 subtract[compile-time] 128[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:6232 subtract[Byte] 128[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6233 subtract[Byte] 128[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r 0

code auto:6234 subtract[compile-time] 128[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:6235 subtract[Byte] 128[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6236 subtract[Byte] 128[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r 0

code auto:6237 subtract[compile-time] 128[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:6238 subtract[Byte] 128[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -127

code auto:6239 subtract[Byte] 128[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r -127

code auto:6240 subtract[compile-time] 128[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 - 255;
endcode
varvalue r -127

$overflow on
code auto:6241 subtract[Byte] 128[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6242 subtract[Byte] 128[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a - 255;
endcode
runtime overflow

code auto:6243 subtract[compile-time] 128[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 - 255;
endcode
varvalue r -127

$overflow off
code auto:6244 subtract[Byte] 255[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6245 subtract[Byte] 255[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 0;
endcode
varvalue r -1

code auto:6246 subtract[compile-time] 255[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow on
code auto:6247 subtract[Byte] 255[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6248 subtract[Byte] 255[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 0;
endcode
runtime overflow

code auto:6249 subtract[compile-time] 255[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow off
code auto:6250 subtract[Byte] 255[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -2

code auto:6251 subtract[Byte] 255[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 1;
endcode
varvalue r -2

code auto:6252 subtract[compile-time] 255[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 1;
endcode
compile error

$overflow on
code auto:6253 subtract[Byte] 255[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6254 subtract[Byte] 255[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 1;
endcode
runtime overflow

code auto:6255 subtract[compile-time] 255[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 1;
endcode
compile error

$overflow off
code auto:6256 subtract[Byte] 255[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -128

code auto:6257 subtract[Byte] 255[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 127;
endcode
varvalue r -128

code auto:6258 subtract[compile-time] 255[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 127;
endcode
compile error

$overflow on
code auto:6259 subtract[Byte] 255[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6260 subtract[Byte] 255[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 127;
endcode
runtime overflow

code auto:6261 subtract[compile-time] 255[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 127;
endcode
compile error

$overflow off
code auto:6262 subtract[Byte] 255[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6263 subtract[Byte] 255[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r 127

code auto:6264 subtract[compile-time] 255[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:6265 subtract[Byte] 255[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 127

code auto:6266 subtract[Byte] 255[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 128;
endcode
varvalue r 127

code auto:6267 subtract[compile-time] 255[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:6268 subtract[Byte] 255[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6269 subtract[Byte] 255[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r 0

code auto:6270 subtract[compile-time] 255[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6271 subtract[Byte] 255[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6272 subtract[Byte] 255[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a - 255;
endcode
varvalue r 0

code auto:6273 subtract[compile-time] 255[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6274 subtract[Byte] 0[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6275 subtract[Byte] 0[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 0

code auto:6276 subtract[compile-time] 0[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6277 subtract[Byte] 0[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6278 subtract[Byte] 0[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 0

code auto:6279 subtract[compile-time] 0[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6280 subtract[Byte] 0[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6281 subtract[Byte] 0[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 255

code auto:6282 subtract[compile-time] 0[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow on
code auto:6283 subtract[Byte] 0[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6284 subtract[Byte] 0[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 1;
endcode
runtime overflow

code auto:6285 subtract[compile-time] 0[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 1;
endcode
varvalue r -1

$overflow off
code auto:6286 subtract[Byte] 0[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:6287 subtract[Byte] 0[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 129

code auto:6288 subtract[compile-time] 0[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow on
code auto:6289 subtract[Byte] 0[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6290 subtract[Byte] 0[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 127;
endcode
runtime overflow

code auto:6291 subtract[compile-time] 0[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 127;
endcode
varvalue r -127

$overflow off
code auto:6292 subtract[Byte] 0[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6293 subtract[Byte] 0[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 128

code auto:6294 subtract[compile-time] 0[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow on
code auto:6295 subtract[Byte] 0[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6296 subtract[Byte] 0[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 128;
endcode
runtime overflow

code auto:6297 subtract[compile-time] 0[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 128;
endcode
varvalue r -128

$overflow off
code auto:6298 subtract[Byte] 0[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6299 subtract[Byte] 0[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 1

code auto:6300 subtract[compile-time] 0[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:6301 subtract[Byte] 0[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6302 subtract[Byte] 0[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a - 255;
endcode
runtime overflow

code auto:6303 subtract[compile-time] 0[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:6304 subtract[Byte] 1[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6305 subtract[Byte] 1[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 1

code auto:6306 subtract[compile-time] 1[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:6307 subtract[Byte] 1[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6308 subtract[Byte] 1[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 1

code auto:6309 subtract[compile-time] 1[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:6310 subtract[Byte] 1[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6311 subtract[Byte] 1[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 0

code auto:6312 subtract[compile-time] 1[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:6313 subtract[Byte] 1[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6314 subtract[Byte] 1[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 0

code auto:6315 subtract[compile-time] 1[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:6316 subtract[Byte] 1[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 130

code auto:6317 subtract[Byte] 1[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 130

code auto:6318 subtract[compile-time] 1[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow on
code auto:6319 subtract[Byte] 1[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6320 subtract[Byte] 1[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 127;
endcode
runtime overflow

code auto:6321 subtract[compile-time] 1[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 127;
endcode
varvalue r -126

$overflow off
code auto:6322 subtract[Byte] 1[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:6323 subtract[Byte] 1[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 129

code auto:6324 subtract[compile-time] 1[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow on
code auto:6325 subtract[Byte] 1[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6326 subtract[Byte] 1[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 128;
endcode
runtime overflow

code auto:6327 subtract[compile-time] 1[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 128;
endcode
varvalue r -127

$overflow off
code auto:6328 subtract[Byte] 1[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 2

code auto:6329 subtract[Byte] 1[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 2

code auto:6330 subtract[compile-time] 1[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow on
code auto:6331 subtract[Byte] 1[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6332 subtract[Byte] 1[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a - 255;
endcode
runtime overflow

code auto:6333 subtract[compile-time] 1[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 - 255;
endcode
varvalue r -254

$overflow off
code auto:6334 subtract[Byte] 127[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6335 subtract[Byte] 127[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 127

code auto:6336 subtract[compile-time] 127[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:6337 subtract[Byte] 127[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6338 subtract[Byte] 127[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 127

code auto:6339 subtract[compile-time] 127[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:6340 subtract[Byte] 127[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:6341 subtract[Byte] 127[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 126

code auto:6342 subtract[compile-time] 127[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:6343 subtract[Byte] 127[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 126

code auto:6344 subtract[Byte] 127[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 126

code auto:6345 subtract[compile-time] 127[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:6346 subtract[Byte] 127[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6347 subtract[Byte] 127[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 0

code auto:6348 subtract[compile-time] 127[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:6349 subtract[Byte] 127[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6350 subtract[Byte] 127[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 0

code auto:6351 subtract[compile-time] 127[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:6352 subtract[Byte] 127[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6353 subtract[Byte] 127[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 255

code auto:6354 subtract[compile-time] 127[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow on
code auto:6355 subtract[Byte] 127[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6356 subtract[Byte] 127[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 128;
endcode
runtime overflow

code auto:6357 subtract[compile-time] 127[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 128;
endcode
varvalue r -1

$overflow off
code auto:6358 subtract[Byte] 127[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6359 subtract[Byte] 127[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 128

code auto:6360 subtract[compile-time] 127[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow on
code auto:6361 subtract[Byte] 127[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6362 subtract[Byte] 127[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a - 255;
endcode
runtime overflow

code auto:6363 subtract[compile-time] 127[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 - 255;
endcode
varvalue r -128

$overflow off
code auto:6364 subtract[Byte] 128[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6365 subtract[Byte] 128[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 128

code auto:6366 subtract[compile-time] 128[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:6367 subtract[Byte] 128[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6368 subtract[Byte] 128[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 128

code auto:6369 subtract[compile-time] 128[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:6370 subtract[Byte] 128[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6371 subtract[Byte] 128[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 127

code auto:6372 subtract[compile-time] 128[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:6373 subtract[Byte] 128[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6374 subtract[Byte] 128[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 127

code auto:6375 subtract[compile-time] 128[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:6376 subtract[Byte] 128[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6377 subtract[Byte] 128[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 1

code auto:6378 subtract[compile-time] 128[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:6379 subtract[Byte] 128[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6380 subtract[Byte] 128[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 1

code auto:6381 subtract[compile-time] 128[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:6382 subtract[Byte] 128[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6383 subtract[Byte] 128[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 0

code auto:6384 subtract[compile-time] 128[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:6385 subtract[Byte] 128[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6386 subtract[Byte] 128[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 0

code auto:6387 subtract[compile-time] 128[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:6388 subtract[Byte] 128[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 129

code auto:6389 subtract[Byte] 128[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 129

code auto:6390 subtract[compile-time] 128[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow on
code auto:6391 subtract[Byte] 128[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6392 subtract[Byte] 128[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a - 255;
endcode
runtime overflow

code auto:6393 subtract[compile-time] 128[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 - 255;
endcode
varvalue r -127

$overflow off
code auto:6394 subtract[Byte] 255[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6395 subtract[Byte] 255[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 255

code auto:6396 subtract[compile-time] 255[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6397 subtract[Byte] 255[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6398 subtract[Byte] 255[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 0;
endcode
varvalue r 255

code auto:6399 subtract[compile-time] 255[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:6400 subtract[Byte] 255[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:6401 subtract[Byte] 255[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 254

code auto:6402 subtract[compile-time] 255[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:6403 subtract[Byte] 255[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 254

code auto:6404 subtract[Byte] 255[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 1;
endcode
varvalue r 254

code auto:6405 subtract[compile-time] 255[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:6406 subtract[Byte] 255[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6407 subtract[Byte] 255[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 128

code auto:6408 subtract[compile-time] 255[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:6409 subtract[Byte] 255[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 128

code auto:6410 subtract[Byte] 255[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 127;
endcode
varvalue r 128

code auto:6411 subtract[compile-time] 255[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:6412 subtract[Byte] 255[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6413 subtract[Byte] 255[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 127

code auto:6414 subtract[compile-time] 255[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:6415 subtract[Byte] 255[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 127

code auto:6416 subtract[Byte] 255[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 128;
endcode
varvalue r 127

code auto:6417 subtract[compile-time] 255[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:6418 subtract[Byte] 255[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6419 subtract[Byte] 255[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 0

code auto:6420 subtract[compile-time] 255[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6421 subtract[Byte] 255[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6422 subtract[Byte] 255[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a - 255;
endcode
varvalue r 0

code auto:6423 subtract[compile-time] 255[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6424 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6425 subtract[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 0

code auto:6426 subtract[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6427 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6428 subtract[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 1;
endcode
runtime overflow

code auto:6429 subtract[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:6430 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6431 subtract[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:6432 subtract[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:6433 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6434 subtract[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:6435 subtract[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:6436 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6437 subtract[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:6438 subtract[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6439 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6440 subtract[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 1

code auto:6441 subtract[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:6442 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6443 subtract[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 0

code auto:6444 subtract[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:6445 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6446 subtract[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 127;
endcode
runtime overflow

code auto:6447 subtract[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:6448 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6449 subtract[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:6450 subtract[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 128;
endcode
compile error

$overflow on
code auto:6451 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6452 subtract[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:6453 subtract[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:6454 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:6455 subtract[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 127

code auto:6456 subtract[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:6457 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 126

code auto:6458 subtract[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 126

code auto:6459 subtract[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:6460 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6461 subtract[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 0

code auto:6462 subtract[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:6463 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6464 subtract[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 128;
endcode
runtime overflow

code auto:6465 subtract[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 128;
endcode
compile error

$overflow on
code auto:6466 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6467 subtract[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:6468 subtract[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:6469 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:6470 subtract[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 128

code auto:6471 subtract[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:6472 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:6473 subtract[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 127

code auto:6474 subtract[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:6475 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6476 subtract[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 1

code auto:6477 subtract[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:6478 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6479 subtract[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 0

code auto:6480 subtract[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:6481 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6482 subtract[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a - 255;
endcode
runtime overflow

code auto:6483 subtract[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:6484 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6485 subtract[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 0;
endcode
varvalue r 255

code auto:6486 subtract[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6487 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 254

code auto:6488 subtract[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 1;
endcode
varvalue r 254

code auto:6489 subtract[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:6490 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 128

code auto:6491 subtract[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 127;
endcode
varvalue r 128

code auto:6492 subtract[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:6493 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 127

code auto:6494 subtract[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 128;
endcode
varvalue r 127

code auto:6495 subtract[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:6496 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6497 subtract[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a - 255;
endcode
varvalue r 0

code auto:6498 subtract[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6499 subtract[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6500 subtract[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 0

code auto:6501 subtract[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6502 subtract[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6503 subtract[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 0

code auto:6504 subtract[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6505 subtract[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6506 subtract[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 255

code auto:6507 subtract[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow on
code auto:6508 subtract[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6509 subtract[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a - 1;
endcode
runtime overflow

code auto:6510 subtract[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 1;
endcode
compile error

$overflow off
code auto:6511 subtract[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:6512 subtract[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 129

code auto:6513 subtract[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow on
code auto:6514 subtract[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6515 subtract[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:6516 subtract[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 127;
endcode
compile error

$overflow off
code auto:6517 subtract[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6518 subtract[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 128

code auto:6519 subtract[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow on
code auto:6520 subtract[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6521 subtract[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a - 128;
endcode
runtime overflow

code auto:6522 subtract[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 128;
endcode
compile error

$overflow off
code auto:6523 subtract[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6524 subtract[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 1

code auto:6525 subtract[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6526 subtract[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6527 subtract[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a - 255;
endcode
runtime overflow

code auto:6528 subtract[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:6529 subtract[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6530 subtract[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 1

code auto:6531 subtract[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow on
code auto:6532 subtract[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6533 subtract[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 1

code auto:6534 subtract[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 0;
endcode
varvalue r 1

$overflow off
code auto:6535 subtract[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6536 subtract[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 0

code auto:6537 subtract[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow on
code auto:6538 subtract[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6539 subtract[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 0

code auto:6540 subtract[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 1;
endcode
varvalue r 0

$overflow off
code auto:6541 subtract[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 130

code auto:6542 subtract[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 130

code auto:6543 subtract[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow on
code auto:6544 subtract[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6545 subtract[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a - 127;
endcode
runtime overflow

code auto:6546 subtract[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 127;
endcode
compile error

$overflow off
code auto:6547 subtract[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:6548 subtract[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 129

code auto:6549 subtract[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 128;
endcode
compile error

$overflow on
code auto:6550 subtract[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6551 subtract[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a - 128;
endcode
runtime overflow

code auto:6552 subtract[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 128;
endcode
compile error

$overflow off
code auto:6553 subtract[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 2

code auto:6554 subtract[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 2

code auto:6555 subtract[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 - 255;
endcode
compile error

$overflow on
code auto:6556 subtract[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6557 subtract[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a - 255;
endcode
runtime overflow

code auto:6558 subtract[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 - 255;
endcode
compile error

$overflow off
code auto:6559 subtract[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6560 subtract[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 127

code auto:6561 subtract[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow on
code auto:6562 subtract[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6563 subtract[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 127

code auto:6564 subtract[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 0;
endcode
varvalue r 127

$overflow off
code auto:6565 subtract[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:6566 subtract[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 126

code auto:6567 subtract[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow on
code auto:6568 subtract[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 126

code auto:6569 subtract[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 126

code auto:6570 subtract[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 1;
endcode
varvalue r 126

$overflow off
code auto:6571 subtract[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6572 subtract[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 0

code auto:6573 subtract[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow on
code auto:6574 subtract[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6575 subtract[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 0

code auto:6576 subtract[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 127;
endcode
varvalue r 0

$overflow off
code auto:6577 subtract[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6578 subtract[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 255

code auto:6579 subtract[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 128;
endcode
compile error

$overflow on
code auto:6580 subtract[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6581 subtract[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a - 128;
endcode
runtime overflow

code auto:6582 subtract[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 128;
endcode
compile error

$overflow off
code auto:6583 subtract[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6584 subtract[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 128

code auto:6585 subtract[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 - 255;
endcode
compile error

$overflow on
code auto:6586 subtract[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6587 subtract[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a - 255;
endcode
runtime overflow

code auto:6588 subtract[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 - 255;
endcode
compile error

$overflow off
code auto:6589 subtract[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6590 subtract[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 128

code auto:6591 subtract[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow on
code auto:6592 subtract[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6593 subtract[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 128

code auto:6594 subtract[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 0;
endcode
varvalue r 128

$overflow off
code auto:6595 subtract[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6596 subtract[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 127

code auto:6597 subtract[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 1;
endcode
varvalue r 127

$overflow on
code auto:6598 subtract[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6599 subtract[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 127

code auto:6600 subtract[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 1;
endcode
varvalue r 127

$overflow off
code auto:6601 subtract[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6602 subtract[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 1

code auto:6603 subtract[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 127;
endcode
varvalue r 1

$overflow on
code auto:6604 subtract[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6605 subtract[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 1

code auto:6606 subtract[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 127;
endcode
varvalue r 1

$overflow off
code auto:6607 subtract[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6608 subtract[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 0

code auto:6609 subtract[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 128;
endcode
varvalue r 0

$overflow on
code auto:6610 subtract[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6611 subtract[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 0

code auto:6612 subtract[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 128;
endcode
varvalue r 0

$overflow off
code auto:6613 subtract[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 129

code auto:6614 subtract[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 129

code auto:6615 subtract[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 - 255;
endcode
compile error

$overflow on
code auto:6616 subtract[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6617 subtract[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a - 255;
endcode
runtime overflow

code auto:6618 subtract[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 - 255;
endcode
compile error

$overflow off
code auto:6619 subtract[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6620 subtract[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 255

code auto:6621 subtract[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6622 subtract[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6623 subtract[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a - 0;
endcode
varvalue r 255

code auto:6624 subtract[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:6625 subtract[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 254

code auto:6626 subtract[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 254

code auto:6627 subtract[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 1;
endcode
varvalue r 254

$overflow on
code auto:6628 subtract[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a - b;
endcode
varvalue r 254

code auto:6629 subtract[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a - 1;
endcode
varvalue r 254

code auto:6630 subtract[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 1;
endcode
varvalue r 254

$overflow off
code auto:6631 subtract[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6632 subtract[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 128

code auto:6633 subtract[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 127;
endcode
varvalue r 128

$overflow on
code auto:6634 subtract[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a - b;
endcode
varvalue r 128

code auto:6635 subtract[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a - 127;
endcode
varvalue r 128

code auto:6636 subtract[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 127;
endcode
varvalue r 128

$overflow off
code auto:6637 subtract[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6638 subtract[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 127

code auto:6639 subtract[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 128;
endcode
varvalue r 127

$overflow on
code auto:6640 subtract[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a - b;
endcode
varvalue r 127

code auto:6641 subtract[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a - 128;
endcode
varvalue r 127

code auto:6642 subtract[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 128;
endcode
varvalue r 127

$overflow off
code auto:6643 subtract[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6644 subtract[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 0

code auto:6645 subtract[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6646 subtract[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6647 subtract[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a - 255;
endcode
varvalue r 0

code auto:6648 subtract[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6649 subtract[Word] 0[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6650 subtract[compile-time] 0[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6651 subtract[Word] 0[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6652 subtract[compile-time] 0[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6653 subtract[Word] 0[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6654 subtract[compile-time] 0[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6655 subtract[Word] 0[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6656 subtract[compile-time] 0[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:6657 subtract[Word] 0[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6658 subtract[compile-time] 0[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:6659 subtract[Word] 0[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6660 subtract[compile-time] 0[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:6661 subtract[Word] 0[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6662 subtract[compile-time] 0[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:6663 subtract[Word] 0[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6664 subtract[compile-time] 0[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:6665 subtract[Word] 0[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6666 subtract[compile-time] 0[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:6667 subtract[Word] 0[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6668 subtract[compile-time] 0[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:6669 subtract[Word] 255[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6670 subtract[compile-time] 255[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow on
code auto:6671 subtract[Word] 255[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6672 subtract[compile-time] 255[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow off
code auto:6673 subtract[Word] 255[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6674 subtract[compile-time] 255[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6675 subtract[Word] 255[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6676 subtract[compile-time] 255[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6677 subtract[Word] 255[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6678 subtract[compile-time] 255[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:6679 subtract[Word] 255[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6680 subtract[compile-time] 255[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:6681 subtract[Word] 255[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6682 subtract[compile-time] 255[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:6683 subtract[Word] 255[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6684 subtract[compile-time] 255[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:6685 subtract[Word] 255[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6686 subtract[compile-time] 255[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:6687 subtract[Word] 255[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6688 subtract[compile-time] 255[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:6689 subtract[Word] 32767[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6690 subtract[compile-time] 32767[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:6691 subtract[Word] 32767[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6692 subtract[compile-time] 32767[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:6693 subtract[Word] 32767[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6694 subtract[compile-time] 32767[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 255;
endcode
compile error

$overflow on
code auto:6695 subtract[Word] 32767[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6696 subtract[compile-time] 32767[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 255;
endcode
compile error

$overflow off
code auto:6697 subtract[Word] 32767[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6698 subtract[compile-time] 32767[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:6699 subtract[Word] 32767[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6700 subtract[compile-time] 32767[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:6701 subtract[Word] 32767[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6702 subtract[compile-time] 32767[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow on
code auto:6703 subtract[Word] 32767[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6704 subtract[compile-time] 32767[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow off
code auto:6705 subtract[Word] 32767[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6706 subtract[compile-time] 32767[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:6707 subtract[Word] 32767[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6708 subtract[compile-time] 32767[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:6709 subtract[Word] 32768[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6710 subtract[compile-time] 32768[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:6711 subtract[Word] 32768[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6712 subtract[compile-time] 32768[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:6713 subtract[Word] 32768[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6714 subtract[compile-time] 32768[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 255;
endcode
compile error

$overflow on
code auto:6715 subtract[Word] 32768[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6716 subtract[compile-time] 32768[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 255;
endcode
compile error

$overflow off
code auto:6717 subtract[Word] 32768[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6718 subtract[compile-time] 32768[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:6719 subtract[Word] 32768[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6720 subtract[compile-time] 32768[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:6721 subtract[Word] 32768[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6722 subtract[compile-time] 32768[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:6723 subtract[Word] 32768[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6724 subtract[compile-time] 32768[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:6725 subtract[Word] 32768[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:6726 subtract[compile-time] 32768[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:6727 subtract[Word] 32768[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6728 subtract[compile-time] 32768[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:6729 subtract[Word] 65535[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6730 subtract[compile-time] 65535[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:6731 subtract[Word] 65535[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6732 subtract[compile-time] 65535[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:6733 subtract[Word] 65535[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6734 subtract[compile-time] 65535[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:6735 subtract[Word] 65535[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6736 subtract[compile-time] 65535[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:6737 subtract[Word] 65535[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6738 subtract[compile-time] 65535[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:6739 subtract[Word] 65535[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6740 subtract[compile-time] 65535[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:6741 subtract[Word] 65535[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:6742 subtract[compile-time] 65535[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 32768;
endcode
compile error

$overflow on
code auto:6743 subtract[Word] 65535[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:6744 subtract[compile-time] 65535[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 32768;
endcode
compile error

$overflow off
code auto:6745 subtract[Word] 65535[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6746 subtract[compile-time] 65535[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:6747 subtract[Word] 65535[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:6748 subtract[compile-time] 65535[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:6749 subtract[Word] 0[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6750 subtract[compile-time] 0[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6751 subtract[Word] 0[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6752 subtract[compile-time] 0[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6753 subtract[Word] 0[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:6754 subtract[compile-time] 0[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:6755 subtract[Word] 0[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6756 subtract[compile-time] 0[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:6757 subtract[Word] 0[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:6758 subtract[compile-time] 0[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:6759 subtract[Word] 0[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6760 subtract[compile-time] 0[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:6761 subtract[Word] 0[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:6762 subtract[compile-time] 0[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow on
code auto:6763 subtract[Word] 0[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6764 subtract[compile-time] 0[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow off
code auto:6765 subtract[Word] 0[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6766 subtract[compile-time] 0[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:6767 subtract[Word] 0[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6768 subtract[compile-time] 0[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:6769 subtract[Word] 255[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6770 subtract[compile-time] 255[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6771 subtract[Word] 255[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:6772 subtract[compile-time] 255[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:6773 subtract[Word] 255[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6774 subtract[compile-time] 255[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6775 subtract[Word] 255[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6776 subtract[compile-time] 255[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6777 subtract[Word] 255[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:6778 subtract[compile-time] 255[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow on
code auto:6779 subtract[Word] 255[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6780 subtract[compile-time] 255[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow off
code auto:6781 subtract[Word] 255[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32513

code auto:6782 subtract[compile-time] 255[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32768;
endcode
varvalue r -32513

$overflow on
code auto:6783 subtract[Word] 255[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6784 subtract[compile-time] 255[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32768;
endcode
varvalue r -32513

$overflow off
code auto:6785 subtract[Word] 255[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:6786 subtract[compile-time] 255[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:6787 subtract[Word] 255[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6788 subtract[compile-time] 255[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:6789 subtract[Word] 32767[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:6790 subtract[compile-time] 32767[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:6791 subtract[Word] 32767[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:6792 subtract[compile-time] 32767[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:6793 subtract[Word] 32767[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:6794 subtract[compile-time] 32767[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:6795 subtract[Word] 32767[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:6796 subtract[compile-time] 32767[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:6797 subtract[Word] 32767[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6798 subtract[compile-time] 32767[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:6799 subtract[Word] 32767[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6800 subtract[compile-time] 32767[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:6801 subtract[Word] 32767[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:6802 subtract[compile-time] 32767[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow on
code auto:6803 subtract[Word] 32767[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6804 subtract[compile-time] 32767[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow off
code auto:6805 subtract[Word] 32767[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:6806 subtract[compile-time] 32767[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow on
code auto:6807 subtract[Word] 32767[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6808 subtract[compile-time] 32767[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow off
code auto:6809 subtract[Word] 32768[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:6810 subtract[compile-time] 32768[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:6811 subtract[Word] 32768[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6812 subtract[compile-time] 32768[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:6813 subtract[Word] 32768[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:6814 subtract[compile-time] 32768[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:6815 subtract[Word] 32768[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:6816 subtract[compile-time] 32768[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:6817 subtract[Word] 32768[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6818 subtract[compile-time] 32768[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:6819 subtract[Word] 32768[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:6820 subtract[compile-time] 32768[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:6821 subtract[Word] 32768[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6822 subtract[compile-time] 32768[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:6823 subtract[Word] 32768[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6824 subtract[compile-time] 32768[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:6825 subtract[Word] 32768[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:6826 subtract[compile-time] 32768[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 65535;
endcode
varvalue r -32767

$overflow on
code auto:6827 subtract[Word] 32768[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6828 subtract[compile-time] 32768[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 65535;
endcode
varvalue r -32767

$overflow off
code auto:6829 subtract[Word] 65535[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:6830 subtract[compile-time] 65535[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:6831 subtract[Word] 65535[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6832 subtract[compile-time] 65535[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:6833 subtract[Word] 65535[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:6834 subtract[compile-time] 65535[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:6835 subtract[Word] 65535[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6836 subtract[compile-time] 65535[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:6837 subtract[Word] 65535[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:6838 subtract[compile-time] 65535[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:6839 subtract[Word] 65535[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:6840 subtract[compile-time] 65535[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:6841 subtract[Word] 65535[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:6842 subtract[compile-time] 65535[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:6843 subtract[Word] 65535[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:6844 subtract[compile-time] 65535[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:6845 subtract[Word] 65535[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6846 subtract[compile-time] 65535[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:6847 subtract[Word] 65535[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:6848 subtract[compile-time] 65535[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:6849 subtract[Word] 0[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6850 subtract[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6851 subtract[Word] 0[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6852 subtract[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:6853 subtract[Word] 0[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6854 subtract[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6855 subtract[Word] 0[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6856 subtract[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:6857 subtract[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6858 subtract[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:6859 subtract[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6860 subtract[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:6861 subtract[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6862 subtract[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:6863 subtract[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6864 subtract[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:6865 subtract[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6866 subtract[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:6867 subtract[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6868 subtract[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:6869 subtract[Word] 255[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6870 subtract[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6871 subtract[Word] 255[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6872 subtract[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:6873 subtract[Word] 255[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6874 subtract[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6875 subtract[Word] 255[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6876 subtract[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:6877 subtract[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6878 subtract[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:6879 subtract[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6880 subtract[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:6881 subtract[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6882 subtract[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:6883 subtract[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6884 subtract[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:6885 subtract[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6886 subtract[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:6887 subtract[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6888 subtract[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:6889 subtract[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6890 subtract[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:6891 subtract[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6892 subtract[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:6893 subtract[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6894 subtract[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 255;
endcode
compile error

$overflow on
code auto:6895 subtract[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6896 subtract[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 255;
endcode
compile error

$overflow off
code auto:6897 subtract[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6898 subtract[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:6899 subtract[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6900 subtract[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:6901 subtract[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6902 subtract[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:6903 subtract[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6904 subtract[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:6905 subtract[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6906 subtract[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:6907 subtract[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6908 subtract[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:6909 subtract[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6910 subtract[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:6911 subtract[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6912 subtract[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:6913 subtract[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6914 subtract[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 255;
endcode
compile error

$overflow on
code auto:6915 subtract[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6916 subtract[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 255;
endcode
compile error

$overflow off
code auto:6917 subtract[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6918 subtract[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:6919 subtract[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6920 subtract[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:6921 subtract[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6922 subtract[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:6923 subtract[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6924 subtract[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:6925 subtract[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:6926 subtract[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:6927 subtract[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6928 subtract[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:6929 subtract[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6930 subtract[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:6931 subtract[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6932 subtract[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:6933 subtract[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6934 subtract[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:6935 subtract[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6936 subtract[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:6937 subtract[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6938 subtract[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:6939 subtract[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6940 subtract[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:6941 subtract[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:6942 subtract[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 32768;
endcode
compile error

$overflow on
code auto:6943 subtract[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:6944 subtract[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 32768;
endcode
compile error

$overflow off
code auto:6945 subtract[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6946 subtract[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:6947 subtract[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:6948 subtract[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:6949 subtract[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6950 subtract[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:6951 subtract[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6952 subtract[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:6953 subtract[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6954 subtract[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:6955 subtract[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6956 subtract[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:6957 subtract[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6958 subtract[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:6959 subtract[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:6960 subtract[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:6961 subtract[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6962 subtract[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:6963 subtract[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6964 subtract[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:6965 subtract[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6966 subtract[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:6967 subtract[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6968 subtract[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:6969 subtract[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:6970 subtract[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:6971 subtract[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:6972 subtract[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:6973 subtract[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6974 subtract[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:6975 subtract[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6976 subtract[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:6977 subtract[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6978 subtract[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:6979 subtract[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:6980 subtract[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:6981 subtract[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:6982 subtract[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:6983 subtract[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:6984 subtract[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:6985 subtract[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6986 subtract[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:6987 subtract[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:6988 subtract[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:6989 subtract[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:6990 subtract[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:6991 subtract[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:6992 subtract[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:6993 subtract[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:6994 subtract[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:6995 subtract[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:6996 subtract[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:6997 subtract[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:6998 subtract[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:6999 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7000 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:7001 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7002 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:7003 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7004 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:7005 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7006 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:7007 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7008 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:7009 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7010 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:7011 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7012 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:7013 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7014 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:7015 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7016 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:7017 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7018 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:7019 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7020 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow on
code auto:7021 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7022 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 0;
endcode
compile error

$overflow off
code auto:7023 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7024 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:7025 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7026 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:7027 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7028 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:7029 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7030 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:7031 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7032 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:7033 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7034 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:7035 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7036 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:7037 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7038 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:7039 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7040 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:7041 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7042 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:7043 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7044 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 255;
endcode
compile error

$overflow on
code auto:7045 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7046 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 255;
endcode
compile error

$overflow off
code auto:7047 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7048 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:7049 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7050 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:7051 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7052 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow on
code auto:7053 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7054 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow off
code auto:7055 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7056 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:7057 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7058 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:7059 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7060 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:7061 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7062 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:7063 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7064 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 255;
endcode
compile error

$overflow on
code auto:7065 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7066 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 255;
endcode
compile error

$overflow off
code auto:7067 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7068 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:7069 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7070 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:7071 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7072 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:7073 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7074 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:7075 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 1

code auto:7076 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:7077 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7078 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:7079 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7080 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:7081 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7082 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:7083 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7084 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:7085 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7086 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:7087 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7088 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:7089 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7090 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:7091 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
varvalue r -1

code auto:7092 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 32768;
endcode
compile error

$overflow on
code auto:7093 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a - b;
endcode
runtime overflow

code auto:7094 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 32768;
endcode
compile error

$overflow off
code auto:7095 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7096 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:7097 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a - b;
endcode
varvalue r 0

code auto:7098 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:7099 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7100 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:7101 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7102 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:7103 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -255

code auto:7104 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow on
code auto:7105 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7106 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 255;
endcode
varvalue r -255

$overflow off
code auto:7107 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:7108 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow on
code auto:7109 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7110 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32767;
endcode
varvalue r -32767

$overflow off
code auto:7111 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:7112 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow on
code auto:7113 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7114 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 32768;
endcode
varvalue r -32768

$overflow off
code auto:7115 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:7116 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:7117 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7118 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:7119 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:7120 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:7121 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 255

code auto:7122 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:7123 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7124 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:7125 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7126 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:7127 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32512

code auto:7128 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow on
code auto:7129 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7130 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32767;
endcode
varvalue r -32512

$overflow off
code auto:7131 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32513

code auto:7132 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 32768;
endcode
varvalue r -32513

$overflow on
code auto:7133 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7134 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 32768;
endcode
varvalue r -32513

$overflow off
code auto:7135 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 256

code auto:7136 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:7137 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7138 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:7139 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:7140 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:7141 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:7142 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:7143 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:7144 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:7145 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32512

code auto:7146 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:7147 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7148 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:7149 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7150 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:7151 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:7152 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow on
code auto:7153 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7154 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 32768;
endcode
varvalue r -1

$overflow off
code auto:7155 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:7156 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow on
code auto:7157 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7158 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 - 65535;
endcode
varvalue r -32768

$overflow off
code auto:7159 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:7160 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:7161 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7162 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:7163 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:7164 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:7165 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32513

code auto:7166 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:7167 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:7168 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:7169 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 1

code auto:7170 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:7171 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7172 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:7173 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7174 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:7175 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32767

code auto:7176 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 - 65535;
endcode
varvalue r -32767

$overflow on
code auto:7177 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7178 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 - 65535;
endcode
varvalue r -32767

$overflow off
code auto:7179 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -1

code auto:7180 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:7181 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7182 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:7183 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -256

code auto:7184 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:7185 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7186 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:7187 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
varvalue r -32768

code auto:7188 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:7189 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a - b;
endcode
runtime overflow

code auto:7190 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:7191 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:7192 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:7193 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 32767

code auto:7194 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:7195 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7196 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:7197 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a - b;
endcode
varvalue r 0

code auto:7198 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:7199 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7200 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:7201 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7202 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:7203 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7204 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:7205 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7206 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:7207 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7208 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:7209 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7210 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:7211 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7212 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:7213 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7214 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:7215 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7216 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:7217 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7218 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:7219 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7220 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:7221 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7222 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:7223 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7224 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:7225 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7226 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:7227 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7228 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:7229 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7230 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:7231 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7232 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:7233 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7234 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:7235 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7236 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:7237 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7238 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:7239 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7240 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow on
code auto:7241 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7242 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 0;
endcode
compile error

$overflow off
code auto:7243 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7244 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 255;
endcode
compile error

$overflow on
code auto:7245 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7246 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 255;
endcode
compile error

$overflow off
code auto:7247 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7248 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:7249 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7250 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:7251 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7252 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:7253 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7254 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:7255 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7256 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:7257 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7258 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:7259 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7260 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 0;
endcode
compile error

$overflow on
code auto:7261 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7262 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 0;
endcode
compile error

$overflow off
code auto:7263 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7264 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 255;
endcode
compile error

$overflow on
code auto:7265 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7266 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 255;
endcode
compile error

$overflow off
code auto:7267 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7268 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:7269 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7270 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:7271 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7272 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:7273 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7274 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:7275 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 1

code auto:7276 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:7277 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7278 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:7279 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7280 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 0;
endcode
compile error

$overflow on
code auto:7281 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7282 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 0;
endcode
compile error

$overflow off
code auto:7283 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7284 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 255;
endcode
compile error

$overflow on
code auto:7285 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7286 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 255;
endcode
compile error

$overflow off
code auto:7287 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7288 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 32767;
endcode
compile error

$overflow on
code auto:7289 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7290 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 32767;
endcode
compile error

$overflow off
code auto:7291 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 255

code auto:7292 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 32768;
endcode
compile error

$overflow on
code auto:7293 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a - b;
endcode
runtime overflow

code auto:7294 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 32768;
endcode
compile error

$overflow off
code auto:7295 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7296 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:7297 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a - b;
endcode
varvalue r 0

code auto:7298 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow off
code auto:7299 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7300 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow on
code auto:7301 subtract[Pointer] 0[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7302 subtract[compile-time] 0[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 0;
endcode
varvalue r 0

$overflow off
code auto:7303 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65281

code auto:7304 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow on
code auto:7305 subtract[Pointer] 0[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7306 subtract[compile-time] 0[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 255;
endcode
compile error

$overflow off
code auto:7307 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:7308 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow on
code auto:7309 subtract[Pointer] 0[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7310 subtract[compile-time] 0[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32767;
endcode
compile error

$overflow off
code auto:7311 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7312 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow on
code auto:7313 subtract[Pointer] 0[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7314 subtract[compile-time] 0[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 32768;
endcode
compile error

$overflow off
code auto:7315 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:7316 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow on
code auto:7317 subtract[Pointer] 0[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7318 subtract[compile-time] 0[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 - 65535;
endcode
compile error

$overflow off
code auto:7319 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:7320 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow on
code auto:7321 subtract[Pointer] 255[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 255

code auto:7322 subtract[compile-time] 255[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 0;
endcode
varvalue r 255

$overflow off
code auto:7323 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7324 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow on
code auto:7325 subtract[Pointer] 255[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7326 subtract[compile-time] 255[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 255;
endcode
varvalue r 0

$overflow off
code auto:7327 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33024

code auto:7328 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow on
code auto:7329 subtract[Pointer] 255[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7330 subtract[compile-time] 255[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32767;
endcode
compile error

$overflow off
code auto:7331 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 33023

code auto:7332 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow on
code auto:7333 subtract[Pointer] 255[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7334 subtract[compile-time] 255[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 32768;
endcode
compile error

$overflow off
code auto:7335 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 256

code auto:7336 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow on
code auto:7337 subtract[Pointer] 255[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7338 subtract[compile-time] 255[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 - 65535;
endcode
compile error

$overflow off
code auto:7339 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:7340 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow on
code auto:7341 subtract[Pointer] 32767[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:7342 subtract[compile-time] 32767[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 0;
endcode
varvalue r 32767

$overflow off
code auto:7343 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:7344 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow on
code auto:7345 subtract[Pointer] 32767[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32512

code auto:7346 subtract[compile-time] 32767[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 255;
endcode
varvalue r 32512

$overflow off
code auto:7347 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7348 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow on
code auto:7349 subtract[Pointer] 32767[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7350 subtract[compile-time] 32767[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32767;
endcode
varvalue r 0

$overflow off
code auto:7351 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:7352 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 32768;
endcode
compile error

$overflow on
code auto:7353 subtract[Pointer] 32767[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7354 subtract[compile-time] 32767[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 32768;
endcode
compile error

$overflow off
code auto:7355 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7356 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 - 65535;
endcode
compile error

$overflow on
code auto:7357 subtract[Pointer] 32767[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7358 subtract[compile-time] 32767[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 - 65535;
endcode
compile error

$overflow off
code auto:7359 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7360 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow on
code auto:7361 subtract[Pointer] 32768[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7362 subtract[compile-time] 32768[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 0;
endcode
varvalue r 32768

$overflow off
code auto:7363 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:7364 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow on
code auto:7365 subtract[Pointer] 32768[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32513

code auto:7366 subtract[compile-time] 32768[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 255;
endcode
varvalue r 32513

$overflow off
code auto:7367 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:7368 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow on
code auto:7369 subtract[Pointer] 32768[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 1

code auto:7370 subtract[compile-time] 32768[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32767;
endcode
varvalue r 1

$overflow off
code auto:7371 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7372 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow on
code auto:7373 subtract[Pointer] 32768[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7374 subtract[compile-time] 32768[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 32768;
endcode
varvalue r 0

$overflow off
code auto:7375 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32769

code auto:7376 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 - 65535;
endcode
compile error

$overflow on
code auto:7377 subtract[Pointer] 32768[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
runtime overflow

code auto:7378 subtract[compile-time] 32768[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 - 65535;
endcode
compile error

$overflow off
code auto:7379 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:7380 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow on
code auto:7381 subtract[Pointer] 65535[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65535

code auto:7382 subtract[compile-time] 65535[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 0;
endcode
varvalue r 65535

$overflow off
code auto:7383 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:7384 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow on
code auto:7385 subtract[Pointer] 65535[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Word;
  r := a - b;
endcode
varvalue r 65280

code auto:7386 subtract[compile-time] 65535[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 255;
endcode
varvalue r 65280

$overflow off
code auto:7387 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7388 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow on
code auto:7389 subtract[Pointer] 65535[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32768

code auto:7390 subtract[compile-time] 65535[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32767;
endcode
varvalue r 32768

$overflow off
code auto:7391 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:7392 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow on
code auto:7393 subtract[Pointer] 65535[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a - b;
endcode
varvalue r 32767

code auto:7394 subtract[compile-time] 65535[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 32768;
endcode
varvalue r 32767

$overflow off
code auto:7395 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7396 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 - 65535;
endcode
varvalue r 0

$overflow on
code auto:7397 subtract[Pointer] 65535[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a - b;
endcode
varvalue r 0

code auto:7398 subtract[compile-time] 65535[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 - 65535;
endcode
varvalue r 0

