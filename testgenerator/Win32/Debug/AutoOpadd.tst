;PROCEDURALLY GENERATED FILE

;Any modifications will be overwritten!
;Generated by the QuicheTestGen utility

$overflow off
code auto:2 add[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:3 add[Int8] -128[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r 0

code auto:4 add[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r 0

code auto:5 add[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:6 add[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7 add[Int8] -128[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:8 add[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:9 add[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:10 add[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:11 add[Int8] -128[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r 1

code auto:12 add[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r 1

code auto:13 add[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -127;
endcode
compile error

$overflow on
code auto:14 add[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:15 add[Int8] -128[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:16 add[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -127;
endcode
runtime overflow

code auto:17 add[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -127;
endcode
compile error

$overflow off
code auto:18 add[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:19 add[Int8] -128[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r 127

code auto:20 add[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 127

code auto:21 add[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:22 add[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:23 add[Int8] -128[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:24 add[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -1;
endcode
runtime overflow

code auto:25 add[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:26 add[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:27 add[Int8] -128[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -128

code auto:28 add[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -128

code auto:29 add[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:30 add[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:31 add[Int8] -128[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -128

code auto:32 add[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -128

code auto:33 add[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:34 add[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:35 add[Int8] -128[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -127

code auto:36 add[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -127

code auto:37 add[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:38 add[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:39 add[Int8] -128[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -127

code auto:40 add[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -127

code auto:41 add[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:42 add[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:43 add[Int8] -128[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -1

code auto:44 add[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -1

code auto:45 add[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:46 add[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:47 add[Int8] -128[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -1

code auto:48 add[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -1

code auto:49 add[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:50 add[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:51 add[Int8] -127[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r 1

code auto:52 add[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r 1

code auto:53 add[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + -128;
endcode
compile error

$overflow on
code auto:54 add[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:55 add[Int8] -127[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -127 + b;
endcode
runtime overflow

code auto:56 add[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:57 add[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -128;
endcode
compile error

$overflow off
code auto:58 add[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:59 add[Int8] -127[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r 2

code auto:60 add[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r 2

code auto:61 add[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + -127;
endcode
compile error

$overflow on
code auto:62 add[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:63 add[Int8] -127[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -127 + b;
endcode
runtime overflow

code auto:64 add[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -127;
endcode
runtime overflow

code auto:65 add[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -127;
endcode
compile error

$overflow off
code auto:66 add[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:67 add[Int8] -127[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -128

code auto:68 add[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -128

code auto:69 add[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + -1;
endcode
varvalue r -128

$overflow on
code auto:70 add[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:71 add[Int8] -127[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -128

code auto:72 add[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -128

code auto:73 add[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -1;
endcode
varvalue r -128

$overflow off
code auto:74 add[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:75 add[Int8] -127[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -127

code auto:76 add[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -127

code auto:77 add[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:78 add[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:79 add[Int8] -127[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -127

code auto:80 add[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -127

code auto:81 add[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 0;
endcode
varvalue r -127

$overflow off
code auto:82 add[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:83 add[Int8] -127[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -126

code auto:84 add[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -126

code auto:85 add[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + 1;
endcode
varvalue r -126

$overflow on
code auto:86 add[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:87 add[Int8] -127[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -126

code auto:88 add[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -126

code auto:89 add[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 1;
endcode
varvalue r -126

$overflow off
code auto:90 add[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:91 add[Int8] -127[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r 0

code auto:92 add[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 0

code auto:93 add[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:94 add[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:95 add[Int8] -127[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r 0

code auto:96 add[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 0

code auto:97 add[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:98 add[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:99 add[Int8] -1[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 127

code auto:100 add[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r 127

code auto:101 add[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:102 add[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:103 add[Int8] -1[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -1 + b;
endcode
runtime overflow

code auto:104 add[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:105 add[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:106 add[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:107 add[Int8] -1[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -128

code auto:108 add[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -128

code auto:109 add[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -127;
endcode
varvalue r -128

$overflow on
code auto:110 add[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:111 add[Int8] -1[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -128

code auto:112 add[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -128

code auto:113 add[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -127;
endcode
varvalue r -128

$overflow off
code auto:114 add[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:115 add[Int8] -1[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -2

code auto:116 add[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -2

code auto:117 add[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:118 add[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:119 add[Int8] -1[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -2

code auto:120 add[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -2

code auto:121 add[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:122 add[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:123 add[Int8] -1[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -1

code auto:124 add[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -1

code auto:125 add[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:126 add[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:127 add[Int8] -1[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -1

code auto:128 add[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -1

code auto:129 add[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:130 add[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:131 add[Int8] -1[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 0

code auto:132 add[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 0

code auto:133 add[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:134 add[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:135 add[Int8] -1[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 0

code auto:136 add[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 0

code auto:137 add[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:138 add[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:139 add[Int8] -1[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 126

code auto:140 add[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 126

code auto:141 add[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:142 add[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:143 add[Int8] -1[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 126

code auto:144 add[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 126

code auto:145 add[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:146 add[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:147 add[Int8] 0[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -128

code auto:148 add[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -128

code auto:149 add[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:150 add[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:151 add[Int8] 0[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -128

code auto:152 add[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -128

code auto:153 add[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:154 add[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:155 add[Int8] 0[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -127

code auto:156 add[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -127

code auto:157 add[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:158 add[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:159 add[Int8] 0[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -127

code auto:160 add[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -127

code auto:161 add[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -127;
endcode
varvalue r -127

$overflow off
code auto:162 add[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:163 add[Int8] 0[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -1

code auto:164 add[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -1

code auto:165 add[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:166 add[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:167 add[Int8] 0[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -1

code auto:168 add[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -1

code auto:169 add[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:170 add[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:171 add[Int8] 0[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 0

code auto:172 add[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 0

code auto:173 add[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:174 add[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:175 add[Int8] 0[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 0

code auto:176 add[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 0

code auto:177 add[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:178 add[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:179 add[Int8] 0[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 1

code auto:180 add[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 1

code auto:181 add[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:182 add[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:183 add[Int8] 0[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 1

code auto:184 add[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 1

code auto:185 add[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:186 add[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:187 add[Int8] 0[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 127

code auto:188 add[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 127

code auto:189 add[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:190 add[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:191 add[Int8] 0[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 127

code auto:192 add[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 127

code auto:193 add[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:194 add[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:195 add[Int8] 1[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -127

code auto:196 add[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -127

code auto:197 add[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:198 add[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:199 add[Int8] 1[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -127

code auto:200 add[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -127

code auto:201 add[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:202 add[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:203 add[Int8] 1[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -126

code auto:204 add[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -126

code auto:205 add[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -127;
endcode
varvalue r -126

$overflow on
code auto:206 add[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:207 add[Int8] 1[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -126

code auto:208 add[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -126

code auto:209 add[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -127;
endcode
varvalue r -126

$overflow off
code auto:210 add[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:211 add[Int8] 1[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 0

code auto:212 add[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 0

code auto:213 add[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:214 add[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:215 add[Int8] 1[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 0

code auto:216 add[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 0

code auto:217 add[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:218 add[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:219 add[Int8] 1[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 1

code auto:220 add[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 1

code auto:221 add[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:222 add[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:223 add[Int8] 1[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 1

code auto:224 add[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 1

code auto:225 add[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:226 add[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:227 add[Int8] 1[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 2

code auto:228 add[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 2

code auto:229 add[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:230 add[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:231 add[Int8] 1[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 2

code auto:232 add[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 2

code auto:233 add[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:234 add[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:235 add[Int8] 1[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -128

code auto:236 add[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -128

code auto:237 add[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow on
code auto:238 add[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:239 add[Int8] 1[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 1 + b;
endcode
runtime overflow

code auto:240 add[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:241 add[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow off
code auto:242 add[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:243 add[Int8] 127[Int8], -128[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -1

code auto:244 add[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -1

code auto:245 add[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:246 add[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:247 add[Int8] 127[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -1

code auto:248 add[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -1

code auto:249 add[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:250 add[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:251 add[Int8] 127[Int8], -127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 0

code auto:252 add[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r 0

code auto:253 add[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:254 add[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:255 add[Int8] 127[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 0

code auto:256 add[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r 0

code auto:257 add[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:258 add[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:259 add[Int8] 127[Int8], -1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 126

code auto:260 add[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 126

code auto:261 add[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:262 add[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:263 add[Int8] 127[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 126

code auto:264 add[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 126

code auto:265 add[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:266 add[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:267 add[Int8] 127[Int8], 0[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 127

code auto:268 add[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 127

code auto:269 add[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:270 add[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:271 add[Int8] 127[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 127

code auto:272 add[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 127

code auto:273 add[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:274 add[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:275 add[Int8] 127[Int8], 1[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -128

code auto:276 add[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -128

code auto:277 add[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow on
code auto:278 add[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:279 add[Int8] 127[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:280 add[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 1;
endcode
runtime overflow

code auto:281 add[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow off
code auto:282 add[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:283 add[Int8] 127[Int8], 127[Int8] -> [Int8] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -2

code auto:284 add[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -2

code auto:285 add[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow on
code auto:286 add[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:287 add[Int8] 127[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:288 add[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:289 add[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow off
code auto:290 add[Integer] -128[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:291 add[compile-time] -128[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:292 add[Integer] -128[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:293 add[compile-time] -128[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32768;
endcode
compile error

$overflow off
code auto:294 add[Integer] -128[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:295 add[compile-time] -128[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:296 add[Integer] -128[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:297 add[compile-time] -128[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32767;
endcode
compile error

$overflow off
code auto:298 add[Integer] -128[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:299 add[compile-time] -128[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -129;
endcode
varvalue r -257

$overflow on
code auto:300 add[Integer] -128[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:301 add[compile-time] -128[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -129;
endcode
varvalue r -257

$overflow off
code auto:302 add[Integer] -128[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:303 add[compile-time] -128[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow on
code auto:304 add[Integer] -128[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:305 add[compile-time] -128[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow off
code auto:306 add[Integer] -128[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:307 add[compile-time] -128[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow on
code auto:308 add[Integer] -128[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:309 add[compile-time] -128[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow off
code auto:310 add[Integer] -128[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:311 add[compile-time] -128[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:312 add[Integer] -128[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:313 add[compile-time] -128[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:314 add[Integer] -128[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:315 add[compile-time] -128[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:316 add[Integer] -128[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:317 add[compile-time] -128[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:318 add[Integer] -128[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:319 add[compile-time] -128[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:320 add[Integer] -128[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:321 add[compile-time] -128[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:322 add[Integer] -128[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:323 add[compile-time] -128[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:324 add[Integer] -128[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:325 add[compile-time] -128[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:326 add[Integer] -128[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:327 add[compile-time] -128[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:328 add[Integer] -128[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:329 add[compile-time] -128[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:330 add[Integer] -127[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:331 add[compile-time] -127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -32768;
endcode
compile error

$overflow on
code auto:332 add[Integer] -127[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:333 add[compile-time] -127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -32768;
endcode
compile error

$overflow off
code auto:334 add[Integer] -127[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32642

code auto:335 add[compile-time] -127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -32767;
endcode
compile error

$overflow on
code auto:336 add[Integer] -127[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:337 add[compile-time] -127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -32767;
endcode
compile error

$overflow off
code auto:338 add[Integer] -127[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:339 add[compile-time] -127[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -129;
endcode
varvalue r -256

$overflow on
code auto:340 add[Integer] -127[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:341 add[compile-time] -127[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -129;
endcode
varvalue r -256

$overflow off
code auto:342 add[Integer] -127[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -255

code auto:343 add[compile-time] -127[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -128;
endcode
varvalue r -255

$overflow on
code auto:344 add[Integer] -127[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -255

code auto:345 add[compile-time] -127[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -128;
endcode
varvalue r -255

$overflow off
code auto:346 add[Integer] -127[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:347 add[compile-time] -127[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -1;
endcode
varvalue r -128

$overflow on
code auto:348 add[Integer] -127[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:349 add[compile-time] -127[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -1;
endcode
varvalue r -128

$overflow off
code auto:350 add[Integer] -127[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:351 add[compile-time] -127[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:352 add[Integer] -127[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:353 add[compile-time] -127[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow off
code auto:354 add[Integer] -127[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:355 add[compile-time] -127[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow on
code auto:356 add[Integer] -127[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:357 add[compile-time] -127[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow off
code auto:358 add[Integer] -127[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:359 add[compile-time] -127[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:360 add[Integer] -127[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:361 add[compile-time] -127[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:362 add[Integer] -127[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:363 add[compile-time] -127[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 128;
endcode
varvalue r 1

$overflow on
code auto:364 add[Integer] -127[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:365 add[compile-time] -127[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 128;
endcode
varvalue r 1

$overflow off
code auto:366 add[Integer] -127[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:367 add[compile-time] -127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow on
code auto:368 add[Integer] -127[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:369 add[compile-time] -127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow off
code auto:370 add[Integer] -1[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:371 add[compile-time] -1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:372 add[Integer] -1[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:373 add[compile-time] -1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32768;
endcode
compile error

$overflow off
code auto:374 add[Integer] -1[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:375 add[compile-time] -1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -32767;
endcode
varvalue r -32768

$overflow on
code auto:376 add[Integer] -1[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:377 add[compile-time] -1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32767;
endcode
varvalue r -32768

$overflow off
code auto:378 add[Integer] -1[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:379 add[compile-time] -1[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -129;
endcode
varvalue r -130

$overflow on
code auto:380 add[Integer] -1[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:381 add[compile-time] -1[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -129;
endcode
varvalue r -130

$overflow off
code auto:382 add[Integer] -1[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:383 add[compile-time] -1[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow on
code auto:384 add[Integer] -1[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:385 add[compile-time] -1[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow off
code auto:386 add[Integer] -1[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:387 add[compile-time] -1[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:388 add[Integer] -1[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:389 add[compile-time] -1[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:390 add[Integer] -1[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:391 add[compile-time] -1[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:392 add[Integer] -1[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:393 add[compile-time] -1[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:394 add[Integer] -1[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:395 add[compile-time] -1[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:396 add[Integer] -1[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:397 add[compile-time] -1[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:398 add[Integer] -1[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:399 add[compile-time] -1[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:400 add[Integer] -1[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:401 add[compile-time] -1[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:402 add[Integer] -1[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:403 add[compile-time] -1[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:404 add[Integer] -1[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:405 add[compile-time] -1[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:406 add[Integer] -1[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:407 add[compile-time] -1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:408 add[Integer] -1[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:409 add[compile-time] -1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:410 add[Integer] 0[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:411 add[compile-time] 0[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow on
code auto:412 add[Integer] 0[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:413 add[compile-time] 0[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow off
code auto:414 add[Integer] 0[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:415 add[compile-time] 0[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow on
code auto:416 add[Integer] 0[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:417 add[compile-time] 0[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow off
code auto:418 add[Integer] 0[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:419 add[compile-time] 0[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow on
code auto:420 add[Integer] 0[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:421 add[compile-time] 0[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow off
code auto:422 add[Integer] 0[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:423 add[compile-time] 0[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:424 add[Integer] 0[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:425 add[compile-time] 0[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:426 add[Integer] 0[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:427 add[compile-time] 0[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:428 add[Integer] 0[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:429 add[compile-time] 0[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:430 add[Integer] 0[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:431 add[compile-time] 0[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:432 add[Integer] 0[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:433 add[compile-time] 0[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:434 add[Integer] 0[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:435 add[compile-time] 0[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:436 add[Integer] 0[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:437 add[compile-time] 0[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:438 add[Integer] 0[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:439 add[compile-time] 0[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:440 add[Integer] 0[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:441 add[compile-time] 0[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:442 add[Integer] 0[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:443 add[compile-time] 0[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:444 add[Integer] 0[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:445 add[compile-time] 0[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:446 add[Integer] 0[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:447 add[compile-time] 0[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:448 add[Integer] 0[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:449 add[compile-time] 0[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:450 add[Integer] 1[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:451 add[compile-time] 1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow on
code auto:452 add[Integer] 1[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:453 add[compile-time] 1[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow off
code auto:454 add[Integer] 1[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:455 add[compile-time] 1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow on
code auto:456 add[Integer] 1[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:457 add[compile-time] 1[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow off
code auto:458 add[Integer] 1[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:459 add[compile-time] 1[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow on
code auto:460 add[Integer] 1[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:461 add[compile-time] 1[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow off
code auto:462 add[Integer] 1[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:463 add[compile-time] 1[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:464 add[Integer] 1[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:465 add[compile-time] 1[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:466 add[Integer] 1[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:467 add[compile-time] 1[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:468 add[Integer] 1[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:469 add[compile-time] 1[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:470 add[Integer] 1[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:471 add[compile-time] 1[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:472 add[Integer] 1[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:473 add[compile-time] 1[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:474 add[Integer] 1[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:475 add[compile-time] 1[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:476 add[Integer] 1[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:477 add[compile-time] 1[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:478 add[Integer] 1[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:479 add[compile-time] 1[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:480 add[Integer] 1[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:481 add[compile-time] 1[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:482 add[Integer] 1[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:483 add[compile-time] 1[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:484 add[Integer] 1[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:485 add[compile-time] 1[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:486 add[Integer] 1[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:487 add[compile-time] 1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:488 add[Integer] 1[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:489 add[compile-time] 1[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:490 add[Integer] 127[Int8], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:491 add[compile-time] 127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow on
code auto:492 add[Integer] 127[Int8], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:493 add[compile-time] 127[Int8], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow off
code auto:494 add[Integer] 127[Int8], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:495 add[compile-time] 127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow on
code auto:496 add[Integer] 127[Int8], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:497 add[compile-time] 127[Int8], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow off
code auto:498 add[Integer] 127[Int8], -129[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:499 add[compile-time] 127[Int8], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow on
code auto:500 add[Integer] 127[Int8], -129[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:501 add[compile-time] 127[Int8], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow off
code auto:502 add[Integer] 127[Int8], -128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:503 add[compile-time] 127[Int8], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:504 add[Integer] 127[Int8], -128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:505 add[compile-time] 127[Int8], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:506 add[Integer] 127[Int8], -1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:507 add[compile-time] 127[Int8], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:508 add[Integer] 127[Int8], -1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:509 add[compile-time] 127[Int8], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:510 add[Integer] 127[Int8], 0[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:511 add[compile-time] 127[Int8], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:512 add[Integer] 127[Int8], 0[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:513 add[compile-time] 127[Int8], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:514 add[Integer] 127[Int8], 1[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:515 add[compile-time] 127[Int8], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:516 add[Integer] 127[Int8], 1[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:517 add[compile-time] 127[Int8], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:518 add[Integer] 127[Int8], 127[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:519 add[compile-time] 127[Int8], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:520 add[Integer] 127[Int8], 127[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:521 add[compile-time] 127[Int8], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:522 add[Integer] 127[Int8], 128[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:523 add[compile-time] 127[Int8], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:524 add[Integer] 127[Int8], 128[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:525 add[compile-time] 127[Int8], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:526 add[Integer] 127[Int8], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:527 add[compile-time] 127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:528 add[Integer] 127[Int8], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:529 add[compile-time] 127[Int8], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:530 add[Integer] -128[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:531 add[compile-time] -128[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:532 add[Integer] -128[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:533 add[compile-time] -128[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:534 add[Integer] -128[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:535 add[compile-time] -128[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:536 add[Integer] -128[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:537 add[compile-time] -128[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:538 add[Integer] -128[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:539 add[compile-time] -128[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:540 add[Integer] -128[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:541 add[compile-time] -128[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:542 add[Integer] -128[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:543 add[compile-time] -128[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:544 add[Integer] -128[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:545 add[compile-time] -128[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:546 add[Integer] -128[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:547 add[compile-time] -128[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:548 add[Integer] -128[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:549 add[compile-time] -128[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:550 add[Integer] -127[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:551 add[compile-time] -127[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:552 add[Integer] -127[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:553 add[compile-time] -127[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow off
code auto:554 add[Integer] -127[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:555 add[compile-time] -127[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow on
code auto:556 add[Integer] -127[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:557 add[compile-time] -127[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow off
code auto:558 add[Integer] -127[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:559 add[compile-time] -127[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:560 add[Integer] -127[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:561 add[compile-time] -127[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:562 add[Integer] -127[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:563 add[compile-time] -127[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 128;
endcode
varvalue r 1

$overflow on
code auto:564 add[Integer] -127[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:565 add[compile-time] -127[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 128;
endcode
varvalue r 1

$overflow off
code auto:566 add[Integer] -127[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:567 add[compile-time] -127[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow on
code auto:568 add[Integer] -127[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:569 add[compile-time] -127[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow off
code auto:570 add[Integer] -1[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:571 add[compile-time] -1[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:572 add[Integer] -1[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:573 add[compile-time] -1[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:574 add[Integer] -1[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:575 add[compile-time] -1[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:576 add[Integer] -1[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:577 add[compile-time] -1[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:578 add[Integer] -1[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:579 add[compile-time] -1[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:580 add[Integer] -1[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:581 add[compile-time] -1[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:582 add[Integer] -1[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:583 add[compile-time] -1[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:584 add[Integer] -1[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:585 add[compile-time] -1[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:586 add[Integer] -1[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:587 add[compile-time] -1[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:588 add[Integer] -1[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:589 add[compile-time] -1[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:590 add[Integer] 0[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:591 add[compile-time] 0[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:592 add[Integer] 0[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:593 add[compile-time] 0[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:594 add[Integer] 0[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:595 add[compile-time] 0[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:596 add[Integer] 0[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:597 add[compile-time] 0[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:598 add[Integer] 0[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:599 add[compile-time] 0[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:600 add[Integer] 0[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:601 add[compile-time] 0[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:602 add[Integer] 0[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:603 add[compile-time] 0[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:604 add[Integer] 0[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:605 add[compile-time] 0[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:606 add[Integer] 0[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:607 add[compile-time] 0[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:608 add[Integer] 0[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:609 add[compile-time] 0[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:610 add[Integer] 1[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:611 add[compile-time] 1[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:612 add[Integer] 1[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:613 add[compile-time] 1[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:614 add[Integer] 1[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:615 add[compile-time] 1[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:616 add[Integer] 1[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:617 add[compile-time] 1[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:618 add[Integer] 1[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:619 add[compile-time] 1[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:620 add[Integer] 1[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:621 add[compile-time] 1[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:622 add[Integer] 1[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:623 add[compile-time] 1[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:624 add[Integer] 1[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:625 add[compile-time] 1[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:626 add[Integer] 1[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:627 add[compile-time] 1[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:628 add[Integer] 1[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:629 add[compile-time] 1[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:630 add[Integer] 127[Int8], 0[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:631 add[compile-time] 127[Int8], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:632 add[Integer] 127[Int8], 0[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:633 add[compile-time] 127[Int8], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:634 add[Integer] 127[Int8], 1[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:635 add[compile-time] 127[Int8], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:636 add[Integer] 127[Int8], 1[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:637 add[compile-time] 127[Int8], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:638 add[Integer] 127[Int8], 127[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:639 add[compile-time] 127[Int8], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:640 add[Integer] 127[Int8], 127[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:641 add[compile-time] 127[Int8], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:642 add[Integer] 127[Int8], 128[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:643 add[compile-time] 127[Int8], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:644 add[Integer] 127[Int8], 128[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:645 add[compile-time] 127[Int8], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:646 add[Integer] 127[Int8], 255[Byte] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:647 add[compile-time] 127[Int8], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:648 add[Integer] 127[Int8], 255[Byte] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:649 add[compile-time] 127[Int8], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:650 add[Integer] -128[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:651 add[compile-time] -128[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:652 add[Integer] -128[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:653 add[compile-time] -128[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:654 add[Integer] -128[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:655 add[compile-time] -128[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:656 add[Integer] -128[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:657 add[compile-time] -128[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:658 add[Integer] -128[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:659 add[compile-time] -128[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:660 add[Integer] -128[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:661 add[compile-time] -128[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:662 add[Integer] -128[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:663 add[compile-time] -128[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow on
code auto:664 add[Integer] -128[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:665 add[compile-time] -128[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow off
code auto:666 add[Integer] -128[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:667 add[compile-time] -128[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 65535;
endcode
compile error

$overflow on
code auto:668 add[Integer] -128[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:669 add[compile-time] -128[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 65535;
endcode
compile error

$overflow off
code auto:670 add[Integer] -127[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:671 add[compile-time] -127[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:672 add[Integer] -127[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:673 add[compile-time] -127[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow off
code auto:674 add[Integer] -127[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:675 add[compile-time] -127[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow on
code auto:676 add[Integer] -127[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:677 add[compile-time] -127[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow off
code auto:678 add[Integer] -127[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:679 add[compile-time] -127[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow on
code auto:680 add[Integer] -127[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:681 add[compile-time] -127[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow off
code auto:682 add[Integer] -127[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:683 add[compile-time] -127[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 32768;
endcode
varvalue r 32641

$overflow on
code auto:684 add[Integer] -127[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:685 add[compile-time] -127[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 32768;
endcode
varvalue r 32641

$overflow off
code auto:686 add[Integer] -127[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:687 add[compile-time] -127[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 65535;
endcode
compile error

$overflow on
code auto:688 add[Integer] -127[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:689 add[compile-time] -127[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 65535;
endcode
compile error

$overflow off
code auto:690 add[Integer] -1[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:691 add[compile-time] -1[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:692 add[Integer] -1[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:693 add[compile-time] -1[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:694 add[Integer] -1[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:695 add[compile-time] -1[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:696 add[Integer] -1[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:697 add[compile-time] -1[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:698 add[Integer] -1[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:699 add[compile-time] -1[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:700 add[Integer] -1[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:701 add[compile-time] -1[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:702 add[Integer] -1[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:703 add[compile-time] -1[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow on
code auto:704 add[Integer] -1[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:705 add[compile-time] -1[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow off
code auto:706 add[Integer] -1[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:707 add[compile-time] -1[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 65535;
endcode
compile error

$overflow on
code auto:708 add[Integer] -1[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:709 add[compile-time] -1[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 65535;
endcode
compile error

$overflow off
code auto:710 add[Integer] 0[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:711 add[compile-time] 0[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:712 add[Integer] 0[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:713 add[compile-time] 0[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:714 add[Integer] 0[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:715 add[compile-time] 0[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:716 add[Integer] 0[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:717 add[compile-time] 0[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:718 add[Integer] 0[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:719 add[compile-time] 0[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:720 add[Integer] 0[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:721 add[compile-time] 0[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:722 add[Integer] 0[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:723 add[compile-time] 0[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:724 add[Integer] 0[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:725 add[compile-time] 0[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:726 add[Integer] 0[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:727 add[compile-time] 0[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:728 add[Integer] 0[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:729 add[compile-time] 0[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:730 add[Integer] 1[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:731 add[compile-time] 1[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:732 add[Integer] 1[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:733 add[compile-time] 1[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:734 add[Integer] 1[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:735 add[compile-time] 1[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:736 add[Integer] 1[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:737 add[compile-time] 1[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:738 add[Integer] 1[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:739 add[compile-time] 1[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:740 add[Integer] 1[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:741 add[compile-time] 1[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:742 add[Integer] 1[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:743 add[compile-time] 1[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32768;
endcode
compile error

$overflow on
code auto:744 add[Integer] 1[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:745 add[compile-time] 1[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32768;
endcode
compile error

$overflow off
code auto:746 add[Integer] 1[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:747 add[compile-time] 1[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:748 add[Integer] 1[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:749 add[compile-time] 1[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:750 add[Integer] 127[Int8], 0[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:751 add[compile-time] 127[Int8], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:752 add[Integer] 127[Int8], 0[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:753 add[compile-time] 127[Int8], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:754 add[Integer] 127[Int8], 255[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:755 add[compile-time] 127[Int8], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:756 add[Integer] 127[Int8], 255[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:757 add[compile-time] 127[Int8], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:758 add[Integer] 127[Int8], 32767[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:759 add[compile-time] 127[Int8], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:760 add[Integer] 127[Int8], 32767[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:761 add[compile-time] 127[Int8], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:762 add[Integer] 127[Int8], 32768[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:763 add[compile-time] 127[Int8], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32768;
endcode
compile error

$overflow on
code auto:764 add[Integer] 127[Int8], 32768[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:765 add[compile-time] 127[Int8], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32768;
endcode
compile error

$overflow off
code auto:766 add[Integer] 127[Int8], 65535[Word] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:767 add[compile-time] 127[Int8], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:768 add[Integer] 127[Int8], 65535[Word] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:769 add[compile-time] 127[Int8], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:770 add[Pointer] -128[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:771 add[compile-time] -128[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:772 add[Pointer] -128[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:773 add[compile-time] -128[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:774 add[Pointer] -128[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:775 add[compile-time] -128[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:776 add[Pointer] -128[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:777 add[compile-time] -128[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:778 add[Pointer] -128[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:779 add[compile-time] -128[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:780 add[Pointer] -128[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:781 add[compile-time] -128[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:782 add[Pointer] -128[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:783 add[compile-time] -128[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow on
code auto:784 add[Pointer] -128[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:785 add[compile-time] -128[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow off
code auto:786 add[Pointer] -128[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:787 add[compile-time] -128[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 65535;
endcode
varvalue r 65407

$overflow on
code auto:788 add[Pointer] -128[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:789 add[compile-time] -128[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 65535;
endcode
varvalue r 65407

$overflow off
code auto:790 add[Pointer] -127[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65409

code auto:791 add[compile-time] -127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 + 0;
endcode
compile error

$overflow on
code auto:792 add[Pointer] -127[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:793 add[compile-time] -127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 + 0;
endcode
compile error

$overflow off
code auto:794 add[Pointer] -127[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:795 add[compile-time] -127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow on
code auto:796 add[Pointer] -127[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:797 add[compile-time] -127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 + 255;
endcode
varvalue r 128

$overflow off
code auto:798 add[Pointer] -127[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:799 add[compile-time] -127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow on
code auto:800 add[Pointer] -127[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:801 add[compile-time] -127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 + 32767;
endcode
varvalue r 32640

$overflow off
code auto:802 add[Pointer] -127[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32641

code auto:803 add[compile-time] -127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 + 32768;
endcode
varvalue r 32641

$overflow on
code auto:804 add[Pointer] -127[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32641

code auto:805 add[compile-time] -127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 + 32768;
endcode
varvalue r 32641

$overflow off
code auto:806 add[Pointer] -127[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:807 add[compile-time] -127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -127 + 65535;
endcode
varvalue r 65408

$overflow on
code auto:808 add[Pointer] -127[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:809 add[compile-time] -127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -127 + 65535;
endcode
varvalue r 65408

$overflow off
code auto:810 add[Pointer] -1[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:811 add[compile-time] -1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:812 add[Pointer] -1[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:813 add[compile-time] -1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:814 add[Pointer] -1[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:815 add[compile-time] -1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:816 add[Pointer] -1[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:817 add[compile-time] -1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:818 add[Pointer] -1[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:819 add[compile-time] -1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:820 add[Pointer] -1[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:821 add[compile-time] -1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:822 add[Pointer] -1[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:823 add[compile-time] -1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow on
code auto:824 add[Pointer] -1[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:825 add[compile-time] -1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow off
code auto:826 add[Pointer] -1[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:827 add[compile-time] -1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 65535;
endcode
varvalue r 65534

$overflow on
code auto:828 add[Pointer] -1[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:829 add[compile-time] -1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 65535;
endcode
varvalue r 65534

$overflow off
code auto:830 add[Pointer] 0[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:831 add[compile-time] 0[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:832 add[Pointer] 0[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:833 add[compile-time] 0[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:834 add[Pointer] 0[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:835 add[compile-time] 0[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:836 add[Pointer] 0[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:837 add[compile-time] 0[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:838 add[Pointer] 0[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:839 add[compile-time] 0[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:840 add[Pointer] 0[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:841 add[compile-time] 0[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:842 add[Pointer] 0[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:843 add[compile-time] 0[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:844 add[Pointer] 0[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:845 add[compile-time] 0[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:846 add[Pointer] 0[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:847 add[compile-time] 0[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:848 add[Pointer] 0[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:849 add[compile-time] 0[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:850 add[Pointer] 1[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:851 add[compile-time] 1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:852 add[Pointer] 1[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:853 add[compile-time] 1[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:854 add[Pointer] 1[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:855 add[compile-time] 1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:856 add[Pointer] 1[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:857 add[compile-time] 1[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:858 add[Pointer] 1[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:859 add[compile-time] 1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow on
code auto:860 add[Pointer] 1[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:861 add[compile-time] 1[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow off
code auto:862 add[Pointer] 1[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:863 add[compile-time] 1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow on
code auto:864 add[Pointer] 1[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:865 add[compile-time] 1[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow off
code auto:866 add[Pointer] 1[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:867 add[compile-time] 1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:868 add[Pointer] 1[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:869 add[compile-time] 1[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:870 add[Pointer] 127[Int8], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:871 add[compile-time] 127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:872 add[Pointer] 127[Int8], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:873 add[compile-time] 127[Int8], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:874 add[Pointer] 127[Int8], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:875 add[compile-time] 127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:876 add[Pointer] 127[Int8], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:877 add[compile-time] 127[Int8], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:878 add[Pointer] 127[Int8], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:879 add[compile-time] 127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow on
code auto:880 add[Pointer] 127[Int8], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:881 add[compile-time] 127[Int8], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow off
code auto:882 add[Pointer] 127[Int8], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:883 add[compile-time] 127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow on
code auto:884 add[Pointer] 127[Int8], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:885 add[compile-time] 127[Int8], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow off
code auto:886 add[Pointer] 127[Int8], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:887 add[compile-time] 127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:888 add[Pointer] 127[Int8], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:889 add[compile-time] 127[Int8], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:890 add[Integer] -32768[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:891 add[compile-time] -32768[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:892 add[Integer] -32768[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:893 add[compile-time] -32768[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -128;
endcode
compile error

$overflow off
code auto:894 add[Integer] -32768[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:895 add[compile-time] -32768[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -127;
endcode
compile error

$overflow on
code auto:896 add[Integer] -32768[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:897 add[compile-time] -32768[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -127;
endcode
compile error

$overflow off
code auto:898 add[Integer] -32768[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:899 add[compile-time] -32768[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:900 add[Integer] -32768[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:901 add[compile-time] -32768[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -1;
endcode
compile error

$overflow off
code auto:902 add[Integer] -32768[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:903 add[compile-time] -32768[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow on
code auto:904 add[Integer] -32768[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:905 add[compile-time] -32768[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow off
code auto:906 add[Integer] -32768[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:907 add[compile-time] -32768[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow on
code auto:908 add[Integer] -32768[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:909 add[compile-time] -32768[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow off
code auto:910 add[Integer] -32768[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:911 add[compile-time] -32768[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow on
code auto:912 add[Integer] -32768[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:913 add[compile-time] -32768[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow off
code auto:914 add[Integer] -32767[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:915 add[compile-time] -32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:916 add[Integer] -32767[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:917 add[compile-time] -32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -128;
endcode
compile error

$overflow off
code auto:918 add[Integer] -32767[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32642

code auto:919 add[compile-time] -32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -127;
endcode
compile error

$overflow on
code auto:920 add[Integer] -32767[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:921 add[compile-time] -32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -127;
endcode
compile error

$overflow off
code auto:922 add[Integer] -32767[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:923 add[compile-time] -32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -1;
endcode
varvalue r -32768

$overflow on
code auto:924 add[Integer] -32767[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:925 add[compile-time] -32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -1;
endcode
varvalue r -32768

$overflow off
code auto:926 add[Integer] -32767[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:927 add[compile-time] -32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow on
code auto:928 add[Integer] -32767[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:929 add[compile-time] -32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow off
code auto:930 add[Integer] -32767[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:931 add[compile-time] -32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow on
code auto:932 add[Integer] -32767[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:933 add[compile-time] -32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow off
code auto:934 add[Integer] -32767[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:935 add[compile-time] -32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow on
code auto:936 add[Integer] -32767[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:937 add[compile-time] -32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow off
code auto:938 add[Integer] -129[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:939 add[compile-time] -129[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -128;
endcode
varvalue r -257

$overflow on
code auto:940 add[Integer] -129[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:941 add[compile-time] -129[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -128;
endcode
varvalue r -257

$overflow off
code auto:942 add[Integer] -129[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:943 add[compile-time] -129[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -127;
endcode
varvalue r -256

$overflow on
code auto:944 add[Integer] -129[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:945 add[compile-time] -129[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -127;
endcode
varvalue r -256

$overflow off
code auto:946 add[Integer] -129[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:947 add[compile-time] -129[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -1;
endcode
varvalue r -130

$overflow on
code auto:948 add[Integer] -129[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:949 add[compile-time] -129[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -1;
endcode
varvalue r -130

$overflow off
code auto:950 add[Integer] -129[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:951 add[compile-time] -129[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow on
code auto:952 add[Integer] -129[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:953 add[compile-time] -129[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow off
code auto:954 add[Integer] -129[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:955 add[compile-time] -129[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow on
code auto:956 add[Integer] -129[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:957 add[compile-time] -129[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow off
code auto:958 add[Integer] -129[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:959 add[compile-time] -129[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow on
code auto:960 add[Integer] -129[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:961 add[compile-time] -129[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow off
code auto:962 add[Integer] -128[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:963 add[compile-time] -128[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow on
code auto:964 add[Integer] -128[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:965 add[compile-time] -128[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow off
code auto:966 add[Integer] -128[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -255

code auto:967 add[compile-time] -128[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -127;
endcode
varvalue r -255

$overflow on
code auto:968 add[Integer] -128[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -255

code auto:969 add[compile-time] -128[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -127;
endcode
varvalue r -255

$overflow off
code auto:970 add[Integer] -128[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:971 add[compile-time] -128[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow on
code auto:972 add[Integer] -128[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:973 add[compile-time] -128[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow off
code auto:974 add[Integer] -128[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:975 add[compile-time] -128[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:976 add[Integer] -128[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:977 add[compile-time] -128[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:978 add[Integer] -128[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:979 add[compile-time] -128[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:980 add[Integer] -128[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:981 add[compile-time] -128[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:982 add[Integer] -128[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:983 add[compile-time] -128[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:984 add[Integer] -128[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:985 add[compile-time] -128[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:986 add[Integer] -1[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:987 add[compile-time] -1[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow on
code auto:988 add[Integer] -1[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:989 add[compile-time] -1[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow off
code auto:990 add[Integer] -1[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:991 add[compile-time] -1[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -127;
endcode
varvalue r -128

$overflow on
code auto:992 add[Integer] -1[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:993 add[compile-time] -1[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -127;
endcode
varvalue r -128

$overflow off
code auto:994 add[Integer] -1[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:995 add[compile-time] -1[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:996 add[Integer] -1[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:997 add[compile-time] -1[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:998 add[Integer] -1[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:999 add[compile-time] -1[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:1000 add[Integer] -1[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1001 add[compile-time] -1[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:1002 add[Integer] -1[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1003 add[compile-time] -1[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:1004 add[Integer] -1[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1005 add[compile-time] -1[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:1006 add[Integer] -1[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1007 add[compile-time] -1[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:1008 add[Integer] -1[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1009 add[compile-time] -1[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:1010 add[Integer] 0[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1011 add[compile-time] 0[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:1012 add[Integer] 0[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1013 add[compile-time] 0[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:1014 add[Integer] 0[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1015 add[compile-time] 0[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:1016 add[Integer] 0[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1017 add[compile-time] 0[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow off
code auto:1018 add[Integer] 0[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1019 add[compile-time] 0[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:1020 add[Integer] 0[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1021 add[compile-time] 0[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:1022 add[Integer] 0[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1023 add[compile-time] 0[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:1024 add[Integer] 0[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1025 add[compile-time] 0[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:1026 add[Integer] 0[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1027 add[compile-time] 0[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:1028 add[Integer] 0[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1029 add[compile-time] 0[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:1030 add[Integer] 0[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1031 add[compile-time] 0[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:1032 add[Integer] 0[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1033 add[compile-time] 0[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:1034 add[Integer] 1[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1035 add[compile-time] 1[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:1036 add[Integer] 1[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1037 add[compile-time] 1[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:1038 add[Integer] 1[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:1039 add[compile-time] 1[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow on
code auto:1040 add[Integer] 1[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:1041 add[compile-time] 1[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow off
code auto:1042 add[Integer] 1[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1043 add[compile-time] 1[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:1044 add[Integer] 1[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1045 add[compile-time] 1[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:1046 add[Integer] 1[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1047 add[compile-time] 1[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:1048 add[Integer] 1[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1049 add[compile-time] 1[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:1050 add[Integer] 1[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1051 add[compile-time] 1[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:1052 add[Integer] 1[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1053 add[compile-time] 1[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:1054 add[Integer] 1[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1055 add[compile-time] 1[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:1056 add[Integer] 1[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1057 add[compile-time] 1[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:1058 add[Integer] 127[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1059 add[compile-time] 127[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:1060 add[Integer] 127[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1061 add[compile-time] 127[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:1062 add[Integer] 127[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1063 add[compile-time] 127[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:1064 add[Integer] 127[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1065 add[compile-time] 127[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:1066 add[Integer] 127[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1067 add[compile-time] 127[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:1068 add[Integer] 127[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1069 add[compile-time] 127[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:1070 add[Integer] 127[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1071 add[compile-time] 127[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:1072 add[Integer] 127[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1073 add[compile-time] 127[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:1074 add[Integer] 127[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1075 add[compile-time] 127[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:1076 add[Integer] 127[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1077 add[compile-time] 127[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:1078 add[Integer] 127[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1079 add[compile-time] 127[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:1080 add[Integer] 127[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1081 add[compile-time] 127[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:1082 add[Integer] 128[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1083 add[compile-time] 128[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:1084 add[Integer] 128[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1085 add[compile-time] 128[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:1086 add[Integer] 128[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1087 add[compile-time] 128[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -127;
endcode
varvalue r 1

$overflow on
code auto:1088 add[Integer] 128[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1089 add[compile-time] 128[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -127;
endcode
varvalue r 1

$overflow off
code auto:1090 add[Integer] 128[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1091 add[compile-time] 128[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:1092 add[Integer] 128[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1093 add[compile-time] 128[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:1094 add[Integer] 128[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1095 add[compile-time] 128[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:1096 add[Integer] 128[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1097 add[compile-time] 128[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:1098 add[Integer] 128[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1099 add[compile-time] 128[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:1100 add[Integer] 128[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1101 add[compile-time] 128[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:1102 add[Integer] 128[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1103 add[compile-time] 128[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:1104 add[Integer] 128[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1105 add[compile-time] 128[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:1106 add[Integer] 32767[Integer], -128[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1107 add[compile-time] 32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:1108 add[Integer] 32767[Integer], -128[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1109 add[compile-time] 32767[Integer], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:1110 add[Integer] 32767[Integer], -127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1111 add[compile-time] 32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow on
code auto:1112 add[Integer] 32767[Integer], -127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1113 add[compile-time] 32767[Integer], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow off
code auto:1114 add[Integer] 32767[Integer], -1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1115 add[compile-time] 32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:1116 add[Integer] 32767[Integer], -1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1117 add[compile-time] 32767[Integer], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:1118 add[Integer] 32767[Integer], 0[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1119 add[compile-time] 32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:1120 add[Integer] 32767[Integer], 0[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1121 add[compile-time] 32767[Integer], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:1122 add[Integer] 32767[Integer], 1[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1123 add[compile-time] 32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:1124 add[Integer] 32767[Integer], 1[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1125 add[compile-time] 32767[Integer], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:1126 add[Integer] 32767[Integer], 127[Int8] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:1127 add[compile-time] 32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:1128 add[Integer] 32767[Integer], 127[Int8] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1129 add[compile-time] 32767[Integer], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:1130 add[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1131 add[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -32768;
endcode
compile error

$overflow on
code auto:1132 add[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1133 add[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -32768;
endcode
compile error

$overflow off
code auto:1134 add[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1135 add[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -32767;
endcode
compile error

$overflow on
code auto:1136 add[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1137 add[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -32767;
endcode
compile error

$overflow off
code auto:1138 add[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1139 add[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -129;
endcode
compile error

$overflow on
code auto:1140 add[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1141 add[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -129;
endcode
compile error

$overflow off
code auto:1142 add[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1143 add[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:1144 add[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1145 add[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -128;
endcode
compile error

$overflow off
code auto:1146 add[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1147 add[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:1148 add[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1149 add[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -1;
endcode
compile error

$overflow off
code auto:1150 add[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1151 add[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow on
code auto:1152 add[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1153 add[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow off
code auto:1154 add[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1155 add[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow on
code auto:1156 add[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1157 add[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow off
code auto:1158 add[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1159 add[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow on
code auto:1160 add[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1161 add[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow off
code auto:1162 add[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1163 add[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 128;
endcode
varvalue r -32640

$overflow on
code auto:1164 add[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1165 add[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 128;
endcode
varvalue r -32640

$overflow off
code auto:1166 add[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1167 add[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow on
code auto:1168 add[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1169 add[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow off
code auto:1170 add[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1171 add[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -32768;
endcode
compile error

$overflow on
code auto:1172 add[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1173 add[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -32768;
endcode
compile error

$overflow off
code auto:1174 add[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1175 add[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -32767;
endcode
compile error

$overflow on
code auto:1176 add[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1177 add[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -32767;
endcode
compile error

$overflow off
code auto:1178 add[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1179 add[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -129;
endcode
compile error

$overflow on
code auto:1180 add[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1181 add[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -129;
endcode
compile error

$overflow off
code auto:1182 add[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:1183 add[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:1184 add[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1185 add[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -128;
endcode
compile error

$overflow off
code auto:1186 add[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1187 add[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + -1;
endcode
varvalue r -32768

$overflow on
code auto:1188 add[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1189 add[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -1;
endcode
varvalue r -32768

$overflow off
code auto:1190 add[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1191 add[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow on
code auto:1192 add[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1193 add[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow off
code auto:1194 add[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1195 add[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow on
code auto:1196 add[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1197 add[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow off
code auto:1198 add[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1199 add[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow on
code auto:1200 add[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1201 add[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow off
code auto:1202 add[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1203 add[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 128;
endcode
varvalue r -32639

$overflow on
code auto:1204 add[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1205 add[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 128;
endcode
varvalue r -32639

$overflow off
code auto:1206 add[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1207 add[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:1208 add[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1209 add[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:1210 add[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1211 add[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -32768;
endcode
compile error

$overflow on
code auto:1212 add[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1213 add[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -32768;
endcode
compile error

$overflow off
code auto:1214 add[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1215 add[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -32767;
endcode
compile error

$overflow on
code auto:1216 add[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1217 add[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -32767;
endcode
compile error

$overflow off
code auto:1218 add[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -258

code auto:1219 add[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -129;
endcode
varvalue r -258

$overflow on
code auto:1220 add[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -258

code auto:1221 add[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -129;
endcode
varvalue r -258

$overflow off
code auto:1222 add[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:1223 add[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -128;
endcode
varvalue r -257

$overflow on
code auto:1224 add[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:1225 add[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -128;
endcode
varvalue r -257

$overflow off
code auto:1226 add[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:1227 add[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + -1;
endcode
varvalue r -130

$overflow on
code auto:1228 add[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:1229 add[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -1;
endcode
varvalue r -130

$overflow off
code auto:1230 add[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1231 add[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow on
code auto:1232 add[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1233 add[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow off
code auto:1234 add[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1235 add[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow on
code auto:1236 add[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1237 add[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow off
code auto:1238 add[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1239 add[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow on
code auto:1240 add[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1241 add[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow off
code auto:1242 add[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1243 add[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 128;
endcode
varvalue r -1

$overflow on
code auto:1244 add[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1245 add[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 128;
endcode
varvalue r -1

$overflow off
code auto:1246 add[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1247 add[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow on
code auto:1248 add[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1249 add[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow off
code auto:1250 add[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1251 add[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:1252 add[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1253 add[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32768;
endcode
compile error

$overflow off
code auto:1254 add[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:1255 add[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:1256 add[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1257 add[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32767;
endcode
compile error

$overflow off
code auto:1258 add[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:1259 add[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -129;
endcode
varvalue r -257

$overflow on
code auto:1260 add[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:1261 add[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -129;
endcode
varvalue r -257

$overflow off
code auto:1262 add[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:1263 add[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow on
code auto:1264 add[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:1265 add[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow off
code auto:1266 add[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1267 add[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow on
code auto:1268 add[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1269 add[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow off
code auto:1270 add[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1271 add[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:1272 add[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1273 add[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:1274 add[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1275 add[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:1276 add[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1277 add[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:1278 add[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1279 add[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:1280 add[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1281 add[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:1282 add[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1283 add[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:1284 add[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1285 add[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:1286 add[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1287 add[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:1288 add[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1289 add[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:1290 add[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1291 add[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:1292 add[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1293 add[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32768;
endcode
compile error

$overflow off
code auto:1294 add[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1295 add[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -32767;
endcode
varvalue r -32768

$overflow on
code auto:1296 add[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1297 add[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32767;
endcode
varvalue r -32768

$overflow off
code auto:1298 add[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:1299 add[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -129;
endcode
varvalue r -130

$overflow on
code auto:1300 add[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:1301 add[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -129;
endcode
varvalue r -130

$overflow off
code auto:1302 add[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1303 add[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow on
code auto:1304 add[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1305 add[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow off
code auto:1306 add[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1307 add[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:1308 add[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1309 add[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:1310 add[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1311 add[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:1312 add[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1313 add[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:1314 add[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1315 add[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:1316 add[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1317 add[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:1318 add[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1319 add[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:1320 add[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1321 add[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:1322 add[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1323 add[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:1324 add[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1325 add[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:1326 add[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1327 add[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:1328 add[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1329 add[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:1330 add[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1331 add[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow on
code auto:1332 add[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1333 add[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow off
code auto:1334 add[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1335 add[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow on
code auto:1336 add[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1337 add[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow off
code auto:1338 add[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1339 add[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow on
code auto:1340 add[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1341 add[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow off
code auto:1342 add[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1343 add[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:1344 add[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1345 add[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:1346 add[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1347 add[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:1348 add[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1349 add[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:1350 add[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1351 add[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:1352 add[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1353 add[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:1354 add[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1355 add[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:1356 add[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1357 add[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:1358 add[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1359 add[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:1360 add[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1361 add[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:1362 add[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1363 add[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:1364 add[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1365 add[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:1366 add[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1367 add[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:1368 add[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1369 add[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:1370 add[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1371 add[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow on
code auto:1372 add[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1373 add[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow off
code auto:1374 add[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1375 add[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow on
code auto:1376 add[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1377 add[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow off
code auto:1378 add[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1379 add[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow on
code auto:1380 add[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1381 add[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow off
code auto:1382 add[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1383 add[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:1384 add[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1385 add[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:1386 add[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1387 add[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:1388 add[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1389 add[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:1390 add[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1391 add[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:1392 add[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1393 add[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:1394 add[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1395 add[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:1396 add[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1397 add[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:1398 add[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1399 add[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:1400 add[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1401 add[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:1402 add[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1403 add[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:1404 add[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1405 add[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:1406 add[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1407 add[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:1408 add[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1409 add[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:1410 add[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1411 add[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow on
code auto:1412 add[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1413 add[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow off
code auto:1414 add[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1415 add[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow on
code auto:1416 add[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1417 add[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow off
code auto:1418 add[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1419 add[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow on
code auto:1420 add[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1421 add[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow off
code auto:1422 add[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1423 add[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:1424 add[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1425 add[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:1426 add[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1427 add[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:1428 add[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1429 add[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:1430 add[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1431 add[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:1432 add[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1433 add[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:1434 add[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1435 add[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:1436 add[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1437 add[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:1438 add[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1439 add[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:1440 add[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1441 add[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:1442 add[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1443 add[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:1444 add[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1445 add[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:1446 add[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:1447 add[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:1448 add[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1449 add[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:1450 add[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1451 add[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -32768;
endcode
varvalue r -32640

$overflow on
code auto:1452 add[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1453 add[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32768;
endcode
varvalue r -32640

$overflow off
code auto:1454 add[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1455 add[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -32767;
endcode
varvalue r -32639

$overflow on
code auto:1456 add[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1457 add[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32767;
endcode
varvalue r -32639

$overflow off
code auto:1458 add[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1459 add[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -129;
endcode
varvalue r -1

$overflow on
code auto:1460 add[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1461 add[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -129;
endcode
varvalue r -1

$overflow off
code auto:1462 add[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1463 add[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:1464 add[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1465 add[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:1466 add[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1467 add[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:1468 add[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1469 add[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:1470 add[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1471 add[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:1472 add[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1473 add[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:1474 add[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1475 add[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:1476 add[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1477 add[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:1478 add[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1479 add[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:1480 add[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1481 add[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:1482 add[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1483 add[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:1484 add[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1485 add[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:1486 add[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1487 add[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:1488 add[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1489 add[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow off
code auto:1490 add[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1491 add[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow on
code auto:1492 add[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1493 add[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow off
code auto:1494 add[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1495 add[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:1496 add[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1497 add[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:1498 add[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1499 add[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow on
code auto:1500 add[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1501 add[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow off
code auto:1502 add[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1503 add[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:1504 add[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1505 add[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:1506 add[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1507 add[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:1508 add[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1509 add[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:1510 add[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1511 add[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:1512 add[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1513 add[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:1514 add[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1515 add[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:1516 add[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1517 add[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:1518 add[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:1519 add[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:1520 add[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1521 add[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:1522 add[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1523 add[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:1524 add[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1525 add[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow off
code auto:1526 add[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1527 add[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:1528 add[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1529 add[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:1530 add[Integer] -32768[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1531 add[compile-time] -32768[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow on
code auto:1532 add[Integer] -32768[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1533 add[compile-time] -32768[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow off
code auto:1534 add[Integer] -32768[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1535 add[compile-time] -32768[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow on
code auto:1536 add[Integer] -32768[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1537 add[compile-time] -32768[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow off
code auto:1538 add[Integer] -32768[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1539 add[compile-time] -32768[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow on
code auto:1540 add[Integer] -32768[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1541 add[compile-time] -32768[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow off
code auto:1542 add[Integer] -32768[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1543 add[compile-time] -32768[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 128;
endcode
varvalue r -32640

$overflow on
code auto:1544 add[Integer] -32768[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1545 add[compile-time] -32768[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 128;
endcode
varvalue r -32640

$overflow off
code auto:1546 add[Integer] -32768[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:1547 add[compile-time] -32768[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 255;
endcode
varvalue r -32513

$overflow on
code auto:1548 add[Integer] -32768[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:1549 add[compile-time] -32768[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 255;
endcode
varvalue r -32513

$overflow off
code auto:1550 add[Integer] -32767[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1551 add[compile-time] -32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow on
code auto:1552 add[Integer] -32767[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1553 add[compile-time] -32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow off
code auto:1554 add[Integer] -32767[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1555 add[compile-time] -32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow on
code auto:1556 add[Integer] -32767[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:1557 add[compile-time] -32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow off
code auto:1558 add[Integer] -32767[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1559 add[compile-time] -32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow on
code auto:1560 add[Integer] -32767[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1561 add[compile-time] -32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow off
code auto:1562 add[Integer] -32767[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1563 add[compile-time] -32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 128;
endcode
varvalue r -32639

$overflow on
code auto:1564 add[Integer] -32767[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:1565 add[compile-time] -32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 128;
endcode
varvalue r -32639

$overflow off
code auto:1566 add[Integer] -32767[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:1567 add[compile-time] -32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 255;
endcode
varvalue r -32512

$overflow on
code auto:1568 add[Integer] -32767[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:1569 add[compile-time] -32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 255;
endcode
varvalue r -32512

$overflow off
code auto:1570 add[Integer] -129[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1571 add[compile-time] -129[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow on
code auto:1572 add[Integer] -129[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1573 add[compile-time] -129[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow off
code auto:1574 add[Integer] -129[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1575 add[compile-time] -129[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow on
code auto:1576 add[Integer] -129[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1577 add[compile-time] -129[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow off
code auto:1578 add[Integer] -129[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1579 add[compile-time] -129[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow on
code auto:1580 add[Integer] -129[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1581 add[compile-time] -129[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow off
code auto:1582 add[Integer] -129[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1583 add[compile-time] -129[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 128;
endcode
varvalue r -1

$overflow on
code auto:1584 add[Integer] -129[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1585 add[compile-time] -129[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 128;
endcode
varvalue r -1

$overflow off
code auto:1586 add[Integer] -129[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1587 add[compile-time] -129[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow on
code auto:1588 add[Integer] -129[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1589 add[compile-time] -129[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow off
code auto:1590 add[Integer] -128[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1591 add[compile-time] -128[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:1592 add[Integer] -128[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1593 add[compile-time] -128[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:1594 add[Integer] -128[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1595 add[compile-time] -128[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:1596 add[Integer] -128[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:1597 add[compile-time] -128[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:1598 add[Integer] -128[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1599 add[compile-time] -128[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:1600 add[Integer] -128[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1601 add[compile-time] -128[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:1602 add[Integer] -128[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1603 add[compile-time] -128[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:1604 add[Integer] -128[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1605 add[compile-time] -128[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:1606 add[Integer] -128[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1607 add[compile-time] -128[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:1608 add[Integer] -128[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1609 add[compile-time] -128[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:1610 add[Integer] -1[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1611 add[compile-time] -1[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:1612 add[Integer] -1[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1613 add[compile-time] -1[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:1614 add[Integer] -1[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1615 add[compile-time] -1[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:1616 add[Integer] -1[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1617 add[compile-time] -1[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:1618 add[Integer] -1[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1619 add[compile-time] -1[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:1620 add[Integer] -1[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1621 add[compile-time] -1[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:1622 add[Integer] -1[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1623 add[compile-time] -1[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:1624 add[Integer] -1[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1625 add[compile-time] -1[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:1626 add[Integer] -1[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1627 add[compile-time] -1[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:1628 add[Integer] -1[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1629 add[compile-time] -1[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:1630 add[Integer] 0[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1631 add[compile-time] 0[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:1632 add[Integer] 0[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1633 add[compile-time] 0[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:1634 add[Integer] 0[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1635 add[compile-time] 0[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:1636 add[Integer] 0[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1637 add[compile-time] 0[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:1638 add[Integer] 0[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1639 add[compile-time] 0[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:1640 add[Integer] 0[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1641 add[compile-time] 0[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:1642 add[Integer] 0[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1643 add[compile-time] 0[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:1644 add[Integer] 0[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1645 add[compile-time] 0[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:1646 add[Integer] 0[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1647 add[compile-time] 0[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:1648 add[Integer] 0[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1649 add[compile-time] 0[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:1650 add[Integer] 1[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1651 add[compile-time] 1[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:1652 add[Integer] 1[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1653 add[compile-time] 1[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:1654 add[Integer] 1[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1655 add[compile-time] 1[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:1656 add[Integer] 1[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:1657 add[compile-time] 1[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:1658 add[Integer] 1[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1659 add[compile-time] 1[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:1660 add[Integer] 1[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1661 add[compile-time] 1[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:1662 add[Integer] 1[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1663 add[compile-time] 1[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:1664 add[Integer] 1[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1665 add[compile-time] 1[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:1666 add[Integer] 1[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1667 add[compile-time] 1[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:1668 add[Integer] 1[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1669 add[compile-time] 1[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:1670 add[Integer] 127[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1671 add[compile-time] 127[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:1672 add[Integer] 127[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1673 add[compile-time] 127[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:1674 add[Integer] 127[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1675 add[compile-time] 127[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:1676 add[Integer] 127[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1677 add[compile-time] 127[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:1678 add[Integer] 127[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1679 add[compile-time] 127[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:1680 add[Integer] 127[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1681 add[compile-time] 127[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:1682 add[Integer] 127[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1683 add[compile-time] 127[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:1684 add[Integer] 127[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1685 add[compile-time] 127[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:1686 add[Integer] 127[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:1687 add[compile-time] 127[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:1688 add[Integer] 127[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:1689 add[compile-time] 127[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:1690 add[Integer] 128[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1691 add[compile-time] 128[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:1692 add[Integer] 128[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1693 add[compile-time] 128[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:1694 add[Integer] 128[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1695 add[compile-time] 128[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:1696 add[Integer] 128[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:1697 add[compile-time] 128[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:1698 add[Integer] 128[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1699 add[compile-time] 128[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:1700 add[Integer] 128[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1701 add[compile-time] 128[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:1702 add[Integer] 128[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1703 add[compile-time] 128[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:1704 add[Integer] 128[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1705 add[compile-time] 128[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:1706 add[Integer] 128[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:1707 add[compile-time] 128[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:1708 add[Integer] 128[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:1709 add[compile-time] 128[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:1710 add[Integer] 32767[Integer], 0[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1711 add[compile-time] 32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:1712 add[Integer] 32767[Integer], 0[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1713 add[compile-time] 32767[Integer], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:1714 add[Integer] 32767[Integer], 1[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1715 add[compile-time] 32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:1716 add[Integer] 32767[Integer], 1[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1717 add[compile-time] 32767[Integer], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:1718 add[Integer] 32767[Integer], 127[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:1719 add[compile-time] 32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:1720 add[Integer] 32767[Integer], 127[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1721 add[compile-time] 32767[Integer], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:1722 add[Integer] 32767[Integer], 128[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1723 add[compile-time] 32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:1724 add[Integer] 32767[Integer], 128[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1725 add[compile-time] 32767[Integer], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow off
code auto:1726 add[Integer] 32767[Integer], 255[Byte] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:1727 add[compile-time] 32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:1728 add[Integer] 32767[Integer], 255[Byte] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1729 add[compile-time] 32767[Integer], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:1730 add[Integer] -32768[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1731 add[compile-time] -32768[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow on
code auto:1732 add[Integer] -32768[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1733 add[compile-time] -32768[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow off
code auto:1734 add[Integer] -32768[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:1735 add[compile-time] -32768[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 255;
endcode
varvalue r -32513

$overflow on
code auto:1736 add[Integer] -32768[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:1737 add[compile-time] -32768[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 255;
endcode
varvalue r -32513

$overflow off
code auto:1738 add[Integer] -32768[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1739 add[compile-time] -32768[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow on
code auto:1740 add[Integer] -32768[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1741 add[compile-time] -32768[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow off
code auto:1742 add[Integer] -32768[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1743 add[compile-time] -32768[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 32768;
endcode
varvalue r 0

$overflow on
code auto:1744 add[Integer] -32768[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1745 add[compile-time] -32768[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 32768;
endcode
varvalue r 0

$overflow off
code auto:1746 add[Integer] -32768[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1747 add[compile-time] -32768[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32768 + 65535;
endcode
varvalue r 32767

$overflow on
code auto:1748 add[Integer] -32768[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1749 add[compile-time] -32768[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 65535;
endcode
varvalue r 32767

$overflow off
code auto:1750 add[Integer] -32767[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1751 add[compile-time] -32767[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow on
code auto:1752 add[Integer] -32767[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1753 add[compile-time] -32767[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow off
code auto:1754 add[Integer] -32767[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:1755 add[compile-time] -32767[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 255;
endcode
varvalue r -32512

$overflow on
code auto:1756 add[Integer] -32767[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:1757 add[compile-time] -32767[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 255;
endcode
varvalue r -32512

$overflow off
code auto:1758 add[Integer] -32767[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1759 add[compile-time] -32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:1760 add[Integer] -32767[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1761 add[compile-time] -32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:1762 add[Integer] -32767[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1763 add[compile-time] -32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 32768;
endcode
varvalue r 1

$overflow on
code auto:1764 add[Integer] -32767[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1765 add[compile-time] -32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 32768;
endcode
varvalue r 1

$overflow off
code auto:1766 add[Integer] -32767[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1767 add[compile-time] -32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -32767 + 65535;
endcode
compile error

$overflow on
code auto:1768 add[Integer] -32767[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1769 add[compile-time] -32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 65535;
endcode
compile error

$overflow off
code auto:1770 add[Integer] -129[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1771 add[compile-time] -129[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow on
code auto:1772 add[Integer] -129[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1773 add[compile-time] -129[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow off
code auto:1774 add[Integer] -129[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1775 add[compile-time] -129[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow on
code auto:1776 add[Integer] -129[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1777 add[compile-time] -129[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow off
code auto:1778 add[Integer] -129[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1779 add[compile-time] -129[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow on
code auto:1780 add[Integer] -129[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:1781 add[compile-time] -129[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow off
code auto:1782 add[Integer] -129[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1783 add[compile-time] -129[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 32768;
endcode
varvalue r 32639

$overflow on
code auto:1784 add[Integer] -129[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1785 add[compile-time] -129[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 32768;
endcode
varvalue r 32639

$overflow off
code auto:1786 add[Integer] -129[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:1787 add[compile-time] -129[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -129 + 65535;
endcode
compile error

$overflow on
code auto:1788 add[Integer] -129[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1789 add[compile-time] -129[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 65535;
endcode
compile error

$overflow off
code auto:1790 add[Integer] -128[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1791 add[compile-time] -128[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:1792 add[Integer] -128[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:1793 add[compile-time] -128[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:1794 add[Integer] -128[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1795 add[compile-time] -128[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:1796 add[Integer] -128[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1797 add[compile-time] -128[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:1798 add[Integer] -128[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1799 add[compile-time] -128[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:1800 add[Integer] -128[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:1801 add[compile-time] -128[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:1802 add[Integer] -128[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1803 add[compile-time] -128[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow on
code auto:1804 add[Integer] -128[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:1805 add[compile-time] -128[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow off
code auto:1806 add[Integer] -128[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:1807 add[compile-time] -128[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 65535;
endcode
compile error

$overflow on
code auto:1808 add[Integer] -128[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1809 add[compile-time] -128[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 65535;
endcode
compile error

$overflow off
code auto:1810 add[Integer] -1[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1811 add[compile-time] -1[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:1812 add[Integer] -1[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1813 add[compile-time] -1[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:1814 add[Integer] -1[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1815 add[compile-time] -1[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:1816 add[Integer] -1[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:1817 add[compile-time] -1[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:1818 add[Integer] -1[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1819 add[compile-time] -1[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:1820 add[Integer] -1[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1821 add[compile-time] -1[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:1822 add[Integer] -1[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1823 add[compile-time] -1[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow on
code auto:1824 add[Integer] -1[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1825 add[compile-time] -1[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow off
code auto:1826 add[Integer] -1[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1827 add[compile-time] -1[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 65535;
endcode
compile error

$overflow on
code auto:1828 add[Integer] -1[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1829 add[compile-time] -1[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 65535;
endcode
compile error

$overflow off
code auto:1830 add[Integer] 0[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1831 add[compile-time] 0[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:1832 add[Integer] 0[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1833 add[compile-time] 0[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:1834 add[Integer] 0[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1835 add[compile-time] 0[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:1836 add[Integer] 0[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:1837 add[compile-time] 0[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:1838 add[Integer] 0[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1839 add[compile-time] 0[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:1840 add[Integer] 0[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1841 add[compile-time] 0[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:1842 add[Integer] 0[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1843 add[compile-time] 0[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:1844 add[Integer] 0[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1845 add[compile-time] 0[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:1846 add[Integer] 0[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1847 add[compile-time] 0[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:1848 add[Integer] 0[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1849 add[compile-time] 0[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:1850 add[Integer] 1[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1851 add[compile-time] 1[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:1852 add[Integer] 1[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:1853 add[compile-time] 1[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:1854 add[Integer] 1[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1855 add[compile-time] 1[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:1856 add[Integer] 1[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:1857 add[compile-time] 1[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:1858 add[Integer] 1[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:1859 add[compile-time] 1[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:1860 add[Integer] 1[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1861 add[compile-time] 1[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:1862 add[Integer] 1[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:1863 add[compile-time] 1[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32768;
endcode
compile error

$overflow on
code auto:1864 add[Integer] 1[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1865 add[compile-time] 1[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32768;
endcode
compile error

$overflow off
code auto:1866 add[Integer] 1[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:1867 add[compile-time] 1[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:1868 add[Integer] 1[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1869 add[compile-time] 1[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:1870 add[Integer] 127[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1871 add[compile-time] 127[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:1872 add[Integer] 127[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1873 add[compile-time] 127[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:1874 add[Integer] 127[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:1875 add[compile-time] 127[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:1876 add[Integer] 127[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:1877 add[compile-time] 127[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:1878 add[Integer] 127[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:1879 add[compile-time] 127[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:1880 add[Integer] 127[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1881 add[compile-time] 127[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:1882 add[Integer] 127[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1883 add[compile-time] 127[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32768;
endcode
compile error

$overflow on
code auto:1884 add[Integer] 127[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1885 add[compile-time] 127[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32768;
endcode
compile error

$overflow off
code auto:1886 add[Integer] 127[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:1887 add[compile-time] 127[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:1888 add[Integer] 127[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1889 add[compile-time] 127[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:1890 add[Integer] 128[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1891 add[compile-time] 128[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:1892 add[Integer] 128[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:1893 add[compile-time] 128[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:1894 add[Integer] 128[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:1895 add[compile-time] 128[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:1896 add[Integer] 128[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:1897 add[compile-time] 128[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:1898 add[Integer] 128[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:1899 add[compile-time] 128[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:1900 add[Integer] 128[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1901 add[compile-time] 128[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow off
code auto:1902 add[Integer] 128[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:1903 add[compile-time] 128[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 32768;
endcode
compile error

$overflow on
code auto:1904 add[Integer] 128[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1905 add[compile-time] 128[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 32768;
endcode
compile error

$overflow off
code auto:1906 add[Integer] 128[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:1907 add[compile-time] 128[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 65535;
endcode
compile error

$overflow on
code auto:1908 add[Integer] 128[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1909 add[compile-time] 128[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 65535;
endcode
compile error

$overflow off
code auto:1910 add[Integer] 32767[Integer], 0[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1911 add[compile-time] 32767[Integer], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:1912 add[Integer] 32767[Integer], 0[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:1913 add[compile-time] 32767[Integer], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:1914 add[Integer] 32767[Integer], 255[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:1915 add[compile-time] 32767[Integer], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:1916 add[Integer] 32767[Integer], 255[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1917 add[compile-time] 32767[Integer], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:1918 add[Integer] 32767[Integer], 32767[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:1919 add[compile-time] 32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:1920 add[Integer] 32767[Integer], 32767[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1921 add[compile-time] 32767[Integer], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:1922 add[Integer] 32767[Integer], 32768[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:1923 add[compile-time] 32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:1924 add[Integer] 32767[Integer], 32768[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1925 add[compile-time] 32767[Integer], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:1926 add[Integer] 32767[Integer], 65535[Word] -> [Integer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:1927 add[compile-time] 32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:1928 add[Integer] 32767[Integer], 65535[Word] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:1929 add[compile-time] 32767[Integer], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:1930 add[Pointer] -32768[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:1931 add[compile-time] -32768[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 + 0;
endcode
compile error

$overflow on
code auto:1932 add[Pointer] -32768[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1933 add[compile-time] -32768[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 + 0;
endcode
compile error

$overflow off
code auto:1934 add[Pointer] -32768[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:1935 add[compile-time] -32768[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 + 255;
endcode
compile error

$overflow on
code auto:1936 add[Pointer] -32768[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1937 add[compile-time] -32768[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 + 255;
endcode
compile error

$overflow off
code auto:1938 add[Pointer] -32768[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:1939 add[compile-time] -32768[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 + 32767;
endcode
compile error

$overflow on
code auto:1940 add[Pointer] -32768[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1941 add[compile-time] -32768[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 + 32767;
endcode
compile error

$overflow off
code auto:1942 add[Pointer] -32768[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:1943 add[compile-time] -32768[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 + 32768;
endcode
varvalue r 0

$overflow on
code auto:1944 add[Pointer] -32768[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:1945 add[compile-time] -32768[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 + 32768;
endcode
varvalue r 0

$overflow off
code auto:1946 add[Pointer] -32768[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:1947 add[compile-time] -32768[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32768 + 65535;
endcode
varvalue r 32767

$overflow on
code auto:1948 add[Pointer] -32768[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:1949 add[compile-time] -32768[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32768 + 65535;
endcode
varvalue r 32767

$overflow off
code auto:1950 add[Pointer] -32767[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:1951 add[compile-time] -32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 + 0;
endcode
compile error

$overflow on
code auto:1952 add[Pointer] -32767[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1953 add[compile-time] -32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 + 0;
endcode
compile error

$overflow off
code auto:1954 add[Pointer] -32767[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33024

code auto:1955 add[compile-time] -32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 + 255;
endcode
compile error

$overflow on
code auto:1956 add[Pointer] -32767[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1957 add[compile-time] -32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 + 255;
endcode
compile error

$overflow off
code auto:1958 add[Pointer] -32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:1959 add[compile-time] -32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:1960 add[Pointer] -32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:1961 add[compile-time] -32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:1962 add[Pointer] -32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:1963 add[compile-time] -32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 + 32768;
endcode
varvalue r 1

$overflow on
code auto:1964 add[Pointer] -32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:1965 add[compile-time] -32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 + 32768;
endcode
varvalue r 1

$overflow off
code auto:1966 add[Pointer] -32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:1967 add[compile-time] -32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -32767 + 65535;
endcode
varvalue r 32768

$overflow on
code auto:1968 add[Pointer] -32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:1969 add[compile-time] -32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -32767 + 65535;
endcode
varvalue r 32768

$overflow off
code auto:1970 add[Pointer] -129[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:1971 add[compile-time] -129[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 + 0;
endcode
compile error

$overflow on
code auto:1972 add[Pointer] -129[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1973 add[compile-time] -129[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 + 0;
endcode
compile error

$overflow off
code auto:1974 add[Pointer] -129[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:1975 add[compile-time] -129[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow on
code auto:1976 add[Pointer] -129[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:1977 add[compile-time] -129[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 + 255;
endcode
varvalue r 126

$overflow off
code auto:1978 add[Pointer] -129[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32638

code auto:1979 add[compile-time] -129[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow on
code auto:1980 add[Pointer] -129[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32638

code auto:1981 add[compile-time] -129[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow off
code auto:1982 add[Pointer] -129[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:1983 add[compile-time] -129[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 + 32768;
endcode
varvalue r 32639

$overflow on
code auto:1984 add[Pointer] -129[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:1985 add[compile-time] -129[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 + 32768;
endcode
varvalue r 32639

$overflow off
code auto:1986 add[Pointer] -129[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65406

code auto:1987 add[compile-time] -129[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -129 + 65535;
endcode
varvalue r 65406

$overflow on
code auto:1988 add[Pointer] -129[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -129;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65406

code auto:1989 add[compile-time] -129[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -129 + 65535;
endcode
varvalue r 65406

$overflow off
code auto:1990 add[Pointer] -128[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:1991 add[compile-time] -128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:1992 add[Pointer] -128[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:1993 add[compile-time] -128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:1994 add[Pointer] -128[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:1995 add[compile-time] -128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow on
code auto:1996 add[Pointer] -128[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:1997 add[compile-time] -128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 255;
endcode
varvalue r 127

$overflow off
code auto:1998 add[Pointer] -128[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:1999 add[compile-time] -128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:2000 add[Pointer] -128[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:2001 add[compile-time] -128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:2002 add[Pointer] -128[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:2003 add[compile-time] -128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow on
code auto:2004 add[Pointer] -128[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:2005 add[compile-time] -128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 32768;
endcode
varvalue r 32640

$overflow off
code auto:2006 add[Pointer] -128[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:2007 add[compile-time] -128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -128 + 65535;
endcode
varvalue r 65407

$overflow on
code auto:2008 add[Pointer] -128[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:2009 add[compile-time] -128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -128 + 65535;
endcode
varvalue r 65407

$overflow off
code auto:2010 add[Pointer] -1[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2011 add[compile-time] -1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:2012 add[Pointer] -1[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2013 add[compile-time] -1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:2014 add[Pointer] -1[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:2015 add[compile-time] -1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow on
code auto:2016 add[Pointer] -1[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:2017 add[compile-time] -1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 255;
endcode
varvalue r 254

$overflow off
code auto:2018 add[Pointer] -1[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:2019 add[compile-time] -1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:2020 add[Pointer] -1[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:2021 add[compile-time] -1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:2022 add[Pointer] -1[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2023 add[compile-time] -1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow on
code auto:2024 add[Pointer] -1[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2025 add[compile-time] -1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 32768;
endcode
varvalue r 32767

$overflow off
code auto:2026 add[Pointer] -1[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:2027 add[compile-time] -1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := -1 + 65535;
endcode
varvalue r 65534

$overflow on
code auto:2028 add[Pointer] -1[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = -1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:2029 add[compile-time] -1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := -1 + 65535;
endcode
varvalue r 65534

$overflow off
code auto:2030 add[Pointer] 0[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2031 add[compile-time] 0[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2032 add[Pointer] 0[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2033 add[compile-time] 0[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2034 add[Pointer] 0[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2035 add[compile-time] 0[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:2036 add[Pointer] 0[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2037 add[compile-time] 0[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:2038 add[Pointer] 0[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2039 add[compile-time] 0[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:2040 add[Pointer] 0[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2041 add[compile-time] 0[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:2042 add[Pointer] 0[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2043 add[compile-time] 0[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:2044 add[Pointer] 0[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2045 add[compile-time] 0[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:2046 add[Pointer] 0[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2047 add[compile-time] 0[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:2048 add[Pointer] 0[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2049 add[compile-time] 0[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:2050 add[Pointer] 1[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:2051 add[compile-time] 1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2052 add[Pointer] 1[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:2053 add[compile-time] 1[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2054 add[Pointer] 1[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:2055 add[compile-time] 1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:2056 add[Pointer] 1[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:2057 add[compile-time] 1[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:2058 add[Pointer] 1[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2059 add[compile-time] 1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow on
code auto:2060 add[Pointer] 1[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2061 add[compile-time] 1[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow off
code auto:2062 add[Pointer] 1[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:2063 add[compile-time] 1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow on
code auto:2064 add[Pointer] 1[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:2065 add[compile-time] 1[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow off
code auto:2066 add[Pointer] 1[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2067 add[compile-time] 1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:2068 add[Pointer] 1[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2069 add[compile-time] 1[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:2070 add[Pointer] 127[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2071 add[compile-time] 127[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2072 add[Pointer] 127[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2073 add[compile-time] 127[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2074 add[Pointer] 127[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:2075 add[compile-time] 127[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:2076 add[Pointer] 127[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:2077 add[compile-time] 127[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:2078 add[Pointer] 127[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:2079 add[compile-time] 127[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow on
code auto:2080 add[Pointer] 127[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:2081 add[compile-time] 127[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow off
code auto:2082 add[Pointer] 127[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2083 add[compile-time] 127[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow on
code auto:2084 add[Pointer] 127[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2085 add[compile-time] 127[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow off
code auto:2086 add[Pointer] 127[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:2087 add[compile-time] 127[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:2088 add[Pointer] 127[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2089 add[compile-time] 127[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:2090 add[Pointer] 128[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:2091 add[compile-time] 128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2092 add[Pointer] 128[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:2093 add[compile-time] 128[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2094 add[Pointer] 128[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:2095 add[compile-time] 128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:2096 add[Pointer] 128[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:2097 add[compile-time] 128[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:2098 add[Pointer] 128[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2099 add[compile-time] 128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow on
code auto:2100 add[Pointer] 128[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2101 add[compile-time] 128[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow off
code auto:2102 add[Pointer] 128[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:2103 add[compile-time] 128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow on
code auto:2104 add[Pointer] 128[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:2105 add[compile-time] 128[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow off
code auto:2106 add[Pointer] 128[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2107 add[compile-time] 128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 65535;
endcode
compile error

$overflow on
code auto:2108 add[Pointer] 128[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2109 add[compile-time] 128[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 65535;
endcode
compile error

$overflow off
code auto:2110 add[Pointer] 32767[Integer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2111 add[compile-time] 32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:2112 add[Pointer] 32767[Integer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2113 add[compile-time] 32767[Integer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:2114 add[Pointer] 32767[Integer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:2115 add[compile-time] 32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:2116 add[Pointer] 32767[Integer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:2117 add[compile-time] 32767[Integer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:2118 add[Pointer] 32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:2119 add[compile-time] 32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:2120 add[Pointer] 32767[Integer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:2121 add[compile-time] 32767[Integer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:2122 add[Pointer] 32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2123 add[compile-time] 32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:2124 add[Pointer] 32767[Integer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2125 add[compile-time] 32767[Integer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:2126 add[Pointer] 32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:2127 add[compile-time] 32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:2128 add[Pointer] 32767[Integer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2129 add[compile-time] 32767[Integer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:2130 add[Integer] 0[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2131 add[compile-time] 0[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:2132 add[Integer] 0[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2133 add[compile-time] 0[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:2134 add[Integer] 0[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2135 add[compile-time] 0[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:2136 add[Integer] 0[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2137 add[compile-time] 0[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow off
code auto:2138 add[Integer] 0[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2139 add[compile-time] 0[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:2140 add[Integer] 0[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2141 add[compile-time] 0[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:2142 add[Integer] 0[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2143 add[compile-time] 0[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2144 add[Integer] 0[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2145 add[compile-time] 0[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2146 add[Integer] 0[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2147 add[compile-time] 0[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:2148 add[Integer] 0[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2149 add[compile-time] 0[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:2150 add[Integer] 0[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2151 add[compile-time] 0[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:2152 add[Integer] 0[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2153 add[compile-time] 0[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:2154 add[Integer] 1[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2155 add[compile-time] 1[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:2156 add[Integer] 1[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2157 add[compile-time] 1[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:2158 add[Integer] 1[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:2159 add[compile-time] 1[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow on
code auto:2160 add[Integer] 1[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:2161 add[compile-time] 1[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow off
code auto:2162 add[Integer] 1[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2163 add[compile-time] 1[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:2164 add[Integer] 1[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2165 add[compile-time] 1[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:2166 add[Integer] 1[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2167 add[compile-time] 1[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2168 add[Integer] 1[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2169 add[compile-time] 1[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2170 add[Integer] 1[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:2171 add[compile-time] 1[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:2172 add[Integer] 1[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:2173 add[compile-time] 1[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:2174 add[Integer] 1[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2175 add[compile-time] 1[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:2176 add[Integer] 1[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2177 add[compile-time] 1[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:2178 add[Integer] 127[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2179 add[compile-time] 127[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:2180 add[Integer] 127[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2181 add[compile-time] 127[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:2182 add[Integer] 127[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2183 add[compile-time] 127[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:2184 add[Integer] 127[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2185 add[compile-time] 127[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:2186 add[Integer] 127[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2187 add[compile-time] 127[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:2188 add[Integer] 127[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2189 add[compile-time] 127[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:2190 add[Integer] 127[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2191 add[compile-time] 127[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2192 add[Integer] 127[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2193 add[compile-time] 127[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2194 add[Integer] 127[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2195 add[compile-time] 127[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:2196 add[Integer] 127[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2197 add[compile-time] 127[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:2198 add[Integer] 127[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2199 add[compile-time] 127[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:2200 add[Integer] 127[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2201 add[compile-time] 127[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:2202 add[Integer] 128[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2203 add[compile-time] 128[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:2204 add[Integer] 128[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2205 add[compile-time] 128[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:2206 add[Integer] 128[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2207 add[compile-time] 128[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -127;
endcode
varvalue r 1

$overflow on
code auto:2208 add[Integer] 128[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2209 add[compile-time] 128[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -127;
endcode
varvalue r 1

$overflow off
code auto:2210 add[Integer] 128[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2211 add[compile-time] 128[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:2212 add[Integer] 128[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2213 add[compile-time] 128[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:2214 add[Integer] 128[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2215 add[compile-time] 128[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2216 add[Integer] 128[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2217 add[compile-time] 128[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2218 add[Integer] 128[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2219 add[compile-time] 128[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:2220 add[Integer] 128[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2221 add[compile-time] 128[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:2222 add[Integer] 128[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2223 add[compile-time] 128[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:2224 add[Integer] 128[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2225 add[compile-time] 128[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:2226 add[Integer] 255[Byte], -128[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2227 add[compile-time] 255[Byte], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:2228 add[Integer] 255[Byte], -128[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2229 add[compile-time] 255[Byte], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:2230 add[Integer] 255[Byte], -127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2231 add[compile-time] 255[Byte], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow on
code auto:2232 add[Integer] 255[Byte], -127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2233 add[compile-time] 255[Byte], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow off
code auto:2234 add[Integer] 255[Byte], -1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2235 add[compile-time] 255[Byte], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:2236 add[Integer] 255[Byte], -1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2237 add[compile-time] 255[Byte], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:2238 add[Integer] 255[Byte], 0[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2239 add[compile-time] 255[Byte], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2240 add[Integer] 255[Byte], 0[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2241 add[compile-time] 255[Byte], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2242 add[Integer] 255[Byte], 1[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2243 add[compile-time] 255[Byte], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:2244 add[Integer] 255[Byte], 1[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2245 add[compile-time] 255[Byte], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:2246 add[Integer] 255[Byte], 127[Int8] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2247 add[compile-time] 255[Byte], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:2248 add[Integer] 255[Byte], 127[Int8] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2249 add[compile-time] 255[Byte], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:2250 add[Integer] 0[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2251 add[compile-time] 0[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow on
code auto:2252 add[Integer] 0[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2253 add[compile-time] 0[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow off
code auto:2254 add[Integer] 0[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2255 add[compile-time] 0[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow on
code auto:2256 add[Integer] 0[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2257 add[compile-time] 0[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow off
code auto:2258 add[Integer] 0[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:2259 add[compile-time] 0[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow on
code auto:2260 add[Integer] 0[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:2261 add[compile-time] 0[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow off
code auto:2262 add[Integer] 0[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2263 add[compile-time] 0[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:2264 add[Integer] 0[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2265 add[compile-time] 0[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:2266 add[Integer] 0[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2267 add[compile-time] 0[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:2268 add[Integer] 0[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2269 add[compile-time] 0[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:2270 add[Integer] 0[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2271 add[compile-time] 0[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2272 add[Integer] 0[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2273 add[compile-time] 0[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2274 add[Integer] 0[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2275 add[compile-time] 0[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:2276 add[Integer] 0[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2277 add[compile-time] 0[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:2278 add[Integer] 0[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2279 add[compile-time] 0[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:2280 add[Integer] 0[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2281 add[compile-time] 0[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:2282 add[Integer] 0[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2283 add[compile-time] 0[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:2284 add[Integer] 0[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2285 add[compile-time] 0[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:2286 add[Integer] 0[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2287 add[compile-time] 0[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:2288 add[Integer] 0[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2289 add[compile-time] 0[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:2290 add[Integer] 1[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2291 add[compile-time] 1[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow on
code auto:2292 add[Integer] 1[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2293 add[compile-time] 1[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow off
code auto:2294 add[Integer] 1[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:2295 add[compile-time] 1[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow on
code auto:2296 add[Integer] 1[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:2297 add[compile-time] 1[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow off
code auto:2298 add[Integer] 1[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2299 add[compile-time] 1[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow on
code auto:2300 add[Integer] 1[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2301 add[compile-time] 1[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow off
code auto:2302 add[Integer] 1[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2303 add[compile-time] 1[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:2304 add[Integer] 1[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2305 add[compile-time] 1[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:2306 add[Integer] 1[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2307 add[compile-time] 1[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:2308 add[Integer] 1[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2309 add[compile-time] 1[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:2310 add[Integer] 1[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2311 add[compile-time] 1[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2312 add[Integer] 1[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2313 add[compile-time] 1[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2314 add[Integer] 1[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:2315 add[compile-time] 1[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:2316 add[Integer] 1[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:2317 add[compile-time] 1[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:2318 add[Integer] 1[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2319 add[compile-time] 1[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:2320 add[Integer] 1[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2321 add[compile-time] 1[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:2322 add[Integer] 1[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2323 add[compile-time] 1[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:2324 add[Integer] 1[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2325 add[compile-time] 1[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:2326 add[Integer] 1[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2327 add[compile-time] 1[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:2328 add[Integer] 1[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2329 add[compile-time] 1[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:2330 add[Integer] 127[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:2331 add[compile-time] 127[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow on
code auto:2332 add[Integer] 127[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:2333 add[compile-time] 127[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow off
code auto:2334 add[Integer] 127[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:2335 add[compile-time] 127[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow on
code auto:2336 add[Integer] 127[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:2337 add[compile-time] 127[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow off
code auto:2338 add[Integer] 127[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:2339 add[compile-time] 127[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow on
code auto:2340 add[Integer] 127[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:2341 add[compile-time] 127[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow off
code auto:2342 add[Integer] 127[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2343 add[compile-time] 127[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:2344 add[Integer] 127[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2345 add[compile-time] 127[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:2346 add[Integer] 127[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2347 add[compile-time] 127[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:2348 add[Integer] 127[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2349 add[compile-time] 127[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:2350 add[Integer] 127[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2351 add[compile-time] 127[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2352 add[Integer] 127[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2353 add[compile-time] 127[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2354 add[Integer] 127[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2355 add[compile-time] 127[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:2356 add[Integer] 127[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2357 add[compile-time] 127[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:2358 add[Integer] 127[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2359 add[compile-time] 127[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:2360 add[Integer] 127[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2361 add[compile-time] 127[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:2362 add[Integer] 127[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2363 add[compile-time] 127[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:2364 add[Integer] 127[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2365 add[compile-time] 127[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:2366 add[Integer] 127[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:2367 add[compile-time] 127[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:2368 add[Integer] 127[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2369 add[compile-time] 127[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:2370 add[Integer] 128[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:2371 add[compile-time] 128[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -32768;
endcode
varvalue r -32640

$overflow on
code auto:2372 add[Integer] 128[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:2373 add[compile-time] 128[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32768;
endcode
varvalue r -32640

$overflow off
code auto:2374 add[Integer] 128[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:2375 add[compile-time] 128[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -32767;
endcode
varvalue r -32639

$overflow on
code auto:2376 add[Integer] 128[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:2377 add[compile-time] 128[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32767;
endcode
varvalue r -32639

$overflow off
code auto:2378 add[Integer] 128[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2379 add[compile-time] 128[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -129;
endcode
varvalue r -1

$overflow on
code auto:2380 add[Integer] 128[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2381 add[compile-time] 128[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -129;
endcode
varvalue r -1

$overflow off
code auto:2382 add[Integer] 128[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2383 add[compile-time] 128[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:2384 add[Integer] 128[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2385 add[compile-time] 128[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:2386 add[Integer] 128[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2387 add[compile-time] 128[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:2388 add[Integer] 128[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2389 add[compile-time] 128[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:2390 add[Integer] 128[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2391 add[compile-time] 128[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2392 add[Integer] 128[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2393 add[compile-time] 128[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2394 add[Integer] 128[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2395 add[compile-time] 128[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:2396 add[Integer] 128[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:2397 add[compile-time] 128[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:2398 add[Integer] 128[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2399 add[compile-time] 128[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:2400 add[Integer] 128[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2401 add[compile-time] 128[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:2402 add[Integer] 128[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2403 add[compile-time] 128[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:2404 add[Integer] 128[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2405 add[compile-time] 128[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:2406 add[Integer] 128[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:2407 add[compile-time] 128[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:2408 add[Integer] 128[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2409 add[compile-time] 128[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow off
code auto:2410 add[Integer] 255[Byte], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:2411 add[compile-time] 255[Byte], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -32768;
endcode
varvalue r -32513

$overflow on
code auto:2412 add[Integer] 255[Byte], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:2413 add[compile-time] 255[Byte], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -32768;
endcode
varvalue r -32513

$overflow off
code auto:2414 add[Integer] 255[Byte], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:2415 add[compile-time] 255[Byte], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -32767;
endcode
varvalue r -32512

$overflow on
code auto:2416 add[Integer] 255[Byte], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:2417 add[compile-time] 255[Byte], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -32767;
endcode
varvalue r -32512

$overflow off
code auto:2418 add[Integer] 255[Byte], -129[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2419 add[compile-time] 255[Byte], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow on
code auto:2420 add[Integer] 255[Byte], -129[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2421 add[compile-time] 255[Byte], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow off
code auto:2422 add[Integer] 255[Byte], -128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2423 add[compile-time] 255[Byte], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:2424 add[Integer] 255[Byte], -128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2425 add[compile-time] 255[Byte], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:2426 add[Integer] 255[Byte], -1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2427 add[compile-time] 255[Byte], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:2428 add[Integer] 255[Byte], -1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2429 add[compile-time] 255[Byte], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:2430 add[Integer] 255[Byte], 0[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2431 add[compile-time] 255[Byte], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2432 add[Integer] 255[Byte], 0[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2433 add[compile-time] 255[Byte], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2434 add[Integer] 255[Byte], 1[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2435 add[compile-time] 255[Byte], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:2436 add[Integer] 255[Byte], 1[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2437 add[compile-time] 255[Byte], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:2438 add[Integer] 255[Byte], 127[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2439 add[compile-time] 255[Byte], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:2440 add[Integer] 255[Byte], 127[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2441 add[compile-time] 255[Byte], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:2442 add[Integer] 255[Byte], 128[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:2443 add[compile-time] 255[Byte], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:2444 add[Integer] 255[Byte], 128[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:2445 add[compile-time] 255[Byte], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:2446 add[Integer] 255[Byte], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:2447 add[compile-time] 255[Byte], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:2448 add[Integer] 255[Byte], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2449 add[compile-time] 255[Byte], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:2450 add[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:2451 add[Byte] 0[Byte], 0[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 0

code auto:2452 add[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 0

code auto:2453 add[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2454 add[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:2455 add[Byte] 0[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 0

code auto:2456 add[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 0

code auto:2457 add[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2458 add[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:2459 add[Byte] 0[Byte], 1[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 1

code auto:2460 add[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 1

code auto:2461 add[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:2462 add[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:2463 add[Byte] 0[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 1

code auto:2464 add[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 1

code auto:2465 add[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:2466 add[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2467 add[Byte] 0[Byte], 127[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 127

code auto:2468 add[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 127

code auto:2469 add[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:2470 add[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2471 add[Byte] 0[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 127

code auto:2472 add[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 127

code auto:2473 add[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:2474 add[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2475 add[Byte] 0[Byte], 128[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 128

code auto:2476 add[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 128

code auto:2477 add[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:2478 add[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2479 add[Byte] 0[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 128

code auto:2480 add[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 128

code auto:2481 add[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:2482 add[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2483 add[Byte] 0[Byte], 255[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 255

code auto:2484 add[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 255

code auto:2485 add[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:2486 add[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2487 add[Byte] 0[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 255

code auto:2488 add[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 255

code auto:2489 add[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:2490 add[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:2491 add[Byte] 1[Byte], 0[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 1

code auto:2492 add[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 1

code auto:2493 add[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2494 add[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:2495 add[Byte] 1[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 1

code auto:2496 add[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 1

code auto:2497 add[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2498 add[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:2499 add[Byte] 1[Byte], 1[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 2

code auto:2500 add[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 2

code auto:2501 add[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:2502 add[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:2503 add[Byte] 1[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 2

code auto:2504 add[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 2

code auto:2505 add[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:2506 add[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2507 add[Byte] 1[Byte], 127[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 128

code auto:2508 add[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 128

code auto:2509 add[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:2510 add[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2511 add[Byte] 1[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 128

code auto:2512 add[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 128

code auto:2513 add[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:2514 add[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:2515 add[Byte] 1[Byte], 128[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 129

code auto:2516 add[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 129

code auto:2517 add[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:2518 add[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:2519 add[Byte] 1[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 129

code auto:2520 add[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 129

code auto:2521 add[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:2522 add[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:2523 add[Byte] 1[Byte], 255[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 0

code auto:2524 add[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 0

code auto:2525 add[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 255;
endcode
compile error

$overflow on
code auto:2526 add[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2527 add[Byte] 1[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 1 + b;
endcode
runtime overflow

code auto:2528 add[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:2529 add[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 255;
endcode
compile error

$overflow off
code auto:2530 add[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2531 add[Byte] 127[Byte], 0[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 127

code auto:2532 add[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 127

code auto:2533 add[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2534 add[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2535 add[Byte] 127[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 127

code auto:2536 add[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 127

code auto:2537 add[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2538 add[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2539 add[Byte] 127[Byte], 1[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 128

code auto:2540 add[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 128

code auto:2541 add[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:2542 add[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2543 add[Byte] 127[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 128

code auto:2544 add[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 128

code auto:2545 add[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:2546 add[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:2547 add[Byte] 127[Byte], 127[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 254

code auto:2548 add[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 254

code auto:2549 add[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:2550 add[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:2551 add[Byte] 127[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 254

code auto:2552 add[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 254

code auto:2553 add[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:2554 add[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2555 add[Byte] 127[Byte], 128[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 255

code auto:2556 add[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 255

code auto:2557 add[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:2558 add[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2559 add[Byte] 127[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 255

code auto:2560 add[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 255

code auto:2561 add[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:2562 add[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:2563 add[Byte] 127[Byte], 255[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 126

code auto:2564 add[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 126

code auto:2565 add[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 255;
endcode
compile error

$overflow on
code auto:2566 add[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2567 add[Byte] 127[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 127 + b;
endcode
runtime overflow

code auto:2568 add[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:2569 add[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 255;
endcode
compile error

$overflow off
code auto:2570 add[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2571 add[Byte] 128[Byte], 0[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 128

code auto:2572 add[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 128

code auto:2573 add[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2574 add[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:2575 add[Byte] 128[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 128

code auto:2576 add[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 128

code auto:2577 add[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2578 add[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:2579 add[Byte] 128[Byte], 1[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 129

code auto:2580 add[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 129

code auto:2581 add[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:2582 add[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:2583 add[Byte] 128[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 129

code auto:2584 add[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 129

code auto:2585 add[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:2586 add[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2587 add[Byte] 128[Byte], 127[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 255

code auto:2588 add[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 255

code auto:2589 add[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:2590 add[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2591 add[Byte] 128[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 255

code auto:2592 add[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 255

code auto:2593 add[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:2594 add[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:2595 add[Byte] 128[Byte], 128[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 0

code auto:2596 add[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 0

code auto:2597 add[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 128;
endcode
compile error

$overflow on
code auto:2598 add[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2599 add[Byte] 128[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 128 + b;
endcode
runtime overflow

code auto:2600 add[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 128;
endcode
runtime overflow

code auto:2601 add[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 128;
endcode
compile error

$overflow off
code auto:2602 add[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2603 add[Byte] 128[Byte], 255[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 127

code auto:2604 add[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 127

code auto:2605 add[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 255;
endcode
compile error

$overflow on
code auto:2606 add[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2607 add[Byte] 128[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 128 + b;
endcode
runtime overflow

code auto:2608 add[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:2609 add[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 255;
endcode
compile error

$overflow off
code auto:2610 add[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2611 add[Byte] 255[Byte], 0[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 255

code auto:2612 add[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 255

code auto:2613 add[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2614 add[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:2615 add[Byte] 255[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 255

code auto:2616 add[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 255

code auto:2617 add[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2618 add[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:2619 add[Byte] 255[Byte], 1[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 0

code auto:2620 add[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 0

code auto:2621 add[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 1;
endcode
compile error

$overflow on
code auto:2622 add[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2623 add[Byte] 255[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:2624 add[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 1;
endcode
runtime overflow

code auto:2625 add[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 1;
endcode
compile error

$overflow off
code auto:2626 add[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:2627 add[Byte] 255[Byte], 127[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 126

code auto:2628 add[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 126

code auto:2629 add[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 127;
endcode
compile error

$overflow on
code auto:2630 add[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2631 add[Byte] 255[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:2632 add[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 127;
endcode
runtime overflow

code auto:2633 add[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 127;
endcode
compile error

$overflow off
code auto:2634 add[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:2635 add[Byte] 255[Byte], 128[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 127

code auto:2636 add[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 127

code auto:2637 add[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 128;
endcode
compile error

$overflow on
code auto:2638 add[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2639 add[Byte] 255[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:2640 add[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 128;
endcode
runtime overflow

code auto:2641 add[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 128;
endcode
compile error

$overflow off
code auto:2642 add[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:2643 add[Byte] 255[Byte], 255[Byte] -> [Byte] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 254

code auto:2644 add[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 254

code auto:2645 add[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:2646 add[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:2647 add[Byte] 255[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:2648 add[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:2649 add[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:2650 add[Word] 0[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:2651 add[compile-time] 0[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2652 add[Word] 0[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:2653 add[compile-time] 0[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2654 add[Word] 0[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:2655 add[compile-time] 0[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:2656 add[Word] 0[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:2657 add[compile-time] 0[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:2658 add[Word] 0[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:2659 add[compile-time] 0[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:2660 add[Word] 0[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:2661 add[compile-time] 0[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:2662 add[Word] 0[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:2663 add[compile-time] 0[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:2664 add[Word] 0[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:2665 add[compile-time] 0[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:2666 add[Word] 0[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:2667 add[compile-time] 0[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:2668 add[Word] 0[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:2669 add[compile-time] 0[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:2670 add[Word] 1[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:2671 add[compile-time] 1[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2672 add[Word] 1[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:2673 add[compile-time] 1[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2674 add[Word] 1[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:2675 add[compile-time] 1[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:2676 add[Word] 1[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:2677 add[compile-time] 1[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:2678 add[Word] 1[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:2679 add[compile-time] 1[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow on
code auto:2680 add[Word] 1[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:2681 add[compile-time] 1[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow off
code auto:2682 add[Word] 1[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:2683 add[compile-time] 1[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow on
code auto:2684 add[Word] 1[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:2685 add[compile-time] 1[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow off
code auto:2686 add[Word] 1[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:2687 add[compile-time] 1[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:2688 add[Word] 1[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:2689 add[compile-time] 1[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:2690 add[Word] 127[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:2691 add[compile-time] 127[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2692 add[Word] 127[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:2693 add[compile-time] 127[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2694 add[Word] 127[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 382

code auto:2695 add[compile-time] 127[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:2696 add[Word] 127[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 382

code auto:2697 add[compile-time] 127[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:2698 add[Word] 127[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:2699 add[compile-time] 127[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow on
code auto:2700 add[Word] 127[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:2701 add[compile-time] 127[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow off
code auto:2702 add[Word] 127[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:2703 add[compile-time] 127[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow on
code auto:2704 add[Word] 127[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:2705 add[compile-time] 127[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow off
code auto:2706 add[Word] 127[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:2707 add[compile-time] 127[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:2708 add[Word] 127[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:2709 add[compile-time] 127[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:2710 add[Word] 128[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:2711 add[compile-time] 128[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2712 add[Word] 128[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:2713 add[compile-time] 128[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2714 add[Word] 128[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 383

code auto:2715 add[compile-time] 128[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:2716 add[Word] 128[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 383

code auto:2717 add[compile-time] 128[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:2718 add[Word] 128[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:2719 add[compile-time] 128[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow on
code auto:2720 add[Word] 128[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:2721 add[compile-time] 128[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow off
code auto:2722 add[Word] 128[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:2723 add[compile-time] 128[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow on
code auto:2724 add[Word] 128[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:2725 add[compile-time] 128[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow off
code auto:2726 add[Word] 128[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:2727 add[compile-time] 128[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 65535;
endcode
compile error

$overflow on
code auto:2728 add[Word] 128[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:2729 add[compile-time] 128[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 65535;
endcode
compile error

$overflow off
code auto:2730 add[Word] 255[Byte], 0[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:2731 add[compile-time] 255[Byte], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2732 add[Word] 255[Byte], 0[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:2733 add[compile-time] 255[Byte], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2734 add[Word] 255[Byte], 255[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:2735 add[compile-time] 255[Byte], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:2736 add[Word] 255[Byte], 255[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:2737 add[compile-time] 255[Byte], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:2738 add[Word] 255[Byte], 32767[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:2739 add[compile-time] 255[Byte], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:2740 add[Word] 255[Byte], 32767[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:2741 add[compile-time] 255[Byte], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:2742 add[Word] 255[Byte], 32768[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:2743 add[compile-time] 255[Byte], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:2744 add[Word] 255[Byte], 32768[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:2745 add[compile-time] 255[Byte], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:2746 add[Word] 255[Byte], 65535[Word] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:2747 add[compile-time] 255[Byte], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:2748 add[Word] 255[Byte], 65535[Word] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:2749 add[compile-time] 255[Byte], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:2750 add[Pointer] 0[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2751 add[compile-time] 0[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2752 add[Pointer] 0[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2753 add[compile-time] 0[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2754 add[Pointer] 0[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2755 add[compile-time] 0[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:2756 add[Pointer] 0[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2757 add[compile-time] 0[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:2758 add[Pointer] 0[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2759 add[compile-time] 0[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:2760 add[Pointer] 0[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:2761 add[compile-time] 0[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:2762 add[Pointer] 0[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2763 add[compile-time] 0[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:2764 add[Pointer] 0[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2765 add[compile-time] 0[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:2766 add[Pointer] 0[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2767 add[compile-time] 0[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:2768 add[Pointer] 0[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:2769 add[compile-time] 0[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:2770 add[Pointer] 1[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:2771 add[compile-time] 1[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:2772 add[Pointer] 1[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:2773 add[compile-time] 1[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:2774 add[Pointer] 1[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:2775 add[compile-time] 1[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:2776 add[Pointer] 1[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:2777 add[compile-time] 1[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:2778 add[Pointer] 1[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2779 add[compile-time] 1[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow on
code auto:2780 add[Pointer] 1[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:2781 add[compile-time] 1[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow off
code auto:2782 add[Pointer] 1[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:2783 add[compile-time] 1[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow on
code auto:2784 add[Pointer] 1[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:2785 add[compile-time] 1[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 32768;
endcode
varvalue r 32769

$overflow off
code auto:2786 add[Pointer] 1[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:2787 add[compile-time] 1[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow on
code auto:2788 add[Pointer] 1[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 1;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2789 add[compile-time] 1[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 1 + 65535;
endcode
compile error

$overflow off
code auto:2790 add[Pointer] 127[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2791 add[compile-time] 127[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:2792 add[Pointer] 127[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2793 add[compile-time] 127[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:2794 add[Pointer] 127[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:2795 add[compile-time] 127[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:2796 add[Pointer] 127[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:2797 add[compile-time] 127[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:2798 add[Pointer] 127[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:2799 add[compile-time] 127[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow on
code auto:2800 add[Pointer] 127[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:2801 add[compile-time] 127[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow off
code auto:2802 add[Pointer] 127[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2803 add[compile-time] 127[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow on
code auto:2804 add[Pointer] 127[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2805 add[compile-time] 127[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 32768;
endcode
varvalue r 32895

$overflow off
code auto:2806 add[Pointer] 127[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:2807 add[compile-time] 127[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow on
code auto:2808 add[Pointer] 127[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 127;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2809 add[compile-time] 127[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 127 + 65535;
endcode
compile error

$overflow off
code auto:2810 add[Pointer] 128[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:2811 add[compile-time] 128[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:2812 add[Pointer] 128[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:2813 add[compile-time] 128[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:2814 add[Pointer] 128[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:2815 add[compile-time] 128[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:2816 add[Pointer] 128[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:2817 add[compile-time] 128[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:2818 add[Pointer] 128[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2819 add[compile-time] 128[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow on
code auto:2820 add[Pointer] 128[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:2821 add[compile-time] 128[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow off
code auto:2822 add[Pointer] 128[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:2823 add[compile-time] 128[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow on
code auto:2824 add[Pointer] 128[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:2825 add[compile-time] 128[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 32768;
endcode
varvalue r 32896

$overflow off
code auto:2826 add[Pointer] 128[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:2827 add[compile-time] 128[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 128 + 65535;
endcode
compile error

$overflow on
code auto:2828 add[Pointer] 128[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 128;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2829 add[compile-time] 128[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 128 + 65535;
endcode
compile error

$overflow off
code auto:2830 add[Pointer] 255[Byte], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2831 add[compile-time] 255[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2832 add[Pointer] 255[Byte], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:2833 add[compile-time] 255[Byte], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2834 add[Pointer] 255[Byte], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:2835 add[compile-time] 255[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:2836 add[Pointer] 255[Byte], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:2837 add[compile-time] 255[Byte], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:2838 add[Pointer] 255[Byte], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:2839 add[compile-time] 255[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:2840 add[Pointer] 255[Byte], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:2841 add[compile-time] 255[Byte], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:2842 add[Pointer] 255[Byte], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:2843 add[compile-time] 255[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:2844 add[Pointer] 255[Byte], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:2845 add[compile-time] 255[Byte], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:2846 add[Pointer] 255[Byte], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:2847 add[compile-time] 255[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:2848 add[Pointer] 255[Byte], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Byte = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:2849 add[compile-time] 255[Byte], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:2850 add[Integer] 0[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2851 add[compile-time] 0[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:2852 add[Integer] 0[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2853 add[compile-time] 0[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:2854 add[Integer] 0[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2855 add[compile-time] 0[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:2856 add[Integer] 0[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:2857 add[compile-time] 0[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow off
code auto:2858 add[Integer] 0[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2859 add[compile-time] 0[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:2860 add[Integer] 0[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2861 add[compile-time] 0[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:2862 add[Integer] 0[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2863 add[compile-time] 0[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2864 add[Integer] 0[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2865 add[compile-time] 0[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2866 add[Integer] 0[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2867 add[compile-time] 0[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:2868 add[Integer] 0[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2869 add[compile-time] 0[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:2870 add[Integer] 0[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2871 add[compile-time] 0[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:2872 add[Integer] 0[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2873 add[compile-time] 0[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:2874 add[Integer] 255[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2875 add[compile-time] 255[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:2876 add[Integer] 255[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2877 add[compile-time] 255[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:2878 add[Integer] 255[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2879 add[compile-time] 255[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow on
code auto:2880 add[Integer] 255[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:2881 add[compile-time] 255[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow off
code auto:2882 add[Integer] 255[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2883 add[compile-time] 255[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:2884 add[Integer] 255[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:2885 add[compile-time] 255[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:2886 add[Integer] 255[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2887 add[compile-time] 255[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:2888 add[Integer] 255[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:2889 add[compile-time] 255[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:2890 add[Integer] 255[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2891 add[compile-time] 255[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:2892 add[Integer] 255[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:2893 add[compile-time] 255[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:2894 add[Integer] 255[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2895 add[compile-time] 255[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:2896 add[Integer] 255[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:2897 add[compile-time] 255[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:2898 add[Integer] 32767[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:2899 add[compile-time] 32767[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:2900 add[Integer] 32767[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:2901 add[compile-time] 32767[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:2902 add[Integer] 32767[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:2903 add[compile-time] 32767[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow on
code auto:2904 add[Integer] 32767[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:2905 add[compile-time] 32767[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow off
code auto:2906 add[Integer] 32767[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:2907 add[compile-time] 32767[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:2908 add[Integer] 32767[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:2909 add[compile-time] 32767[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:2910 add[Integer] 32767[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2911 add[compile-time] 32767[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:2912 add[Integer] 32767[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2913 add[compile-time] 32767[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:2914 add[Integer] 32767[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2915 add[compile-time] 32767[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:2916 add[Integer] 32767[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2917 add[compile-time] 32767[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:2918 add[Integer] 32767[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:2919 add[compile-time] 32767[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:2920 add[Integer] 32767[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2921 add[compile-time] 32767[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:2922 add[Integer] 32768[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:2923 add[compile-time] 32768[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow on
code auto:2924 add[Integer] 32768[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:2925 add[compile-time] 32768[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow off
code auto:2926 add[Integer] 32768[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:2927 add[compile-time] 32768[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -127;
endcode
varvalue r 32641

$overflow on
code auto:2928 add[Integer] 32768[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32641

code auto:2929 add[compile-time] 32768[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -127;
endcode
varvalue r 32641

$overflow off
code auto:2930 add[Integer] 32768[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2931 add[compile-time] 32768[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow on
code auto:2932 add[Integer] 32768[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:2933 add[compile-time] 32768[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow off
code auto:2934 add[Integer] 32768[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2935 add[compile-time] 32768[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:2936 add[Integer] 32768[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2937 add[compile-time] 32768[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:2938 add[Integer] 32768[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2939 add[compile-time] 32768[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 1;
endcode
compile error

$overflow on
code auto:2940 add[Integer] 32768[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2941 add[compile-time] 32768[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 1;
endcode
compile error

$overflow off
code auto:2942 add[Integer] 32768[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:2943 add[compile-time] 32768[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 127;
endcode
compile error

$overflow on
code auto:2944 add[Integer] 32768[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2945 add[compile-time] 32768[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 127;
endcode
compile error

$overflow off
code auto:2946 add[Integer] 65535[Word], -128[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:2947 add[compile-time] 65535[Word], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -128;
endcode
compile error

$overflow on
code auto:2948 add[Integer] 65535[Word], -128[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2949 add[compile-time] 65535[Word], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -128;
endcode
compile error

$overflow off
code auto:2950 add[Integer] 65535[Word], -127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2951 add[compile-time] 65535[Word], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -127;
endcode
compile error

$overflow on
code auto:2952 add[Integer] 65535[Word], -127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2953 add[compile-time] 65535[Word], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -127;
endcode
compile error

$overflow off
code auto:2954 add[Integer] 65535[Word], -1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:2955 add[compile-time] 65535[Word], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -1;
endcode
compile error

$overflow on
code auto:2956 add[Integer] 65535[Word], -1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2957 add[compile-time] 65535[Word], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -1;
endcode
compile error

$overflow off
code auto:2958 add[Integer] 65535[Word], 0[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2959 add[compile-time] 65535[Word], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:2960 add[Integer] 65535[Word], 0[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2961 add[compile-time] 65535[Word], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:2962 add[Integer] 65535[Word], 1[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2963 add[compile-time] 65535[Word], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:2964 add[Integer] 65535[Word], 1[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2965 add[compile-time] 65535[Word], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:2966 add[Integer] 65535[Word], 127[Int8] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:2967 add[compile-time] 65535[Word], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:2968 add[Integer] 65535[Word], 127[Int8] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:2969 add[compile-time] 65535[Word], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:2970 add[Integer] 0[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2971 add[compile-time] 0[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow on
code auto:2972 add[Integer] 0[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:2973 add[compile-time] 0[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow off
code auto:2974 add[Integer] 0[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2975 add[compile-time] 0[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow on
code auto:2976 add[Integer] 0[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:2977 add[compile-time] 0[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow off
code auto:2978 add[Integer] 0[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:2979 add[compile-time] 0[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow on
code auto:2980 add[Integer] 0[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:2981 add[compile-time] 0[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow off
code auto:2982 add[Integer] 0[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2983 add[compile-time] 0[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:2984 add[Integer] 0[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:2985 add[compile-time] 0[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:2986 add[Integer] 0[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2987 add[compile-time] 0[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:2988 add[Integer] 0[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:2989 add[compile-time] 0[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:2990 add[Integer] 0[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2991 add[compile-time] 0[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:2992 add[Integer] 0[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:2993 add[compile-time] 0[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:2994 add[Integer] 0[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2995 add[compile-time] 0[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:2996 add[Integer] 0[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:2997 add[compile-time] 0[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:2998 add[Integer] 0[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:2999 add[compile-time] 0[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:3000 add[Integer] 0[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:3001 add[compile-time] 0[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:3002 add[Integer] 0[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:3003 add[compile-time] 0[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:3004 add[Integer] 0[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:3005 add[compile-time] 0[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:3006 add[Integer] 0[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3007 add[compile-time] 0[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:3008 add[Integer] 0[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3009 add[compile-time] 0[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:3010 add[Integer] 255[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:3011 add[compile-time] 255[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -32768;
endcode
varvalue r -32513

$overflow on
code auto:3012 add[Integer] 255[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:3013 add[compile-time] 255[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -32768;
endcode
varvalue r -32513

$overflow off
code auto:3014 add[Integer] 255[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:3015 add[compile-time] 255[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -32767;
endcode
varvalue r -32512

$overflow on
code auto:3016 add[Integer] 255[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32512

code auto:3017 add[compile-time] 255[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -32767;
endcode
varvalue r -32512

$overflow off
code auto:3018 add[Integer] 255[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:3019 add[compile-time] 255[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow on
code auto:3020 add[Integer] 255[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:3021 add[compile-time] 255[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow off
code auto:3022 add[Integer] 255[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:3023 add[compile-time] 255[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:3024 add[Integer] 255[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:3025 add[compile-time] 255[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:3026 add[Integer] 255[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:3027 add[compile-time] 255[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:3028 add[Integer] 255[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:3029 add[compile-time] 255[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:3030 add[Integer] 255[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:3031 add[compile-time] 255[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3032 add[Integer] 255[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:3033 add[compile-time] 255[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3034 add[Integer] 255[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:3035 add[compile-time] 255[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:3036 add[Integer] 255[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:3037 add[compile-time] 255[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:3038 add[Integer] 255[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:3039 add[compile-time] 255[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:3040 add[Integer] 255[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 382

code auto:3041 add[compile-time] 255[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:3042 add[Integer] 255[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:3043 add[compile-time] 255[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:3044 add[Integer] 255[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 383

code auto:3045 add[compile-time] 255[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:3046 add[Integer] 255[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:3047 add[compile-time] 255[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:3048 add[Integer] 255[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3049 add[compile-time] 255[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:3050 add[Integer] 32767[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:3051 add[compile-time] 32767[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow on
code auto:3052 add[Integer] 32767[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:3053 add[compile-time] 32767[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow off
code auto:3054 add[Integer] 32767[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:3055 add[compile-time] 32767[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:3056 add[Integer] 32767[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:3057 add[compile-time] 32767[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:3058 add[Integer] 32767[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:3059 add[compile-time] 32767[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow on
code auto:3060 add[Integer] 32767[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:3061 add[compile-time] 32767[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow off
code auto:3062 add[Integer] 32767[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:3063 add[compile-time] 32767[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:3064 add[Integer] 32767[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:3065 add[compile-time] 32767[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:3066 add[Integer] 32767[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:3067 add[compile-time] 32767[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:3068 add[Integer] 32767[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:3069 add[compile-time] 32767[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:3070 add[Integer] 32767[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3071 add[compile-time] 32767[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3072 add[Integer] 32767[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3073 add[compile-time] 32767[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3074 add[Integer] 32767[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:3075 add[compile-time] 32767[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:3076 add[Integer] 32767[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3077 add[compile-time] 32767[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:3078 add[Integer] 32767[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32642

code auto:3079 add[compile-time] 32767[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:3080 add[Integer] 32767[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3081 add[compile-time] 32767[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:3082 add[Integer] 32767[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:3083 add[compile-time] 32767[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:3084 add[Integer] 32767[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3085 add[compile-time] 32767[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow off
code auto:3086 add[Integer] 32767[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:3087 add[compile-time] 32767[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:3088 add[Integer] 32767[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3089 add[compile-time] 32767[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:3090 add[Integer] 32768[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:3091 add[compile-time] 32768[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -32768;
endcode
varvalue r 0

$overflow on
code auto:3092 add[Integer] 32768[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:3093 add[compile-time] 32768[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -32768;
endcode
varvalue r 0

$overflow off
code auto:3094 add[Integer] 32768[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:3095 add[compile-time] 32768[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -32767;
endcode
varvalue r 1

$overflow on
code auto:3096 add[Integer] 32768[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:3097 add[compile-time] 32768[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -32767;
endcode
varvalue r 1

$overflow off
code auto:3098 add[Integer] 32768[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:3099 add[compile-time] 32768[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -129;
endcode
varvalue r 32639

$overflow on
code auto:3100 add[Integer] 32768[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:3101 add[compile-time] 32768[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -129;
endcode
varvalue r 32639

$overflow off
code auto:3102 add[Integer] 32768[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:3103 add[compile-time] 32768[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow on
code auto:3104 add[Integer] 32768[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32640

code auto:3105 add[compile-time] 32768[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow off
code auto:3106 add[Integer] 32768[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3107 add[compile-time] 32768[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow on
code auto:3108 add[Integer] 32768[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3109 add[compile-time] 32768[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow off
code auto:3110 add[Integer] 32768[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:3111 add[compile-time] 32768[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:3112 add[Integer] 32768[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3113 add[compile-time] 32768[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:3114 add[Integer] 32768[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:3115 add[compile-time] 32768[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 1;
endcode
compile error

$overflow on
code auto:3116 add[Integer] 32768[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3117 add[compile-time] 32768[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 1;
endcode
compile error

$overflow off
code auto:3118 add[Integer] 32768[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:3119 add[compile-time] 32768[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 127;
endcode
compile error

$overflow on
code auto:3120 add[Integer] 32768[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3121 add[compile-time] 32768[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 127;
endcode
compile error

$overflow off
code auto:3122 add[Integer] 32768[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:3123 add[compile-time] 32768[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 128;
endcode
compile error

$overflow on
code auto:3124 add[Integer] 32768[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3125 add[compile-time] 32768[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 128;
endcode
compile error

$overflow off
code auto:3126 add[Integer] 32768[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:3127 add[compile-time] 32768[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:3128 add[Integer] 32768[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3129 add[compile-time] 32768[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:3130 add[Integer] 65535[Word], -32768[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3131 add[compile-time] 65535[Word], -32768[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -32768;
endcode
varvalue r 32767

$overflow on
code auto:3132 add[Integer] 65535[Word], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:3133 add[compile-time] 65535[Word], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -32768;
endcode
varvalue r 32767

$overflow off
code auto:3134 add[Integer] 65535[Word], -32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:3135 add[compile-time] 65535[Word], -32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -32767;
endcode
compile error

$overflow on
code auto:3136 add[Integer] 65535[Word], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3137 add[compile-time] 65535[Word], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -32767;
endcode
compile error

$overflow off
code auto:3138 add[Integer] 65535[Word], -129[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:3139 add[compile-time] 65535[Word], -129[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -129;
endcode
compile error

$overflow on
code auto:3140 add[Integer] 65535[Word], -129[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3141 add[compile-time] 65535[Word], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -129;
endcode
compile error

$overflow off
code auto:3142 add[Integer] 65535[Word], -128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:3143 add[compile-time] 65535[Word], -128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -128;
endcode
compile error

$overflow on
code auto:3144 add[Integer] 65535[Word], -128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3145 add[compile-time] 65535[Word], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -128;
endcode
compile error

$overflow off
code auto:3146 add[Integer] 65535[Word], -1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:3147 add[compile-time] 65535[Word], -1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + -1;
endcode
compile error

$overflow on
code auto:3148 add[Integer] 65535[Word], -1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3149 add[compile-time] 65535[Word], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + -1;
endcode
compile error

$overflow off
code auto:3150 add[Integer] 65535[Word], 0[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:3151 add[compile-time] 65535[Word], 0[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:3152 add[Integer] 65535[Word], 0[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3153 add[compile-time] 65535[Word], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:3154 add[Integer] 65535[Word], 1[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:3155 add[compile-time] 65535[Word], 1[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:3156 add[Integer] 65535[Word], 1[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3157 add[compile-time] 65535[Word], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:3158 add[Integer] 65535[Word], 127[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:3159 add[compile-time] 65535[Word], 127[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:3160 add[Integer] 65535[Word], 127[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3161 add[compile-time] 65535[Word], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:3162 add[Integer] 65535[Word], 128[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:3163 add[compile-time] 65535[Word], 128[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 128;
endcode
compile error

$overflow on
code auto:3164 add[Integer] 65535[Word], 128[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3165 add[compile-time] 65535[Word], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 128;
endcode
compile error

$overflow off
code auto:3166 add[Integer] 65535[Word], 32767[Integer] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:3167 add[compile-time] 65535[Word], 32767[Integer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:3168 add[Integer] 65535[Word], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:3169 add[compile-time] 65535[Word], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:3170 add[Word] 0[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3171 add[compile-time] 0[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3172 add[Word] 0[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3173 add[compile-time] 0[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3174 add[Word] 0[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:3175 add[compile-time] 0[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:3176 add[Word] 0[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:3177 add[compile-time] 0[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:3178 add[Word] 0[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:3179 add[compile-time] 0[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:3180 add[Word] 0[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:3181 add[compile-time] 0[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:3182 add[Word] 0[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:3183 add[compile-time] 0[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:3184 add[Word] 0[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:3185 add[compile-time] 0[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:3186 add[Word] 0[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3187 add[compile-time] 0[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3188 add[Word] 0[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3189 add[compile-time] 0[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3190 add[Word] 255[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3191 add[compile-time] 255[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3192 add[Word] 255[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3193 add[compile-time] 255[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3194 add[Word] 255[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:3195 add[compile-time] 255[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:3196 add[Word] 255[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:3197 add[compile-time] 255[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:3198 add[Word] 255[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 382

code auto:3199 add[compile-time] 255[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:3200 add[Word] 255[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 382

code auto:3201 add[compile-time] 255[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:3202 add[Word] 255[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 383

code auto:3203 add[compile-time] 255[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:3204 add[Word] 255[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 383

code auto:3205 add[compile-time] 255[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:3206 add[Word] 255[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:3207 add[compile-time] 255[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:3208 add[Word] 255[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:3209 add[compile-time] 255[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:3210 add[Word] 32767[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3211 add[compile-time] 32767[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3212 add[Word] 32767[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3213 add[compile-time] 32767[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3214 add[Word] 32767[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3215 add[compile-time] 32767[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow on
code auto:3216 add[Word] 32767[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3217 add[compile-time] 32767[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow off
code auto:3218 add[Word] 32767[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:3219 add[compile-time] 32767[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow on
code auto:3220 add[Word] 32767[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:3221 add[compile-time] 32767[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow off
code auto:3222 add[Word] 32767[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:3223 add[compile-time] 32767[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow on
code auto:3224 add[Word] 32767[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:3225 add[compile-time] 32767[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow off
code auto:3226 add[Word] 32767[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3227 add[compile-time] 32767[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:3228 add[Word] 32767[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3229 add[compile-time] 32767[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:3230 add[Word] 32768[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3231 add[compile-time] 32768[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3232 add[Word] 32768[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3233 add[compile-time] 32768[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3234 add[Word] 32768[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:3235 add[compile-time] 32768[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow on
code auto:3236 add[Word] 32768[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:3237 add[compile-time] 32768[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow off
code auto:3238 add[Word] 32768[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:3239 add[compile-time] 32768[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow on
code auto:3240 add[Word] 32768[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:3241 add[compile-time] 32768[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow off
code auto:3242 add[Word] 32768[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:3243 add[compile-time] 32768[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow on
code auto:3244 add[Word] 32768[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:3245 add[compile-time] 32768[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow off
code auto:3246 add[Word] 32768[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3247 add[compile-time] 32768[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:3248 add[Word] 32768[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3249 add[compile-time] 32768[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:3250 add[Word] 65535[Word], 0[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3251 add[compile-time] 65535[Word], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3252 add[Word] 65535[Word], 0[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3253 add[compile-time] 65535[Word], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3254 add[Word] 65535[Word], 1[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3255 add[compile-time] 65535[Word], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:3256 add[Word] 65535[Word], 1[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3257 add[compile-time] 65535[Word], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:3258 add[Word] 65535[Word], 127[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:3259 add[compile-time] 65535[Word], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:3260 add[Word] 65535[Word], 127[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3261 add[compile-time] 65535[Word], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:3262 add[Word] 65535[Word], 128[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:3263 add[compile-time] 65535[Word], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 128;
endcode
compile error

$overflow on
code auto:3264 add[Word] 65535[Word], 128[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3265 add[compile-time] 65535[Word], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 128;
endcode
compile error

$overflow off
code auto:3266 add[Word] 65535[Word], 255[Byte] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:3267 add[compile-time] 65535[Word], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:3268 add[Word] 65535[Word], 255[Byte] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3269 add[compile-time] 65535[Word], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:3270 add[Word] 0[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3271 add[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3272 add[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3273 add[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3274 add[Word] 0[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3275 add[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3276 add[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3277 add[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3278 add[Word] 0[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3279 add[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:3280 add[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3281 add[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:3282 add[Word] 0[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3283 add[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:3284 add[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3285 add[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:3286 add[Word] 0[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3287 add[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:3288 add[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3289 add[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:3290 add[Word] 255[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3291 add[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3292 add[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:3293 add[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3294 add[Word] 255[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:3295 add[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:3296 add[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:3297 add[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:3298 add[Word] 255[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3299 add[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:3300 add[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3301 add[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:3302 add[Word] 255[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3303 add[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:3304 add[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3305 add[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:3306 add[Word] 255[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:3307 add[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:3308 add[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3309 add[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:3310 add[Word] 32767[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3311 add[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3312 add[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3313 add[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3314 add[Word] 32767[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3315 add[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:3316 add[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:3317 add[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:3318 add[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:3319 add[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:3320 add[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:3321 add[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:3322 add[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3323 add[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:3324 add[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3325 add[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:3326 add[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:3327 add[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:3328 add[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3329 add[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:3330 add[Word] 32768[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3331 add[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3332 add[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:3333 add[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3334 add[Word] 32768[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3335 add[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:3336 add[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:3337 add[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:3338 add[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3339 add[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:3340 add[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3341 add[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:3342 add[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:3343 add[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:3344 add[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3345 add[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:3346 add[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3347 add[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:3348 add[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3349 add[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:3350 add[Word] 65535[Word], 0[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3351 add[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3352 add[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:3353 add[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3354 add[Word] 65535[Word], 255[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:3355 add[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:3356 add[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3357 add[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:3358 add[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:3359 add[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:3360 add[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3361 add[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:3362 add[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:3363 add[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:3364 add[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3365 add[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:3366 add[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:3367 add[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:3368 add[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:3369 add[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:3370 add[Pointer] 0[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3371 add[compile-time] 0[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3372 add[Pointer] 0[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3373 add[compile-time] 0[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3374 add[Pointer] 0[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3375 add[compile-time] 0[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3376 add[Pointer] 0[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3377 add[compile-time] 0[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3378 add[Pointer] 0[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3379 add[compile-time] 0[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:3380 add[Pointer] 0[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3381 add[compile-time] 0[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:3382 add[Pointer] 0[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3383 add[compile-time] 0[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:3384 add[Pointer] 0[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3385 add[compile-time] 0[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:3386 add[Pointer] 0[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3387 add[compile-time] 0[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:3388 add[Pointer] 0[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3389 add[compile-time] 0[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:3390 add[Pointer] 255[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3391 add[compile-time] 255[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3392 add[Pointer] 255[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3393 add[compile-time] 255[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3394 add[Pointer] 255[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3395 add[compile-time] 255[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:3396 add[Pointer] 255[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3397 add[compile-time] 255[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:3398 add[Pointer] 255[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3399 add[compile-time] 255[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:3400 add[Pointer] 255[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3401 add[compile-time] 255[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:3402 add[Pointer] 255[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3403 add[compile-time] 255[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:3404 add[Pointer] 255[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3405 add[compile-time] 255[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:3406 add[Pointer] 255[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3407 add[compile-time] 255[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:3408 add[Pointer] 255[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3409 add[compile-time] 255[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:3410 add[Pointer] 32767[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3411 add[compile-time] 32767[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3412 add[Pointer] 32767[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3413 add[compile-time] 32767[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3414 add[Pointer] 32767[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3415 add[compile-time] 32767[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:3416 add[Pointer] 32767[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3417 add[compile-time] 32767[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:3418 add[Pointer] 32767[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3419 add[compile-time] 32767[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:3420 add[Pointer] 32767[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3421 add[compile-time] 32767[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:3422 add[Pointer] 32767[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3423 add[compile-time] 32767[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:3424 add[Pointer] 32767[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3425 add[compile-time] 32767[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:3426 add[Pointer] 32767[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3427 add[compile-time] 32767[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:3428 add[Pointer] 32767[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3429 add[compile-time] 32767[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:3430 add[Pointer] 32768[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3431 add[compile-time] 32768[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3432 add[Pointer] 32768[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3433 add[compile-time] 32768[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3434 add[Pointer] 32768[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3435 add[compile-time] 32768[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:3436 add[Pointer] 32768[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3437 add[compile-time] 32768[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:3438 add[Pointer] 32768[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3439 add[compile-time] 32768[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:3440 add[Pointer] 32768[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3441 add[compile-time] 32768[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:3442 add[Pointer] 32768[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3443 add[compile-time] 32768[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:3444 add[Pointer] 32768[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3445 add[compile-time] 32768[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:3446 add[Pointer] 32768[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3447 add[compile-time] 32768[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:3448 add[Pointer] 32768[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3449 add[compile-time] 32768[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:3450 add[Pointer] 65535[Word], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3451 add[compile-time] 65535[Word], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3452 add[Pointer] 65535[Word], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3453 add[compile-time] 65535[Word], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3454 add[Pointer] 65535[Word], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3455 add[compile-time] 65535[Word], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:3456 add[Pointer] 65535[Word], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3457 add[compile-time] 65535[Word], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:3458 add[Pointer] 65535[Word], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3459 add[compile-time] 65535[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:3460 add[Pointer] 65535[Word], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3461 add[compile-time] 65535[Word], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:3462 add[Pointer] 65535[Word], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3463 add[compile-time] 65535[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:3464 add[Pointer] 65535[Word], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3465 add[compile-time] 65535[Word], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:3466 add[Pointer] 65535[Word], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3467 add[compile-time] 65535[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:3468 add[Pointer] 65535[Word], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Word = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3469 add[compile-time] 65535[Word], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:3470 add[Pointer] 0[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:3471 add[compile-time] 0[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:3472 add[Pointer] 0[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3473 add[compile-time] 0[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:3474 add[Pointer] 0[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65409

code auto:3475 add[compile-time] 0[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -127;
endcode
compile error

$overflow on
code auto:3476 add[Pointer] 0[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3477 add[compile-time] 0[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -127;
endcode
compile error

$overflow off
code auto:3478 add[Pointer] 0[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3479 add[compile-time] 0[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:3480 add[Pointer] 0[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3481 add[compile-time] 0[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:3482 add[Pointer] 0[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3483 add[compile-time] 0[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3484 add[Pointer] 0[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3485 add[compile-time] 0[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3486 add[Pointer] 0[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3487 add[compile-time] 0[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:3488 add[Pointer] 0[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3489 add[compile-time] 0[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:3490 add[Pointer] 0[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3491 add[compile-time] 0[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:3492 add[Pointer] 0[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3493 add[compile-time] 0[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:3494 add[Pointer] 255[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3495 add[compile-time] 255[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:3496 add[Pointer] 255[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3497 add[compile-time] 255[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:3498 add[Pointer] 255[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3499 add[compile-time] 255[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow on
code auto:3500 add[Pointer] 255[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3501 add[compile-time] 255[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -127;
endcode
varvalue r 128

$overflow off
code auto:3502 add[Pointer] 255[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3503 add[compile-time] 255[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:3504 add[Pointer] 255[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3505 add[compile-time] 255[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:3506 add[Pointer] 255[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3507 add[compile-time] 255[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3508 add[Pointer] 255[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3509 add[compile-time] 255[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3510 add[Pointer] 255[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3511 add[compile-time] 255[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:3512 add[Pointer] 255[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3513 add[compile-time] 255[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:3514 add[Pointer] 255[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3515 add[compile-time] 255[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:3516 add[Pointer] 255[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3517 add[compile-time] 255[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:3518 add[Pointer] 32767[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3519 add[compile-time] 32767[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:3520 add[Pointer] 32767[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3521 add[compile-time] 32767[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:3522 add[Pointer] 32767[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3523 add[compile-time] 32767[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow on
code auto:3524 add[Pointer] 32767[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3525 add[compile-time] 32767[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -127;
endcode
varvalue r 32640

$overflow off
code auto:3526 add[Pointer] 32767[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3527 add[compile-time] 32767[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:3528 add[Pointer] 32767[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3529 add[compile-time] 32767[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:3530 add[Pointer] 32767[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3531 add[compile-time] 32767[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3532 add[Pointer] 32767[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3533 add[compile-time] 32767[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3534 add[Pointer] 32767[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3535 add[compile-time] 32767[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow on
code auto:3536 add[Pointer] 32767[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3537 add[compile-time] 32767[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow off
code auto:3538 add[Pointer] 32767[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3539 add[compile-time] 32767[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow on
code auto:3540 add[Pointer] 32767[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3541 add[compile-time] 32767[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow off
code auto:3542 add[Pointer] 32768[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3543 add[compile-time] 32768[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow on
code auto:3544 add[Pointer] 32768[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3545 add[compile-time] 32768[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow off
code auto:3546 add[Pointer] 32768[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32641

code auto:3547 add[compile-time] 32768[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -127;
endcode
varvalue r 32641

$overflow on
code auto:3548 add[Pointer] 32768[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32641

code auto:3549 add[compile-time] 32768[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -127;
endcode
varvalue r 32641

$overflow off
code auto:3550 add[Pointer] 32768[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3551 add[compile-time] 32768[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow on
code auto:3552 add[Pointer] 32768[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3553 add[compile-time] 32768[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow off
code auto:3554 add[Pointer] 32768[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3555 add[compile-time] 32768[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3556 add[Pointer] 32768[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3557 add[compile-time] 32768[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3558 add[Pointer] 32768[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3559 add[compile-time] 32768[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow on
code auto:3560 add[Pointer] 32768[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3561 add[compile-time] 32768[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow off
code auto:3562 add[Pointer] 32768[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3563 add[compile-time] 32768[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow on
code auto:3564 add[Pointer] 32768[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3565 add[compile-time] 32768[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow off
code auto:3566 add[Pointer] 65535[Pointer], -128[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:3567 add[compile-time] 65535[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -128;
endcode
varvalue r 65407

$overflow on
code auto:3568 add[Pointer] 65535[Pointer], -128[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:3569 add[compile-time] 65535[Pointer], -128[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -128;
endcode
varvalue r 65407

$overflow off
code auto:3570 add[Pointer] 65535[Pointer], -127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:3571 add[compile-time] 65535[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -127;
endcode
varvalue r 65408

$overflow on
code auto:3572 add[Pointer] 65535[Pointer], -127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:3573 add[compile-time] 65535[Pointer], -127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -127;
endcode
varvalue r 65408

$overflow off
code auto:3574 add[Pointer] 65535[Pointer], -1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3575 add[compile-time] 65535[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -1;
endcode
varvalue r 65534

$overflow on
code auto:3576 add[Pointer] 65535[Pointer], -1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3577 add[compile-time] 65535[Pointer], -1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -1;
endcode
varvalue r 65534

$overflow off
code auto:3578 add[Pointer] 65535[Pointer], 0[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3579 add[compile-time] 65535[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3580 add[Pointer] 65535[Pointer], 0[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3581 add[compile-time] 65535[Pointer], 0[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3582 add[Pointer] 65535[Pointer], 1[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3583 add[compile-time] 65535[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:3584 add[Pointer] 65535[Pointer], 1[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 1;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3585 add[compile-time] 65535[Pointer], 1[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:3586 add[Pointer] 65535[Pointer], 127[Int8] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:3587 add[compile-time] 65535[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:3588 add[Pointer] 65535[Pointer], 127[Int8] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Int8 = 127;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3589 add[compile-time] 65535[Pointer], 127[Int8] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:3590 add[Pointer] 0[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3591 add[compile-time] 0[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -32768;
endcode
compile error

$overflow on
code auto:3592 add[Pointer] 0[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3593 add[compile-time] 0[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -32768;
endcode
compile error

$overflow off
code auto:3594 add[Pointer] 0[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3595 add[compile-time] 0[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -32767;
endcode
compile error

$overflow on
code auto:3596 add[Pointer] 0[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3597 add[compile-time] 0[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -32767;
endcode
compile error

$overflow off
code auto:3598 add[Pointer] 0[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:3599 add[compile-time] 0[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -129;
endcode
compile error

$overflow on
code auto:3600 add[Pointer] 0[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3601 add[compile-time] 0[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -129;
endcode
compile error

$overflow off
code auto:3602 add[Pointer] 0[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65408

code auto:3603 add[compile-time] 0[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:3604 add[Pointer] 0[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3605 add[compile-time] 0[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:3606 add[Pointer] 0[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3607 add[compile-time] 0[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:3608 add[Pointer] 0[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3609 add[compile-time] 0[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:3610 add[Pointer] 0[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3611 add[compile-time] 0[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3612 add[Pointer] 0[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3613 add[compile-time] 0[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3614 add[Pointer] 0[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3615 add[compile-time] 0[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:3616 add[Pointer] 0[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3617 add[compile-time] 0[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:3618 add[Pointer] 0[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3619 add[compile-time] 0[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:3620 add[Pointer] 0[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3621 add[compile-time] 0[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:3622 add[Pointer] 0[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3623 add[compile-time] 0[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:3624 add[Pointer] 0[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3625 add[compile-time] 0[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:3626 add[Pointer] 0[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3627 add[compile-time] 0[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:3628 add[Pointer] 0[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3629 add[compile-time] 0[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:3630 add[Pointer] 255[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3631 add[compile-time] 255[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -32768;
endcode
compile error

$overflow on
code auto:3632 add[Pointer] 255[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3633 add[compile-time] 255[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -32768;
endcode
compile error

$overflow off
code auto:3634 add[Pointer] 255[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33024

code auto:3635 add[compile-time] 255[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -32767;
endcode
compile error

$overflow on
code auto:3636 add[Pointer] 255[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3637 add[compile-time] 255[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -32767;
endcode
compile error

$overflow off
code auto:3638 add[Pointer] 255[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:3639 add[compile-time] 255[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow on
code auto:3640 add[Pointer] 255[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:3641 add[compile-time] 255[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -129;
endcode
varvalue r 126

$overflow off
code auto:3642 add[Pointer] 255[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3643 add[compile-time] 255[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow on
code auto:3644 add[Pointer] 255[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3645 add[compile-time] 255[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -128;
endcode
varvalue r 127

$overflow off
code auto:3646 add[Pointer] 255[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3647 add[compile-time] 255[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow on
code auto:3648 add[Pointer] 255[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3649 add[compile-time] 255[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + -1;
endcode
varvalue r 254

$overflow off
code auto:3650 add[Pointer] 255[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3651 add[compile-time] 255[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3652 add[Pointer] 255[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3653 add[compile-time] 255[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3654 add[Pointer] 255[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3655 add[compile-time] 255[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:3656 add[Pointer] 255[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3657 add[compile-time] 255[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:3658 add[Pointer] 255[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3659 add[compile-time] 255[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:3660 add[Pointer] 255[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3661 add[compile-time] 255[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:3662 add[Pointer] 255[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:3663 add[compile-time] 255[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:3664 add[Pointer] 255[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:3665 add[compile-time] 255[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:3666 add[Pointer] 255[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3667 add[compile-time] 255[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:3668 add[Pointer] 255[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3669 add[compile-time] 255[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:3670 add[Pointer] 32767[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3671 add[compile-time] 32767[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -32768;
endcode
compile error

$overflow on
code auto:3672 add[Pointer] 32767[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3673 add[compile-time] 32767[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -32768;
endcode
compile error

$overflow off
code auto:3674 add[Pointer] 32767[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3675 add[compile-time] 32767[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:3676 add[Pointer] 32767[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3677 add[compile-time] 32767[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:3678 add[Pointer] 32767[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32638

code auto:3679 add[compile-time] 32767[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow on
code auto:3680 add[Pointer] 32767[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32638

code auto:3681 add[compile-time] 32767[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow off
code auto:3682 add[Pointer] 32767[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3683 add[compile-time] 32767[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:3684 add[Pointer] 32767[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3685 add[compile-time] 32767[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:3686 add[Pointer] 32767[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3687 add[compile-time] 32767[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:3688 add[Pointer] 32767[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3689 add[compile-time] 32767[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:3690 add[Pointer] 32767[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3691 add[compile-time] 32767[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3692 add[Pointer] 32767[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3693 add[compile-time] 32767[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3694 add[Pointer] 32767[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3695 add[compile-time] 32767[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow on
code auto:3696 add[Pointer] 32767[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3697 add[compile-time] 32767[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow off
code auto:3698 add[Pointer] 32767[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3699 add[compile-time] 32767[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow on
code auto:3700 add[Pointer] 32767[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3701 add[compile-time] 32767[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow off
code auto:3702 add[Pointer] 32767[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3703 add[compile-time] 32767[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow on
code auto:3704 add[Pointer] 32767[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3705 add[compile-time] 32767[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow off
code auto:3706 add[Pointer] 32767[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3707 add[compile-time] 32767[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:3708 add[Pointer] 32767[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3709 add[compile-time] 32767[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:3710 add[Pointer] 32768[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3711 add[compile-time] 32768[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -32768;
endcode
varvalue r 0

$overflow on
code auto:3712 add[Pointer] 32768[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3713 add[compile-time] 32768[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -32768;
endcode
varvalue r 0

$overflow off
code auto:3714 add[Pointer] 32768[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3715 add[compile-time] 32768[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -32767;
endcode
varvalue r 1

$overflow on
code auto:3716 add[Pointer] 32768[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3717 add[compile-time] 32768[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -32767;
endcode
varvalue r 1

$overflow off
code auto:3718 add[Pointer] 32768[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3719 add[compile-time] 32768[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -129;
endcode
varvalue r 32639

$overflow on
code auto:3720 add[Pointer] 32768[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32639

code auto:3721 add[compile-time] 32768[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -129;
endcode
varvalue r 32639

$overflow off
code auto:3722 add[Pointer] 32768[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3723 add[compile-time] 32768[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow on
code auto:3724 add[Pointer] 32768[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32640

code auto:3725 add[compile-time] 32768[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -128;
endcode
varvalue r 32640

$overflow off
code auto:3726 add[Pointer] 32768[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3727 add[compile-time] 32768[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow on
code auto:3728 add[Pointer] 32768[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3729 add[compile-time] 32768[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + -1;
endcode
varvalue r 32767

$overflow off
code auto:3730 add[Pointer] 32768[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3731 add[compile-time] 32768[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3732 add[Pointer] 32768[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3733 add[compile-time] 32768[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3734 add[Pointer] 32768[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3735 add[compile-time] 32768[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow on
code auto:3736 add[Pointer] 32768[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3737 add[compile-time] 32768[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow off
code auto:3738 add[Pointer] 32768[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3739 add[compile-time] 32768[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow on
code auto:3740 add[Pointer] 32768[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3741 add[compile-time] 32768[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow off
code auto:3742 add[Pointer] 32768[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:3743 add[compile-time] 32768[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow on
code auto:3744 add[Pointer] 32768[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:3745 add[compile-time] 32768[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow off
code auto:3746 add[Pointer] 32768[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3747 add[compile-time] 32768[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:3748 add[Pointer] 32768[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3749 add[compile-time] 32768[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:3750 add[Pointer] 65535[Pointer], -32768[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3751 add[compile-time] 65535[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -32768;
endcode
varvalue r 32767

$overflow on
code auto:3752 add[Pointer] 65535[Pointer], -32768[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3753 add[compile-time] 65535[Pointer], -32768[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -32768;
endcode
varvalue r 32767

$overflow off
code auto:3754 add[Pointer] 65535[Pointer], -32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3755 add[compile-time] 65535[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -32767;
endcode
varvalue r 32768

$overflow on
code auto:3756 add[Pointer] 65535[Pointer], -32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3757 add[compile-time] 65535[Pointer], -32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -32767;
endcode
varvalue r 32768

$overflow off
code auto:3758 add[Pointer] 65535[Pointer], -129[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65406

code auto:3759 add[compile-time] 65535[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -129;
endcode
varvalue r 65406

$overflow on
code auto:3760 add[Pointer] 65535[Pointer], -129[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -129;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65406

code auto:3761 add[compile-time] 65535[Pointer], -129[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -129;
endcode
varvalue r 65406

$overflow off
code auto:3762 add[Pointer] 65535[Pointer], -128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:3763 add[compile-time] 65535[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -128;
endcode
varvalue r 65407

$overflow on
code auto:3764 add[Pointer] 65535[Pointer], -128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65407

code auto:3765 add[compile-time] 65535[Pointer], -128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -128;
endcode
varvalue r 65407

$overflow off
code auto:3766 add[Pointer] 65535[Pointer], -1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3767 add[compile-time] 65535[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + -1;
endcode
varvalue r 65534

$overflow on
code auto:3768 add[Pointer] 65535[Pointer], -1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = -1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3769 add[compile-time] 65535[Pointer], -1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + -1;
endcode
varvalue r 65534

$overflow off
code auto:3770 add[Pointer] 65535[Pointer], 0[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3771 add[compile-time] 65535[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3772 add[Pointer] 65535[Pointer], 0[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3773 add[compile-time] 65535[Pointer], 0[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3774 add[Pointer] 65535[Pointer], 1[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3775 add[compile-time] 65535[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:3776 add[Pointer] 65535[Pointer], 1[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 1;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3777 add[compile-time] 65535[Pointer], 1[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:3778 add[Pointer] 65535[Pointer], 127[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:3779 add[compile-time] 65535[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:3780 add[Pointer] 65535[Pointer], 127[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 127;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3781 add[compile-time] 65535[Pointer], 127[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:3782 add[Pointer] 65535[Pointer], 128[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3783 add[compile-time] 65535[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 128;
endcode
compile error

$overflow on
code auto:3784 add[Pointer] 65535[Pointer], 128[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 128;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3785 add[compile-time] 65535[Pointer], 128[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 128;
endcode
compile error

$overflow off
code auto:3786 add[Pointer] 65535[Pointer], 32767[Integer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3787 add[compile-time] 65535[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:3788 add[Pointer] 65535[Pointer], 32767[Integer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Integer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3789 add[compile-time] 65535[Pointer], 32767[Integer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:3790 add[Pointer] 0[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3791 add[compile-time] 0[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3792 add[Pointer] 0[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3793 add[compile-time] 0[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3794 add[Pointer] 0[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3795 add[compile-time] 0[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:3796 add[Pointer] 0[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 1

code auto:3797 add[compile-time] 0[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:3798 add[Pointer] 0[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3799 add[compile-time] 0[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:3800 add[Pointer] 0[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3801 add[compile-time] 0[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:3802 add[Pointer] 0[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3803 add[compile-time] 0[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:3804 add[Pointer] 0[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 128

code auto:3805 add[compile-time] 0[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:3806 add[Pointer] 0[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3807 add[compile-time] 0[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3808 add[Pointer] 0[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3809 add[compile-time] 0[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3810 add[Pointer] 255[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3811 add[compile-time] 255[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3812 add[Pointer] 255[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3813 add[compile-time] 255[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3814 add[Pointer] 255[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3815 add[compile-time] 255[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:3816 add[Pointer] 255[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 256

code auto:3817 add[compile-time] 255[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:3818 add[Pointer] 255[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3819 add[compile-time] 255[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:3820 add[Pointer] 255[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 382

code auto:3821 add[compile-time] 255[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:3822 add[Pointer] 255[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:3823 add[compile-time] 255[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:3824 add[Pointer] 255[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 383

code auto:3825 add[compile-time] 255[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:3826 add[Pointer] 255[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3827 add[compile-time] 255[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:3828 add[Pointer] 255[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3829 add[compile-time] 255[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:3830 add[Pointer] 32767[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3831 add[compile-time] 32767[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3832 add[Pointer] 32767[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3833 add[compile-time] 32767[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3834 add[Pointer] 32767[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3835 add[compile-time] 32767[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow on
code auto:3836 add[Pointer] 32767[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3837 add[compile-time] 32767[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow off
code auto:3838 add[Pointer] 32767[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3839 add[compile-time] 32767[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow on
code auto:3840 add[Pointer] 32767[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32894

code auto:3841 add[compile-time] 32767[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow off
code auto:3842 add[Pointer] 32767[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3843 add[compile-time] 32767[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow on
code auto:3844 add[Pointer] 32767[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3845 add[compile-time] 32767[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow off
code auto:3846 add[Pointer] 32767[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3847 add[compile-time] 32767[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:3848 add[Pointer] 32767[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3849 add[compile-time] 32767[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:3850 add[Pointer] 32768[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3851 add[compile-time] 32768[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3852 add[Pointer] 32768[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3853 add[compile-time] 32768[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3854 add[Pointer] 32768[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3855 add[compile-time] 32768[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow on
code auto:3856 add[Pointer] 32768[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32769

code auto:3857 add[compile-time] 32768[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 1;
endcode
varvalue r 32769

$overflow off
code auto:3858 add[Pointer] 32768[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3859 add[compile-time] 32768[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow on
code auto:3860 add[Pointer] 32768[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32895

code auto:3861 add[compile-time] 32768[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 127;
endcode
varvalue r 32895

$overflow off
code auto:3862 add[Pointer] 32768[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:3863 add[compile-time] 32768[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow on
code auto:3864 add[Pointer] 32768[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32896

code auto:3865 add[compile-time] 32768[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 128;
endcode
varvalue r 32896

$overflow off
code auto:3866 add[Pointer] 32768[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3867 add[compile-time] 32768[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:3868 add[Pointer] 32768[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3869 add[compile-time] 32768[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:3870 add[Pointer] 65535[Pointer], 0[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3871 add[compile-time] 65535[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3872 add[Pointer] 65535[Pointer], 0[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3873 add[compile-time] 65535[Pointer], 0[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3874 add[Pointer] 65535[Pointer], 1[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3875 add[compile-time] 65535[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow on
code auto:3876 add[Pointer] 65535[Pointer], 1[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 1;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3877 add[compile-time] 65535[Pointer], 1[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 1;
endcode
compile error

$overflow off
code auto:3878 add[Pointer] 65535[Pointer], 127[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 126

code auto:3879 add[compile-time] 65535[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow on
code auto:3880 add[Pointer] 65535[Pointer], 127[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 127;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3881 add[compile-time] 65535[Pointer], 127[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 127;
endcode
compile error

$overflow off
code auto:3882 add[Pointer] 65535[Pointer], 128[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 127

code auto:3883 add[compile-time] 65535[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 128;
endcode
compile error

$overflow on
code auto:3884 add[Pointer] 65535[Pointer], 128[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 128;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3885 add[compile-time] 65535[Pointer], 128[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 128;
endcode
compile error

$overflow off
code auto:3886 add[Pointer] 65535[Pointer], 255[Byte] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3887 add[compile-time] 65535[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:3888 add[Pointer] 65535[Pointer], 255[Byte] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Byte = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3889 add[compile-time] 65535[Pointer], 255[Byte] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:3890 add[Pointer] 0[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3891 add[compile-time] 0[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3892 add[Pointer] 0[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3893 add[compile-time] 0[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3894 add[Pointer] 0[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3895 add[compile-time] 0[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3896 add[Pointer] 0[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3897 add[compile-time] 0[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3898 add[Pointer] 0[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3899 add[compile-time] 0[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:3900 add[Pointer] 0[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3901 add[compile-time] 0[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:3902 add[Pointer] 0[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3903 add[compile-time] 0[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:3904 add[Pointer] 0[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3905 add[compile-time] 0[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:3906 add[Pointer] 0[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3907 add[compile-time] 0[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:3908 add[Pointer] 0[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3909 add[compile-time] 0[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:3910 add[Pointer] 255[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3911 add[compile-time] 255[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:3912 add[Pointer] 255[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3913 add[compile-time] 255[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:3914 add[Pointer] 255[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3915 add[compile-time] 255[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:3916 add[Pointer] 255[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:3917 add[compile-time] 255[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:3918 add[Pointer] 255[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3919 add[compile-time] 255[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:3920 add[Pointer] 255[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3921 add[compile-time] 255[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:3922 add[Pointer] 255[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3923 add[compile-time] 255[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:3924 add[Pointer] 255[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3925 add[compile-time] 255[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:3926 add[Pointer] 255[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3927 add[compile-time] 255[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:3928 add[Pointer] 255[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3929 add[compile-time] 255[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:3930 add[Pointer] 32767[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3931 add[compile-time] 32767[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:3932 add[Pointer] 32767[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3933 add[compile-time] 32767[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:3934 add[Pointer] 32767[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3935 add[compile-time] 32767[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:3936 add[Pointer] 32767[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:3937 add[compile-time] 32767[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:3938 add[Pointer] 32767[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3939 add[compile-time] 32767[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:3940 add[Pointer] 32767[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3941 add[compile-time] 32767[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:3942 add[Pointer] 32767[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3943 add[compile-time] 32767[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:3944 add[Pointer] 32767[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3945 add[compile-time] 32767[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:3946 add[Pointer] 32767[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3947 add[compile-time] 32767[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:3948 add[Pointer] 32767[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3949 add[compile-time] 32767[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:3950 add[Pointer] 32768[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3951 add[compile-time] 32768[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:3952 add[Pointer] 32768[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:3953 add[compile-time] 32768[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:3954 add[Pointer] 32768[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3955 add[compile-time] 32768[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:3956 add[Pointer] 32768[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:3957 add[compile-time] 32768[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:3958 add[Pointer] 32768[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3959 add[compile-time] 32768[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:3960 add[Pointer] 32768[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3961 add[compile-time] 32768[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:3962 add[Pointer] 32768[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3963 add[compile-time] 32768[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:3964 add[Pointer] 32768[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3965 add[compile-time] 32768[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:3966 add[Pointer] 32768[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3967 add[compile-time] 32768[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:3968 add[Pointer] 32768[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3969 add[compile-time] 32768[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:3970 add[Pointer] 65535[Pointer], 0[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3971 add[compile-time] 65535[Pointer], 0[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:3972 add[Pointer] 65535[Pointer], 0[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:3973 add[compile-time] 65535[Pointer], 0[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:3974 add[Pointer] 65535[Pointer], 255[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:3975 add[compile-time] 65535[Pointer], 255[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:3976 add[Pointer] 65535[Pointer], 255[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3977 add[compile-time] 65535[Pointer], 255[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:3978 add[Pointer] 65535[Pointer], 32767[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:3979 add[compile-time] 65535[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:3980 add[Pointer] 65535[Pointer], 32767[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3981 add[compile-time] 65535[Pointer], 32767[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:3982 add[Pointer] 65535[Pointer], 32768[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3983 add[compile-time] 65535[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:3984 add[Pointer] 65535[Pointer], 32768[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3985 add[compile-time] 65535[Pointer], 32768[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:3986 add[Pointer] 65535[Pointer], 65535[Word] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:3987 add[compile-time] 65535[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:3988 add[Pointer] 65535[Pointer], 65535[Word] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Word = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:3989 add[compile-time] 65535[Pointer], 65535[Word] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:3990 add[Pointer] 0[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3991 add[compile-time] 0[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:3992 add[Pointer] 0[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:3993 add[compile-time] 0[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:3994 add[Pointer] 0[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3995 add[compile-time] 0[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:3996 add[Pointer] 0[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:3997 add[compile-time] 0[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:3998 add[Pointer] 0[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:3999 add[compile-time] 0[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:4000 add[Pointer] 0[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:4001 add[compile-time] 0[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:4002 add[Pointer] 0[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:4003 add[compile-time] 0[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:4004 add[Pointer] 0[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:4005 add[compile-time] 0[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:4006 add[Pointer] 0[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4007 add[compile-time] 0[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:4008 add[Pointer] 0[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4009 add[compile-time] 0[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:4010 add[Pointer] 255[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:4011 add[compile-time] 255[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:4012 add[Pointer] 255[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 255

code auto:4013 add[compile-time] 255[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:4014 add[Pointer] 255[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:4015 add[compile-time] 255[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:4016 add[Pointer] 255[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 510

code auto:4017 add[compile-time] 255[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:4018 add[Pointer] 255[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:4019 add[compile-time] 255[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:4020 add[Pointer] 255[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:4021 add[compile-time] 255[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:4022 add[Pointer] 255[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:4023 add[compile-time] 255[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:4024 add[Pointer] 255[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:4025 add[compile-time] 255[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:4026 add[Pointer] 255[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:4027 add[compile-time] 255[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:4028 add[Pointer] 255[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4029 add[compile-time] 255[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:4030 add[Pointer] 32767[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:4031 add[compile-time] 32767[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:4032 add[Pointer] 32767[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:4033 add[compile-time] 32767[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:4034 add[Pointer] 32767[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:4035 add[compile-time] 32767[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:4036 add[Pointer] 32767[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33022

code auto:4037 add[compile-time] 32767[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:4038 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:4039 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:4040 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:4041 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:4042 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4043 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:4044 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4045 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:4046 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:4047 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:4048 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4049 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:4050 add[Pointer] 32768[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:4051 add[compile-time] 32768[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:4052 add[Pointer] 32768[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32768

code auto:4053 add[compile-time] 32768[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:4054 add[Pointer] 32768[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:4055 add[compile-time] 32768[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:4056 add[Pointer] 32768[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 33023

code auto:4057 add[compile-time] 32768[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:4058 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4059 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:4060 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4061 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:4062 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 0

code auto:4063 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:4064 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4065 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:4066 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:4067 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:4068 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4069 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:4070 add[Pointer] 65535[Pointer], 0[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4071 add[compile-time] 65535[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:4072 add[Pointer] 65535[Pointer], 0[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65535

code auto:4073 add[compile-time] 65535[Pointer], 0[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:4074 add[Pointer] 65535[Pointer], 255[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 254

code auto:4075 add[compile-time] 65535[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:4076 add[Pointer] 65535[Pointer], 255[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4077 add[compile-time] 65535[Pointer], 255[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:4078 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32766

code auto:4079 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:4080 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4081 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:4082 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 32767

code auto:4083 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:4084 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4085 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:4086 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Pointer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
varvalue r 65534

code auto:4087 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow off
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:4088 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Pointer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Pointer;
  r := a + b;
endcode
runtime overflow

code auto:4089 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Pointer] Both immediate $overflow on
  var  r: Pointer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:4090 add[Int8] -128[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4091 add[Int8] -128[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:4092 add[Int8] -128[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:4093 add[compile-time] -128[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:4094 add[Int8] -128[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4095 add[Int8] -128[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:4096 add[Int8] -128[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -127;
endcode
runtime overflow

code auto:4097 add[compile-time] -128[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -127;
endcode
compile error

$overflow on
code auto:4098 add[Int8] -128[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4099 add[Int8] -128[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -128 + b;
endcode
runtime overflow

code auto:4100 add[Int8] -128[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + -1;
endcode
runtime overflow

code auto:4101 add[compile-time] -128[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:4102 add[Int8] -128[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:4103 add[Int8] -128[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -128

code auto:4104 add[Int8] -128[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -128

code auto:4105 add[compile-time] -128[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:4106 add[Int8] -128[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:4107 add[Int8] -128[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -127

code auto:4108 add[Int8] -128[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -127

code auto:4109 add[compile-time] -128[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:4110 add[Int8] -128[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:4111 add[Int8] -128[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -128 + b;
endcode
varvalue r -1

code auto:4112 add[Int8] -128[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -1

code auto:4113 add[compile-time] -128[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:4114 add[Int8] -127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4115 add[Int8] -127[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -127 + b;
endcode
runtime overflow

code auto:4116 add[Int8] -127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:4117 add[compile-time] -127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -128;
endcode
compile error

$overflow on
code auto:4118 add[Int8] -127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4119 add[Int8] -127[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -127 + b;
endcode
runtime overflow

code auto:4120 add[Int8] -127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -127;
endcode
runtime overflow

code auto:4121 add[compile-time] -127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -127;
endcode
compile error

$overflow on
code auto:4122 add[Int8] -127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:4123 add[Int8] -127[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -128

code auto:4124 add[Int8] -127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -128

code auto:4125 add[compile-time] -127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + -1;
endcode
varvalue r -128

$overflow on
code auto:4126 add[Int8] -127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:4127 add[Int8] -127[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -127

code auto:4128 add[Int8] -127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -127

code auto:4129 add[compile-time] -127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:4130 add[Int8] -127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:4131 add[Int8] -127[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r -126

code auto:4132 add[Int8] -127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -126

code auto:4133 add[compile-time] -127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 1;
endcode
varvalue r -126

$overflow on
code auto:4134 add[Int8] -127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:4135 add[Int8] -127[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -127 + b;
endcode
varvalue r 0

code auto:4136 add[Int8] -127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 0

code auto:4137 add[compile-time] -127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:4138 add[Int8] -1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4139 add[Int8] -1[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := -1 + b;
endcode
runtime overflow

code auto:4140 add[Int8] -1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -128;
endcode
runtime overflow

code auto:4141 add[compile-time] -1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:4142 add[Int8] -1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:4143 add[Int8] -1[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -128

code auto:4144 add[Int8] -1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -128

code auto:4145 add[compile-time] -1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -127;
endcode
varvalue r -128

$overflow on
code auto:4146 add[Int8] -1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:4147 add[Int8] -1[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -2

code auto:4148 add[Int8] -1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -2

code auto:4149 add[compile-time] -1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:4150 add[Int8] -1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:4151 add[Int8] -1[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r -1

code auto:4152 add[Int8] -1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -1

code auto:4153 add[compile-time] -1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:4154 add[Int8] -1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:4155 add[Int8] -1[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 0

code auto:4156 add[Int8] -1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 0

code auto:4157 add[compile-time] -1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:4158 add[Int8] -1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:4159 add[Int8] -1[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := -1 + b;
endcode
varvalue r 126

code auto:4160 add[Int8] -1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 126

code auto:4161 add[compile-time] -1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:4162 add[Int8] 0[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:4163 add[Int8] 0[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -128

code auto:4164 add[Int8] 0[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -128

code auto:4165 add[compile-time] 0[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:4166 add[Int8] 0[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:4167 add[Int8] 0[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -127

code auto:4168 add[Int8] 0[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -127

code auto:4169 add[compile-time] 0[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:4170 add[Int8] 0[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:4171 add[Int8] 0[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -1

code auto:4172 add[Int8] 0[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r -1

code auto:4173 add[compile-time] 0[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:4174 add[Int8] 0[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:4175 add[Int8] 0[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 0

code auto:4176 add[Int8] 0[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 0

code auto:4177 add[compile-time] 0[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:4178 add[Int8] 0[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:4179 add[Int8] 0[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 1

code auto:4180 add[Int8] 0[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 1

code auto:4181 add[compile-time] 0[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:4182 add[Int8] 0[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:4183 add[Int8] 0[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 127

code auto:4184 add[Int8] 0[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 127

code auto:4185 add[compile-time] 0[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:4186 add[Int8] 1[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:4187 add[Int8] 1[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -127

code auto:4188 add[Int8] 1[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -127

code auto:4189 add[compile-time] 1[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:4190 add[Int8] 1[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -126

code auto:4191 add[Int8] 1[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -126

code auto:4192 add[Int8] 1[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r -126

code auto:4193 add[compile-time] 1[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -127;
endcode
varvalue r -126

$overflow on
code auto:4194 add[Int8] 1[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:4195 add[Int8] 1[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 0

code auto:4196 add[Int8] 1[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 0

code auto:4197 add[compile-time] 1[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:4198 add[Int8] 1[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:4199 add[Int8] 1[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 1

code auto:4200 add[Int8] 1[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 1

code auto:4201 add[compile-time] 1[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:4202 add[Int8] 1[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:4203 add[Int8] 1[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 2

code auto:4204 add[Int8] 1[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 2

code auto:4205 add[compile-time] 1[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:4206 add[Int8] 1[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4207 add[Int8] 1[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 1 + b;
endcode
runtime overflow

code auto:4208 add[Int8] 1[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:4209 add[compile-time] 1[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow on
code auto:4210 add[Int8] 127[Int8], -128[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:4211 add[Int8] 127[Int8], -128[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -1

code auto:4212 add[Int8] 127[Int8], -128[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -128;
endcode
varvalue r -1

code auto:4213 add[compile-time] 127[Int8], -128[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:4214 add[Int8] 127[Int8], -127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:4215 add[Int8] 127[Int8], -127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 0

code auto:4216 add[Int8] 127[Int8], -127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -127;
endcode
varvalue r 0

code auto:4217 add[compile-time] 127[Int8], -127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:4218 add[Int8] 127[Int8], -1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:4219 add[Int8] 127[Int8], -1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 126

code auto:4220 add[Int8] 127[Int8], -1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + -1;
endcode
varvalue r 126

code auto:4221 add[compile-time] 127[Int8], -1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:4222 add[Int8] 127[Int8], 0[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:4223 add[Int8] 127[Int8], 0[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 127

code auto:4224 add[Int8] 127[Int8], 0[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 127

code auto:4225 add[compile-time] 127[Int8], 0[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:4226 add[Int8] 127[Int8], 1[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4227 add[Int8] 127[Int8], 1[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:4228 add[Int8] 127[Int8], 1[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 1;
endcode
runtime overflow

code auto:4229 add[compile-time] 127[Int8], 1[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow on
code auto:4230 add[Int8] 127[Int8], 127[Int8] -> [Int8] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:4231 add[Int8] 127[Int8], 127[Int8] -> [Int8] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:4232 add[Int8] 127[Int8], 127[Int8] -> [Int8] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:4233 add[compile-time] 127[Int8], 127[Int8] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow off
code auto:4234 add[Int8] -128[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4235 add[Int8] -128[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r 0

code auto:4236 add[Int8] -128[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r 0

code auto:4237 add[compile-time] -128[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow on
code auto:4238 add[Int8] -128[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4239 add[Int8] -128[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := -128 + b;
endcode
runtime overflow

code auto:4240 add[Int8] -128[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -128;
endcode
runtime overflow

code auto:4241 add[compile-time] -128[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow off
code auto:4242 add[Int8] -128[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4243 add[Int8] -128[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r 1

code auto:4244 add[Int8] -128[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r 1

code auto:4245 add[compile-time] -128[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -127;
endcode
varvalue r -255

$overflow on
code auto:4246 add[Int8] -128[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4247 add[Int8] -128[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := -128 + b;
endcode
runtime overflow

code auto:4248 add[Int8] -128[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -127;
endcode
runtime overflow

code auto:4249 add[compile-time] -128[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -127;
endcode
varvalue r -255

$overflow off
code auto:4250 add[Int8] -128[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4251 add[Int8] -128[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r 127

code auto:4252 add[Int8] -128[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r 127

code auto:4253 add[compile-time] -128[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow on
code auto:4254 add[Int8] -128[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4255 add[Int8] -128[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := -128 + b;
endcode
runtime overflow

code auto:4256 add[Int8] -128[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + -1;
endcode
runtime overflow

code auto:4257 add[compile-time] -128[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow off
code auto:4258 add[Int8] -128[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4259 add[Int8] -128[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -128

code auto:4260 add[Int8] -128[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -128

code auto:4261 add[compile-time] -128[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:4262 add[Int8] -128[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4263 add[Int8] -128[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -128

code auto:4264 add[Int8] -128[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -128

code auto:4265 add[compile-time] -128[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:4266 add[Int8] -128[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4267 add[Int8] -128[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -127

code auto:4268 add[Int8] -128[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r -127

code auto:4269 add[compile-time] -128[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:4270 add[Int8] -128[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4271 add[Int8] -128[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -127

code auto:4272 add[Int8] -128[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r -127

code auto:4273 add[compile-time] -128[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:4274 add[Int8] -128[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4275 add[Int8] -128[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -1

code auto:4276 add[Int8] -128[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r -1

code auto:4277 add[compile-time] -128[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:4278 add[Int8] -128[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4279 add[Int8] -128[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := -128 + b;
endcode
varvalue r -1

code auto:4280 add[Int8] -128[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r -1

code auto:4281 add[compile-time] -128[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:4282 add[Int8] -127[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4283 add[Int8] -127[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r 1

code auto:4284 add[Int8] -127[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r 1

code auto:4285 add[compile-time] -127[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -128;
endcode
varvalue r -255

$overflow on
code auto:4286 add[Int8] -127[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4287 add[Int8] -127[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := -127 + b;
endcode
runtime overflow

code auto:4288 add[Int8] -127[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -128;
endcode
runtime overflow

code auto:4289 add[compile-time] -127[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -128;
endcode
varvalue r -255

$overflow off
code auto:4290 add[Int8] -127[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:4291 add[Int8] -127[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r 2

code auto:4292 add[Int8] -127[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r 2

code auto:4293 add[compile-time] -127[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -127;
endcode
varvalue r -254

$overflow on
code auto:4294 add[Int8] -127[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4295 add[Int8] -127[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := -127 + b;
endcode
runtime overflow

code auto:4296 add[Int8] -127[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -127;
endcode
runtime overflow

code auto:4297 add[compile-time] -127[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -127;
endcode
varvalue r -254

$overflow off
code auto:4298 add[Int8] -127[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4299 add[Int8] -127[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -128

code auto:4300 add[Int8] -127[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -128

code auto:4301 add[compile-time] -127[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + -1;
endcode
varvalue r -128

$overflow on
code auto:4302 add[Int8] -127[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4303 add[Int8] -127[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -128

code auto:4304 add[Int8] -127[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -128

code auto:4305 add[compile-time] -127[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + -1;
endcode
varvalue r -128

$overflow off
code auto:4306 add[Int8] -127[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4307 add[Int8] -127[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -127

code auto:4308 add[Int8] -127[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -127

code auto:4309 add[compile-time] -127[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow on
code auto:4310 add[Int8] -127[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4311 add[Int8] -127[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -127

code auto:4312 add[Int8] -127[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -127

code auto:4313 add[compile-time] -127[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 0;
endcode
varvalue r -127

$overflow off
code auto:4314 add[Int8] -127[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:4315 add[Int8] -127[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -126

code auto:4316 add[Int8] -127[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r -126

code auto:4317 add[compile-time] -127[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow on
code auto:4318 add[Int8] -127[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:4319 add[Int8] -127[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r -126

code auto:4320 add[Int8] -127[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r -126

code auto:4321 add[compile-time] -127[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 1;
endcode
varvalue r -126

$overflow off
code auto:4322 add[Int8] -127[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4323 add[Int8] -127[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r 0

code auto:4324 add[Int8] -127[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 0

code auto:4325 add[compile-time] -127[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:4326 add[Int8] -127[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4327 add[Int8] -127[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := -127 + b;
endcode
varvalue r 0

code auto:4328 add[Int8] -127[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 0

code auto:4329 add[compile-time] -127[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:4330 add[Int8] -1[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4331 add[Int8] -1[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r 127

code auto:4332 add[Int8] -1[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r 127

code auto:4333 add[compile-time] -1[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow on
code auto:4334 add[Int8] -1[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4335 add[Int8] -1[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := -1 + b;
endcode
runtime overflow

code auto:4336 add[Int8] -1[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -128;
endcode
runtime overflow

code auto:4337 add[compile-time] -1[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow off
code auto:4338 add[Int8] -1[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4339 add[Int8] -1[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -128

code auto:4340 add[Int8] -1[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -128

code auto:4341 add[compile-time] -1[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -127;
endcode
varvalue r -128

$overflow on
code auto:4342 add[Int8] -1[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4343 add[Int8] -1[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -128

code auto:4344 add[Int8] -1[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -128

code auto:4345 add[compile-time] -1[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -127;
endcode
varvalue r -128

$overflow off
code auto:4346 add[Int8] -1[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:4347 add[Int8] -1[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -2

code auto:4348 add[Int8] -1[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -2

code auto:4349 add[compile-time] -1[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:4350 add[Int8] -1[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:4351 add[Int8] -1[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -2

code auto:4352 add[Int8] -1[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -2

code auto:4353 add[compile-time] -1[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:4354 add[Int8] -1[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4355 add[Int8] -1[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -1

code auto:4356 add[Int8] -1[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -1

code auto:4357 add[compile-time] -1[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:4358 add[Int8] -1[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4359 add[Int8] -1[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r -1

code auto:4360 add[Int8] -1[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r -1

code auto:4361 add[compile-time] -1[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:4362 add[Int8] -1[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4363 add[Int8] -1[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r 0

code auto:4364 add[Int8] -1[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 0

code auto:4365 add[compile-time] -1[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:4366 add[Int8] -1[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4367 add[Int8] -1[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r 0

code auto:4368 add[Int8] -1[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 0

code auto:4369 add[compile-time] -1[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:4370 add[Int8] -1[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:4371 add[Int8] -1[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r 126

code auto:4372 add[Int8] -1[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 126

code auto:4373 add[compile-time] -1[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:4374 add[Int8] -1[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:4375 add[Int8] -1[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := -1 + b;
endcode
varvalue r 126

code auto:4376 add[Int8] -1[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 126

code auto:4377 add[compile-time] -1[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:4378 add[Int8] 0[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4379 add[Int8] 0[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -128

code auto:4380 add[Int8] 0[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -128

code auto:4381 add[compile-time] 0[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:4382 add[Int8] 0[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4383 add[Int8] 0[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -128

code auto:4384 add[Int8] 0[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -128

code auto:4385 add[compile-time] 0[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:4386 add[Int8] 0[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4387 add[Int8] 0[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -127

code auto:4388 add[Int8] 0[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -127

code auto:4389 add[compile-time] 0[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow on
code auto:4390 add[Int8] 0[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4391 add[Int8] 0[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -127

code auto:4392 add[Int8] 0[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -127

code auto:4393 add[compile-time] 0[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -127;
endcode
varvalue r -127

$overflow off
code auto:4394 add[Int8] 0[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4395 add[Int8] 0[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -1

code auto:4396 add[Int8] 0[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -1

code auto:4397 add[compile-time] 0[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:4398 add[Int8] 0[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4399 add[Int8] 0[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r -1

code auto:4400 add[Int8] 0[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r -1

code auto:4401 add[compile-time] 0[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:4402 add[Int8] 0[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4403 add[Int8] 0[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 0

code auto:4404 add[Int8] 0[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 0

code auto:4405 add[compile-time] 0[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:4406 add[Int8] 0[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4407 add[Int8] 0[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 0

code auto:4408 add[Int8] 0[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 0

code auto:4409 add[compile-time] 0[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:4410 add[Int8] 0[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4411 add[Int8] 0[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 1

code auto:4412 add[Int8] 0[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 1

code auto:4413 add[compile-time] 0[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:4414 add[Int8] 0[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4415 add[Int8] 0[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 1

code auto:4416 add[Int8] 0[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 1

code auto:4417 add[compile-time] 0[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:4418 add[Int8] 0[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4419 add[Int8] 0[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 127

code auto:4420 add[Int8] 0[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 127

code auto:4421 add[compile-time] 0[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:4422 add[Int8] 0[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4423 add[Int8] 0[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 127

code auto:4424 add[Int8] 0[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 127

code auto:4425 add[compile-time] 0[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:4426 add[Int8] 1[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4427 add[Int8] 1[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r -127

code auto:4428 add[Int8] 1[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -127

code auto:4429 add[compile-time] 1[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:4430 add[Int8] 1[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:4431 add[Int8] 1[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r -127

code auto:4432 add[Int8] 1[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -127

code auto:4433 add[compile-time] 1[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:4434 add[Int8] 1[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:4435 add[Int8] 1[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r -126

code auto:4436 add[Int8] 1[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -126

code auto:4437 add[compile-time] 1[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow on
code auto:4438 add[Int8] 1[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -126

code auto:4439 add[Int8] 1[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r -126

code auto:4440 add[Int8] 1[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r -126

code auto:4441 add[compile-time] 1[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -127;
endcode
varvalue r -126

$overflow off
code auto:4442 add[Int8] 1[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4443 add[Int8] 1[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 0

code auto:4444 add[Int8] 1[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r 0

code auto:4445 add[compile-time] 1[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:4446 add[Int8] 1[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4447 add[Int8] 1[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 0

code auto:4448 add[Int8] 1[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r 0

code auto:4449 add[compile-time] 1[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:4450 add[Int8] 1[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4451 add[Int8] 1[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 1

code auto:4452 add[Int8] 1[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 1

code auto:4453 add[compile-time] 1[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:4454 add[Int8] 1[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:4455 add[Int8] 1[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 1

code auto:4456 add[Int8] 1[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 1

code auto:4457 add[compile-time] 1[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:4458 add[Int8] 1[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:4459 add[Int8] 1[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 2

code auto:4460 add[Int8] 1[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 2

code auto:4461 add[compile-time] 1[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:4462 add[Int8] 1[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:4463 add[Int8] 1[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 2

code auto:4464 add[Int8] 1[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 2

code auto:4465 add[compile-time] 1[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:4466 add[Int8] 1[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4467 add[Int8] 1[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r -128

code auto:4468 add[Int8] 1[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r -128

code auto:4469 add[compile-time] 1[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:4470 add[Int8] 1[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4471 add[Int8] 1[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := 1 + b;
endcode
runtime overflow

code auto:4472 add[Int8] 1[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Integer;
  r := a + 127;
endcode
runtime overflow

code auto:4473 add[compile-time] 1[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:4474 add[Int8] 127[Int8], -128[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4475 add[Int8] 127[Int8], -128[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r -1

code auto:4476 add[Int8] 127[Int8], -128[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -1

code auto:4477 add[compile-time] 127[Int8], -128[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:4478 add[Int8] 127[Int8], -128[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:4479 add[Int8] 127[Int8], -128[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r -1

code auto:4480 add[Int8] 127[Int8], -128[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -128;
endcode
varvalue r -1

code auto:4481 add[compile-time] 127[Int8], -128[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:4482 add[Int8] 127[Int8], -127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4483 add[Int8] 127[Int8], -127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 0

code auto:4484 add[Int8] 127[Int8], -127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r 0

code auto:4485 add[compile-time] 127[Int8], -127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:4486 add[Int8] 127[Int8], -127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:4487 add[Int8] 127[Int8], -127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 0

code auto:4488 add[Int8] 127[Int8], -127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -127;
endcode
varvalue r 0

code auto:4489 add[compile-time] 127[Int8], -127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:4490 add[Int8] 127[Int8], -1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:4491 add[Int8] 127[Int8], -1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 126

code auto:4492 add[Int8] 127[Int8], -1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r 126

code auto:4493 add[compile-time] 127[Int8], -1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:4494 add[Int8] 127[Int8], -1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:4495 add[Int8] 127[Int8], -1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 126

code auto:4496 add[Int8] 127[Int8], -1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + -1;
endcode
varvalue r 126

code auto:4497 add[compile-time] 127[Int8], -1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:4498 add[Int8] 127[Int8], 0[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4499 add[Int8] 127[Int8], 0[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 127

code auto:4500 add[Int8] 127[Int8], 0[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 127

code auto:4501 add[compile-time] 127[Int8], 0[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:4502 add[Int8] 127[Int8], 0[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:4503 add[Int8] 127[Int8], 0[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 127

code auto:4504 add[Int8] 127[Int8], 0[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 127

code auto:4505 add[compile-time] 127[Int8], 0[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:4506 add[Int8] 127[Int8], 1[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:4507 add[Int8] 127[Int8], 1[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r -128

code auto:4508 add[Int8] 127[Int8], 1[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r -128

code auto:4509 add[compile-time] 127[Int8], 1[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:4510 add[Int8] 127[Int8], 1[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4511 add[Int8] 127[Int8], 1[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Integer;
  r := 127 + b;
endcode
runtime overflow

code auto:4512 add[Int8] 127[Int8], 1[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 1;
endcode
runtime overflow

code auto:4513 add[compile-time] 127[Int8], 1[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:4514 add[Int8] 127[Int8], 127[Int8] -> [Integer] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:4515 add[Int8] 127[Int8], 127[Int8] -> [Integer] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r -2

code auto:4516 add[Int8] 127[Int8], 127[Int8] -> [Integer] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r -2

code auto:4517 add[compile-time] 127[Int8], 127[Int8] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:4518 add[Int8] 127[Int8], 127[Int8] -> [Integer] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:4519 add[Int8] 127[Int8], 127[Int8] -> [Integer] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Integer;
  r := 127 + b;
endcode
runtime overflow

code auto:4520 add[Int8] 127[Int8], 127[Int8] -> [Integer] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Integer;
  r := a + 127;
endcode
runtime overflow

code auto:4521 add[compile-time] 127[Int8], 127[Int8] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:4522 add[Int8] -128[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4523 add[Int8] -128[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 0

code auto:4524 add[Int8] -128[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 0

code auto:4525 add[compile-time] -128[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:4526 add[Int8] -128[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4527 add[Int8] -128[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4528 add[Int8] -128[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4529 add[compile-time] -128[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:4530 add[Int8] -128[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4531 add[Int8] -128[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 1

code auto:4532 add[Int8] -128[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 1

code auto:4533 add[compile-time] -128[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -127;
endcode
compile error

$overflow on
code auto:4534 add[Int8] -128[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4535 add[Int8] -128[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4536 add[Int8] -128[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -127;
endcode
runtime overflow

code auto:4537 add[compile-time] -128[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -127;
endcode
compile error

$overflow off
code auto:4538 add[Int8] -128[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4539 add[Int8] -128[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 127

code auto:4540 add[Int8] -128[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 127

code auto:4541 add[compile-time] -128[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:4542 add[Int8] -128[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4543 add[Int8] -128[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4544 add[Int8] -128[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + -1;
endcode
runtime overflow

code auto:4545 add[compile-time] -128[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:4546 add[Int8] -128[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4547 add[Int8] -128[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 128

code auto:4548 add[Int8] -128[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 128

code auto:4549 add[compile-time] -128[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:4550 add[Int8] -128[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4551 add[Int8] -128[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4552 add[Int8] -128[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 0;
endcode
runtime overflow

code auto:4553 add[compile-time] -128[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:4554 add[Int8] -128[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:4555 add[Int8] -128[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 129

code auto:4556 add[Int8] -128[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 129

code auto:4557 add[compile-time] -128[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 1;
endcode
compile error

$overflow on
code auto:4558 add[Int8] -128[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4559 add[Int8] -128[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4560 add[Int8] -128[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 1;
endcode
runtime overflow

code auto:4561 add[compile-time] -128[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 1;
endcode
compile error

$overflow off
code auto:4562 add[Int8] -128[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:4563 add[Int8] -128[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := -128 + b;
endcode
varvalue r 255

code auto:4564 add[Int8] -128[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 255

code auto:4565 add[compile-time] -128[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 127;
endcode
compile error

$overflow on
code auto:4566 add[Int8] -128[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4567 add[Int8] -128[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := -128 + b;
endcode
runtime overflow

code auto:4568 add[Int8] -128[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Byte;
  r := a + 127;
endcode
runtime overflow

code auto:4569 add[compile-time] -128[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 127;
endcode
compile error

$overflow off
code auto:4570 add[Int8] -127[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4571 add[Int8] -127[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 1

code auto:4572 add[Int8] -127[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 1

code auto:4573 add[compile-time] -127[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + -128;
endcode
compile error

$overflow on
code auto:4574 add[Int8] -127[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4575 add[Int8] -127[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := -127 + b;
endcode
runtime overflow

code auto:4576 add[Int8] -127[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4577 add[compile-time] -127[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + -128;
endcode
compile error

$overflow off
code auto:4578 add[Int8] -127[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:4579 add[Int8] -127[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 2

code auto:4580 add[Int8] -127[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 2

code auto:4581 add[compile-time] -127[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + -127;
endcode
compile error

$overflow on
code auto:4582 add[Int8] -127[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4583 add[Int8] -127[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := -127 + b;
endcode
runtime overflow

code auto:4584 add[Int8] -127[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -127;
endcode
runtime overflow

code auto:4585 add[compile-time] -127[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + -127;
endcode
compile error

$overflow off
code auto:4586 add[Int8] -127[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4587 add[Int8] -127[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 128

code auto:4588 add[Int8] -127[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 128

code auto:4589 add[compile-time] -127[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + -1;
endcode
compile error

$overflow on
code auto:4590 add[Int8] -127[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4591 add[Int8] -127[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := -127 + b;
endcode
runtime overflow

code auto:4592 add[Int8] -127[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + -1;
endcode
runtime overflow

code auto:4593 add[compile-time] -127[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + -1;
endcode
compile error

$overflow off
code auto:4594 add[Int8] -127[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:4595 add[Int8] -127[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 129

code auto:4596 add[Int8] -127[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 129

code auto:4597 add[compile-time] -127[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + 0;
endcode
compile error

$overflow on
code auto:4598 add[Int8] -127[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4599 add[Int8] -127[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := -127 + b;
endcode
runtime overflow

code auto:4600 add[Int8] -127[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 0;
endcode
runtime overflow

code auto:4601 add[compile-time] -127[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + 0;
endcode
compile error

$overflow off
code auto:4602 add[Int8] -127[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 130

code auto:4603 add[Int8] -127[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 130

code auto:4604 add[Int8] -127[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 130

code auto:4605 add[compile-time] -127[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + 1;
endcode
compile error

$overflow on
code auto:4606 add[Int8] -127[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4607 add[Int8] -127[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := -127 + b;
endcode
runtime overflow

code auto:4608 add[Int8] -127[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 1;
endcode
runtime overflow

code auto:4609 add[compile-time] -127[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + 1;
endcode
compile error

$overflow off
code auto:4610 add[Int8] -127[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4611 add[Int8] -127[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 0

code auto:4612 add[Int8] -127[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 0

code auto:4613 add[compile-time] -127[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:4614 add[Int8] -127[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4615 add[Int8] -127[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := -127 + b;
endcode
varvalue r 0

code auto:4616 add[Int8] -127[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 0

code auto:4617 add[compile-time] -127[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:4618 add[Int8] -1[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4619 add[Int8] -1[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 127

code auto:4620 add[Int8] -1[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 127

code auto:4621 add[compile-time] -1[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:4622 add[Int8] -1[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4623 add[Int8] -1[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := -1 + b;
endcode
runtime overflow

code auto:4624 add[Int8] -1[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4625 add[compile-time] -1[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:4626 add[Int8] -1[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4627 add[Int8] -1[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 128

code auto:4628 add[Int8] -1[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 128

code auto:4629 add[compile-time] -1[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -127;
endcode
compile error

$overflow on
code auto:4630 add[Int8] -1[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4631 add[Int8] -1[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := -1 + b;
endcode
runtime overflow

code auto:4632 add[Int8] -1[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -127;
endcode
runtime overflow

code auto:4633 add[compile-time] -1[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -127;
endcode
compile error

$overflow off
code auto:4634 add[Int8] -1[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:4635 add[Int8] -1[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 254

code auto:4636 add[Int8] -1[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 254

code auto:4637 add[compile-time] -1[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -1;
endcode
compile error

$overflow on
code auto:4638 add[Int8] -1[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4639 add[Int8] -1[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := -1 + b;
endcode
runtime overflow

code auto:4640 add[Int8] -1[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + -1;
endcode
runtime overflow

code auto:4641 add[compile-time] -1[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -1;
endcode
compile error

$overflow off
code auto:4642 add[Int8] -1[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:4643 add[Int8] -1[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 255

code auto:4644 add[Int8] -1[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 255

code auto:4645 add[compile-time] -1[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:4646 add[Int8] -1[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4647 add[Int8] -1[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := -1 + b;
endcode
runtime overflow

code auto:4648 add[Int8] -1[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 0;
endcode
runtime overflow

code auto:4649 add[compile-time] -1[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:4650 add[Int8] -1[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4651 add[Int8] -1[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 0

code auto:4652 add[Int8] -1[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 0

code auto:4653 add[compile-time] -1[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:4654 add[Int8] -1[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4655 add[Int8] -1[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 0

code auto:4656 add[Int8] -1[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 0

code auto:4657 add[compile-time] -1[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:4658 add[Int8] -1[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:4659 add[Int8] -1[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 126

code auto:4660 add[Int8] -1[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 126

code auto:4661 add[compile-time] -1[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:4662 add[Int8] -1[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:4663 add[Int8] -1[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := -1 + b;
endcode
varvalue r 126

code auto:4664 add[Int8] -1[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 126

code auto:4665 add[compile-time] -1[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:4666 add[Int8] 0[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4667 add[Int8] 0[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 128

code auto:4668 add[Int8] 0[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 128

code auto:4669 add[compile-time] 0[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:4670 add[Int8] 0[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4671 add[Int8] 0[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := 0 + b;
endcode
runtime overflow

code auto:4672 add[Int8] 0[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4673 add[compile-time] 0[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:4674 add[Int8] 0[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:4675 add[Int8] 0[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 129

code auto:4676 add[Int8] 0[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 129

code auto:4677 add[compile-time] 0[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -127;
endcode
compile error

$overflow on
code auto:4678 add[Int8] 0[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4679 add[Int8] 0[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := 0 + b;
endcode
runtime overflow

code auto:4680 add[Int8] 0[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -127;
endcode
runtime overflow

code auto:4681 add[compile-time] 0[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -127;
endcode
compile error

$overflow off
code auto:4682 add[Int8] 0[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:4683 add[Int8] 0[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 255

code auto:4684 add[Int8] 0[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 255

code auto:4685 add[compile-time] 0[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:4686 add[Int8] 0[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4687 add[Int8] 0[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := 0 + b;
endcode
runtime overflow

code auto:4688 add[Int8] 0[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + -1;
endcode
runtime overflow

code auto:4689 add[compile-time] 0[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:4690 add[Int8] 0[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4691 add[Int8] 0[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 0

code auto:4692 add[Int8] 0[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 0

code auto:4693 add[compile-time] 0[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:4694 add[Int8] 0[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4695 add[Int8] 0[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 0

code auto:4696 add[Int8] 0[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 0

code auto:4697 add[compile-time] 0[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:4698 add[Int8] 0[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4699 add[Int8] 0[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 1

code auto:4700 add[Int8] 0[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 1

code auto:4701 add[compile-time] 0[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:4702 add[Int8] 0[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4703 add[Int8] 0[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 1

code auto:4704 add[Int8] 0[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 1

code auto:4705 add[compile-time] 0[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:4706 add[Int8] 0[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4707 add[Int8] 0[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 127

code auto:4708 add[Int8] 0[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 127

code auto:4709 add[compile-time] 0[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:4710 add[Int8] 0[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4711 add[Int8] 0[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 127

code auto:4712 add[Int8] 0[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 127

code auto:4713 add[compile-time] 0[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:4714 add[Int8] 1[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:4715 add[Int8] 1[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 129

code auto:4716 add[Int8] 1[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 129

code auto:4717 add[compile-time] 1[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -128;
endcode
compile error

$overflow on
code auto:4718 add[Int8] 1[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4719 add[Int8] 1[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := 1 + b;
endcode
runtime overflow

code auto:4720 add[Int8] 1[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4721 add[compile-time] 1[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -128;
endcode
compile error

$overflow off
code auto:4722 add[Int8] 1[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 130

code auto:4723 add[Int8] 1[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 130

code auto:4724 add[Int8] 1[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 130

code auto:4725 add[compile-time] 1[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -127;
endcode
compile error

$overflow on
code auto:4726 add[Int8] 1[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4727 add[Int8] 1[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := 1 + b;
endcode
runtime overflow

code auto:4728 add[Int8] 1[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -127;
endcode
runtime overflow

code auto:4729 add[compile-time] 1[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -127;
endcode
compile error

$overflow off
code auto:4730 add[Int8] 1[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4731 add[Int8] 1[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 0

code auto:4732 add[Int8] 1[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 0

code auto:4733 add[compile-time] 1[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:4734 add[Int8] 1[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4735 add[Int8] 1[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 0

code auto:4736 add[Int8] 1[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 0

code auto:4737 add[compile-time] 1[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:4738 add[Int8] 1[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4739 add[Int8] 1[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 1

code auto:4740 add[Int8] 1[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 1

code auto:4741 add[compile-time] 1[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:4742 add[Int8] 1[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:4743 add[Int8] 1[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 1

code auto:4744 add[Int8] 1[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 1

code auto:4745 add[compile-time] 1[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:4746 add[Int8] 1[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:4747 add[Int8] 1[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 2

code auto:4748 add[Int8] 1[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 2

code auto:4749 add[compile-time] 1[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:4750 add[Int8] 1[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:4751 add[Int8] 1[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 2

code auto:4752 add[Int8] 1[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 2

code auto:4753 add[compile-time] 1[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:4754 add[Int8] 1[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4755 add[Int8] 1[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 128

code auto:4756 add[Int8] 1[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 128

code auto:4757 add[compile-time] 1[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:4758 add[Int8] 1[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4759 add[Int8] 1[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := 1 + b;
endcode
runtime overflow

code auto:4760 add[Int8] 1[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Byte;
  r := a + 127;
endcode
runtime overflow

code auto:4761 add[compile-time] 1[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:4762 add[Int8] 127[Int8], -128[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:4763 add[Int8] 127[Int8], -128[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 255

code auto:4764 add[Int8] 127[Int8], -128[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -128;
endcode
varvalue r 255

code auto:4765 add[compile-time] 127[Int8], -128[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -128;
endcode
compile error

$overflow on
code auto:4766 add[Int8] 127[Int8], -128[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4767 add[Int8] 127[Int8], -128[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Byte;
  r := 127 + b;
endcode
runtime overflow

code auto:4768 add[Int8] 127[Int8], -128[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -128;
endcode
runtime overflow

code auto:4769 add[compile-time] 127[Int8], -128[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -128;
endcode
compile error

$overflow off
code auto:4770 add[Int8] 127[Int8], -127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4771 add[Int8] 127[Int8], -127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 0

code auto:4772 add[Int8] 127[Int8], -127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 0

code auto:4773 add[compile-time] 127[Int8], -127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:4774 add[Int8] 127[Int8], -127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:4775 add[Int8] 127[Int8], -127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 0

code auto:4776 add[Int8] 127[Int8], -127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -127;
endcode
varvalue r 0

code auto:4777 add[compile-time] 127[Int8], -127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:4778 add[Int8] 127[Int8], -1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:4779 add[Int8] 127[Int8], -1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 126

code auto:4780 add[Int8] 127[Int8], -1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 126

code auto:4781 add[compile-time] 127[Int8], -1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:4782 add[Int8] 127[Int8], -1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:4783 add[Int8] 127[Int8], -1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 126

code auto:4784 add[Int8] 127[Int8], -1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + -1;
endcode
varvalue r 126

code auto:4785 add[compile-time] 127[Int8], -1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:4786 add[Int8] 127[Int8], 0[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4787 add[Int8] 127[Int8], 0[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 127

code auto:4788 add[Int8] 127[Int8], 0[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 127

code auto:4789 add[compile-time] 127[Int8], 0[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:4790 add[Int8] 127[Int8], 0[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:4791 add[Int8] 127[Int8], 0[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 127

code auto:4792 add[Int8] 127[Int8], 0[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 127

code auto:4793 add[compile-time] 127[Int8], 0[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:4794 add[Int8] 127[Int8], 1[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:4795 add[Int8] 127[Int8], 1[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 128

code auto:4796 add[Int8] 127[Int8], 1[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 128

code auto:4797 add[compile-time] 127[Int8], 1[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:4798 add[Int8] 127[Int8], 1[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4799 add[Int8] 127[Int8], 1[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Byte;
  r := 127 + b;
endcode
runtime overflow

code auto:4800 add[Int8] 127[Int8], 1[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 1;
endcode
runtime overflow

code auto:4801 add[compile-time] 127[Int8], 1[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:4802 add[Int8] 127[Int8], 127[Int8] -> [Byte] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:4803 add[Int8] 127[Int8], 127[Int8] -> [Byte] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 254

code auto:4804 add[Int8] 127[Int8], 127[Int8] -> [Byte] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 254

code auto:4805 add[compile-time] 127[Int8], 127[Int8] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:4806 add[Int8] 127[Int8], 127[Int8] -> [Byte] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:4807 add[Int8] 127[Int8], 127[Int8] -> [Byte] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Byte;
  r := 127 + b;
endcode
runtime overflow

code auto:4808 add[Int8] 127[Int8], 127[Int8] -> [Byte] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Byte;
  r := a + 127;
endcode
runtime overflow

code auto:4809 add[compile-time] 127[Int8], 127[Int8] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:4810 add[Int8] -128[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4811 add[Int8] -128[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 0

code auto:4812 add[Int8] -128[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 0

code auto:4813 add[compile-time] -128[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:4814 add[Int8] -128[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4815 add[Int8] -128[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4816 add[Int8] -128[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:4817 add[compile-time] -128[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:4818 add[Int8] -128[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:4819 add[Int8] -128[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 1

code auto:4820 add[Int8] -128[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 1

code auto:4821 add[compile-time] -128[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -127;
endcode
compile error

$overflow on
code auto:4822 add[Int8] -128[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4823 add[Int8] -128[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4824 add[Int8] -128[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -127;
endcode
runtime overflow

code auto:4825 add[compile-time] -128[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -127;
endcode
compile error

$overflow off
code auto:4826 add[Int8] -128[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:4827 add[Int8] -128[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 127

code auto:4828 add[Int8] -128[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 127

code auto:4829 add[compile-time] -128[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:4830 add[Int8] -128[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4831 add[Int8] -128[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4832 add[Int8] -128[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + -1;
endcode
runtime overflow

code auto:4833 add[compile-time] -128[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:4834 add[Int8] -128[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:4835 add[Int8] -128[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 65408

code auto:4836 add[Int8] -128[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 65408

code auto:4837 add[compile-time] -128[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:4838 add[Int8] -128[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4839 add[Int8] -128[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4840 add[Int8] -128[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 0;
endcode
runtime overflow

code auto:4841 add[compile-time] -128[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:4842 add[Int8] -128[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:4843 add[Int8] -128[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 65409

code auto:4844 add[Int8] -128[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 65409

code auto:4845 add[compile-time] -128[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 1;
endcode
compile error

$overflow on
code auto:4846 add[Int8] -128[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4847 add[Int8] -128[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4848 add[Int8] -128[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 1;
endcode
runtime overflow

code auto:4849 add[compile-time] -128[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 1;
endcode
compile error

$overflow off
code auto:4850 add[Int8] -128[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:4851 add[Int8] -128[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := -128 + b;
endcode
varvalue r 65535

code auto:4852 add[Int8] -128[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 65535

code auto:4853 add[compile-time] -128[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 127;
endcode
compile error

$overflow on
code auto:4854 add[Int8] -128[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -128;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4855 add[Int8] -128[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := -128 + b;
endcode
runtime overflow

code auto:4856 add[Int8] -128[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -128;
  var  r: Word;
  r := a + 127;
endcode
runtime overflow

code auto:4857 add[compile-time] -128[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 127;
endcode
compile error

$overflow off
code auto:4858 add[Int8] -127[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:4859 add[Int8] -127[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 1

code auto:4860 add[Int8] -127[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 1

code auto:4861 add[compile-time] -127[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + -128;
endcode
compile error

$overflow on
code auto:4862 add[Int8] -127[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4863 add[Int8] -127[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := -127 + b;
endcode
runtime overflow

code auto:4864 add[Int8] -127[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:4865 add[compile-time] -127[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + -128;
endcode
compile error

$overflow off
code auto:4866 add[Int8] -127[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:4867 add[Int8] -127[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 2

code auto:4868 add[Int8] -127[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 2

code auto:4869 add[compile-time] -127[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + -127;
endcode
compile error

$overflow on
code auto:4870 add[Int8] -127[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4871 add[Int8] -127[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := -127 + b;
endcode
runtime overflow

code auto:4872 add[Int8] -127[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -127;
endcode
runtime overflow

code auto:4873 add[compile-time] -127[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + -127;
endcode
compile error

$overflow off
code auto:4874 add[Int8] -127[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:4875 add[Int8] -127[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 65408

code auto:4876 add[Int8] -127[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 65408

code auto:4877 add[compile-time] -127[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + -1;
endcode
compile error

$overflow on
code auto:4878 add[Int8] -127[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4879 add[Int8] -127[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := -127 + b;
endcode
runtime overflow

code auto:4880 add[Int8] -127[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + -1;
endcode
runtime overflow

code auto:4881 add[compile-time] -127[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + -1;
endcode
compile error

$overflow off
code auto:4882 add[Int8] -127[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:4883 add[Int8] -127[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 65409

code auto:4884 add[Int8] -127[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 65409

code auto:4885 add[compile-time] -127[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + 0;
endcode
compile error

$overflow on
code auto:4886 add[Int8] -127[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4887 add[Int8] -127[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := -127 + b;
endcode
runtime overflow

code auto:4888 add[Int8] -127[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 0;
endcode
runtime overflow

code auto:4889 add[compile-time] -127[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + 0;
endcode
compile error

$overflow off
code auto:4890 add[Int8] -127[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65410

code auto:4891 add[Int8] -127[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 65410

code auto:4892 add[Int8] -127[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 65410

code auto:4893 add[compile-time] -127[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + 1;
endcode
compile error

$overflow on
code auto:4894 add[Int8] -127[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4895 add[Int8] -127[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := -127 + b;
endcode
runtime overflow

code auto:4896 add[Int8] -127[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 1;
endcode
runtime overflow

code auto:4897 add[compile-time] -127[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + 1;
endcode
compile error

$overflow off
code auto:4898 add[Int8] -127[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4899 add[Int8] -127[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 0

code auto:4900 add[Int8] -127[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 0

code auto:4901 add[compile-time] -127[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -127 + 127;
endcode
varvalue r 0

$overflow on
code auto:4902 add[Int8] -127[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4903 add[Int8] -127[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := -127 + b;
endcode
varvalue r 0

code auto:4904 add[Int8] -127[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -127;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 0

code auto:4905 add[compile-time] -127[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -127 + 127;
endcode
varvalue r 0

$overflow off
code auto:4906 add[Int8] -1[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:4907 add[Int8] -1[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 127

code auto:4908 add[Int8] -1[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 127

code auto:4909 add[compile-time] -1[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:4910 add[Int8] -1[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4911 add[Int8] -1[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := -1 + b;
endcode
runtime overflow

code auto:4912 add[Int8] -1[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:4913 add[compile-time] -1[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:4914 add[Int8] -1[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:4915 add[Int8] -1[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 65408

code auto:4916 add[Int8] -1[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 65408

code auto:4917 add[compile-time] -1[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -127;
endcode
compile error

$overflow on
code auto:4918 add[Int8] -1[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4919 add[Int8] -1[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := -1 + b;
endcode
runtime overflow

code auto:4920 add[Int8] -1[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -127;
endcode
runtime overflow

code auto:4921 add[compile-time] -1[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -127;
endcode
compile error

$overflow off
code auto:4922 add[Int8] -1[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:4923 add[Int8] -1[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 65534

code auto:4924 add[Int8] -1[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 65534

code auto:4925 add[compile-time] -1[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -1;
endcode
compile error

$overflow on
code auto:4926 add[Int8] -1[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4927 add[Int8] -1[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := -1 + b;
endcode
runtime overflow

code auto:4928 add[Int8] -1[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + -1;
endcode
runtime overflow

code auto:4929 add[compile-time] -1[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -1;
endcode
compile error

$overflow off
code auto:4930 add[Int8] -1[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:4931 add[Int8] -1[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 65535

code auto:4932 add[Int8] -1[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 65535

code auto:4933 add[compile-time] -1[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:4934 add[Int8] -1[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4935 add[Int8] -1[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := -1 + b;
endcode
runtime overflow

code auto:4936 add[Int8] -1[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 0;
endcode
runtime overflow

code auto:4937 add[compile-time] -1[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:4938 add[Int8] -1[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4939 add[Int8] -1[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 0

code auto:4940 add[Int8] -1[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 0

code auto:4941 add[compile-time] -1[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:4942 add[Int8] -1[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4943 add[Int8] -1[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 0

code auto:4944 add[Int8] -1[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 0

code auto:4945 add[compile-time] -1[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:4946 add[Int8] -1[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:4947 add[Int8] -1[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 126

code auto:4948 add[Int8] -1[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 126

code auto:4949 add[compile-time] -1[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:4950 add[Int8] -1[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = -1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:4951 add[Int8] -1[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := -1 + b;
endcode
varvalue r 126

code auto:4952 add[Int8] -1[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = -1;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 126

code auto:4953 add[compile-time] -1[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:4954 add[Int8] 0[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:4955 add[Int8] 0[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 65408

code auto:4956 add[Int8] 0[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 65408

code auto:4957 add[compile-time] 0[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:4958 add[Int8] 0[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4959 add[Int8] 0[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := 0 + b;
endcode
runtime overflow

code auto:4960 add[Int8] 0[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:4961 add[compile-time] 0[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:4962 add[Int8] 0[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:4963 add[Int8] 0[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 65409

code auto:4964 add[Int8] 0[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 65409

code auto:4965 add[compile-time] 0[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -127;
endcode
compile error

$overflow on
code auto:4966 add[Int8] 0[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4967 add[Int8] 0[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := 0 + b;
endcode
runtime overflow

code auto:4968 add[Int8] 0[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -127;
endcode
runtime overflow

code auto:4969 add[compile-time] 0[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -127;
endcode
compile error

$overflow off
code auto:4970 add[Int8] 0[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:4971 add[Int8] 0[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 65535

code auto:4972 add[Int8] 0[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 65535

code auto:4973 add[compile-time] 0[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:4974 add[Int8] 0[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:4975 add[Int8] 0[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := 0 + b;
endcode
runtime overflow

code auto:4976 add[Int8] 0[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + -1;
endcode
runtime overflow

code auto:4977 add[compile-time] 0[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:4978 add[Int8] 0[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4979 add[Int8] 0[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 0

code auto:4980 add[Int8] 0[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 0

code auto:4981 add[compile-time] 0[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:4982 add[Int8] 0[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:4983 add[Int8] 0[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 0

code auto:4984 add[Int8] 0[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 0

code auto:4985 add[compile-time] 0[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:4986 add[Int8] 0[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:4987 add[Int8] 0[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 1

code auto:4988 add[Int8] 0[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 1

code auto:4989 add[compile-time] 0[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:4990 add[Int8] 0[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:4991 add[Int8] 0[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 1

code auto:4992 add[Int8] 0[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 1

code auto:4993 add[compile-time] 0[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:4994 add[Int8] 0[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:4995 add[Int8] 0[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 127

code auto:4996 add[Int8] 0[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 127

code auto:4997 add[compile-time] 0[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:4998 add[Int8] 0[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 0;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:4999 add[Int8] 0[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 127

code auto:5000 add[Int8] 0[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 0;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 127

code auto:5001 add[compile-time] 0[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:5002 add[Int8] 1[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:5003 add[Int8] 1[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 65409

code auto:5004 add[Int8] 1[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 65409

code auto:5005 add[compile-time] 1[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -128;
endcode
compile error

$overflow on
code auto:5006 add[Int8] 1[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5007 add[Int8] 1[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := 1 + b;
endcode
runtime overflow

code auto:5008 add[Int8] 1[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:5009 add[compile-time] 1[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -128;
endcode
compile error

$overflow off
code auto:5010 add[Int8] 1[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65410

code auto:5011 add[Int8] 1[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 65410

code auto:5012 add[Int8] 1[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 65410

code auto:5013 add[compile-time] 1[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -127;
endcode
compile error

$overflow on
code auto:5014 add[Int8] 1[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5015 add[Int8] 1[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := 1 + b;
endcode
runtime overflow

code auto:5016 add[Int8] 1[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -127;
endcode
runtime overflow

code auto:5017 add[compile-time] 1[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -127;
endcode
compile error

$overflow off
code auto:5018 add[Int8] 1[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:5019 add[Int8] 1[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 0

code auto:5020 add[Int8] 1[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 0

code auto:5021 add[compile-time] 1[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:5022 add[Int8] 1[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:5023 add[Int8] 1[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 0

code auto:5024 add[Int8] 1[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 0

code auto:5025 add[compile-time] 1[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:5026 add[Int8] 1[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:5027 add[Int8] 1[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 1

code auto:5028 add[Int8] 1[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 1

code auto:5029 add[compile-time] 1[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:5030 add[Int8] 1[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:5031 add[Int8] 1[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 1

code auto:5032 add[Int8] 1[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 1

code auto:5033 add[compile-time] 1[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:5034 add[Int8] 1[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:5035 add[Int8] 1[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 2

code auto:5036 add[Int8] 1[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 2

code auto:5037 add[compile-time] 1[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:5038 add[Int8] 1[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:5039 add[Int8] 1[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 2

code auto:5040 add[Int8] 1[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 2

code auto:5041 add[compile-time] 1[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:5042 add[Int8] 1[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:5043 add[Int8] 1[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 65408

code auto:5044 add[Int8] 1[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 65408

code auto:5045 add[compile-time] 1[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:5046 add[Int8] 1[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 1;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5047 add[Int8] 1[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := 1 + b;
endcode
runtime overflow

code auto:5048 add[Int8] 1[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 1;
  var  r: Word;
  r := a + 127;
endcode
runtime overflow

code auto:5049 add[compile-time] 1[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:5050 add[Int8] 127[Int8], -128[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:5051 add[Int8] 127[Int8], -128[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -128;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 65535

code auto:5052 add[Int8] 127[Int8], -128[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -128;
endcode
varvalue r 65535

code auto:5053 add[compile-time] 127[Int8], -128[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -128;
endcode
compile error

$overflow on
code auto:5054 add[Int8] 127[Int8], -128[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5055 add[Int8] 127[Int8], -128[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -128;
  var  r: Word;
  r := 127 + b;
endcode
runtime overflow

code auto:5056 add[Int8] 127[Int8], -128[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -128;
endcode
runtime overflow

code auto:5057 add[compile-time] 127[Int8], -128[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -128;
endcode
compile error

$overflow off
code auto:5058 add[Int8] 127[Int8], -127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:5059 add[Int8] 127[Int8], -127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -127;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 0

code auto:5060 add[Int8] 127[Int8], -127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 0

code auto:5061 add[compile-time] 127[Int8], -127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -127;
endcode
varvalue r 0

$overflow on
code auto:5062 add[Int8] 127[Int8], -127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:5063 add[Int8] 127[Int8], -127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -127;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 0

code auto:5064 add[Int8] 127[Int8], -127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -127;
endcode
varvalue r 0

code auto:5065 add[compile-time] 127[Int8], -127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -127;
endcode
varvalue r 0

$overflow off
code auto:5066 add[Int8] 127[Int8], -1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:5067 add[Int8] 127[Int8], -1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = -1;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 126

code auto:5068 add[Int8] 127[Int8], -1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 126

code auto:5069 add[compile-time] 127[Int8], -1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:5070 add[Int8] 127[Int8], -1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:5071 add[Int8] 127[Int8], -1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = -1;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 126

code auto:5072 add[Int8] 127[Int8], -1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + -1;
endcode
varvalue r 126

code auto:5073 add[compile-time] 127[Int8], -1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:5074 add[Int8] 127[Int8], 0[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:5075 add[Int8] 127[Int8], 0[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 0;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 127

code auto:5076 add[Int8] 127[Int8], 0[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 127

code auto:5077 add[compile-time] 127[Int8], 0[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:5078 add[Int8] 127[Int8], 0[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:5079 add[Int8] 127[Int8], 0[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 0;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 127

code auto:5080 add[Int8] 127[Int8], 0[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 127

code auto:5081 add[compile-time] 127[Int8], 0[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:5082 add[Int8] 127[Int8], 1[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:5083 add[Int8] 127[Int8], 1[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 1;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 65408

code auto:5084 add[Int8] 127[Int8], 1[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 65408

code auto:5085 add[compile-time] 127[Int8], 1[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:5086 add[Int8] 127[Int8], 1[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5087 add[Int8] 127[Int8], 1[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 1;
  var  r: Word;
  r := 127 + b;
endcode
runtime overflow

code auto:5088 add[Int8] 127[Int8], 1[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 1;
endcode
runtime overflow

code auto:5089 add[compile-time] 127[Int8], 1[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:5090 add[Int8] 127[Int8], 127[Int8] -> [Word] Var $overflow off
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:5091 add[Int8] 127[Int8], 127[Int8] -> [Word] Left immediate $overflow off
  var  b: Int8 = 127;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 65534

code auto:5092 add[Int8] 127[Int8], 127[Int8] -> [Word] Right immediate $overflow off
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 65534

code auto:5093 add[compile-time] 127[Int8], 127[Int8] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:5094 add[Int8] 127[Int8], 127[Int8] -> [Word] Var $overflow on
  var  a: Int8 = 127;
  var  b: Int8 = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:5095 add[Int8] 127[Int8], 127[Int8] -> [Word] Left immediate $overflow on
  var  b: Int8 = 127;
  var  r: Word;
  r := 127 + b;
endcode
runtime overflow

code auto:5096 add[Int8] 127[Int8], 127[Int8] -> [Word] Right immediate $overflow on
  var  a: Int8 = 127;
  var  r: Word;
  r := a + 127;
endcode
runtime overflow

code auto:5097 add[compile-time] 127[Int8], 127[Int8] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:5098 add[Integer] -32768[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5099 add[compile-time] -32768[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + -32768;
endcode
compile error

$overflow on
code auto:5100 add[Integer] -32768[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5101 add[compile-time] -32768[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + -32768;
endcode
compile error

$overflow off
code auto:5102 add[Integer] -32768[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5103 add[compile-time] -32768[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + -32767;
endcode
compile error

$overflow on
code auto:5104 add[Integer] -32768[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5105 add[compile-time] -32768[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + -32767;
endcode
compile error

$overflow off
code auto:5106 add[Integer] -32768[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5107 add[compile-time] -32768[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + -129;
endcode
compile error

$overflow on
code auto:5108 add[Integer] -32768[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5109 add[compile-time] -32768[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + -129;
endcode
compile error

$overflow off
code auto:5110 add[Integer] -32768[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5111 add[compile-time] -32768[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:5112 add[Integer] -32768[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5113 add[compile-time] -32768[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + -128;
endcode
compile error

$overflow off
code auto:5114 add[Integer] -32768[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5115 add[compile-time] -32768[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:5116 add[Integer] -32768[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5117 add[compile-time] -32768[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + -1;
endcode
compile error

$overflow off
code auto:5118 add[Integer] -32768[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5119 add[compile-time] -32768[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + 0;
endcode
compile error

$overflow on
code auto:5120 add[Integer] -32768[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5121 add[compile-time] -32768[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + 0;
endcode
compile error

$overflow off
code auto:5122 add[Integer] -32768[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5123 add[compile-time] -32768[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + 1;
endcode
compile error

$overflow on
code auto:5124 add[Integer] -32768[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5125 add[compile-time] -32768[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + 1;
endcode
compile error

$overflow off
code auto:5126 add[Integer] -32768[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5127 add[compile-time] -32768[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + 127;
endcode
compile error

$overflow on
code auto:5128 add[Integer] -32768[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5129 add[compile-time] -32768[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + 127;
endcode
compile error

$overflow off
code auto:5130 add[Integer] -32768[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5131 add[compile-time] -32768[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + 128;
endcode
compile error

$overflow on
code auto:5132 add[Integer] -32768[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5133 add[compile-time] -32768[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + 128;
endcode
compile error

$overflow off
code auto:5134 add[Integer] -32768[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5135 add[compile-time] -32768[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow on
code auto:5136 add[Integer] -32768[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5137 add[compile-time] -32768[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow off
code auto:5138 add[Integer] -32767[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5139 add[compile-time] -32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + -32768;
endcode
compile error

$overflow on
code auto:5140 add[Integer] -32767[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5141 add[compile-time] -32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + -32768;
endcode
compile error

$overflow off
code auto:5142 add[Integer] -32767[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:5143 add[compile-time] -32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + -32767;
endcode
compile error

$overflow on
code auto:5144 add[Integer] -32767[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5145 add[compile-time] -32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + -32767;
endcode
compile error

$overflow off
code auto:5146 add[Integer] -32767[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5147 add[compile-time] -32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + -129;
endcode
compile error

$overflow on
code auto:5148 add[Integer] -32767[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5149 add[compile-time] -32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + -129;
endcode
compile error

$overflow off
code auto:5150 add[Integer] -32767[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5151 add[compile-time] -32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:5152 add[Integer] -32767[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5153 add[compile-time] -32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + -128;
endcode
compile error

$overflow off
code auto:5154 add[Integer] -32767[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5155 add[compile-time] -32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + -1;
endcode
compile error

$overflow on
code auto:5156 add[Integer] -32767[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5157 add[compile-time] -32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + -1;
endcode
compile error

$overflow off
code auto:5158 add[Integer] -32767[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5159 add[compile-time] -32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + 0;
endcode
compile error

$overflow on
code auto:5160 add[Integer] -32767[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5161 add[compile-time] -32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + 0;
endcode
compile error

$overflow off
code auto:5162 add[Integer] -32767[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:5163 add[compile-time] -32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + 1;
endcode
compile error

$overflow on
code auto:5164 add[Integer] -32767[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5165 add[compile-time] -32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + 1;
endcode
compile error

$overflow off
code auto:5166 add[Integer] -32767[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5167 add[compile-time] -32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + 127;
endcode
compile error

$overflow on
code auto:5168 add[Integer] -32767[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5169 add[compile-time] -32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + 127;
endcode
compile error

$overflow off
code auto:5170 add[Integer] -32767[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5171 add[compile-time] -32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + 128;
endcode
compile error

$overflow on
code auto:5172 add[Integer] -32767[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5173 add[compile-time] -32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + 128;
endcode
compile error

$overflow off
code auto:5174 add[Integer] -32767[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5175 add[compile-time] -32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:5176 add[Integer] -32767[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5177 add[compile-time] -32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:5178 add[Integer] -129[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5179 add[compile-time] -129[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + -32768;
endcode
compile error

$overflow on
code auto:5180 add[Integer] -129[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5181 add[compile-time] -129[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + -32768;
endcode
compile error

$overflow off
code auto:5182 add[Integer] -129[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5183 add[compile-time] -129[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + -32767;
endcode
compile error

$overflow on
code auto:5184 add[Integer] -129[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5185 add[compile-time] -129[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + -32767;
endcode
compile error

$overflow off
code auto:5186 add[Integer] -129[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5187 add[compile-time] -129[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + -129;
endcode
compile error

$overflow on
code auto:5188 add[Integer] -129[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5189 add[compile-time] -129[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + -129;
endcode
compile error

$overflow off
code auto:5190 add[Integer] -129[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5191 add[compile-time] -129[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + -128;
endcode
compile error

$overflow on
code auto:5192 add[Integer] -129[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5193 add[compile-time] -129[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + -128;
endcode
compile error

$overflow off
code auto:5194 add[Integer] -129[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5195 add[compile-time] -129[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + -1;
endcode
compile error

$overflow on
code auto:5196 add[Integer] -129[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5197 add[compile-time] -129[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + -1;
endcode
compile error

$overflow off
code auto:5198 add[Integer] -129[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5199 add[compile-time] -129[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + 0;
endcode
compile error

$overflow on
code auto:5200 add[Integer] -129[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5201 add[compile-time] -129[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + 0;
endcode
compile error

$overflow off
code auto:5202 add[Integer] -129[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5203 add[compile-time] -129[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + 1;
endcode
varvalue r -128

$overflow on
code auto:5204 add[Integer] -129[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5205 add[compile-time] -129[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + 1;
endcode
varvalue r -128

$overflow off
code auto:5206 add[Integer] -129[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5207 add[compile-time] -129[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + 127;
endcode
varvalue r -2

$overflow on
code auto:5208 add[Integer] -129[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5209 add[compile-time] -129[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + 127;
endcode
varvalue r -2

$overflow off
code auto:5210 add[Integer] -129[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5211 add[compile-time] -129[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + 128;
endcode
varvalue r -1

$overflow on
code auto:5212 add[Integer] -129[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5213 add[compile-time] -129[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + 128;
endcode
varvalue r -1

$overflow off
code auto:5214 add[Integer] -129[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5215 add[compile-time] -129[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -129 + 32767;
endcode
compile error

$overflow on
code auto:5216 add[Integer] -129[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5217 add[compile-time] -129[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -129 + 32767;
endcode
compile error

$overflow off
code auto:5218 add[Integer] -128[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5219 add[compile-time] -128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:5220 add[Integer] -128[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5221 add[compile-time] -128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -32768;
endcode
compile error

$overflow off
code auto:5222 add[Integer] -128[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5223 add[compile-time] -128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:5224 add[Integer] -128[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5225 add[compile-time] -128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -32767;
endcode
compile error

$overflow off
code auto:5226 add[Integer] -128[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5227 add[compile-time] -128[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -129;
endcode
compile error

$overflow on
code auto:5228 add[Integer] -128[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5229 add[compile-time] -128[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -129;
endcode
compile error

$overflow off
code auto:5230 add[Integer] -128[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5231 add[compile-time] -128[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:5232 add[Integer] -128[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5233 add[compile-time] -128[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:5234 add[Integer] -128[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5235 add[compile-time] -128[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:5236 add[Integer] -128[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5237 add[compile-time] -128[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:5238 add[Integer] -128[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5239 add[compile-time] -128[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:5240 add[Integer] -128[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5241 add[compile-time] -128[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 0;
endcode
varvalue r -128

$overflow off
code auto:5242 add[Integer] -128[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5243 add[compile-time] -128[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:5244 add[Integer] -128[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5245 add[compile-time] -128[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 1;
endcode
varvalue r -127

$overflow off
code auto:5246 add[Integer] -128[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5247 add[compile-time] -128[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:5248 add[Integer] -128[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5249 add[compile-time] -128[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 127;
endcode
varvalue r -1

$overflow off
code auto:5250 add[Integer] -128[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5251 add[compile-time] -128[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:5252 add[Integer] -128[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5253 add[compile-time] -128[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:5254 add[Integer] -128[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5255 add[compile-time] -128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -128 + 32767;
endcode
compile error

$overflow on
code auto:5256 add[Integer] -128[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5257 add[compile-time] -128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -128 + 32767;
endcode
compile error

$overflow off
code auto:5258 add[Integer] -1[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5259 add[compile-time] -1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:5260 add[Integer] -1[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5261 add[compile-time] -1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -32768;
endcode
compile error

$overflow off
code auto:5262 add[Integer] -1[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5263 add[compile-time] -1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -32767;
endcode
compile error

$overflow on
code auto:5264 add[Integer] -1[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5265 add[compile-time] -1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -32767;
endcode
compile error

$overflow off
code auto:5266 add[Integer] -1[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5267 add[compile-time] -1[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -129;
endcode
compile error

$overflow on
code auto:5268 add[Integer] -1[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5269 add[compile-time] -1[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -129;
endcode
compile error

$overflow off
code auto:5270 add[Integer] -1[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5271 add[compile-time] -1[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:5272 add[Integer] -1[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5273 add[compile-time] -1[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:5274 add[Integer] -1[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5275 add[compile-time] -1[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:5276 add[Integer] -1[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5277 add[compile-time] -1[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + -1;
endcode
varvalue r -2

$overflow off
code auto:5278 add[Integer] -1[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5279 add[compile-time] -1[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:5280 add[Integer] -1[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5281 add[compile-time] -1[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 0;
endcode
varvalue r -1

$overflow off
code auto:5282 add[Integer] -1[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5283 add[compile-time] -1[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:5284 add[Integer] -1[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5285 add[compile-time] -1[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:5286 add[Integer] -1[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5287 add[compile-time] -1[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:5288 add[Integer] -1[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5289 add[compile-time] -1[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:5290 add[Integer] -1[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5291 add[compile-time] -1[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:5292 add[Integer] -1[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5293 add[compile-time] -1[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:5294 add[Integer] -1[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5295 add[compile-time] -1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := -1 + 32767;
endcode
compile error

$overflow on
code auto:5296 add[Integer] -1[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5297 add[compile-time] -1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := -1 + 32767;
endcode
compile error

$overflow off
code auto:5298 add[Integer] 0[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5299 add[compile-time] 0[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -32768;
endcode
compile error

$overflow on
code auto:5300 add[Integer] 0[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5301 add[compile-time] 0[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -32768;
endcode
compile error

$overflow off
code auto:5302 add[Integer] 0[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5303 add[compile-time] 0[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -32767;
endcode
compile error

$overflow on
code auto:5304 add[Integer] 0[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5305 add[compile-time] 0[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -32767;
endcode
compile error

$overflow off
code auto:5306 add[Integer] 0[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5307 add[compile-time] 0[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -129;
endcode
compile error

$overflow on
code auto:5308 add[Integer] 0[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5309 add[compile-time] 0[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -129;
endcode
compile error

$overflow off
code auto:5310 add[Integer] 0[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5311 add[compile-time] 0[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:5312 add[Integer] 0[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5313 add[compile-time] 0[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -128;
endcode
varvalue r -128

$overflow off
code auto:5314 add[Integer] 0[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5315 add[compile-time] 0[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:5316 add[Integer] 0[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5317 add[compile-time] 0[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + -1;
endcode
varvalue r -1

$overflow off
code auto:5318 add[Integer] 0[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5319 add[compile-time] 0[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:5320 add[Integer] 0[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5321 add[compile-time] 0[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:5322 add[Integer] 0[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5323 add[compile-time] 0[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:5324 add[Integer] 0[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5325 add[compile-time] 0[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:5326 add[Integer] 0[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5327 add[compile-time] 0[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:5328 add[Integer] 0[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5329 add[compile-time] 0[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:5330 add[Integer] 0[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5331 add[compile-time] 0[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 128;
endcode
compile error

$overflow on
code auto:5332 add[Integer] 0[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5333 add[compile-time] 0[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 128;
endcode
compile error

$overflow off
code auto:5334 add[Integer] 0[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5335 add[compile-time] 0[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:5336 add[Integer] 0[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5337 add[compile-time] 0[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:5338 add[Integer] 1[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5339 add[compile-time] 1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -32768;
endcode
compile error

$overflow on
code auto:5340 add[Integer] 1[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5341 add[compile-time] 1[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -32768;
endcode
compile error

$overflow off
code auto:5342 add[Integer] 1[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:5343 add[compile-time] 1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -32767;
endcode
compile error

$overflow on
code auto:5344 add[Integer] 1[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5345 add[compile-time] 1[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -32767;
endcode
compile error

$overflow off
code auto:5346 add[Integer] 1[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5347 add[compile-time] 1[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -129;
endcode
varvalue r -128

$overflow on
code auto:5348 add[Integer] 1[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5349 add[compile-time] 1[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -129;
endcode
varvalue r -128

$overflow off
code auto:5350 add[Integer] 1[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5351 add[compile-time] 1[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:5352 add[Integer] 1[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5353 add[compile-time] 1[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -128;
endcode
varvalue r -127

$overflow off
code auto:5354 add[Integer] 1[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5355 add[compile-time] 1[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:5356 add[Integer] 1[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5357 add[compile-time] 1[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:5358 add[Integer] 1[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5359 add[compile-time] 1[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:5360 add[Integer] 1[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:5361 add[compile-time] 1[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:5362 add[Integer] 1[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:5363 add[compile-time] 1[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:5364 add[Integer] 1[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:5365 add[compile-time] 1[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:5366 add[Integer] 1[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5367 add[compile-time] 1[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow on
code auto:5368 add[Integer] 1[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5369 add[compile-time] 1[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow off
code auto:5370 add[Integer] 1[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5371 add[compile-time] 1[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 128;
endcode
compile error

$overflow on
code auto:5372 add[Integer] 1[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5373 add[compile-time] 1[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 128;
endcode
compile error

$overflow off
code auto:5374 add[Integer] 1[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5375 add[compile-time] 1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:5376 add[Integer] 1[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5377 add[compile-time] 1[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:5378 add[Integer] 127[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5379 add[compile-time] 127[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -32768;
endcode
compile error

$overflow on
code auto:5380 add[Integer] 127[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5381 add[compile-time] 127[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -32768;
endcode
compile error

$overflow off
code auto:5382 add[Integer] 127[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5383 add[compile-time] 127[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -32767;
endcode
compile error

$overflow on
code auto:5384 add[Integer] 127[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5385 add[compile-time] 127[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -32767;
endcode
compile error

$overflow off
code auto:5386 add[Integer] 127[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5387 add[compile-time] 127[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -129;
endcode
varvalue r -2

$overflow on
code auto:5388 add[Integer] 127[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5389 add[compile-time] 127[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -129;
endcode
varvalue r -2

$overflow off
code auto:5390 add[Integer] 127[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5391 add[compile-time] 127[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:5392 add[Integer] 127[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5393 add[compile-time] 127[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -128;
endcode
varvalue r -1

$overflow off
code auto:5394 add[Integer] 127[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5395 add[compile-time] 127[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:5396 add[Integer] 127[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5397 add[compile-time] 127[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:5398 add[Integer] 127[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5399 add[compile-time] 127[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:5400 add[Integer] 127[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5401 add[compile-time] 127[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:5402 add[Integer] 127[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5403 add[compile-time] 127[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow on
code auto:5404 add[Integer] 127[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5405 add[compile-time] 127[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow off
code auto:5406 add[Integer] 127[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5407 add[compile-time] 127[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow on
code auto:5408 add[Integer] 127[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5409 add[compile-time] 127[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow off
code auto:5410 add[Integer] 127[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5411 add[compile-time] 127[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 128;
endcode
compile error

$overflow on
code auto:5412 add[Integer] 127[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5413 add[compile-time] 127[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 128;
endcode
compile error

$overflow off
code auto:5414 add[Integer] 127[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5415 add[compile-time] 127[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:5416 add[Integer] 127[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5417 add[compile-time] 127[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:5418 add[Integer] 128[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5419 add[compile-time] 128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + -32768;
endcode
compile error

$overflow on
code auto:5420 add[Integer] 128[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5421 add[compile-time] 128[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + -32768;
endcode
compile error

$overflow off
code auto:5422 add[Integer] 128[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5423 add[compile-time] 128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + -32767;
endcode
compile error

$overflow on
code auto:5424 add[Integer] 128[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5425 add[compile-time] 128[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + -32767;
endcode
compile error

$overflow off
code auto:5426 add[Integer] 128[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5427 add[compile-time] 128[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + -129;
endcode
varvalue r -1

$overflow on
code auto:5428 add[Integer] 128[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5429 add[compile-time] 128[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + -129;
endcode
varvalue r -1

$overflow off
code auto:5430 add[Integer] 128[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5431 add[compile-time] 128[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:5432 add[Integer] 128[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5433 add[compile-time] 128[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:5434 add[Integer] 128[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5435 add[compile-time] 128[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:5436 add[Integer] 128[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5437 add[compile-time] 128[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:5438 add[Integer] 128[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:5439 add[compile-time] 128[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 0;
endcode
compile error

$overflow on
code auto:5440 add[Integer] 128[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5441 add[compile-time] 128[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 0;
endcode
compile error

$overflow off
code auto:5442 add[Integer] 128[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:5443 add[compile-time] 128[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 1;
endcode
compile error

$overflow on
code auto:5444 add[Integer] 128[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5445 add[compile-time] 128[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 1;
endcode
compile error

$overflow off
code auto:5446 add[Integer] 128[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5447 add[compile-time] 128[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 127;
endcode
compile error

$overflow on
code auto:5448 add[Integer] 128[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5449 add[compile-time] 128[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 127;
endcode
compile error

$overflow off
code auto:5450 add[Integer] 128[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5451 add[compile-time] 128[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 128;
endcode
compile error

$overflow on
code auto:5452 add[Integer] 128[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5453 add[compile-time] 128[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 128;
endcode
compile error

$overflow off
code auto:5454 add[Integer] 128[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5455 add[compile-time] 128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:5456 add[Integer] 128[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5457 add[compile-time] 128[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 32767;
endcode
compile error

$overflow off
code auto:5458 add[Integer] 32767[Integer], -32768[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5459 add[compile-time] 32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow on
code auto:5460 add[Integer] 32767[Integer], -32768[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5461 add[compile-time] 32767[Integer], -32768[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow off
code auto:5462 add[Integer] 32767[Integer], -32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5463 add[compile-time] 32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:5464 add[Integer] 32767[Integer], -32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5465 add[compile-time] 32767[Integer], -32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:5466 add[Integer] 32767[Integer], -129[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5467 add[compile-time] 32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + -129;
endcode
compile error

$overflow on
code auto:5468 add[Integer] 32767[Integer], -129[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5469 add[compile-time] 32767[Integer], -129[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + -129;
endcode
compile error

$overflow off
code auto:5470 add[Integer] 32767[Integer], -128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5471 add[compile-time] 32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + -128;
endcode
compile error

$overflow on
code auto:5472 add[Integer] 32767[Integer], -128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5473 add[compile-time] 32767[Integer], -128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + -128;
endcode
compile error

$overflow off
code auto:5474 add[Integer] 32767[Integer], -1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5475 add[compile-time] 32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + -1;
endcode
compile error

$overflow on
code auto:5476 add[Integer] 32767[Integer], -1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5477 add[compile-time] 32767[Integer], -1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + -1;
endcode
compile error

$overflow off
code auto:5478 add[Integer] 32767[Integer], 0[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:5479 add[compile-time] 32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:5480 add[Integer] 32767[Integer], 0[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5481 add[compile-time] 32767[Integer], 0[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:5482 add[Integer] 32767[Integer], 1[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:5483 add[compile-time] 32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:5484 add[Integer] 32767[Integer], 1[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5485 add[compile-time] 32767[Integer], 1[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:5486 add[Integer] 32767[Integer], 127[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:5487 add[compile-time] 32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:5488 add[Integer] 32767[Integer], 127[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5489 add[compile-time] 32767[Integer], 127[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:5490 add[Integer] 32767[Integer], 128[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:5491 add[compile-time] 32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:5492 add[Integer] 32767[Integer], 128[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5493 add[compile-time] 32767[Integer], 128[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 128;
endcode
compile error

$overflow off
code auto:5494 add[Integer] 32767[Integer], 32767[Integer] -> [Int8] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:5495 add[compile-time] 32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:5496 add[Integer] 32767[Integer], 32767[Integer] -> [Int8] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:5497 add[compile-time] 32767[Integer], 32767[Integer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:5498 add[Integer] -32768[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5499 add[compile-time] -32768[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -32768;
endcode
compile error

$overflow on
code auto:5500 add[Integer] -32768[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5501 add[compile-time] -32768[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -32767;
endcode
compile error

$overflow on
code auto:5502 add[Integer] -32768[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5503 add[compile-time] -32768[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -129;
endcode
compile error

$overflow on
code auto:5504 add[Integer] -32768[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5505 add[compile-time] -32768[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:5506 add[Integer] -32768[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5507 add[compile-time] -32768[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:5508 add[Integer] -32768[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:5509 add[compile-time] -32768[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 0;
endcode
varvalue r -32768

$overflow on
code auto:5510 add[Integer] -32768[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:5511 add[compile-time] -32768[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 1;
endcode
varvalue r -32767

$overflow on
code auto:5512 add[Integer] -32768[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:5513 add[compile-time] -32768[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 127;
endcode
varvalue r -32641

$overflow on
code auto:5514 add[Integer] -32768[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:5515 add[compile-time] -32768[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 128;
endcode
varvalue r -32640

$overflow on
code auto:5516 add[Integer] -32768[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5517 add[compile-time] -32768[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32768 + 32767;
endcode
varvalue r -1

$overflow on
code auto:5518 add[Integer] -32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5519 add[compile-time] -32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -32768;
endcode
compile error

$overflow on
code auto:5520 add[Integer] -32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5521 add[compile-time] -32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -32767;
endcode
compile error

$overflow on
code auto:5522 add[Integer] -32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5523 add[compile-time] -32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -129;
endcode
compile error

$overflow on
code auto:5524 add[Integer] -32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5525 add[compile-time] -32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:5526 add[Integer] -32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:5527 add[compile-time] -32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + -1;
endcode
varvalue r -32768

$overflow on
code auto:5528 add[Integer] -32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:5529 add[compile-time] -32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 0;
endcode
varvalue r -32767

$overflow on
code auto:5530 add[Integer] -32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:5531 add[compile-time] -32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 1;
endcode
varvalue r -32766

$overflow on
code auto:5532 add[Integer] -32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:5533 add[compile-time] -32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 127;
endcode
varvalue r -32640

$overflow on
code auto:5534 add[Integer] -32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:5535 add[compile-time] -32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 128;
endcode
varvalue r -32639

$overflow on
code auto:5536 add[Integer] -32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5537 add[compile-time] -32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:5538 add[Integer] -129[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5539 add[compile-time] -129[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -32768;
endcode
compile error

$overflow on
code auto:5540 add[Integer] -129[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5541 add[compile-time] -129[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -32767;
endcode
compile error

$overflow on
code auto:5542 add[Integer] -129[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -258

code auto:5543 add[compile-time] -129[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -129;
endcode
varvalue r -258

$overflow on
code auto:5544 add[Integer] -129[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:5545 add[compile-time] -129[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -128;
endcode
varvalue r -257

$overflow on
code auto:5546 add[Integer] -129[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:5547 add[compile-time] -129[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + -1;
endcode
varvalue r -130

$overflow on
code auto:5548 add[Integer] -129[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:5549 add[compile-time] -129[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 0;
endcode
varvalue r -129

$overflow on
code auto:5550 add[Integer] -129[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:5551 add[compile-time] -129[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 1;
endcode
varvalue r -128

$overflow on
code auto:5552 add[Integer] -129[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:5553 add[compile-time] -129[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 127;
endcode
varvalue r -2

$overflow on
code auto:5554 add[Integer] -129[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5555 add[compile-time] -129[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 128;
endcode
varvalue r -1

$overflow on
code auto:5556 add[Integer] -129[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:5557 add[compile-time] -129[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow on
code auto:5558 add[Integer] -128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5559 add[compile-time] -128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:5560 add[Integer] -128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5561 add[compile-time] -128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:5562 add[Integer] -128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -257

code auto:5563 add[compile-time] -128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -129;
endcode
varvalue r -257

$overflow on
code auto:5564 add[Integer] -128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -256

code auto:5565 add[compile-time] -128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -128;
endcode
varvalue r -256

$overflow on
code auto:5566 add[Integer] -128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:5567 add[compile-time] -128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + -1;
endcode
varvalue r -129

$overflow on
code auto:5568 add[Integer] -128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:5569 add[compile-time] -128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 0;
endcode
varvalue r -128

$overflow on
code auto:5570 add[Integer] -128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:5571 add[compile-time] -128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 1;
endcode
varvalue r -127

$overflow on
code auto:5572 add[Integer] -128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5573 add[compile-time] -128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 127;
endcode
varvalue r -1

$overflow on
code auto:5574 add[Integer] -128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5575 add[compile-time] -128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:5576 add[Integer] -128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:5577 add[compile-time] -128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:5578 add[Integer] -1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5579 add[compile-time] -1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:5580 add[Integer] -1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:5581 add[compile-time] -1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -32767;
endcode
varvalue r -32768

$overflow on
code auto:5582 add[Integer] -1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -130

code auto:5583 add[compile-time] -1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -129;
endcode
varvalue r -130

$overflow on
code auto:5584 add[Integer] -1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:5585 add[compile-time] -1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -128;
endcode
varvalue r -129

$overflow on
code auto:5586 add[Integer] -1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:5587 add[compile-time] -1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + -1;
endcode
varvalue r -2

$overflow on
code auto:5588 add[Integer] -1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5589 add[compile-time] -1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 0;
endcode
varvalue r -1

$overflow on
code auto:5590 add[Integer] -1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5591 add[compile-time] -1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:5592 add[Integer] -1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:5593 add[compile-time] -1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:5594 add[Integer] -1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:5595 add[compile-time] -1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:5596 add[Integer] -1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:5597 add[compile-time] -1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:5598 add[Integer] 0[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:5599 add[compile-time] 0[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32768;
endcode
varvalue r -32768

$overflow on
code auto:5600 add[Integer] 0[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:5601 add[compile-time] 0[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -32767;
endcode
varvalue r -32767

$overflow on
code auto:5602 add[Integer] 0[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -129

code auto:5603 add[compile-time] 0[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -129;
endcode
varvalue r -129

$overflow on
code auto:5604 add[Integer] 0[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:5605 add[compile-time] 0[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -128;
endcode
varvalue r -128

$overflow on
code auto:5606 add[Integer] 0[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5607 add[compile-time] 0[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + -1;
endcode
varvalue r -1

$overflow on
code auto:5608 add[Integer] 0[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5609 add[compile-time] 0[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:5610 add[Integer] 0[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:5611 add[compile-time] 0[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:5612 add[Integer] 0[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:5613 add[compile-time] 0[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:5614 add[Integer] 0[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:5615 add[compile-time] 0[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:5616 add[Integer] 0[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:5617 add[compile-time] 0[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:5618 add[Integer] 1[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32767

code auto:5619 add[compile-time] 1[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32768;
endcode
varvalue r -32767

$overflow on
code auto:5620 add[Integer] 1[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32766

code auto:5621 add[compile-time] 1[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -32767;
endcode
varvalue r -32766

$overflow on
code auto:5622 add[Integer] 1[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -128

code auto:5623 add[compile-time] 1[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -129;
endcode
varvalue r -128

$overflow on
code auto:5624 add[Integer] 1[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -127

code auto:5625 add[compile-time] 1[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -128;
endcode
varvalue r -127

$overflow on
code auto:5626 add[Integer] 1[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5627 add[compile-time] 1[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:5628 add[Integer] 1[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:5629 add[compile-time] 1[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:5630 add[Integer] 1[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:5631 add[compile-time] 1[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:5632 add[Integer] 1[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:5633 add[compile-time] 1[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:5634 add[Integer] 1[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:5635 add[compile-time] 1[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:5636 add[Integer] 1[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5637 add[compile-time] 1[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:5638 add[Integer] 127[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32641

code auto:5639 add[compile-time] 127[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32768;
endcode
varvalue r -32641

$overflow on
code auto:5640 add[Integer] 127[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:5641 add[compile-time] 127[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -32767;
endcode
varvalue r -32640

$overflow on
code auto:5642 add[Integer] 127[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:5643 add[compile-time] 127[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -129;
endcode
varvalue r -2

$overflow on
code auto:5644 add[Integer] 127[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5645 add[compile-time] 127[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -128;
endcode
varvalue r -1

$overflow on
code auto:5646 add[Integer] 127[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:5647 add[compile-time] 127[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:5648 add[Integer] 127[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:5649 add[compile-time] 127[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:5650 add[Integer] 127[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:5651 add[compile-time] 127[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:5652 add[Integer] 127[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:5653 add[compile-time] 127[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:5654 add[Integer] 127[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:5655 add[compile-time] 127[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:5656 add[Integer] 127[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5657 add[compile-time] 127[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:5658 add[Integer] 128[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32640

code auto:5659 add[compile-time] 128[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32768;
endcode
varvalue r -32640

$overflow on
code auto:5660 add[Integer] 128[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32639

code auto:5661 add[compile-time] 128[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -32767;
endcode
varvalue r -32639

$overflow on
code auto:5662 add[Integer] 128[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5663 add[compile-time] 128[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -129;
endcode
varvalue r -1

$overflow on
code auto:5664 add[Integer] 128[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5665 add[compile-time] 128[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:5666 add[Integer] 128[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:5667 add[compile-time] 128[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:5668 add[Integer] 128[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:5669 add[compile-time] 128[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:5670 add[Integer] 128[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:5671 add[compile-time] 128[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:5672 add[Integer] 128[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:5673 add[compile-time] 128[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:5674 add[Integer] 128[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 256

code auto:5675 add[compile-time] 128[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:5676 add[Integer] 128[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5677 add[compile-time] 128[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:5678 add[Integer] 32767[Integer], -32768[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:5679 add[compile-time] 32767[Integer], -32768[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32768;
endcode
varvalue r -1

$overflow on
code auto:5680 add[Integer] 32767[Integer], -32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:5681 add[compile-time] 32767[Integer], -32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:5682 add[Integer] 32767[Integer], -129[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32638

code auto:5683 add[compile-time] 32767[Integer], -129[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow on
code auto:5684 add[Integer] 32767[Integer], -128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32639

code auto:5685 add[compile-time] 32767[Integer], -128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:5686 add[Integer] 32767[Integer], -1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:5687 add[compile-time] 32767[Integer], -1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:5688 add[Integer] 32767[Integer], 0[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:5689 add[compile-time] 32767[Integer], 0[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:5690 add[Integer] 32767[Integer], 1[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5691 add[compile-time] 32767[Integer], 1[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:5692 add[Integer] 32767[Integer], 127[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5693 add[compile-time] 32767[Integer], 127[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:5694 add[Integer] 32767[Integer], 128[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5695 add[compile-time] 32767[Integer], 128[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:5696 add[Integer] 32767[Integer], 32767[Integer] -> [Integer] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:5697 add[compile-time] 32767[Integer], 32767[Integer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:5698 add[Integer] -32768[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5699 add[compile-time] -32768[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + -32768;
endcode
compile error

$overflow on
code auto:5700 add[Integer] -32768[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5701 add[compile-time] -32768[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + -32768;
endcode
compile error

$overflow off
code auto:5702 add[Integer] -32768[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5703 add[compile-time] -32768[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + -32767;
endcode
compile error

$overflow on
code auto:5704 add[Integer] -32768[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5705 add[compile-time] -32768[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + -32767;
endcode
compile error

$overflow off
code auto:5706 add[Integer] -32768[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5707 add[compile-time] -32768[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + -129;
endcode
compile error

$overflow on
code auto:5708 add[Integer] -32768[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5709 add[compile-time] -32768[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + -129;
endcode
compile error

$overflow off
code auto:5710 add[Integer] -32768[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5711 add[compile-time] -32768[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:5712 add[Integer] -32768[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5713 add[compile-time] -32768[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + -128;
endcode
compile error

$overflow off
code auto:5714 add[Integer] -32768[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5715 add[compile-time] -32768[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:5716 add[Integer] -32768[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5717 add[compile-time] -32768[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + -1;
endcode
compile error

$overflow off
code auto:5718 add[Integer] -32768[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5719 add[compile-time] -32768[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + 0;
endcode
compile error

$overflow on
code auto:5720 add[Integer] -32768[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5721 add[compile-time] -32768[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + 0;
endcode
compile error

$overflow off
code auto:5722 add[Integer] -32768[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5723 add[compile-time] -32768[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + 1;
endcode
compile error

$overflow on
code auto:5724 add[Integer] -32768[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5725 add[compile-time] -32768[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + 1;
endcode
compile error

$overflow off
code auto:5726 add[Integer] -32768[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5727 add[compile-time] -32768[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + 127;
endcode
compile error

$overflow on
code auto:5728 add[Integer] -32768[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5729 add[compile-time] -32768[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + 127;
endcode
compile error

$overflow off
code auto:5730 add[Integer] -32768[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5731 add[compile-time] -32768[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + 128;
endcode
compile error

$overflow on
code auto:5732 add[Integer] -32768[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5733 add[compile-time] -32768[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + 128;
endcode
compile error

$overflow off
code auto:5734 add[Integer] -32768[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5735 add[compile-time] -32768[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32768 + 32767;
endcode
compile error

$overflow on
code auto:5736 add[Integer] -32768[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5737 add[compile-time] -32768[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32768 + 32767;
endcode
compile error

$overflow off
code auto:5738 add[Integer] -32767[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5739 add[compile-time] -32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + -32768;
endcode
compile error

$overflow on
code auto:5740 add[Integer] -32767[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5741 add[compile-time] -32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + -32768;
endcode
compile error

$overflow off
code auto:5742 add[Integer] -32767[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:5743 add[compile-time] -32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + -32767;
endcode
compile error

$overflow on
code auto:5744 add[Integer] -32767[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5745 add[compile-time] -32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + -32767;
endcode
compile error

$overflow off
code auto:5746 add[Integer] -32767[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5747 add[compile-time] -32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + -129;
endcode
compile error

$overflow on
code auto:5748 add[Integer] -32767[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5749 add[compile-time] -32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + -129;
endcode
compile error

$overflow off
code auto:5750 add[Integer] -32767[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5751 add[compile-time] -32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:5752 add[Integer] -32767[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5753 add[compile-time] -32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + -128;
endcode
compile error

$overflow off
code auto:5754 add[Integer] -32767[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5755 add[compile-time] -32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + -1;
endcode
compile error

$overflow on
code auto:5756 add[Integer] -32767[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5757 add[compile-time] -32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + -1;
endcode
compile error

$overflow off
code auto:5758 add[Integer] -32767[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5759 add[compile-time] -32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + 0;
endcode
compile error

$overflow on
code auto:5760 add[Integer] -32767[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5761 add[compile-time] -32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + 0;
endcode
compile error

$overflow off
code auto:5762 add[Integer] -32767[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:5763 add[compile-time] -32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + 1;
endcode
compile error

$overflow on
code auto:5764 add[Integer] -32767[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5765 add[compile-time] -32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + 1;
endcode
compile error

$overflow off
code auto:5766 add[Integer] -32767[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5767 add[compile-time] -32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + 127;
endcode
compile error

$overflow on
code auto:5768 add[Integer] -32767[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5769 add[compile-time] -32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + 127;
endcode
compile error

$overflow off
code auto:5770 add[Integer] -32767[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5771 add[compile-time] -32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + 128;
endcode
compile error

$overflow on
code auto:5772 add[Integer] -32767[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5773 add[compile-time] -32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + 128;
endcode
compile error

$overflow off
code auto:5774 add[Integer] -32767[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5775 add[compile-time] -32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:5776 add[Integer] -32767[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5777 add[compile-time] -32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:5778 add[Integer] -129[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5779 add[compile-time] -129[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + -32768;
endcode
compile error

$overflow on
code auto:5780 add[Integer] -129[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5781 add[compile-time] -129[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + -32768;
endcode
compile error

$overflow off
code auto:5782 add[Integer] -129[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5783 add[compile-time] -129[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + -32767;
endcode
compile error

$overflow on
code auto:5784 add[Integer] -129[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5785 add[compile-time] -129[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + -32767;
endcode
compile error

$overflow off
code auto:5786 add[Integer] -129[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:5787 add[compile-time] -129[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + -129;
endcode
compile error

$overflow on
code auto:5788 add[Integer] -129[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5789 add[compile-time] -129[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + -129;
endcode
compile error

$overflow off
code auto:5790 add[Integer] -129[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5791 add[compile-time] -129[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + -128;
endcode
compile error

$overflow on
code auto:5792 add[Integer] -129[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5793 add[compile-time] -129[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + -128;
endcode
compile error

$overflow off
code auto:5794 add[Integer] -129[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5795 add[compile-time] -129[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + -1;
endcode
compile error

$overflow on
code auto:5796 add[Integer] -129[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5797 add[compile-time] -129[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + -1;
endcode
compile error

$overflow off
code auto:5798 add[Integer] -129[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5799 add[compile-time] -129[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + 0;
endcode
compile error

$overflow on
code auto:5800 add[Integer] -129[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5801 add[compile-time] -129[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + 0;
endcode
compile error

$overflow off
code auto:5802 add[Integer] -129[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5803 add[compile-time] -129[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + 1;
endcode
compile error

$overflow on
code auto:5804 add[Integer] -129[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5805 add[compile-time] -129[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + 1;
endcode
compile error

$overflow off
code auto:5806 add[Integer] -129[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:5807 add[compile-time] -129[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + 127;
endcode
compile error

$overflow on
code auto:5808 add[Integer] -129[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5809 add[compile-time] -129[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + 127;
endcode
compile error

$overflow off
code auto:5810 add[Integer] -129[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5811 add[compile-time] -129[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + 128;
endcode
compile error

$overflow on
code auto:5812 add[Integer] -129[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5813 add[compile-time] -129[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + 128;
endcode
compile error

$overflow off
code auto:5814 add[Integer] -129[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5815 add[compile-time] -129[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -129 + 32767;
endcode
compile error

$overflow on
code auto:5816 add[Integer] -129[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5817 add[compile-time] -129[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -129 + 32767;
endcode
compile error

$overflow off
code auto:5818 add[Integer] -128[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5819 add[compile-time] -128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:5820 add[Integer] -128[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5821 add[compile-time] -128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -32768;
endcode
compile error

$overflow off
code auto:5822 add[Integer] -128[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5823 add[compile-time] -128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:5824 add[Integer] -128[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5825 add[compile-time] -128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -32767;
endcode
compile error

$overflow off
code auto:5826 add[Integer] -128[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5827 add[compile-time] -128[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -129;
endcode
compile error

$overflow on
code auto:5828 add[Integer] -128[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5829 add[compile-time] -128[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -129;
endcode
compile error

$overflow off
code auto:5830 add[Integer] -128[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5831 add[compile-time] -128[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:5832 add[Integer] -128[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5833 add[compile-time] -128[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:5834 add[Integer] -128[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5835 add[compile-time] -128[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:5836 add[Integer] -128[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5837 add[compile-time] -128[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:5838 add[Integer] -128[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5839 add[compile-time] -128[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:5840 add[Integer] -128[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5841 add[compile-time] -128[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:5842 add[Integer] -128[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5843 add[compile-time] -128[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 1;
endcode
compile error

$overflow on
code auto:5844 add[Integer] -128[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5845 add[compile-time] -128[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 1;
endcode
compile error

$overflow off
code auto:5846 add[Integer] -128[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5847 add[compile-time] -128[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 127;
endcode
compile error

$overflow on
code auto:5848 add[Integer] -128[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5849 add[compile-time] -128[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 127;
endcode
compile error

$overflow off
code auto:5850 add[Integer] -128[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5851 add[compile-time] -128[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:5852 add[Integer] -128[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5853 add[compile-time] -128[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:5854 add[Integer] -128[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5855 add[compile-time] -128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -128 + 32767;
endcode
compile error

$overflow on
code auto:5856 add[Integer] -128[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5857 add[compile-time] -128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -128 + 32767;
endcode
compile error

$overflow off
code auto:5858 add[Integer] -1[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5859 add[compile-time] -1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:5860 add[Integer] -1[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5861 add[compile-time] -1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -32768;
endcode
compile error

$overflow off
code auto:5862 add[Integer] -1[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5863 add[compile-time] -1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -32767;
endcode
compile error

$overflow on
code auto:5864 add[Integer] -1[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5865 add[compile-time] -1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -32767;
endcode
compile error

$overflow off
code auto:5866 add[Integer] -1[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5867 add[compile-time] -1[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -129;
endcode
compile error

$overflow on
code auto:5868 add[Integer] -1[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5869 add[compile-time] -1[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -129;
endcode
compile error

$overflow off
code auto:5870 add[Integer] -1[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5871 add[compile-time] -1[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:5872 add[Integer] -1[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5873 add[compile-time] -1[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:5874 add[Integer] -1[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:5875 add[compile-time] -1[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + -1;
endcode
compile error

$overflow on
code auto:5876 add[Integer] -1[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5877 add[compile-time] -1[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + -1;
endcode
compile error

$overflow off
code auto:5878 add[Integer] -1[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5879 add[compile-time] -1[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:5880 add[Integer] -1[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5881 add[compile-time] -1[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:5882 add[Integer] -1[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5883 add[compile-time] -1[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:5884 add[Integer] -1[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5885 add[compile-time] -1[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:5886 add[Integer] -1[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5887 add[compile-time] -1[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:5888 add[Integer] -1[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5889 add[compile-time] -1[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:5890 add[Integer] -1[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5891 add[compile-time] -1[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:5892 add[Integer] -1[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5893 add[compile-time] -1[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:5894 add[Integer] -1[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:5895 add[compile-time] -1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := -1 + 32767;
endcode
compile error

$overflow on
code auto:5896 add[Integer] -1[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5897 add[compile-time] -1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := -1 + 32767;
endcode
compile error

$overflow off
code auto:5898 add[Integer] 0[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5899 add[compile-time] 0[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -32768;
endcode
compile error

$overflow on
code auto:5900 add[Integer] 0[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5901 add[compile-time] 0[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -32768;
endcode
compile error

$overflow off
code auto:5902 add[Integer] 0[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5903 add[compile-time] 0[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -32767;
endcode
compile error

$overflow on
code auto:5904 add[Integer] 0[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5905 add[compile-time] 0[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -32767;
endcode
compile error

$overflow off
code auto:5906 add[Integer] 0[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5907 add[compile-time] 0[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -129;
endcode
compile error

$overflow on
code auto:5908 add[Integer] 0[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5909 add[compile-time] 0[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -129;
endcode
compile error

$overflow off
code auto:5910 add[Integer] 0[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5911 add[compile-time] 0[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:5912 add[Integer] 0[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5913 add[compile-time] 0[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:5914 add[Integer] 0[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5915 add[compile-time] 0[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:5916 add[Integer] 0[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5917 add[compile-time] 0[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:5918 add[Integer] 0[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5919 add[compile-time] 0[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:5920 add[Integer] 0[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5921 add[compile-time] 0[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:5922 add[Integer] 0[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5923 add[compile-time] 0[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:5924 add[Integer] 0[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5925 add[compile-time] 0[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:5926 add[Integer] 0[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5927 add[compile-time] 0[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:5928 add[Integer] 0[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5929 add[compile-time] 0[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:5930 add[Integer] 0[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5931 add[compile-time] 0[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:5932 add[Integer] 0[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5933 add[compile-time] 0[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:5934 add[Integer] 0[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5935 add[compile-time] 0[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:5936 add[Integer] 0[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5937 add[compile-time] 0[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:5938 add[Integer] 1[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5939 add[compile-time] 1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -32768;
endcode
compile error

$overflow on
code auto:5940 add[Integer] 1[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5941 add[compile-time] 1[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -32768;
endcode
compile error

$overflow off
code auto:5942 add[Integer] 1[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:5943 add[compile-time] 1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -32767;
endcode
compile error

$overflow on
code auto:5944 add[Integer] 1[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5945 add[compile-time] 1[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -32767;
endcode
compile error

$overflow off
code auto:5946 add[Integer] 1[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5947 add[compile-time] 1[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -129;
endcode
compile error

$overflow on
code auto:5948 add[Integer] 1[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5949 add[compile-time] 1[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -129;
endcode
compile error

$overflow off
code auto:5950 add[Integer] 1[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5951 add[compile-time] 1[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -128;
endcode
compile error

$overflow on
code auto:5952 add[Integer] 1[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5953 add[compile-time] 1[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -128;
endcode
compile error

$overflow off
code auto:5954 add[Integer] 1[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5955 add[compile-time] 1[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:5956 add[Integer] 1[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5957 add[compile-time] 1[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:5958 add[Integer] 1[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5959 add[compile-time] 1[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:5960 add[Integer] 1[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:5961 add[compile-time] 1[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:5962 add[Integer] 1[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:5963 add[compile-time] 1[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:5964 add[Integer] 1[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:5965 add[compile-time] 1[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:5966 add[Integer] 1[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5967 add[compile-time] 1[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:5968 add[Integer] 1[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5969 add[compile-time] 1[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:5970 add[Integer] 1[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5971 add[compile-time] 1[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:5972 add[Integer] 1[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:5973 add[compile-time] 1[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:5974 add[Integer] 1[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:5975 add[compile-time] 1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 1 + 32767;
endcode
compile error

$overflow on
code auto:5976 add[Integer] 1[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5977 add[compile-time] 1[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 32767;
endcode
compile error

$overflow off
code auto:5978 add[Integer] 127[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5979 add[compile-time] 127[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -32768;
endcode
compile error

$overflow on
code auto:5980 add[Integer] 127[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5981 add[compile-time] 127[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -32768;
endcode
compile error

$overflow off
code auto:5982 add[Integer] 127[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:5983 add[compile-time] 127[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -32767;
endcode
compile error

$overflow on
code auto:5984 add[Integer] 127[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5985 add[compile-time] 127[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -32767;
endcode
compile error

$overflow off
code auto:5986 add[Integer] 127[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:5987 add[compile-time] 127[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -129;
endcode
compile error

$overflow on
code auto:5988 add[Integer] 127[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5989 add[compile-time] 127[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -129;
endcode
compile error

$overflow off
code auto:5990 add[Integer] 127[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:5991 add[compile-time] 127[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -128;
endcode
compile error

$overflow on
code auto:5992 add[Integer] 127[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:5993 add[compile-time] 127[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -128;
endcode
compile error

$overflow off
code auto:5994 add[Integer] 127[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5995 add[compile-time] 127[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:5996 add[Integer] 127[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:5997 add[compile-time] 127[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:5998 add[Integer] 127[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:5999 add[compile-time] 127[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:6000 add[Integer] 127[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6001 add[compile-time] 127[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:6002 add[Integer] 127[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6003 add[compile-time] 127[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:6004 add[Integer] 127[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6005 add[compile-time] 127[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:6006 add[Integer] 127[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:6007 add[compile-time] 127[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:6008 add[Integer] 127[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:6009 add[compile-time] 127[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:6010 add[Integer] 127[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6011 add[compile-time] 127[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:6012 add[Integer] 127[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6013 add[compile-time] 127[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:6014 add[Integer] 127[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:6015 add[compile-time] 127[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 127 + 32767;
endcode
compile error

$overflow on
code auto:6016 add[Integer] 127[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6017 add[compile-time] 127[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 32767;
endcode
compile error

$overflow off
code auto:6018 add[Integer] 128[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6019 add[compile-time] 128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + -32768;
endcode
compile error

$overflow on
code auto:6020 add[Integer] 128[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6021 add[compile-time] 128[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + -32768;
endcode
compile error

$overflow off
code auto:6022 add[Integer] 128[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:6023 add[compile-time] 128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + -32767;
endcode
compile error

$overflow on
code auto:6024 add[Integer] 128[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6025 add[compile-time] 128[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + -32767;
endcode
compile error

$overflow off
code auto:6026 add[Integer] 128[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6027 add[compile-time] 128[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + -129;
endcode
compile error

$overflow on
code auto:6028 add[Integer] 128[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6029 add[compile-time] 128[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + -129;
endcode
compile error

$overflow off
code auto:6030 add[Integer] 128[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6031 add[compile-time] 128[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:6032 add[Integer] 128[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6033 add[compile-time] 128[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:6034 add[Integer] 128[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6035 add[compile-time] 128[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:6036 add[Integer] 128[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6037 add[compile-time] 128[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:6038 add[Integer] 128[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6039 add[compile-time] 128[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:6040 add[Integer] 128[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6041 add[compile-time] 128[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:6042 add[Integer] 128[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:6043 add[compile-time] 128[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:6044 add[Integer] 128[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:6045 add[compile-time] 128[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:6046 add[Integer] 128[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6047 add[compile-time] 128[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:6048 add[Integer] 128[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6049 add[compile-time] 128[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:6050 add[Integer] 128[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6051 add[compile-time] 128[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 128;
endcode
compile error

$overflow on
code auto:6052 add[Integer] 128[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6053 add[compile-time] 128[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 128;
endcode
compile error

$overflow off
code auto:6054 add[Integer] 128[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6055 add[compile-time] 128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 128 + 32767;
endcode
compile error

$overflow on
code auto:6056 add[Integer] 128[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6057 add[compile-time] 128[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 32767;
endcode
compile error

$overflow off
code auto:6058 add[Integer] 32767[Integer], -32768[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6059 add[compile-time] 32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + -32768;
endcode
compile error

$overflow on
code auto:6060 add[Integer] 32767[Integer], -32768[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6061 add[compile-time] 32767[Integer], -32768[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + -32768;
endcode
compile error

$overflow off
code auto:6062 add[Integer] 32767[Integer], -32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6063 add[compile-time] 32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:6064 add[Integer] 32767[Integer], -32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6065 add[compile-time] 32767[Integer], -32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:6066 add[Integer] 32767[Integer], -129[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:6067 add[compile-time] 32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + -129;
endcode
compile error

$overflow on
code auto:6068 add[Integer] 32767[Integer], -129[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6069 add[compile-time] 32767[Integer], -129[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + -129;
endcode
compile error

$overflow off
code auto:6070 add[Integer] 32767[Integer], -128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6071 add[compile-time] 32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + -128;
endcode
compile error

$overflow on
code auto:6072 add[Integer] 32767[Integer], -128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6073 add[compile-time] 32767[Integer], -128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + -128;
endcode
compile error

$overflow off
code auto:6074 add[Integer] 32767[Integer], -1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:6075 add[compile-time] 32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + -1;
endcode
compile error

$overflow on
code auto:6076 add[Integer] 32767[Integer], -1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6077 add[compile-time] 32767[Integer], -1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + -1;
endcode
compile error

$overflow off
code auto:6078 add[Integer] 32767[Integer], 0[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6079 add[compile-time] 32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:6080 add[Integer] 32767[Integer], 0[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6081 add[compile-time] 32767[Integer], 0[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:6082 add[Integer] 32767[Integer], 1[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6083 add[compile-time] 32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 1;
endcode
compile error

$overflow on
code auto:6084 add[Integer] 32767[Integer], 1[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6085 add[compile-time] 32767[Integer], 1[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 1;
endcode
compile error

$overflow off
code auto:6086 add[Integer] 32767[Integer], 127[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 126

code auto:6087 add[compile-time] 32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 127;
endcode
compile error

$overflow on
code auto:6088 add[Integer] 32767[Integer], 127[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6089 add[compile-time] 32767[Integer], 127[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 127;
endcode
compile error

$overflow off
code auto:6090 add[Integer] 32767[Integer], 128[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6091 add[compile-time] 32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 128;
endcode
compile error

$overflow on
code auto:6092 add[Integer] 32767[Integer], 128[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6093 add[compile-time] 32767[Integer], 128[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 128;
endcode
compile error

$overflow off
code auto:6094 add[Integer] 32767[Integer], 32767[Integer] -> [Byte] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:6095 add[compile-time] 32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:6096 add[Integer] 32767[Integer], 32767[Integer] -> [Byte] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6097 add[compile-time] 32767[Integer], 32767[Integer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:6098 add[Integer] -32768[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6099 add[compile-time] -32768[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + -32768;
endcode
compile error

$overflow on
code auto:6100 add[Integer] -32768[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6101 add[compile-time] -32768[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + -32768;
endcode
compile error

$overflow off
code auto:6102 add[Integer] -32768[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6103 add[compile-time] -32768[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + -32767;
endcode
compile error

$overflow on
code auto:6104 add[Integer] -32768[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6105 add[compile-time] -32768[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + -32767;
endcode
compile error

$overflow off
code auto:6106 add[Integer] -32768[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6107 add[compile-time] -32768[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + -129;
endcode
compile error

$overflow on
code auto:6108 add[Integer] -32768[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6109 add[compile-time] -32768[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + -129;
endcode
compile error

$overflow off
code auto:6110 add[Integer] -32768[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32640

code auto:6111 add[compile-time] -32768[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + -128;
endcode
compile error

$overflow on
code auto:6112 add[Integer] -32768[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6113 add[compile-time] -32768[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + -128;
endcode
compile error

$overflow off
code auto:6114 add[Integer] -32768[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6115 add[compile-time] -32768[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + -1;
endcode
compile error

$overflow on
code auto:6116 add[Integer] -32768[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6117 add[compile-time] -32768[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + -1;
endcode
compile error

$overflow off
code auto:6118 add[Integer] -32768[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6119 add[compile-time] -32768[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + 0;
endcode
compile error

$overflow on
code auto:6120 add[Integer] -32768[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6121 add[compile-time] -32768[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + 0;
endcode
compile error

$overflow off
code auto:6122 add[Integer] -32768[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:6123 add[compile-time] -32768[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + 1;
endcode
compile error

$overflow on
code auto:6124 add[Integer] -32768[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6125 add[compile-time] -32768[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + 1;
endcode
compile error

$overflow off
code auto:6126 add[Integer] -32768[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:6127 add[compile-time] -32768[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + 127;
endcode
compile error

$overflow on
code auto:6128 add[Integer] -32768[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6129 add[compile-time] -32768[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + 127;
endcode
compile error

$overflow off
code auto:6130 add[Integer] -32768[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:6131 add[compile-time] -32768[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + 128;
endcode
compile error

$overflow on
code auto:6132 add[Integer] -32768[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6133 add[compile-time] -32768[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + 128;
endcode
compile error

$overflow off
code auto:6134 add[Integer] -32768[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6135 add[compile-time] -32768[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32768 + 32767;
endcode
compile error

$overflow on
code auto:6136 add[Integer] -32768[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32768;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6137 add[compile-time] -32768[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32768 + 32767;
endcode
compile error

$overflow off
code auto:6138 add[Integer] -32767[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6139 add[compile-time] -32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + -32768;
endcode
compile error

$overflow on
code auto:6140 add[Integer] -32767[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6141 add[compile-time] -32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + -32768;
endcode
compile error

$overflow off
code auto:6142 add[Integer] -32767[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:6143 add[compile-time] -32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + -32767;
endcode
compile error

$overflow on
code auto:6144 add[Integer] -32767[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6145 add[compile-time] -32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + -32767;
endcode
compile error

$overflow off
code auto:6146 add[Integer] -32767[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32640

code auto:6147 add[compile-time] -32767[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + -129;
endcode
compile error

$overflow on
code auto:6148 add[Integer] -32767[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6149 add[compile-time] -32767[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + -129;
endcode
compile error

$overflow off
code auto:6150 add[Integer] -32767[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32641

code auto:6151 add[compile-time] -32767[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + -128;
endcode
compile error

$overflow on
code auto:6152 add[Integer] -32767[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6153 add[compile-time] -32767[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + -128;
endcode
compile error

$overflow off
code auto:6154 add[Integer] -32767[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6155 add[compile-time] -32767[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + -1;
endcode
compile error

$overflow on
code auto:6156 add[Integer] -32767[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6157 add[compile-time] -32767[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + -1;
endcode
compile error

$overflow off
code auto:6158 add[Integer] -32767[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:6159 add[compile-time] -32767[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + 0;
endcode
compile error

$overflow on
code auto:6160 add[Integer] -32767[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6161 add[compile-time] -32767[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + 0;
endcode
compile error

$overflow off
code auto:6162 add[Integer] -32767[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32770

code auto:6163 add[compile-time] -32767[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + 1;
endcode
compile error

$overflow on
code auto:6164 add[Integer] -32767[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6165 add[compile-time] -32767[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + 1;
endcode
compile error

$overflow off
code auto:6166 add[Integer] -32767[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:6167 add[compile-time] -32767[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + 127;
endcode
compile error

$overflow on
code auto:6168 add[Integer] -32767[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6169 add[compile-time] -32767[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + 127;
endcode
compile error

$overflow off
code auto:6170 add[Integer] -32767[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32897

code auto:6171 add[compile-time] -32767[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + 128;
endcode
compile error

$overflow on
code auto:6172 add[Integer] -32767[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6173 add[compile-time] -32767[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + 128;
endcode
compile error

$overflow off
code auto:6174 add[Integer] -32767[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6175 add[compile-time] -32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow on
code auto:6176 add[Integer] -32767[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6177 add[compile-time] -32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -32767 + 32767;
endcode
varvalue r 0

$overflow off
code auto:6178 add[Integer] -129[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6179 add[compile-time] -129[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + -32768;
endcode
compile error

$overflow on
code auto:6180 add[Integer] -129[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6181 add[compile-time] -129[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + -32768;
endcode
compile error

$overflow off
code auto:6182 add[Integer] -129[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32640

code auto:6183 add[compile-time] -129[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + -32767;
endcode
compile error

$overflow on
code auto:6184 add[Integer] -129[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6185 add[compile-time] -129[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + -32767;
endcode
compile error

$overflow off
code auto:6186 add[Integer] -129[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65278

code auto:6187 add[compile-time] -129[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + -129;
endcode
compile error

$overflow on
code auto:6188 add[Integer] -129[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6189 add[compile-time] -129[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + -129;
endcode
compile error

$overflow off
code auto:6190 add[Integer] -129[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65279

code auto:6191 add[compile-time] -129[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + -128;
endcode
compile error

$overflow on
code auto:6192 add[Integer] -129[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6193 add[compile-time] -129[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + -128;
endcode
compile error

$overflow off
code auto:6194 add[Integer] -129[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65406

code auto:6195 add[compile-time] -129[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + -1;
endcode
compile error

$overflow on
code auto:6196 add[Integer] -129[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6197 add[compile-time] -129[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + -1;
endcode
compile error

$overflow off
code auto:6198 add[Integer] -129[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65407

code auto:6199 add[compile-time] -129[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + 0;
endcode
compile error

$overflow on
code auto:6200 add[Integer] -129[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6201 add[compile-time] -129[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + 0;
endcode
compile error

$overflow off
code auto:6202 add[Integer] -129[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:6203 add[compile-time] -129[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + 1;
endcode
compile error

$overflow on
code auto:6204 add[Integer] -129[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6205 add[compile-time] -129[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + 1;
endcode
compile error

$overflow off
code auto:6206 add[Integer] -129[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:6207 add[compile-time] -129[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + 127;
endcode
compile error

$overflow on
code auto:6208 add[Integer] -129[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6209 add[compile-time] -129[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + 127;
endcode
compile error

$overflow off
code auto:6210 add[Integer] -129[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6211 add[compile-time] -129[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + 128;
endcode
compile error

$overflow on
code auto:6212 add[Integer] -129[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6213 add[compile-time] -129[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + 128;
endcode
compile error

$overflow off
code auto:6214 add[Integer] -129[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32638

code auto:6215 add[compile-time] -129[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow on
code auto:6216 add[Integer] -129[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -129;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32638

code auto:6217 add[compile-time] -129[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -129 + 32767;
endcode
varvalue r 32638

$overflow off
code auto:6218 add[Integer] -128[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32640

code auto:6219 add[compile-time] -128[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -32768;
endcode
compile error

$overflow on
code auto:6220 add[Integer] -128[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6221 add[compile-time] -128[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -32768;
endcode
compile error

$overflow off
code auto:6222 add[Integer] -128[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32641

code auto:6223 add[compile-time] -128[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -32767;
endcode
compile error

$overflow on
code auto:6224 add[Integer] -128[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6225 add[compile-time] -128[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -32767;
endcode
compile error

$overflow off
code auto:6226 add[Integer] -128[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65279

code auto:6227 add[compile-time] -128[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -129;
endcode
compile error

$overflow on
code auto:6228 add[Integer] -128[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6229 add[compile-time] -128[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -129;
endcode
compile error

$overflow off
code auto:6230 add[Integer] -128[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65280

code auto:6231 add[compile-time] -128[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -128;
endcode
compile error

$overflow on
code auto:6232 add[Integer] -128[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6233 add[compile-time] -128[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -128;
endcode
compile error

$overflow off
code auto:6234 add[Integer] -128[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65407

code auto:6235 add[compile-time] -128[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + -1;
endcode
compile error

$overflow on
code auto:6236 add[Integer] -128[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6237 add[compile-time] -128[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + -1;
endcode
compile error

$overflow off
code auto:6238 add[Integer] -128[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:6239 add[compile-time] -128[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 0;
endcode
compile error

$overflow on
code auto:6240 add[Integer] -128[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6241 add[compile-time] -128[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 0;
endcode
compile error

$overflow off
code auto:6242 add[Integer] -128[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:6243 add[compile-time] -128[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 1;
endcode
compile error

$overflow on
code auto:6244 add[Integer] -128[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6245 add[compile-time] -128[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 1;
endcode
compile error

$overflow off
code auto:6246 add[Integer] -128[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6247 add[compile-time] -128[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 127;
endcode
compile error

$overflow on
code auto:6248 add[Integer] -128[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6249 add[compile-time] -128[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 127;
endcode
compile error

$overflow off
code auto:6250 add[Integer] -128[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6251 add[compile-time] -128[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 128;
endcode
varvalue r 0

$overflow on
code auto:6252 add[Integer] -128[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6253 add[compile-time] -128[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 128;
endcode
varvalue r 0

$overflow off
code auto:6254 add[Integer] -128[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6255 add[compile-time] -128[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow on
code auto:6256 add[Integer] -128[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6257 add[compile-time] -128[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -128 + 32767;
endcode
varvalue r 32639

$overflow off
code auto:6258 add[Integer] -1[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6259 add[compile-time] -1[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -32768;
endcode
compile error

$overflow on
code auto:6260 add[Integer] -1[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6261 add[compile-time] -1[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -32768;
endcode
compile error

$overflow off
code auto:6262 add[Integer] -1[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6263 add[compile-time] -1[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -32767;
endcode
compile error

$overflow on
code auto:6264 add[Integer] -1[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6265 add[compile-time] -1[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -32767;
endcode
compile error

$overflow off
code auto:6266 add[Integer] -1[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65406

code auto:6267 add[compile-time] -1[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -129;
endcode
compile error

$overflow on
code auto:6268 add[Integer] -1[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6269 add[compile-time] -1[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -129;
endcode
compile error

$overflow off
code auto:6270 add[Integer] -1[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65407

code auto:6271 add[compile-time] -1[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -128;
endcode
compile error

$overflow on
code auto:6272 add[Integer] -1[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6273 add[compile-time] -1[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -128;
endcode
compile error

$overflow off
code auto:6274 add[Integer] -1[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:6275 add[compile-time] -1[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + -1;
endcode
compile error

$overflow on
code auto:6276 add[Integer] -1[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6277 add[compile-time] -1[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + -1;
endcode
compile error

$overflow off
code auto:6278 add[Integer] -1[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6279 add[compile-time] -1[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 0;
endcode
compile error

$overflow on
code auto:6280 add[Integer] -1[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6281 add[compile-time] -1[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 0;
endcode
compile error

$overflow off
code auto:6282 add[Integer] -1[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6283 add[compile-time] -1[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 1;
endcode
varvalue r 0

$overflow on
code auto:6284 add[Integer] -1[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6285 add[compile-time] -1[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 1;
endcode
varvalue r 0

$overflow off
code auto:6286 add[Integer] -1[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:6287 add[compile-time] -1[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 127;
endcode
varvalue r 126

$overflow on
code auto:6288 add[Integer] -1[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:6289 add[compile-time] -1[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 127;
endcode
varvalue r 126

$overflow off
code auto:6290 add[Integer] -1[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6291 add[compile-time] -1[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 128;
endcode
varvalue r 127

$overflow on
code auto:6292 add[Integer] -1[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6293 add[compile-time] -1[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 128;
endcode
varvalue r 127

$overflow off
code auto:6294 add[Integer] -1[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:6295 add[compile-time] -1[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow on
code auto:6296 add[Integer] -1[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = -1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:6297 add[compile-time] -1[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := -1 + 32767;
endcode
varvalue r 32766

$overflow off
code auto:6298 add[Integer] 0[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6299 add[compile-time] 0[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -32768;
endcode
compile error

$overflow on
code auto:6300 add[Integer] 0[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6301 add[compile-time] 0[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -32768;
endcode
compile error

$overflow off
code auto:6302 add[Integer] 0[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:6303 add[compile-time] 0[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -32767;
endcode
compile error

$overflow on
code auto:6304 add[Integer] 0[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6305 add[compile-time] 0[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -32767;
endcode
compile error

$overflow off
code auto:6306 add[Integer] 0[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65407

code auto:6307 add[compile-time] 0[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -129;
endcode
compile error

$overflow on
code auto:6308 add[Integer] 0[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6309 add[compile-time] 0[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -129;
endcode
compile error

$overflow off
code auto:6310 add[Integer] 0[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:6311 add[compile-time] 0[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -128;
endcode
compile error

$overflow on
code auto:6312 add[Integer] 0[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6313 add[compile-time] 0[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -128;
endcode
compile error

$overflow off
code auto:6314 add[Integer] 0[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6315 add[compile-time] 0[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + -1;
endcode
compile error

$overflow on
code auto:6316 add[Integer] 0[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6317 add[compile-time] 0[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + -1;
endcode
compile error

$overflow off
code auto:6318 add[Integer] 0[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6319 add[compile-time] 0[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:6320 add[Integer] 0[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6321 add[compile-time] 0[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:6322 add[Integer] 0[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6323 add[compile-time] 0[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:6324 add[Integer] 0[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6325 add[compile-time] 0[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:6326 add[Integer] 0[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6327 add[compile-time] 0[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:6328 add[Integer] 0[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6329 add[compile-time] 0[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:6330 add[Integer] 0[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6331 add[compile-time] 0[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:6332 add[Integer] 0[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6333 add[compile-time] 0[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:6334 add[Integer] 0[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6335 add[compile-time] 0[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:6336 add[Integer] 0[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 0;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6337 add[compile-time] 0[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:6338 add[Integer] 1[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32769

code auto:6339 add[compile-time] 1[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -32768;
endcode
compile error

$overflow on
code auto:6340 add[Integer] 1[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6341 add[compile-time] 1[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -32768;
endcode
compile error

$overflow off
code auto:6342 add[Integer] 1[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32770

code auto:6343 add[compile-time] 1[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -32767;
endcode
compile error

$overflow on
code auto:6344 add[Integer] 1[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6345 add[compile-time] 1[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -32767;
endcode
compile error

$overflow off
code auto:6346 add[Integer] 1[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65408

code auto:6347 add[compile-time] 1[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -129;
endcode
compile error

$overflow on
code auto:6348 add[Integer] 1[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6349 add[compile-time] 1[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -129;
endcode
compile error

$overflow off
code auto:6350 add[Integer] 1[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65409

code auto:6351 add[compile-time] 1[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -128;
endcode
compile error

$overflow on
code auto:6352 add[Integer] 1[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6353 add[compile-time] 1[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -128;
endcode
compile error

$overflow off
code auto:6354 add[Integer] 1[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6355 add[compile-time] 1[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + -1;
endcode
varvalue r 0

$overflow on
code auto:6356 add[Integer] 1[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6357 add[compile-time] 1[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + -1;
endcode
varvalue r 0

$overflow off
code auto:6358 add[Integer] 1[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6359 add[compile-time] 1[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:6360 add[Integer] 1[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:6361 add[compile-time] 1[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:6362 add[Integer] 1[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:6363 add[compile-time] 1[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:6364 add[Integer] 1[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:6365 add[compile-time] 1[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:6366 add[Integer] 1[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6367 add[compile-time] 1[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:6368 add[Integer] 1[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6369 add[compile-time] 1[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:6370 add[Integer] 1[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:6371 add[compile-time] 1[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:6372 add[Integer] 1[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:6373 add[compile-time] 1[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:6374 add[Integer] 1[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6375 add[compile-time] 1[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow on
code auto:6376 add[Integer] 1[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 1;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6377 add[compile-time] 1[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 32767;
endcode
varvalue r 32768

$overflow off
code auto:6378 add[Integer] 127[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:6379 add[compile-time] 127[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -32768;
endcode
compile error

$overflow on
code auto:6380 add[Integer] 127[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6381 add[compile-time] 127[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -32768;
endcode
compile error

$overflow off
code auto:6382 add[Integer] 127[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:6383 add[compile-time] 127[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -32767;
endcode
compile error

$overflow on
code auto:6384 add[Integer] 127[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6385 add[compile-time] 127[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -32767;
endcode
compile error

$overflow off
code auto:6386 add[Integer] 127[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:6387 add[compile-time] 127[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -129;
endcode
compile error

$overflow on
code auto:6388 add[Integer] 127[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6389 add[compile-time] 127[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -129;
endcode
compile error

$overflow off
code auto:6390 add[Integer] 127[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6391 add[compile-time] 127[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -128;
endcode
compile error

$overflow on
code auto:6392 add[Integer] 127[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6393 add[compile-time] 127[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -128;
endcode
compile error

$overflow off
code auto:6394 add[Integer] 127[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:6395 add[compile-time] 127[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + -1;
endcode
varvalue r 126

$overflow on
code auto:6396 add[Integer] 127[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:6397 add[compile-time] 127[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + -1;
endcode
varvalue r 126

$overflow off
code auto:6398 add[Integer] 127[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6399 add[compile-time] 127[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:6400 add[Integer] 127[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6401 add[compile-time] 127[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:6402 add[Integer] 127[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6403 add[compile-time] 127[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:6404 add[Integer] 127[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6405 add[compile-time] 127[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:6406 add[Integer] 127[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:6407 add[compile-time] 127[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:6408 add[Integer] 127[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:6409 add[compile-time] 127[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:6410 add[Integer] 127[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:6411 add[compile-time] 127[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:6412 add[Integer] 127[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:6413 add[compile-time] 127[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:6414 add[Integer] 127[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:6415 add[compile-time] 127[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow on
code auto:6416 add[Integer] 127[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 127;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6417 add[compile-time] 127[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 32767;
endcode
varvalue r 32894

$overflow off
code auto:6418 add[Integer] 128[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32896

code auto:6419 add[compile-time] 128[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + -32768;
endcode
compile error

$overflow on
code auto:6420 add[Integer] 128[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6421 add[compile-time] 128[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + -32768;
endcode
compile error

$overflow off
code auto:6422 add[Integer] 128[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32897

code auto:6423 add[compile-time] 128[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + -32767;
endcode
compile error

$overflow on
code auto:6424 add[Integer] 128[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6425 add[compile-time] 128[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + -32767;
endcode
compile error

$overflow off
code auto:6426 add[Integer] 128[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6427 add[compile-time] 128[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + -129;
endcode
compile error

$overflow on
code auto:6428 add[Integer] 128[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6429 add[compile-time] 128[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + -129;
endcode
compile error

$overflow off
code auto:6430 add[Integer] 128[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6431 add[compile-time] 128[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + -128;
endcode
varvalue r 0

$overflow on
code auto:6432 add[Integer] 128[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6433 add[compile-time] 128[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + -128;
endcode
varvalue r 0

$overflow off
code auto:6434 add[Integer] 128[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6435 add[compile-time] 128[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + -1;
endcode
varvalue r 127

$overflow on
code auto:6436 add[Integer] 128[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:6437 add[compile-time] 128[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + -1;
endcode
varvalue r 127

$overflow off
code auto:6438 add[Integer] 128[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6439 add[compile-time] 128[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:6440 add[Integer] 128[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:6441 add[compile-time] 128[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:6442 add[Integer] 128[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:6443 add[compile-time] 128[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:6444 add[Integer] 128[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:6445 add[compile-time] 128[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:6446 add[Integer] 128[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:6447 add[compile-time] 128[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:6448 add[Integer] 128[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:6449 add[compile-time] 128[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:6450 add[Integer] 128[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:6451 add[compile-time] 128[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:6452 add[Integer] 128[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 256

code auto:6453 add[compile-time] 128[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:6454 add[Integer] 128[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:6455 add[compile-time] 128[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow on
code auto:6456 add[Integer] 128[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 128;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6457 add[compile-time] 128[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 32767;
endcode
varvalue r 32895

$overflow off
code auto:6458 add[Integer] 32767[Integer], -32768[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:6459 add[compile-time] 32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + -32768;
endcode
compile error

$overflow on
code auto:6460 add[Integer] 32767[Integer], -32768[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6461 add[compile-time] 32767[Integer], -32768[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + -32768;
endcode
compile error

$overflow off
code auto:6462 add[Integer] 32767[Integer], -32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6463 add[compile-time] 32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow on
code auto:6464 add[Integer] 32767[Integer], -32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6465 add[compile-time] 32767[Integer], -32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + -32767;
endcode
varvalue r 0

$overflow off
code auto:6466 add[Integer] 32767[Integer], -129[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32638

code auto:6467 add[compile-time] 32767[Integer], -129[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow on
code auto:6468 add[Integer] 32767[Integer], -129[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -129;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32638

code auto:6469 add[compile-time] 32767[Integer], -129[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + -129;
endcode
varvalue r 32638

$overflow off
code auto:6470 add[Integer] 32767[Integer], -128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6471 add[compile-time] 32767[Integer], -128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow on
code auto:6472 add[Integer] 32767[Integer], -128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32639

code auto:6473 add[compile-time] 32767[Integer], -128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + -128;
endcode
varvalue r 32639

$overflow off
code auto:6474 add[Integer] 32767[Integer], -1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:6475 add[compile-time] 32767[Integer], -1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow on
code auto:6476 add[Integer] 32767[Integer], -1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = -1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:6477 add[compile-time] 32767[Integer], -1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + -1;
endcode
varvalue r 32766

$overflow off
code auto:6478 add[Integer] 32767[Integer], 0[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6479 add[compile-time] 32767[Integer], 0[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:6480 add[Integer] 32767[Integer], 0[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:6481 add[compile-time] 32767[Integer], 0[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:6482 add[Integer] 32767[Integer], 1[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:6483 add[compile-time] 32767[Integer], 1[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow on
code auto:6484 add[Integer] 32767[Integer], 1[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6485 add[compile-time] 32767[Integer], 1[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 1;
endcode
varvalue r 32768

$overflow off
code auto:6486 add[Integer] 32767[Integer], 127[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32894

code auto:6487 add[compile-time] 32767[Integer], 127[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow on
code auto:6488 add[Integer] 32767[Integer], 127[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6489 add[compile-time] 32767[Integer], 127[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 127;
endcode
varvalue r 32894

$overflow off
code auto:6490 add[Integer] 32767[Integer], 128[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32895

code auto:6491 add[compile-time] 32767[Integer], 128[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow on
code auto:6492 add[Integer] 32767[Integer], 128[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6493 add[compile-time] 32767[Integer], 128[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 128;
endcode
varvalue r 32895

$overflow off
code auto:6494 add[Integer] 32767[Integer], 32767[Integer] -> [Word] Var $overflow off
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:6495 add[compile-time] 32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:6496 add[Integer] 32767[Integer], 32767[Integer] -> [Word] Var $overflow on
  var  a: Integer = 32767;
  var  b: Integer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:6497 add[compile-time] 32767[Integer], 32767[Integer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:6498 add[Byte] 0[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:6499 add[Byte] 0[Byte], 0[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 0

code auto:6500 add[Byte] 0[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 0

code auto:6501 add[compile-time] 0[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:6502 add[Byte] 0[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:6503 add[Byte] 0[Byte], 0[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 0

code auto:6504 add[Byte] 0[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 0

code auto:6505 add[compile-time] 0[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:6506 add[Byte] 0[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:6507 add[Byte] 0[Byte], 1[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 1

code auto:6508 add[Byte] 0[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 1

code auto:6509 add[compile-time] 0[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:6510 add[Byte] 0[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:6511 add[Byte] 0[Byte], 1[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 1

code auto:6512 add[Byte] 0[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 1

code auto:6513 add[compile-time] 0[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:6514 add[Byte] 0[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6515 add[Byte] 0[Byte], 127[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 127

code auto:6516 add[Byte] 0[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 127

code auto:6517 add[compile-time] 0[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:6518 add[Byte] 0[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6519 add[Byte] 0[Byte], 127[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r 127

code auto:6520 add[Byte] 0[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 127

code auto:6521 add[compile-time] 0[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:6522 add[Byte] 0[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:6523 add[Byte] 0[Byte], 128[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -128

code auto:6524 add[Byte] 0[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 128;
endcode
varvalue r -128

code auto:6525 add[compile-time] 0[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 128;
endcode
compile error

$overflow on
code auto:6526 add[Byte] 0[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6527 add[Byte] 0[Byte], 128[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Int8;
  r := 0 + b;
endcode
runtime overflow

code auto:6528 add[Byte] 0[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 128;
endcode
runtime overflow

code auto:6529 add[compile-time] 0[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 128;
endcode
compile error

$overflow off
code auto:6530 add[Byte] 0[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:6531 add[Byte] 0[Byte], 255[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Int8;
  r := 0 + b;
endcode
varvalue r -1

code auto:6532 add[Byte] 0[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 255;
endcode
varvalue r -1

code auto:6533 add[compile-time] 0[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow on
code auto:6534 add[Byte] 0[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6535 add[Byte] 0[Byte], 255[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Int8;
  r := 0 + b;
endcode
runtime overflow

code auto:6536 add[Byte] 0[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Int8;
  r := a + 255;
endcode
runtime overflow

code auto:6537 add[compile-time] 0[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow off
code auto:6538 add[Byte] 1[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:6539 add[Byte] 1[Byte], 0[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 1

code auto:6540 add[Byte] 1[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 1

code auto:6541 add[compile-time] 1[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:6542 add[Byte] 1[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 1

code auto:6543 add[Byte] 1[Byte], 0[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 1

code auto:6544 add[Byte] 1[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 1

code auto:6545 add[compile-time] 1[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:6546 add[Byte] 1[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:6547 add[Byte] 1[Byte], 1[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 2

code auto:6548 add[Byte] 1[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 2

code auto:6549 add[compile-time] 1[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:6550 add[Byte] 1[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 2

code auto:6551 add[Byte] 1[Byte], 1[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 2

code auto:6552 add[Byte] 1[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 2

code auto:6553 add[compile-time] 1[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:6554 add[Byte] 1[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:6555 add[Byte] 1[Byte], 127[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -128

code auto:6556 add[Byte] 1[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -128

code auto:6557 add[compile-time] 1[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow on
code auto:6558 add[Byte] 1[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6559 add[Byte] 1[Byte], 127[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Int8;
  r := 1 + b;
endcode
runtime overflow

code auto:6560 add[Byte] 1[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:6561 add[compile-time] 1[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 127;
endcode
compile error

$overflow off
code auto:6562 add[Byte] 1[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:6563 add[Byte] 1[Byte], 128[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r -127

code auto:6564 add[Byte] 1[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 128;
endcode
varvalue r -127

code auto:6565 add[compile-time] 1[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 128;
endcode
compile error

$overflow on
code auto:6566 add[Byte] 1[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6567 add[Byte] 1[Byte], 128[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Int8;
  r := 1 + b;
endcode
runtime overflow

code auto:6568 add[Byte] 1[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 128;
endcode
runtime overflow

code auto:6569 add[compile-time] 1[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 128;
endcode
compile error

$overflow off
code auto:6570 add[Byte] 1[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:6571 add[Byte] 1[Byte], 255[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Int8;
  r := 1 + b;
endcode
varvalue r 0

code auto:6572 add[Byte] 1[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 255;
endcode
varvalue r 0

code auto:6573 add[compile-time] 1[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 1 + 255;
endcode
compile error

$overflow on
code auto:6574 add[Byte] 1[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6575 add[Byte] 1[Byte], 255[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Int8;
  r := 1 + b;
endcode
runtime overflow

code auto:6576 add[Byte] 1[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Int8;
  r := a + 255;
endcode
runtime overflow

code auto:6577 add[compile-time] 1[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 1 + 255;
endcode
compile error

$overflow off
code auto:6578 add[Byte] 127[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6579 add[Byte] 127[Byte], 0[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 127

code auto:6580 add[Byte] 127[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 127

code auto:6581 add[compile-time] 127[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:6582 add[Byte] 127[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6583 add[Byte] 127[Byte], 0[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 127

code auto:6584 add[Byte] 127[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r 127

code auto:6585 add[compile-time] 127[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:6586 add[Byte] 127[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:6587 add[Byte] 127[Byte], 1[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -128

code auto:6588 add[Byte] 127[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -128

code auto:6589 add[compile-time] 127[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow on
code auto:6590 add[Byte] 127[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6591 add[Byte] 127[Byte], 1[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:6592 add[Byte] 127[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 1;
endcode
runtime overflow

code auto:6593 add[compile-time] 127[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 1;
endcode
compile error

$overflow off
code auto:6594 add[Byte] 127[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:6595 add[Byte] 127[Byte], 127[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -2

code auto:6596 add[Byte] 127[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -2

code auto:6597 add[compile-time] 127[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow on
code auto:6598 add[Byte] 127[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6599 add[Byte] 127[Byte], 127[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:6600 add[Byte] 127[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:6601 add[compile-time] 127[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 127;
endcode
compile error

$overflow off
code auto:6602 add[Byte] 127[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:6603 add[Byte] 127[Byte], 128[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r -1

code auto:6604 add[Byte] 127[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 128;
endcode
varvalue r -1

code auto:6605 add[compile-time] 127[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 128;
endcode
compile error

$overflow on
code auto:6606 add[Byte] 127[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6607 add[Byte] 127[Byte], 128[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:6608 add[Byte] 127[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 128;
endcode
runtime overflow

code auto:6609 add[compile-time] 127[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 128;
endcode
compile error

$overflow off
code auto:6610 add[Byte] 127[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:6611 add[Byte] 127[Byte], 255[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Int8;
  r := 127 + b;
endcode
varvalue r 126

code auto:6612 add[Byte] 127[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 255;
endcode
varvalue r 126

code auto:6613 add[compile-time] 127[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 127 + 255;
endcode
compile error

$overflow on
code auto:6614 add[Byte] 127[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6615 add[Byte] 127[Byte], 255[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Int8;
  r := 127 + b;
endcode
runtime overflow

code auto:6616 add[Byte] 127[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Int8;
  r := a + 255;
endcode
runtime overflow

code auto:6617 add[compile-time] 127[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 127 + 255;
endcode
compile error

$overflow off
code auto:6618 add[Byte] 128[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -128

code auto:6619 add[Byte] 128[Byte], 0[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Int8;
  r := 128 + b;
endcode
varvalue r -128

code auto:6620 add[Byte] 128[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -128

code auto:6621 add[compile-time] 128[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 0;
endcode
compile error

$overflow on
code auto:6622 add[Byte] 128[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6623 add[Byte] 128[Byte], 0[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Int8;
  r := 128 + b;
endcode
runtime overflow

code auto:6624 add[Byte] 128[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 0;
endcode
runtime overflow

code auto:6625 add[compile-time] 128[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 0;
endcode
compile error

$overflow off
code auto:6626 add[Byte] 128[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -127

code auto:6627 add[Byte] 128[Byte], 1[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Int8;
  r := 128 + b;
endcode
varvalue r -127

code auto:6628 add[Byte] 128[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r -127

code auto:6629 add[compile-time] 128[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 1;
endcode
compile error

$overflow on
code auto:6630 add[Byte] 128[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6631 add[Byte] 128[Byte], 1[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Int8;
  r := 128 + b;
endcode
runtime overflow

code auto:6632 add[Byte] 128[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 1;
endcode
runtime overflow

code auto:6633 add[compile-time] 128[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 1;
endcode
compile error

$overflow off
code auto:6634 add[Byte] 128[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:6635 add[Byte] 128[Byte], 127[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Int8;
  r := 128 + b;
endcode
varvalue r -1

code auto:6636 add[Byte] 128[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r -1

code auto:6637 add[compile-time] 128[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 127;
endcode
compile error

$overflow on
code auto:6638 add[Byte] 128[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6639 add[Byte] 128[Byte], 127[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Int8;
  r := 128 + b;
endcode
runtime overflow

code auto:6640 add[Byte] 128[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:6641 add[compile-time] 128[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 127;
endcode
compile error

$overflow off
code auto:6642 add[Byte] 128[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:6643 add[Byte] 128[Byte], 128[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Int8;
  r := 128 + b;
endcode
varvalue r 0

code auto:6644 add[Byte] 128[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 128;
endcode
varvalue r 0

code auto:6645 add[compile-time] 128[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 128;
endcode
compile error

$overflow on
code auto:6646 add[Byte] 128[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6647 add[Byte] 128[Byte], 128[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Int8;
  r := 128 + b;
endcode
runtime overflow

code auto:6648 add[Byte] 128[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 128;
endcode
runtime overflow

code auto:6649 add[compile-time] 128[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 128;
endcode
compile error

$overflow off
code auto:6650 add[Byte] 128[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6651 add[Byte] 128[Byte], 255[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Int8;
  r := 128 + b;
endcode
varvalue r 127

code auto:6652 add[Byte] 128[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 255;
endcode
varvalue r 127

code auto:6653 add[compile-time] 128[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 128 + 255;
endcode
compile error

$overflow on
code auto:6654 add[Byte] 128[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6655 add[Byte] 128[Byte], 255[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Int8;
  r := 128 + b;
endcode
runtime overflow

code auto:6656 add[Byte] 128[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Int8;
  r := a + 255;
endcode
runtime overflow

code auto:6657 add[compile-time] 128[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 128 + 255;
endcode
compile error

$overflow off
code auto:6658 add[Byte] 255[Byte], 0[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:6659 add[Byte] 255[Byte], 0[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Int8;
  r := 255 + b;
endcode
varvalue r -1

code auto:6660 add[Byte] 255[Byte], 0[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 0;
endcode
varvalue r -1

code auto:6661 add[compile-time] 255[Byte], 0[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow on
code auto:6662 add[Byte] 255[Byte], 0[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6663 add[Byte] 255[Byte], 0[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Int8;
  r := 255 + b;
endcode
runtime overflow

code auto:6664 add[Byte] 255[Byte], 0[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 0;
endcode
runtime overflow

code auto:6665 add[compile-time] 255[Byte], 0[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow off
code auto:6666 add[Byte] 255[Byte], 1[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:6667 add[Byte] 255[Byte], 1[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Int8;
  r := 255 + b;
endcode
varvalue r 0

code auto:6668 add[Byte] 255[Byte], 1[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 1;
endcode
varvalue r 0

code auto:6669 add[compile-time] 255[Byte], 1[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 1;
endcode
compile error

$overflow on
code auto:6670 add[Byte] 255[Byte], 1[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6671 add[Byte] 255[Byte], 1[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Int8;
  r := 255 + b;
endcode
runtime overflow

code auto:6672 add[Byte] 255[Byte], 1[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 1;
endcode
runtime overflow

code auto:6673 add[compile-time] 255[Byte], 1[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 1;
endcode
compile error

$overflow off
code auto:6674 add[Byte] 255[Byte], 127[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 126

code auto:6675 add[Byte] 255[Byte], 127[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Int8;
  r := 255 + b;
endcode
varvalue r 126

code auto:6676 add[Byte] 255[Byte], 127[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 127;
endcode
varvalue r 126

code auto:6677 add[compile-time] 255[Byte], 127[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 127;
endcode
compile error

$overflow on
code auto:6678 add[Byte] 255[Byte], 127[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6679 add[Byte] 255[Byte], 127[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Int8;
  r := 255 + b;
endcode
runtime overflow

code auto:6680 add[Byte] 255[Byte], 127[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 127;
endcode
runtime overflow

code auto:6681 add[compile-time] 255[Byte], 127[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 127;
endcode
compile error

$overflow off
code auto:6682 add[Byte] 255[Byte], 128[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 127

code auto:6683 add[Byte] 255[Byte], 128[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Int8;
  r := 255 + b;
endcode
varvalue r 127

code auto:6684 add[Byte] 255[Byte], 128[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 128;
endcode
varvalue r 127

code auto:6685 add[compile-time] 255[Byte], 128[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 128;
endcode
compile error

$overflow on
code auto:6686 add[Byte] 255[Byte], 128[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6687 add[Byte] 255[Byte], 128[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Int8;
  r := 255 + b;
endcode
runtime overflow

code auto:6688 add[Byte] 255[Byte], 128[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 128;
endcode
runtime overflow

code auto:6689 add[compile-time] 255[Byte], 128[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 128;
endcode
compile error

$overflow off
code auto:6690 add[Byte] 255[Byte], 255[Byte] -> [Int8] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:6691 add[Byte] 255[Byte], 255[Byte] -> [Int8] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Int8;
  r := 255 + b;
endcode
varvalue r -2

code auto:6692 add[Byte] 255[Byte], 255[Byte] -> [Int8] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 255;
endcode
varvalue r -2

code auto:6693 add[compile-time] 255[Byte], 255[Byte] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:6694 add[Byte] 255[Byte], 255[Byte] -> [Int8] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:6695 add[Byte] 255[Byte], 255[Byte] -> [Int8] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Int8;
  r := 255 + b;
endcode
runtime overflow

code auto:6696 add[Byte] 255[Byte], 255[Byte] -> [Int8] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Int8;
  r := a + 255;
endcode
runtime overflow

code auto:6697 add[compile-time] 255[Byte], 255[Byte] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:6698 add[Byte] 0[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:6699 add[Byte] 0[Byte], 0[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 0

code auto:6700 add[Byte] 0[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 0

code auto:6701 add[compile-time] 0[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:6702 add[Byte] 0[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:6703 add[Byte] 0[Byte], 0[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 0

code auto:6704 add[Byte] 0[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 0

code auto:6705 add[compile-time] 0[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:6706 add[Byte] 0[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:6707 add[Byte] 0[Byte], 1[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 1

code auto:6708 add[Byte] 0[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 1

code auto:6709 add[compile-time] 0[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:6710 add[Byte] 0[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:6711 add[Byte] 0[Byte], 1[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 1

code auto:6712 add[Byte] 0[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 1

code auto:6713 add[compile-time] 0[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:6714 add[Byte] 0[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6715 add[Byte] 0[Byte], 127[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 127

code auto:6716 add[Byte] 0[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 127

code auto:6717 add[compile-time] 0[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:6718 add[Byte] 0[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6719 add[Byte] 0[Byte], 127[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 127

code auto:6720 add[Byte] 0[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 127

code auto:6721 add[compile-time] 0[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:6722 add[Byte] 0[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6723 add[Byte] 0[Byte], 128[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 128

code auto:6724 add[Byte] 0[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 128

code auto:6725 add[compile-time] 0[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:6726 add[Byte] 0[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6727 add[Byte] 0[Byte], 128[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 128

code auto:6728 add[Byte] 0[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 128

code auto:6729 add[compile-time] 0[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:6730 add[Byte] 0[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6731 add[Byte] 0[Byte], 255[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 255

code auto:6732 add[Byte] 0[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 255

code auto:6733 add[compile-time] 0[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:6734 add[Byte] 0[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6735 add[Byte] 0[Byte], 255[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Integer;
  r := 0 + b;
endcode
varvalue r 255

code auto:6736 add[Byte] 0[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 255

code auto:6737 add[compile-time] 0[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:6738 add[Byte] 1[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:6739 add[Byte] 1[Byte], 0[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 1

code auto:6740 add[Byte] 1[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 1

code auto:6741 add[compile-time] 1[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:6742 add[Byte] 1[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 1

code auto:6743 add[Byte] 1[Byte], 0[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 1

code auto:6744 add[Byte] 1[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 1

code auto:6745 add[compile-time] 1[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:6746 add[Byte] 1[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:6747 add[Byte] 1[Byte], 1[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 2

code auto:6748 add[Byte] 1[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 2

code auto:6749 add[compile-time] 1[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:6750 add[Byte] 1[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 2

code auto:6751 add[Byte] 1[Byte], 1[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 2

code auto:6752 add[Byte] 1[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 2

code auto:6753 add[compile-time] 1[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:6754 add[Byte] 1[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6755 add[Byte] 1[Byte], 127[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 128

code auto:6756 add[Byte] 1[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 128

code auto:6757 add[compile-time] 1[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:6758 add[Byte] 1[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6759 add[Byte] 1[Byte], 127[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 128

code auto:6760 add[Byte] 1[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 128

code auto:6761 add[compile-time] 1[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:6762 add[Byte] 1[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:6763 add[Byte] 1[Byte], 128[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 129

code auto:6764 add[Byte] 1[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 129

code auto:6765 add[compile-time] 1[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:6766 add[Byte] 1[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:6767 add[Byte] 1[Byte], 128[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 129

code auto:6768 add[Byte] 1[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 129

code auto:6769 add[compile-time] 1[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:6770 add[Byte] 1[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:6771 add[Byte] 1[Byte], 255[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Integer;
  r := 1 + b;
endcode
varvalue r 0

code auto:6772 add[Byte] 1[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 0

code auto:6773 add[compile-time] 1[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:6774 add[Byte] 1[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6775 add[Byte] 1[Byte], 255[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Integer;
  r := 1 + b;
endcode
runtime overflow

code auto:6776 add[Byte] 1[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Integer;
  r := a + 255;
endcode
runtime overflow

code auto:6777 add[compile-time] 1[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:6778 add[Byte] 127[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6779 add[Byte] 127[Byte], 0[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 127

code auto:6780 add[Byte] 127[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 127

code auto:6781 add[compile-time] 127[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:6782 add[Byte] 127[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6783 add[Byte] 127[Byte], 0[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 127

code auto:6784 add[Byte] 127[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 127

code auto:6785 add[compile-time] 127[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:6786 add[Byte] 127[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6787 add[Byte] 127[Byte], 1[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 128

code auto:6788 add[Byte] 127[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 128

code auto:6789 add[compile-time] 127[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:6790 add[Byte] 127[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6791 add[Byte] 127[Byte], 1[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 128

code auto:6792 add[Byte] 127[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 128

code auto:6793 add[compile-time] 127[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:6794 add[Byte] 127[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:6795 add[Byte] 127[Byte], 127[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 254

code auto:6796 add[Byte] 127[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 254

code auto:6797 add[compile-time] 127[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:6798 add[Byte] 127[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:6799 add[Byte] 127[Byte], 127[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 254

code auto:6800 add[Byte] 127[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 254

code auto:6801 add[compile-time] 127[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:6802 add[Byte] 127[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6803 add[Byte] 127[Byte], 128[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 255

code auto:6804 add[Byte] 127[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 255

code auto:6805 add[compile-time] 127[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:6806 add[Byte] 127[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6807 add[Byte] 127[Byte], 128[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 255

code auto:6808 add[Byte] 127[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 255

code auto:6809 add[compile-time] 127[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:6810 add[Byte] 127[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:6811 add[Byte] 127[Byte], 255[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Integer;
  r := 127 + b;
endcode
varvalue r 126

code auto:6812 add[Byte] 127[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 126

code auto:6813 add[compile-time] 127[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:6814 add[Byte] 127[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6815 add[Byte] 127[Byte], 255[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Integer;
  r := 127 + b;
endcode
runtime overflow

code auto:6816 add[Byte] 127[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Integer;
  r := a + 255;
endcode
runtime overflow

code auto:6817 add[compile-time] 127[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:6818 add[Byte] 128[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6819 add[Byte] 128[Byte], 0[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 128

code auto:6820 add[Byte] 128[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 128

code auto:6821 add[compile-time] 128[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:6822 add[Byte] 128[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 128

code auto:6823 add[Byte] 128[Byte], 0[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 128

code auto:6824 add[Byte] 128[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 128

code auto:6825 add[compile-time] 128[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:6826 add[Byte] 128[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:6827 add[Byte] 128[Byte], 1[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 129

code auto:6828 add[Byte] 128[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 129

code auto:6829 add[compile-time] 128[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:6830 add[Byte] 128[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 129

code auto:6831 add[Byte] 128[Byte], 1[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 129

code auto:6832 add[Byte] 128[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 129

code auto:6833 add[compile-time] 128[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:6834 add[Byte] 128[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6835 add[Byte] 128[Byte], 127[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 255

code auto:6836 add[Byte] 128[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 255

code auto:6837 add[compile-time] 128[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:6838 add[Byte] 128[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6839 add[Byte] 128[Byte], 127[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 255

code auto:6840 add[Byte] 128[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 255

code auto:6841 add[compile-time] 128[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:6842 add[Byte] 128[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:6843 add[Byte] 128[Byte], 128[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 0

code auto:6844 add[Byte] 128[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 0

code auto:6845 add[compile-time] 128[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:6846 add[Byte] 128[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6847 add[Byte] 128[Byte], 128[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Integer;
  r := 128 + b;
endcode
runtime overflow

code auto:6848 add[Byte] 128[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 128;
endcode
runtime overflow

code auto:6849 add[compile-time] 128[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:6850 add[Byte] 128[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6851 add[Byte] 128[Byte], 255[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Integer;
  r := 128 + b;
endcode
varvalue r 127

code auto:6852 add[Byte] 128[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 127

code auto:6853 add[compile-time] 128[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:6854 add[Byte] 128[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6855 add[Byte] 128[Byte], 255[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Integer;
  r := 128 + b;
endcode
runtime overflow

code auto:6856 add[Byte] 128[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Integer;
  r := a + 255;
endcode
runtime overflow

code auto:6857 add[compile-time] 128[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:6858 add[Byte] 255[Byte], 0[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6859 add[Byte] 255[Byte], 0[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 255

code auto:6860 add[Byte] 255[Byte], 0[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 255

code auto:6861 add[compile-time] 255[Byte], 0[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:6862 add[Byte] 255[Byte], 0[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:6863 add[Byte] 255[Byte], 0[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 255

code auto:6864 add[Byte] 255[Byte], 0[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 0;
endcode
varvalue r 255

code auto:6865 add[compile-time] 255[Byte], 0[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:6866 add[Byte] 255[Byte], 1[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:6867 add[Byte] 255[Byte], 1[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 0

code auto:6868 add[Byte] 255[Byte], 1[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 1;
endcode
varvalue r 0

code auto:6869 add[compile-time] 255[Byte], 1[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:6870 add[Byte] 255[Byte], 1[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6871 add[Byte] 255[Byte], 1[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Integer;
  r := 255 + b;
endcode
runtime overflow

code auto:6872 add[Byte] 255[Byte], 1[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 1;
endcode
runtime overflow

code auto:6873 add[compile-time] 255[Byte], 1[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:6874 add[Byte] 255[Byte], 127[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 126

code auto:6875 add[Byte] 255[Byte], 127[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 126

code auto:6876 add[Byte] 255[Byte], 127[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 127;
endcode
varvalue r 126

code auto:6877 add[compile-time] 255[Byte], 127[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:6878 add[Byte] 255[Byte], 127[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6879 add[Byte] 255[Byte], 127[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Integer;
  r := 255 + b;
endcode
runtime overflow

code auto:6880 add[Byte] 255[Byte], 127[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 127;
endcode
runtime overflow

code auto:6881 add[compile-time] 255[Byte], 127[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:6882 add[Byte] 255[Byte], 128[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 127

code auto:6883 add[Byte] 255[Byte], 128[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 127

code auto:6884 add[Byte] 255[Byte], 128[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 128;
endcode
varvalue r 127

code auto:6885 add[compile-time] 255[Byte], 128[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:6886 add[Byte] 255[Byte], 128[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6887 add[Byte] 255[Byte], 128[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Integer;
  r := 255 + b;
endcode
runtime overflow

code auto:6888 add[Byte] 255[Byte], 128[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 128;
endcode
runtime overflow

code auto:6889 add[compile-time] 255[Byte], 128[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:6890 add[Byte] 255[Byte], 255[Byte] -> [Integer] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:6891 add[Byte] 255[Byte], 255[Byte] -> [Integer] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Integer;
  r := 255 + b;
endcode
varvalue r 254

code auto:6892 add[Byte] 255[Byte], 255[Byte] -> [Integer] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 255;
endcode
varvalue r 254

code auto:6893 add[compile-time] 255[Byte], 255[Byte] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:6894 add[Byte] 255[Byte], 255[Byte] -> [Integer] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:6895 add[Byte] 255[Byte], 255[Byte] -> [Integer] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Integer;
  r := 255 + b;
endcode
runtime overflow

code auto:6896 add[Byte] 255[Byte], 255[Byte] -> [Integer] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Integer;
  r := a + 255;
endcode
runtime overflow

code auto:6897 add[compile-time] 255[Byte], 255[Byte] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:6898 add[Byte] 0[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:6899 add[Byte] 0[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 0

code auto:6900 add[Byte] 0[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 0

code auto:6901 add[compile-time] 0[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:6902 add[Byte] 0[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:6903 add[Byte] 0[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 1

code auto:6904 add[Byte] 0[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 1

code auto:6905 add[compile-time] 0[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:6906 add[Byte] 0[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6907 add[Byte] 0[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 127

code auto:6908 add[Byte] 0[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 127

code auto:6909 add[compile-time] 0[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:6910 add[Byte] 0[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6911 add[Byte] 0[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 128

code auto:6912 add[Byte] 0[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 128

code auto:6913 add[compile-time] 0[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:6914 add[Byte] 0[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6915 add[Byte] 0[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 0 + b;
endcode
varvalue r 255

code auto:6916 add[Byte] 0[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Byte;
  r := a + 255;
endcode
varvalue r 255

code auto:6917 add[compile-time] 0[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:6918 add[Byte] 1[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 1

code auto:6919 add[Byte] 1[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 1

code auto:6920 add[Byte] 1[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 1

code auto:6921 add[compile-time] 1[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:6922 add[Byte] 1[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 2

code auto:6923 add[Byte] 1[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 2

code auto:6924 add[Byte] 1[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 2

code auto:6925 add[compile-time] 1[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:6926 add[Byte] 1[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6927 add[Byte] 1[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 128

code auto:6928 add[Byte] 1[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 128

code auto:6929 add[compile-time] 1[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:6930 add[Byte] 1[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:6931 add[Byte] 1[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 1 + b;
endcode
varvalue r 129

code auto:6932 add[Byte] 1[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 129

code auto:6933 add[compile-time] 1[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:6934 add[Byte] 1[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6935 add[Byte] 1[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 1 + b;
endcode
runtime overflow

code auto:6936 add[Byte] 1[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:6937 add[compile-time] 1[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 1 + 255;
endcode
compile error

$overflow on
code auto:6938 add[Byte] 127[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 127

code auto:6939 add[Byte] 127[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 127

code auto:6940 add[Byte] 127[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 127

code auto:6941 add[compile-time] 127[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:6942 add[Byte] 127[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6943 add[Byte] 127[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 128

code auto:6944 add[Byte] 127[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 128

code auto:6945 add[compile-time] 127[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:6946 add[Byte] 127[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:6947 add[Byte] 127[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 254

code auto:6948 add[Byte] 127[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 254

code auto:6949 add[compile-time] 127[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:6950 add[Byte] 127[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6951 add[Byte] 127[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 127 + b;
endcode
varvalue r 255

code auto:6952 add[Byte] 127[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 128;
endcode
varvalue r 255

code auto:6953 add[compile-time] 127[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:6954 add[Byte] 127[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6955 add[Byte] 127[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 127 + b;
endcode
runtime overflow

code auto:6956 add[Byte] 127[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:6957 add[compile-time] 127[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 127 + 255;
endcode
compile error

$overflow on
code auto:6958 add[Byte] 128[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 128

code auto:6959 add[Byte] 128[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 128

code auto:6960 add[Byte] 128[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 128

code auto:6961 add[compile-time] 128[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:6962 add[Byte] 128[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 129

code auto:6963 add[Byte] 128[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 129

code auto:6964 add[Byte] 128[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 1;
endcode
varvalue r 129

code auto:6965 add[compile-time] 128[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:6966 add[Byte] 128[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6967 add[Byte] 128[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 128 + b;
endcode
varvalue r 255

code auto:6968 add[Byte] 128[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 127;
endcode
varvalue r 255

code auto:6969 add[compile-time] 128[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:6970 add[Byte] 128[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6971 add[Byte] 128[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 128 + b;
endcode
runtime overflow

code auto:6972 add[Byte] 128[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 128;
endcode
runtime overflow

code auto:6973 add[compile-time] 128[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 128;
endcode
compile error

$overflow on
code auto:6974 add[Byte] 128[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6975 add[Byte] 128[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 128 + b;
endcode
runtime overflow

code auto:6976 add[Byte] 128[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:6977 add[compile-time] 128[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 128 + 255;
endcode
compile error

$overflow on
code auto:6978 add[Byte] 255[Byte], 0[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:6979 add[Byte] 255[Byte], 0[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Byte;
  r := 255 + b;
endcode
varvalue r 255

code auto:6980 add[Byte] 255[Byte], 0[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 0;
endcode
varvalue r 255

code auto:6981 add[compile-time] 255[Byte], 0[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:6982 add[Byte] 255[Byte], 1[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6983 add[Byte] 255[Byte], 1[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:6984 add[Byte] 255[Byte], 1[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 1;
endcode
runtime overflow

code auto:6985 add[compile-time] 255[Byte], 1[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 1;
endcode
compile error

$overflow on
code auto:6986 add[Byte] 255[Byte], 127[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6987 add[Byte] 255[Byte], 127[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:6988 add[Byte] 255[Byte], 127[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 127;
endcode
runtime overflow

code auto:6989 add[compile-time] 255[Byte], 127[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 127;
endcode
compile error

$overflow on
code auto:6990 add[Byte] 255[Byte], 128[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6991 add[Byte] 255[Byte], 128[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:6992 add[Byte] 255[Byte], 128[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 128;
endcode
runtime overflow

code auto:6993 add[compile-time] 255[Byte], 128[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 128;
endcode
compile error

$overflow on
code auto:6994 add[Byte] 255[Byte], 255[Byte] -> [Byte] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:6995 add[Byte] 255[Byte], 255[Byte] -> [Byte] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Byte;
  r := 255 + b;
endcode
runtime overflow

code auto:6996 add[Byte] 255[Byte], 255[Byte] -> [Byte] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Byte;
  r := a + 255;
endcode
runtime overflow

code auto:6997 add[compile-time] 255[Byte], 255[Byte] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:6998 add[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:6999 add[Byte] 0[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 0

code auto:7000 add[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 0

code auto:7001 add[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7002 add[Byte] 0[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7003 add[Byte] 0[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 0

code auto:7004 add[Byte] 0[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 0

code auto:7005 add[compile-time] 0[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7006 add[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:7007 add[Byte] 0[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 1

code auto:7008 add[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 1

code auto:7009 add[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow on
code auto:7010 add[Byte] 0[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:7011 add[Byte] 0[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 1

code auto:7012 add[Byte] 0[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 1

code auto:7013 add[compile-time] 0[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 1;
endcode
varvalue r 1

$overflow off
code auto:7014 add[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7015 add[Byte] 0[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 127

code auto:7016 add[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 127

code auto:7017 add[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow on
code auto:7018 add[Byte] 0[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7019 add[Byte] 0[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 127

code auto:7020 add[Byte] 0[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 127

code auto:7021 add[compile-time] 0[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 127;
endcode
varvalue r 127

$overflow off
code auto:7022 add[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7023 add[Byte] 0[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 128

code auto:7024 add[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 128

code auto:7025 add[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow on
code auto:7026 add[Byte] 0[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7027 add[Byte] 0[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 128

code auto:7028 add[Byte] 0[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 128

code auto:7029 add[compile-time] 0[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 128;
endcode
varvalue r 128

$overflow off
code auto:7030 add[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7031 add[Byte] 0[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 255

code auto:7032 add[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 0;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 255

code auto:7033 add[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7034 add[Byte] 0[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 0;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7035 add[Byte] 0[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 0 + b;
endcode
varvalue r 255

code auto:7036 add[Byte] 0[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 0;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 255

code auto:7037 add[compile-time] 0[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7038 add[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:7039 add[Byte] 1[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 1

code auto:7040 add[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 1

code auto:7041 add[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow on
code auto:7042 add[Byte] 1[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 1

code auto:7043 add[Byte] 1[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 1

code auto:7044 add[Byte] 1[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 1

code auto:7045 add[compile-time] 1[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 0;
endcode
varvalue r 1

$overflow off
code auto:7046 add[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:7047 add[Byte] 1[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 2

code auto:7048 add[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 2

code auto:7049 add[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow on
code auto:7050 add[Byte] 1[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 2

code auto:7051 add[Byte] 1[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 2

code auto:7052 add[Byte] 1[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 2

code auto:7053 add[compile-time] 1[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 1;
endcode
varvalue r 2

$overflow off
code auto:7054 add[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7055 add[Byte] 1[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 128

code auto:7056 add[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 128

code auto:7057 add[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow on
code auto:7058 add[Byte] 1[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7059 add[Byte] 1[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 128

code auto:7060 add[Byte] 1[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 128

code auto:7061 add[compile-time] 1[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 127;
endcode
varvalue r 128

$overflow off
code auto:7062 add[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:7063 add[Byte] 1[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 129

code auto:7064 add[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 129

code auto:7065 add[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 128;
endcode
varvalue r 129

$overflow on
code auto:7066 add[Byte] 1[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:7067 add[Byte] 1[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 129

code auto:7068 add[Byte] 1[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 129

code auto:7069 add[compile-time] 1[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 128;
endcode
varvalue r 129

$overflow off
code auto:7070 add[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7071 add[Byte] 1[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 1 + b;
endcode
varvalue r 0

code auto:7072 add[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 1;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 0

code auto:7073 add[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 1 + 255;
endcode
varvalue r 256

$overflow on
code auto:7074 add[Byte] 1[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 1;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7075 add[Byte] 1[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 1 + b;
endcode
runtime overflow

code auto:7076 add[Byte] 1[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 1;
  var  r: Word;
  r := a + 255;
endcode
runtime overflow

code auto:7077 add[compile-time] 1[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 1 + 255;
endcode
varvalue r 256

$overflow off
code auto:7078 add[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7079 add[Byte] 127[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 127

code auto:7080 add[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 127

code auto:7081 add[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow on
code auto:7082 add[Byte] 127[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7083 add[Byte] 127[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 127

code auto:7084 add[Byte] 127[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 127

code auto:7085 add[compile-time] 127[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 0;
endcode
varvalue r 127

$overflow off
code auto:7086 add[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7087 add[Byte] 127[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 128

code auto:7088 add[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 128

code auto:7089 add[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow on
code auto:7090 add[Byte] 127[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7091 add[Byte] 127[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 128

code auto:7092 add[Byte] 127[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 128

code auto:7093 add[compile-time] 127[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 1;
endcode
varvalue r 128

$overflow off
code auto:7094 add[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:7095 add[Byte] 127[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 254

code auto:7096 add[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 254

code auto:7097 add[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow on
code auto:7098 add[Byte] 127[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:7099 add[Byte] 127[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 254

code auto:7100 add[Byte] 127[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 254

code auto:7101 add[compile-time] 127[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 127;
endcode
varvalue r 254

$overflow off
code auto:7102 add[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7103 add[Byte] 127[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 255

code auto:7104 add[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 255

code auto:7105 add[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 128;
endcode
varvalue r 255

$overflow on
code auto:7106 add[Byte] 127[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7107 add[Byte] 127[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 255

code auto:7108 add[Byte] 127[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 255

code auto:7109 add[compile-time] 127[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 128;
endcode
varvalue r 255

$overflow off
code auto:7110 add[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:7111 add[Byte] 127[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 127 + b;
endcode
varvalue r 126

code auto:7112 add[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 127;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 126

code auto:7113 add[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 127 + 255;
endcode
varvalue r 382

$overflow on
code auto:7114 add[Byte] 127[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 127;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7115 add[Byte] 127[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 127 + b;
endcode
runtime overflow

code auto:7116 add[Byte] 127[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 127;
  var  r: Word;
  r := a + 255;
endcode
runtime overflow

code auto:7117 add[compile-time] 127[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 127 + 255;
endcode
varvalue r 382

$overflow off
code auto:7118 add[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7119 add[Byte] 128[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 128

code auto:7120 add[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 128

code auto:7121 add[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow on
code auto:7122 add[Byte] 128[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 128

code auto:7123 add[Byte] 128[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 128

code auto:7124 add[Byte] 128[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 128

code auto:7125 add[compile-time] 128[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 0;
endcode
varvalue r 128

$overflow off
code auto:7126 add[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:7127 add[Byte] 128[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 129

code auto:7128 add[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 129

code auto:7129 add[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 1;
endcode
varvalue r 129

$overflow on
code auto:7130 add[Byte] 128[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 129

code auto:7131 add[Byte] 128[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 129

code auto:7132 add[Byte] 128[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 129

code auto:7133 add[compile-time] 128[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 1;
endcode
varvalue r 129

$overflow off
code auto:7134 add[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7135 add[Byte] 128[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 255

code auto:7136 add[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 255

code auto:7137 add[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 127;
endcode
varvalue r 255

$overflow on
code auto:7138 add[Byte] 128[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7139 add[Byte] 128[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 255

code auto:7140 add[Byte] 128[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 255

code auto:7141 add[compile-time] 128[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 127;
endcode
varvalue r 255

$overflow off
code auto:7142 add[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7143 add[Byte] 128[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 0

code auto:7144 add[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 0

code auto:7145 add[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 128;
endcode
varvalue r 256

$overflow on
code auto:7146 add[Byte] 128[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7147 add[Byte] 128[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 128 + b;
endcode
runtime overflow

code auto:7148 add[Byte] 128[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a + 128;
endcode
runtime overflow

code auto:7149 add[compile-time] 128[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 128;
endcode
varvalue r 256

$overflow off
code auto:7150 add[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7151 add[Byte] 128[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 128 + b;
endcode
varvalue r 127

code auto:7152 add[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 128;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 127

code auto:7153 add[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 128 + 255;
endcode
varvalue r 383

$overflow on
code auto:7154 add[Byte] 128[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 128;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7155 add[Byte] 128[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 128 + b;
endcode
runtime overflow

code auto:7156 add[Byte] 128[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 128;
  var  r: Word;
  r := a + 255;
endcode
runtime overflow

code auto:7157 add[compile-time] 128[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 128 + 255;
endcode
varvalue r 383

$overflow off
code auto:7158 add[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7159 add[Byte] 255[Byte], 0[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 0;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 255

code auto:7160 add[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 255

code auto:7161 add[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7162 add[Byte] 255[Byte], 0[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7163 add[Byte] 255[Byte], 0[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 0;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 255

code auto:7164 add[Byte] 255[Byte], 0[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a + 0;
endcode
varvalue r 255

code auto:7165 add[compile-time] 255[Byte], 0[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7166 add[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7167 add[Byte] 255[Byte], 1[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 1;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 0

code auto:7168 add[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a + 1;
endcode
varvalue r 0

code auto:7169 add[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 1;
endcode
varvalue r 256

$overflow on
code auto:7170 add[Byte] 255[Byte], 1[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 1;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7171 add[Byte] 255[Byte], 1[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 1;
  var  r: Word;
  r := 255 + b;
endcode
runtime overflow

code auto:7172 add[Byte] 255[Byte], 1[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a + 1;
endcode
runtime overflow

code auto:7173 add[compile-time] 255[Byte], 1[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 1;
endcode
varvalue r 256

$overflow off
code auto:7174 add[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
varvalue r 126

code auto:7175 add[Byte] 255[Byte], 127[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 127;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 126

code auto:7176 add[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a + 127;
endcode
varvalue r 126

code auto:7177 add[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 127;
endcode
varvalue r 382

$overflow on
code auto:7178 add[Byte] 255[Byte], 127[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 127;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7179 add[Byte] 255[Byte], 127[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 127;
  var  r: Word;
  r := 255 + b;
endcode
runtime overflow

code auto:7180 add[Byte] 255[Byte], 127[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a + 127;
endcode
runtime overflow

code auto:7181 add[compile-time] 255[Byte], 127[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 127;
endcode
varvalue r 382

$overflow off
code auto:7182 add[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
varvalue r 127

code auto:7183 add[Byte] 255[Byte], 128[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 128;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 127

code auto:7184 add[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a + 128;
endcode
varvalue r 127

code auto:7185 add[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 128;
endcode
varvalue r 383

$overflow on
code auto:7186 add[Byte] 255[Byte], 128[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 128;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7187 add[Byte] 255[Byte], 128[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 128;
  var  r: Word;
  r := 255 + b;
endcode
runtime overflow

code auto:7188 add[Byte] 255[Byte], 128[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a + 128;
endcode
runtime overflow

code auto:7189 add[compile-time] 255[Byte], 128[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 128;
endcode
varvalue r 383

$overflow off
code auto:7190 add[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow off
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:7191 add[Byte] 255[Byte], 255[Byte] -> [Word] Left immediate $overflow off
  var  b: Byte = 255;
  var  r: Word;
  r := 255 + b;
endcode
varvalue r 254

code auto:7192 add[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow off
  var  a: Byte = 255;
  var  r: Word;
  r := a + 255;
endcode
varvalue r 254

code auto:7193 add[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:7194 add[Byte] 255[Byte], 255[Byte] -> [Word] Var $overflow on
  var  a: Byte = 255;
  var  b: Byte = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7195 add[Byte] 255[Byte], 255[Byte] -> [Word] Left immediate $overflow on
  var  b: Byte = 255;
  var  r: Word;
  r := 255 + b;
endcode
runtime overflow

code auto:7196 add[Byte] 255[Byte], 255[Byte] -> [Word] Right immediate $overflow on
  var  a: Byte = 255;
  var  r: Word;
  r := a + 255;
endcode
runtime overflow

code auto:7197 add[compile-time] 255[Byte], 255[Byte] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:7198 add[Word] 0[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7199 add[compile-time] 0[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7200 add[Word] 0[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7201 add[compile-time] 0[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7202 add[Word] 0[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7203 add[compile-time] 0[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow on
code auto:7204 add[Word] 0[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7205 add[compile-time] 0[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow off
code auto:7206 add[Word] 0[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7207 add[compile-time] 0[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:7208 add[Word] 0[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7209 add[compile-time] 0[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:7210 add[Word] 0[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7211 add[compile-time] 0[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7212 add[Word] 0[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7213 add[compile-time] 0[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7214 add[Word] 0[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7215 add[compile-time] 0[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7216 add[Word] 0[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7217 add[compile-time] 0[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7218 add[Word] 255[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7219 add[compile-time] 255[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow on
code auto:7220 add[Word] 255[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7221 add[compile-time] 255[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow off
code auto:7222 add[Word] 255[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7223 add[compile-time] 255[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:7224 add[Word] 255[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7225 add[compile-time] 255[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:7226 add[Word] 255[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7227 add[compile-time] 255[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7228 add[Word] 255[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7229 add[compile-time] 255[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7230 add[Word] 255[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7231 add[compile-time] 255[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7232 add[Word] 255[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7233 add[compile-time] 255[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7234 add[Word] 255[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7235 add[compile-time] 255[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7236 add[Word] 255[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7237 add[compile-time] 255[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7238 add[Word] 32767[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7239 add[compile-time] 32767[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:7240 add[Word] 32767[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7241 add[compile-time] 32767[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:7242 add[Word] 32767[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7243 add[compile-time] 32767[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7244 add[Word] 32767[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7245 add[compile-time] 32767[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7246 add[Word] 32767[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7247 add[compile-time] 32767[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7248 add[Word] 32767[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7249 add[compile-time] 32767[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7250 add[Word] 32767[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7251 add[compile-time] 32767[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7252 add[Word] 32767[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7253 add[compile-time] 32767[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7254 add[Word] 32767[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7255 add[compile-time] 32767[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7256 add[Word] 32767[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7257 add[compile-time] 32767[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7258 add[Word] 32768[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7259 add[compile-time] 32768[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7260 add[Word] 32768[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7261 add[compile-time] 32768[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7262 add[Word] 32768[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7263 add[compile-time] 32768[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7264 add[Word] 32768[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7265 add[compile-time] 32768[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7266 add[Word] 32768[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7267 add[compile-time] 32768[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7268 add[Word] 32768[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7269 add[compile-time] 32768[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7270 add[Word] 32768[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7271 add[compile-time] 32768[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7272 add[Word] 32768[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7273 add[compile-time] 32768[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7274 add[Word] 32768[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7275 add[compile-time] 32768[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7276 add[Word] 32768[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7277 add[compile-time] 32768[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7278 add[Word] 65535[Word], 0[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7279 add[compile-time] 65535[Word], 0[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7280 add[Word] 65535[Word], 0[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7281 add[compile-time] 65535[Word], 0[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7282 add[Word] 65535[Word], 255[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7283 add[compile-time] 65535[Word], 255[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7284 add[Word] 65535[Word], 255[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7285 add[compile-time] 65535[Word], 255[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7286 add[Word] 65535[Word], 32767[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7287 add[compile-time] 65535[Word], 32767[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7288 add[Word] 65535[Word], 32767[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7289 add[compile-time] 65535[Word], 32767[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7290 add[Word] 65535[Word], 32768[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7291 add[compile-time] 65535[Word], 32768[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7292 add[Word] 65535[Word], 32768[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7293 add[compile-time] 65535[Word], 32768[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7294 add[Word] 65535[Word], 65535[Word] -> [Int8] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7295 add[compile-time] 65535[Word], 65535[Word] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7296 add[Word] 65535[Word], 65535[Word] -> [Int8] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7297 add[compile-time] 65535[Word], 65535[Word] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7298 add[Word] 0[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7299 add[compile-time] 0[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7300 add[Word] 0[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7301 add[compile-time] 0[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7302 add[Word] 0[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7303 add[compile-time] 0[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7304 add[Word] 0[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7305 add[compile-time] 0[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7306 add[Word] 0[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7307 add[compile-time] 0[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:7308 add[Word] 0[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7309 add[compile-time] 0[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:7310 add[Word] 0[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:7311 add[compile-time] 0[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7312 add[Word] 0[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7313 add[compile-time] 0[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7314 add[Word] 0[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7315 add[compile-time] 0[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7316 add[Word] 0[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7317 add[compile-time] 0[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7318 add[Word] 255[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7319 add[compile-time] 255[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7320 add[Word] 255[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7321 add[compile-time] 255[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7322 add[Word] 255[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 510

code auto:7323 add[compile-time] 255[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:7324 add[Word] 255[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 510

code auto:7325 add[compile-time] 255[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:7326 add[Word] 255[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:7327 add[compile-time] 255[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7328 add[Word] 255[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7329 add[compile-time] 255[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7330 add[Word] 255[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:7331 add[compile-time] 255[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7332 add[Word] 255[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7333 add[compile-time] 255[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7334 add[Word] 255[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:7335 add[compile-time] 255[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7336 add[Word] 255[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7337 add[compile-time] 255[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7338 add[Word] 32767[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7339 add[compile-time] 32767[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:7340 add[Word] 32767[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7341 add[compile-time] 32767[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:7342 add[Word] 32767[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:7343 add[compile-time] 32767[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7344 add[Word] 32767[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7345 add[compile-time] 32767[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7346 add[Word] 32767[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:7347 add[compile-time] 32767[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7348 add[Word] 32767[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7349 add[compile-time] 32767[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7350 add[Word] 32767[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7351 add[compile-time] 32767[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7352 add[Word] 32767[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7353 add[compile-time] 32767[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7354 add[Word] 32767[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:7355 add[compile-time] 32767[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7356 add[Word] 32767[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7357 add[compile-time] 32767[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7358 add[Word] 32768[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:7359 add[compile-time] 32768[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7360 add[Word] 32768[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7361 add[compile-time] 32768[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7362 add[Word] 32768[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:7363 add[compile-time] 32768[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7364 add[Word] 32768[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7365 add[compile-time] 32768[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7366 add[Word] 32768[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7367 add[compile-time] 32768[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7368 add[Word] 32768[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7369 add[compile-time] 32768[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7370 add[Word] 32768[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7371 add[compile-time] 32768[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7372 add[Word] 32768[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7373 add[compile-time] 32768[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7374 add[Word] 32768[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7375 add[compile-time] 32768[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7376 add[Word] 32768[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7377 add[compile-time] 32768[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7378 add[Word] 65535[Word], 0[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7379 add[compile-time] 65535[Word], 0[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7380 add[Word] 65535[Word], 0[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7381 add[compile-time] 65535[Word], 0[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7382 add[Word] 65535[Word], 255[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:7383 add[compile-time] 65535[Word], 255[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7384 add[Word] 65535[Word], 255[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7385 add[compile-time] 65535[Word], 255[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7386 add[Word] 65535[Word], 32767[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:7387 add[compile-time] 65535[Word], 32767[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7388 add[Word] 65535[Word], 32767[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7389 add[compile-time] 65535[Word], 32767[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7390 add[Word] 65535[Word], 32768[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7391 add[compile-time] 65535[Word], 32768[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7392 add[Word] 65535[Word], 32768[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7393 add[compile-time] 65535[Word], 32768[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7394 add[Word] 65535[Word], 65535[Word] -> [Integer] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:7395 add[compile-time] 65535[Word], 65535[Word] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7396 add[Word] 65535[Word], 65535[Word] -> [Integer] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7397 add[compile-time] 65535[Word], 65535[Word] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7398 add[Word] 0[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7399 add[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7400 add[Word] 0[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7401 add[compile-time] 0[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7402 add[Word] 0[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7403 add[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7404 add[Word] 0[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7405 add[compile-time] 0[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7406 add[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7407 add[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:7408 add[Word] 0[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7409 add[compile-time] 0[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:7410 add[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7411 add[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7412 add[Word] 0[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7413 add[compile-time] 0[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7414 add[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7415 add[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7416 add[Word] 0[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7417 add[compile-time] 0[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7418 add[Word] 255[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7419 add[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7420 add[Word] 255[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7421 add[compile-time] 255[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7422 add[Word] 255[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7423 add[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:7424 add[Word] 255[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7425 add[compile-time] 255[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:7426 add[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7427 add[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7428 add[Word] 255[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7429 add[compile-time] 255[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7430 add[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7431 add[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7432 add[Word] 255[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7433 add[compile-time] 255[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7434 add[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7435 add[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7436 add[Word] 255[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7437 add[compile-time] 255[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7438 add[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7439 add[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:7440 add[Word] 32767[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7441 add[compile-time] 32767[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:7442 add[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7443 add[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7444 add[Word] 32767[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7445 add[compile-time] 32767[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7446 add[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7447 add[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7448 add[Word] 32767[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7449 add[compile-time] 32767[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7450 add[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7451 add[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7452 add[Word] 32767[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7453 add[compile-time] 32767[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7454 add[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7455 add[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7456 add[Word] 32767[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7457 add[compile-time] 32767[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7458 add[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7459 add[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7460 add[Word] 32768[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7461 add[compile-time] 32768[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7462 add[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7463 add[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7464 add[Word] 32768[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7465 add[compile-time] 32768[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7466 add[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7467 add[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7468 add[Word] 32768[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7469 add[compile-time] 32768[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7470 add[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7471 add[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7472 add[Word] 32768[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7473 add[compile-time] 32768[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7474 add[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7475 add[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7476 add[Word] 32768[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7477 add[compile-time] 32768[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7478 add[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7479 add[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7480 add[Word] 65535[Word], 0[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7481 add[compile-time] 65535[Word], 0[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7482 add[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7483 add[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7484 add[Word] 65535[Word], 255[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7485 add[compile-time] 65535[Word], 255[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7486 add[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7487 add[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7488 add[Word] 65535[Word], 32767[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7489 add[compile-time] 65535[Word], 32767[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7490 add[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7491 add[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7492 add[Word] 65535[Word], 32768[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7493 add[compile-time] 65535[Word], 32768[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7494 add[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow off
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7495 add[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7496 add[Word] 65535[Word], 65535[Word] -> [Byte] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7497 add[compile-time] 65535[Word], 65535[Word] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7498 add[Word] 0[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7499 add[compile-time] 0[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7500 add[Word] 0[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7501 add[compile-time] 0[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7502 add[Word] 0[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7503 add[compile-time] 0[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:7504 add[Word] 0[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7505 add[compile-time] 0[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:7506 add[Word] 0[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 0;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7507 add[compile-time] 0[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:7508 add[Word] 255[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7509 add[compile-time] 255[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7510 add[Word] 255[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:7511 add[compile-time] 255[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:7512 add[Word] 255[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7513 add[compile-time] 255[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:7514 add[Word] 255[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7515 add[compile-time] 255[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:7516 add[Word] 255[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 255;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7517 add[compile-time] 255[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7518 add[Word] 32767[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7519 add[compile-time] 32767[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:7520 add[Word] 32767[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7521 add[compile-time] 32767[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:7522 add[Word] 32767[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:7523 add[compile-time] 32767[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:7524 add[Word] 32767[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7525 add[compile-time] 32767[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:7526 add[Word] 32767[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32767;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7527 add[compile-time] 32767[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7528 add[Word] 32768[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7529 add[compile-time] 32768[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:7530 add[Word] 32768[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7531 add[compile-time] 32768[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:7532 add[Word] 32768[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7533 add[compile-time] 32768[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:7534 add[Word] 32768[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7535 add[compile-time] 32768[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7536 add[Word] 32768[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 32768;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7537 add[compile-time] 32768[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7538 add[Word] 65535[Word], 0[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7539 add[compile-time] 65535[Word], 0[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:7540 add[Word] 65535[Word], 255[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7541 add[compile-time] 65535[Word], 255[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7542 add[Word] 65535[Word], 32767[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7543 add[compile-time] 65535[Word], 32767[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7544 add[Word] 65535[Word], 32768[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7545 add[compile-time] 65535[Word], 32768[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7546 add[Word] 65535[Word], 65535[Word] -> [Word] Var $overflow on
  var  a: Word = 65535;
  var  b: Word = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7547 add[compile-time] 65535[Word], 65535[Word] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7548 add[Pointer] 0[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7549 add[compile-time] 0[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7550 add[Pointer] 0[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7551 add[compile-time] 0[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7552 add[Pointer] 0[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7553 add[compile-time] 0[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow on
code auto:7554 add[Pointer] 0[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7555 add[compile-time] 0[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 255;
endcode
compile error

$overflow off
code auto:7556 add[Pointer] 0[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7557 add[compile-time] 0[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:7558 add[Pointer] 0[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7559 add[compile-time] 0[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:7560 add[Pointer] 0[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7561 add[compile-time] 0[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7562 add[Pointer] 0[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7563 add[compile-time] 0[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7564 add[Pointer] 0[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7565 add[compile-time] 0[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7566 add[Pointer] 0[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7567 add[compile-time] 0[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7568 add[Pointer] 255[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7569 add[compile-time] 255[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow on
code auto:7570 add[Pointer] 255[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7571 add[compile-time] 255[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 0;
endcode
compile error

$overflow off
code auto:7572 add[Pointer] 255[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7573 add[compile-time] 255[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:7574 add[Pointer] 255[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7575 add[compile-time] 255[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:7576 add[Pointer] 255[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7577 add[compile-time] 255[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7578 add[Pointer] 255[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7579 add[compile-time] 255[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7580 add[Pointer] 255[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7581 add[compile-time] 255[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7582 add[Pointer] 255[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7583 add[compile-time] 255[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7584 add[Pointer] 255[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7585 add[compile-time] 255[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7586 add[Pointer] 255[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7587 add[compile-time] 255[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7588 add[Pointer] 32767[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7589 add[compile-time] 32767[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:7590 add[Pointer] 32767[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7591 add[compile-time] 32767[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:7592 add[Pointer] 32767[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7593 add[compile-time] 32767[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7594 add[Pointer] 32767[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7595 add[compile-time] 32767[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7596 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7597 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7598 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7599 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7600 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7601 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7602 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7603 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7604 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7605 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7606 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7607 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7608 add[Pointer] 32768[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7609 add[compile-time] 32768[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7610 add[Pointer] 32768[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7611 add[compile-time] 32768[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7612 add[Pointer] 32768[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7613 add[compile-time] 32768[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7614 add[Pointer] 32768[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7615 add[compile-time] 32768[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7616 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7617 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7618 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7619 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7620 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r 0

code auto:7621 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7622 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7623 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7624 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7625 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7626 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7627 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7628 add[Pointer] 65535[Pointer], 0[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7629 add[compile-time] 65535[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7630 add[Pointer] 65535[Pointer], 0[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7631 add[compile-time] 65535[Pointer], 0[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7632 add[Pointer] 65535[Pointer], 255[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7633 add[compile-time] 65535[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7634 add[Pointer] 65535[Pointer], 255[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7635 add[compile-time] 65535[Pointer], 255[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7636 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7637 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7638 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7639 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7640 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -1

code auto:7641 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7642 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7643 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7644 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Int8] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
varvalue r -2

code auto:7645 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow off
  var  r: Int8;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7646 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Int8] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Int8;
  r := a + b;
endcode
runtime overflow

code auto:7647 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Int8] Both immediate $overflow on
  var  r: Int8;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7648 add[Pointer] 0[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7649 add[compile-time] 0[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7650 add[Pointer] 0[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7651 add[compile-time] 0[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7652 add[Pointer] 0[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7653 add[compile-time] 0[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7654 add[Pointer] 0[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7655 add[compile-time] 0[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7656 add[Pointer] 0[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7657 add[compile-time] 0[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:7658 add[Pointer] 0[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7659 add[compile-time] 0[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:7660 add[Pointer] 0[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:7661 add[compile-time] 0[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7662 add[Pointer] 0[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7663 add[compile-time] 0[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7664 add[Pointer] 0[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7665 add[compile-time] 0[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7666 add[Pointer] 0[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7667 add[compile-time] 0[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7668 add[Pointer] 255[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7669 add[compile-time] 255[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7670 add[Pointer] 255[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 255

code auto:7671 add[compile-time] 255[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7672 add[Pointer] 255[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 510

code auto:7673 add[compile-time] 255[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:7674 add[Pointer] 255[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 510

code auto:7675 add[compile-time] 255[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:7676 add[Pointer] 255[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:7677 add[compile-time] 255[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7678 add[Pointer] 255[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7679 add[compile-time] 255[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7680 add[Pointer] 255[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:7681 add[compile-time] 255[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7682 add[Pointer] 255[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7683 add[compile-time] 255[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7684 add[Pointer] 255[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:7685 add[compile-time] 255[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7686 add[Pointer] 255[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7687 add[compile-time] 255[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7688 add[Pointer] 32767[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7689 add[compile-time] 32767[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:7690 add[Pointer] 32767[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7691 add[compile-time] 32767[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:7692 add[Pointer] 32767[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32514

code auto:7693 add[compile-time] 32767[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7694 add[Pointer] 32767[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7695 add[compile-time] 32767[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7696 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:7697 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7698 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7699 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7700 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7701 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7702 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7703 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7704 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:7705 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7706 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7707 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7708 add[Pointer] 32768[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32768

code auto:7709 add[compile-time] 32768[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7710 add[Pointer] 32768[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7711 add[compile-time] 32768[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7712 add[Pointer] 32768[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -32513

code auto:7713 add[compile-time] 32768[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7714 add[Pointer] 32768[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7715 add[compile-time] 32768[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7716 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7717 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7718 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7719 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7720 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 0

code auto:7721 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7722 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7723 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7724 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7725 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7726 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7727 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7728 add[Pointer] 65535[Pointer], 0[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -1

code auto:7729 add[compile-time] 65535[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7730 add[Pointer] 65535[Pointer], 0[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7731 add[compile-time] 65535[Pointer], 0[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7732 add[Pointer] 65535[Pointer], 255[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 254

code auto:7733 add[compile-time] 65535[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7734 add[Pointer] 65535[Pointer], 255[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7735 add[compile-time] 65535[Pointer], 255[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7736 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32766

code auto:7737 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7738 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7739 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7740 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
varvalue r 32767

code auto:7741 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7742 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7743 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7744 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Integer] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
varvalue r -2

code auto:7745 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow off
  var  r: Integer;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7746 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Integer] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Integer;
  r := a + b;
endcode
runtime overflow

code auto:7747 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Integer] Both immediate $overflow on
  var  r: Integer;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7748 add[Pointer] 0[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7749 add[compile-time] 0[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7750 add[Pointer] 0[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7751 add[compile-time] 0[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7752 add[Pointer] 0[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7753 add[compile-time] 0[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7754 add[Pointer] 0[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7755 add[compile-time] 0[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7756 add[Pointer] 0[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7757 add[compile-time] 0[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow on
code auto:7758 add[Pointer] 0[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7759 add[compile-time] 0[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 32767;
endcode
compile error

$overflow off
code auto:7760 add[Pointer] 0[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7761 add[compile-time] 0[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 32768;
endcode
compile error

$overflow on
code auto:7762 add[Pointer] 0[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7763 add[compile-time] 0[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 32768;
endcode
compile error

$overflow off
code auto:7764 add[Pointer] 0[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7765 add[compile-time] 0[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 0 + 65535;
endcode
compile error

$overflow on
code auto:7766 add[Pointer] 0[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7767 add[compile-time] 0[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 0 + 65535;
endcode
compile error

$overflow off
code auto:7768 add[Pointer] 255[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7769 add[compile-time] 255[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7770 add[Pointer] 255[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7771 add[compile-time] 255[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7772 add[Pointer] 255[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7773 add[compile-time] 255[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow on
code auto:7774 add[Pointer] 255[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7775 add[compile-time] 255[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 255;
endcode
compile error

$overflow off
code auto:7776 add[Pointer] 255[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7777 add[compile-time] 255[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 32767;
endcode
compile error

$overflow on
code auto:7778 add[Pointer] 255[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7779 add[compile-time] 255[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 32767;
endcode
compile error

$overflow off
code auto:7780 add[Pointer] 255[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7781 add[compile-time] 255[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 32768;
endcode
compile error

$overflow on
code auto:7782 add[Pointer] 255[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7783 add[compile-time] 255[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 32768;
endcode
compile error

$overflow off
code auto:7784 add[Pointer] 255[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7785 add[compile-time] 255[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7786 add[Pointer] 255[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7787 add[compile-time] 255[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7788 add[Pointer] 32767[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7789 add[compile-time] 32767[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow on
code auto:7790 add[Pointer] 32767[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7791 add[compile-time] 32767[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 0;
endcode
compile error

$overflow off
code auto:7792 add[Pointer] 32767[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7793 add[compile-time] 32767[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 255;
endcode
compile error

$overflow on
code auto:7794 add[Pointer] 32767[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7795 add[compile-time] 32767[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 255;
endcode
compile error

$overflow off
code auto:7796 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7797 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow on
code auto:7798 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7799 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 32767;
endcode
compile error

$overflow off
code auto:7800 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7801 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 32768;
endcode
compile error

$overflow on
code auto:7802 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7803 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 32768;
endcode
compile error

$overflow off
code auto:7804 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7805 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7806 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7807 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7808 add[Pointer] 32768[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7809 add[compile-time] 32768[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 0;
endcode
compile error

$overflow on
code auto:7810 add[Pointer] 32768[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7811 add[compile-time] 32768[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 0;
endcode
compile error

$overflow off
code auto:7812 add[Pointer] 32768[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7813 add[compile-time] 32768[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 255;
endcode
compile error

$overflow on
code auto:7814 add[Pointer] 32768[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7815 add[compile-time] 32768[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 255;
endcode
compile error

$overflow off
code auto:7816 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7817 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 32767;
endcode
compile error

$overflow on
code auto:7818 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7819 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 32767;
endcode
compile error

$overflow off
code auto:7820 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 0

code auto:7821 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7822 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7823 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7824 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7825 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7826 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7827 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7828 add[Pointer] 65535[Pointer], 0[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7829 add[compile-time] 65535[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 0;
endcode
compile error

$overflow on
code auto:7830 add[Pointer] 65535[Pointer], 0[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7831 add[compile-time] 65535[Pointer], 0[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 0;
endcode
compile error

$overflow off
code auto:7832 add[Pointer] 65535[Pointer], 255[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7833 add[compile-time] 65535[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7834 add[Pointer] 65535[Pointer], 255[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7835 add[compile-time] 65535[Pointer], 255[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7836 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7837 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7838 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7839 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7840 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 255

code auto:7841 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7842 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7843 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7844 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Byte] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
varvalue r 254

code auto:7845 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow off
  var  r: Byte;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7846 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Byte] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Byte;
  r := a + b;
endcode
runtime overflow

code auto:7847 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Byte] Both immediate $overflow on
  var  r: Byte;
  r := 65535 + 65535;
endcode
compile error

$overflow off
code auto:7848 add[Pointer] 0[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7849 add[compile-time] 0[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow on
code auto:7850 add[Pointer] 0[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7851 add[compile-time] 0[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 0;
endcode
varvalue r 0

$overflow off
code auto:7852 add[Pointer] 0[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7853 add[compile-time] 0[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow on
code auto:7854 add[Pointer] 0[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7855 add[compile-time] 0[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 255;
endcode
varvalue r 255

$overflow off
code auto:7856 add[Pointer] 0[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7857 add[compile-time] 0[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow on
code auto:7858 add[Pointer] 0[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7859 add[compile-time] 0[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32767;
endcode
varvalue r 32767

$overflow off
code auto:7860 add[Pointer] 0[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7861 add[compile-time] 0[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow on
code auto:7862 add[Pointer] 0[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7863 add[compile-time] 0[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 32768;
endcode
varvalue r 32768

$overflow off
code auto:7864 add[Pointer] 0[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7865 add[compile-time] 0[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow on
code auto:7866 add[Pointer] 0[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 0;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7867 add[compile-time] 0[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 0 + 65535;
endcode
varvalue r 65535

$overflow off
code auto:7868 add[Pointer] 255[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7869 add[compile-time] 255[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow on
code auto:7870 add[Pointer] 255[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 255

code auto:7871 add[compile-time] 255[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 0;
endcode
varvalue r 255

$overflow off
code auto:7872 add[Pointer] 255[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:7873 add[compile-time] 255[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow on
code auto:7874 add[Pointer] 255[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 510

code auto:7875 add[compile-time] 255[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 255;
endcode
varvalue r 510

$overflow off
code auto:7876 add[Pointer] 255[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7877 add[compile-time] 255[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow on
code auto:7878 add[Pointer] 255[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7879 add[compile-time] 255[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32767;
endcode
varvalue r 33022

$overflow off
code auto:7880 add[Pointer] 255[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7881 add[compile-time] 255[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow on
code auto:7882 add[Pointer] 255[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7883 add[compile-time] 255[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 32768;
endcode
varvalue r 33023

$overflow off
code auto:7884 add[Pointer] 255[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:7885 add[compile-time] 255[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow on
code auto:7886 add[Pointer] 255[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 255;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7887 add[compile-time] 255[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 255 + 65535;
endcode
compile error

$overflow off
code auto:7888 add[Pointer] 32767[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7889 add[compile-time] 32767[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow on
code auto:7890 add[Pointer] 32767[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7891 add[compile-time] 32767[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 0;
endcode
varvalue r 32767

$overflow off
code auto:7892 add[Pointer] 32767[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7893 add[compile-time] 32767[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow on
code auto:7894 add[Pointer] 32767[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33022

code auto:7895 add[compile-time] 32767[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 255;
endcode
varvalue r 33022

$overflow off
code auto:7896 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:7897 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow on
code auto:7898 add[Pointer] 32767[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:7899 add[compile-time] 32767[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32767;
endcode
varvalue r 65534

$overflow off
code auto:7900 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7901 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow on
code auto:7902 add[Pointer] 32767[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7903 add[compile-time] 32767[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 32768;
endcode
varvalue r 65535

$overflow off
code auto:7904 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:7905 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32767 + 65535;
endcode
compile error

$overflow on
code auto:7906 add[Pointer] 32767[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32767;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7907 add[compile-time] 32767[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32767 + 65535;
endcode
compile error

$overflow off
code auto:7908 add[Pointer] 32768[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7909 add[compile-time] 32768[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow on
code auto:7910 add[Pointer] 32768[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32768

code auto:7911 add[compile-time] 32768[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 0;
endcode
varvalue r 32768

$overflow off
code auto:7912 add[Pointer] 32768[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7913 add[compile-time] 32768[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow on
code auto:7914 add[Pointer] 32768[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 33023

code auto:7915 add[compile-time] 32768[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 255;
endcode
varvalue r 33023

$overflow off
code auto:7916 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7917 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow on
code auto:7918 add[Pointer] 32768[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7919 add[compile-time] 32768[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32767;
endcode
varvalue r 65535

$overflow off
code auto:7920 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 0

code auto:7921 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 32768;
endcode
compile error

$overflow on
code auto:7922 add[Pointer] 32768[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7923 add[compile-time] 32768[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 32768;
endcode
compile error

$overflow off
code auto:7924 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7925 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 32768 + 65535;
endcode
compile error

$overflow on
code auto:7926 add[Pointer] 32768[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 32768;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7927 add[compile-time] 32768[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 32768 + 65535;
endcode
compile error

$overflow off
code auto:7928 add[Pointer] 65535[Pointer], 0[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7929 add[compile-time] 65535[Pointer], 0[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow on
code auto:7930 add[Pointer] 65535[Pointer], 0[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 0;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65535

code auto:7931 add[compile-time] 65535[Pointer], 0[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 0;
endcode
varvalue r 65535

$overflow off
code auto:7932 add[Pointer] 65535[Pointer], 255[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
varvalue r 254

code auto:7933 add[compile-time] 65535[Pointer], 255[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow on
code auto:7934 add[Pointer] 65535[Pointer], 255[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 255;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7935 add[compile-time] 65535[Pointer], 255[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 255;
endcode
compile error

$overflow off
code auto:7936 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32766

code auto:7937 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 32767;
endcode
compile error

$overflow on
code auto:7938 add[Pointer] 65535[Pointer], 32767[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32767;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7939 add[compile-time] 65535[Pointer], 32767[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32767;
endcode
compile error

$overflow off
code auto:7940 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
varvalue r 32767

code auto:7941 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 32768;
endcode
compile error

$overflow on
code auto:7942 add[Pointer] 65535[Pointer], 32768[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 32768;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7943 add[compile-time] 65535[Pointer], 32768[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 32768;
endcode
compile error

$overflow off
code auto:7944 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Word] Var $overflow off
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
varvalue r 65534

code auto:7945 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow off
  var  r: Word;
  r := 65535 + 65535;
endcode
compile error

$overflow on
code auto:7946 add[Pointer] 65535[Pointer], 65535[Pointer] -> [Word] Var $overflow on
  var  a: Pointer = 65535;
  var  b: Pointer = 65535;
  var  r: Word;
  r := a + b;
endcode
runtime overflow

code auto:7947 add[compile-time] 65535[Pointer], 65535[Pointer] -> [Word] Both immediate $overflow on
  var  r: Word;
  r := 65535 + 65535;
endcode
compile error

